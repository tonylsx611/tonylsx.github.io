<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>图的基础知识</title>
      <link href="/2022/03/09/Graph-search/"/>
      <url>/2022/03/09/Graph-search/</url>
      
        <content type="html"><![CDATA[<h2 id="基础知识"><a class="markdownIt-Anchor" href="#基础知识"></a> 基础知识</h2><h3 id="图的定义和分类"><a class="markdownIt-Anchor" href="#图的定义和分类"></a> 图的定义和分类</h3><ul><li><p><strong>图的定义</strong> 是一个顶点集合V和一个顶点间关系的集合E组成，记G=(V,E) V：顶点的有限非空集合。 E：顶点间关系的有限集合（边集）。</p></li><li><p><strong>无向图</strong> (graph)在G=(V,E)中，如果对于任意的结点a,b∈V，当(a,b)∈E时，必有(b,a)∈E（即关系R对称），如图二。</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>V</mi><mo>=</mo><mrow><mn>1</mn><mo separator="true">,</mo><mn>2</mn><mo separator="true">,</mo><mn>3</mn><mo separator="true">,</mo><mn>4</mn><mo separator="true">,</mo><mn>5</mn></mrow><mspace linebreak="newline"></mspace><mi>E</mi><mo>=</mo><mrow><mo stretchy="false">(</mo><mn>1</mn><mo separator="true">,</mo><mn>2</mn><mo stretchy="false">)</mo><mo separator="true">,</mo><mo stretchy="false">(</mo><mn>1</mn><mo separator="true">,</mo><mn>3</mn><mo stretchy="false">)</mo><mo separator="true">,</mo><mo stretchy="false">(</mo><mn>1</mn><mo separator="true">,</mo><mn>4</mn><mo stretchy="false">)</mo><mo separator="true">,</mo><mo stretchy="false">(</mo><mn>2</mn><mo separator="true">,</mo><mn>3</mn><mo stretchy="false">)</mo><mo separator="true">,</mo><mo stretchy="false">(</mo><mn>2</mn><mo separator="true">,</mo><mn>5</mn><mo stretchy="false">)</mo><mo separator="true">,</mo><mo stretchy="false">(</mo><mn>3</mn><mo separator="true">,</mo><mn>5</mn><mo stretchy="false">)</mo><mo separator="true">,</mo><mo stretchy="false">(</mo><mn>4</mn><mo separator="true">,</mo><mn>5</mn><mo stretchy="false">)</mo></mrow></mrow><annotation encoding="application/x-tex">V={1,2,3,4,5}\\ E={(1,2),(1,3),(1,4),(2,3),(2,5),(3,5),(4,5)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">3</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">4</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">5</span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mopen">(</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">2</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">3</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">4</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mopen">(</span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">3</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mopen">(</span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">5</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mopen">(</span><span class="mord">3</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">5</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mopen">(</span><span class="mord">4</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">5</span><span class="mclose">)</span></span></span></span></span></span></p></li><li><p><strong>有向图</strong> (digraph)在G=(V,E)中，如果对于任意的结点a,b∈V，当(a,b)∈E时，(b,a)∈E未必成立，如图三。</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>V</mi><mo>=</mo><mrow><mn>1</mn><mo separator="true">,</mo><mn>2</mn><mo separator="true">,</mo><mn>3</mn><mo separator="true">,</mo><mn>4</mn><mo separator="true">,</mo><mn>5</mn></mrow><mspace linebreak="newline"></mspace><mi>E</mi><mo>=</mo><mrow><mo>&lt;</mo><mn>1</mn><mo separator="true">,</mo><mn>2</mn><mo>&gt;</mo><mo separator="true">,</mo><mo>&lt;</mo><mn>1</mn><mo separator="true">,</mo><mn>4</mn><mo>&gt;</mo><mo separator="true">,</mo><mo>&lt;</mo><mn>2</mn><mo separator="true">,</mo><mn>3</mn><mo>&gt;</mo><mo separator="true">,</mo><mo>&lt;</mo><mn>2</mn><mo separator="true">,</mo><mn>5</mn><mo>&gt;</mo><mo separator="true">,</mo><mo>&lt;</mo><mn>3</mn><mo separator="true">,</mo><mn>1</mn><mo>&gt;</mo><mo separator="true">,</mo><mo>&lt;</mo><mn>5</mn><mo separator="true">,</mo><mn>3</mn><mo>&gt;</mo><mo separator="true">,</mo><mo>&lt;</mo><mn>5</mn><mo separator="true">,</mo><mn>4</mn><mo>&gt;</mo></mrow></mrow><annotation encoding="application/x-tex">V={1,2,3,4,5}\\E={&lt;1,2&gt;,&lt;1,4&gt;,&lt;2,3&gt;,&lt;2,5&gt;,&lt;3,1&gt;,&lt;5,3&gt;,&lt;5,4&gt;}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">3</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">4</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">5</span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">4</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">3</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">5</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">3</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">5</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">3</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">5</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">4</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span></span></span></span></span></span></p></li></ul><p><img src="/2022/03/09/Graph-search/image-1.png" alt="img" loading="lazy"></p><ul><li><strong>带权图</strong> 一般的图边上没有数字，边仅表示两个顶点间相连接关系 ，如图四。</li><li><strong>连通图</strong>图中任意两个顶点都是连通的，称为连通图；否则为非连通图，如图五。</li></ul><p><img src="/2022/03/09/Graph-search/image-2.png" alt="img" loading="lazy"></p><h3 id="邻接矩阵和邻接表"><a class="markdownIt-Anchor" href="#邻接矩阵和邻接表"></a> 邻接矩阵和邻接表</h3><ul><li><strong>邻接矩阵</strong></li></ul><p>邻接矩阵的优势是方便定义，只需要一个二维矩阵就可以解决；缺点也显而易见，浪费空间。</p><p><img src="/2022/03/09/Graph-search/v2-9e2643ca5d96f86a391c36de4d3bd48d_720w.jpg" alt="img" loading="lazy"></p><ul><li><strong>邻接表</strong></li></ul><p>邻接表的优势自然就是尽可能的节省更多的空间，但是与之相对应的就是定义起来很麻烦，需要用链表或者vector来实现。</p><p><img src="/2022/03/09/Graph-search/v2-4a4d37df348f283649e2aecc74d959b5_720w.jpg" alt="img" loading="lazy"></p><p>*(图是网上抄的，看水印，如有侵权，请联系我)</p><h2 id="图的遍历dfsbfs"><a class="markdownIt-Anchor" href="#图的遍历dfsbfs"></a> 图的遍历(DFS&amp;&amp;BFS)</h2><hr><p>好了，上面我们学习了图的概念以及如何存图，接下来就是重头戏了。</p><p>接下来便是如何实现图的搜索，首先我们来看这样一个有向图， 我们不妨设从1号顶点起始。</p><p><img src="/2022/03/09/Graph-search/image-3.png" alt="img" loading="lazy"></p><p>在搜索过程中，我们维护一个布尔数组bool visited[N+1]，这个数组用来表示每个顶点是不是已经遍历过了。</p><p>接下来，从1号开始进行DFS，遍历过的节点就在<code>visited[]</code>中标注。visited[i] == true表示顶点i已经遍历过了，visited[i] == false表示i还没有遍历过。DFS的具体方法可以用递归实现，直到所有节点都被遍历过结束。如果采用邻接矩阵，伪代码如下：</p><pre class="language-python" data-language="python"><code class="language-python">Visited<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span>DFS<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>Visited<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>true<span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>N<span class="token punctuation">;</span>i<span class="token operator">+</span><span class="token operator">+</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">if</span><span class="token punctuation">(</span>!Visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;</span><span class="token operator">&amp;</span> <span class="token builtin">map</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>DFS<span class="token punctuation">(</span>i<span class="token punctuation">)</span></code></pre><h2 id="代码实现"><a class="markdownIt-Anchor" href="#代码实现"></a> 代码实现</h2><hr><h3 id="dfs递归实现"><a class="markdownIt-Anchor" href="#dfs递归实现"></a> DFS递归实现</h3><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;#define N 5using namespace std;int maze[N][N] &#x3D; &#123;    &#123; 0, 1, 1, 0, 0 &#125;,    &#123; 0, 0, 1, 0, 1 &#125;,    &#123; 0, 0, 1, 0, 0 &#125;,    &#123; 1, 1, 0, 0, 1 &#125;,    &#123; 0, 0, 1, 0, 0 &#125;&#125;;bool visited[N + 1];void DFS(int start)&#123;    visited[start] &#x3D; true;    for (int i &#x3D; 1; i &lt;&#x3D; N; i++)        if (!visited[i] &amp;&amp; maze[start - 1][i - 1] &#x3D;&#x3D; 1)            DFS(i);    cout &lt;&lt; start &lt;&lt; &quot; &quot;;&#125;int main()&#123;    for (int i &#x3D; 1; i &lt;&#x3D; N; i++)    &#123;        if (visited[i])            continue;        DFS(i);    &#125;    return 0;&#125;</code></pre><h3 id="dfs非递归实现"><a class="markdownIt-Anchor" href="#dfs非递归实现"></a> DFS非递归实现</h3><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;#include &lt;stack&gt;#define N 5using namespace std;int maze[N][N] &#x3D; &#123;    &#123; 0, 1, 1, 0, 0 &#125;,    &#123; 0, 0, 1, 0, 1 &#125;,    &#123; 0, 0, 1, 0, 0 &#125;,    &#123; 1, 1, 0, 0, 1 &#125;,    &#123; 0, 0, 1, 0, 0 &#125;&#125;;bool visited[N + 1];void DFS(int start)&#123;    stack&lt;int&gt; s;    s.push(start);    visited[start] &#x3D; true;    bool is_push &#x3D; false;    while (!s.empty())    &#123;        is_push &#x3D; false;        int v &#x3D; s.top();        for (int i &#x3D; 1; i &lt;&#x3D; N; i++)        &#123;            if (maze[v - 1][i - 1] &#x3D;&#x3D; 1 &amp;&amp; !visited[i])            &#123;                visited[i] &#x3D; true;                s.push(i);                is_push &#x3D; true;                break;            &#125;        &#125;        if (!is_push)        &#123;            cout &lt;&lt; v &lt;&lt; &quot; &quot;;            s.pop();        &#125;    &#125;&#125;int main()&#123;    for (int i &#x3D; 1; i &lt;&#x3D; N; i++)    &#123;        if (visited[i])            continue;        DFS(i);    &#125;    return 0;&#125;</code></pre><h3 id="bfs实现"><a class="markdownIt-Anchor" href="#bfs实现"></a> BFS实现</h3><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;#include &lt;queue&gt;#define N 5using namespace std;int maze[N][N] &#x3D; &#123;    &#123; 0, 1, 1, 0, 0 &#125;,    &#123; 0, 0, 1, 1, 0 &#125;,    &#123; 0, 1, 1, 1, 0 &#125;,    &#123; 1, 0, 0, 0, 0 &#125;,    &#123; 0, 0, 1, 1, 0 &#125;&#125;;bool visited[N + 1];void BFS(int start)&#123;    queue&lt;int&gt; Q;    Q.push(start);    visited[start] &#x3D; true;    while (!Q.empty())    &#123;        int front &#x3D; Q.front();        cout &lt;&lt; front &lt;&lt; &quot; &quot;;        Q.pop();        for (int i &#x3D; 1; i &lt;&#x3D; N; i++)            if (!visited[i] &amp;&amp; maze[front - 1][i - 1] &#x3D;&#x3D; 1)            &#123;                visited[i] &#x3D; true;                Q.push(i);            &#125;    &#125;&#125;int main()&#123;    for (int i &#x3D; 1; i &lt;&#x3D; N; i++)    &#123;        if (visited[i])            continue;        BFS(i);    &#125;    return 0;&#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> algorithm </tag>
            
            <tag> Graph </tag>
            
            <tag> DFS </tag>
            
            <tag> BFS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo多电脑同步指南</title>
      <link href="/2022/03/08/Hexo-synchronization/"/>
      <url>/2022/03/08/Hexo-synchronization/</url>
      
        <content type="html"><![CDATA[<h2 id="如何实现同步"><a class="markdownIt-Anchor" href="#如何实现同步"></a> 如何实现同步</h2><p>Hexo的同步本质上很简单，使用<code>git</code>命令push一下，然后在另一台电脑pull一下就OK。但是我在实际的同步过程中却遇到了各种的报错，这篇文章同样也记录一下我遇到的问题，也为了后期我再次换电脑，或者再次遇到奇奇怪怪的报错做参考。</p><p>我现在在家里使用<strong>台式电脑</strong>，在外使用轻薄的商务本（以下简称<strong>笔记本</strong>），所以就以此为例，介绍如何实现两个设备间的同步问题。</p><p>首先，我的本地blog储存在台式电脑上面，我们需要将这个blog上传到GitHub上，准确的说是你的GitHub的分支上。我们的目的就是在你的GitHub仓库建一个分支，然后把这个分支当作一个中介，存储我们的源文件，当在A电脑上修改过后直接上传（push）到分支上，然后在B电脑上下载（pull）该分支的所有文件，这样就实现了多设备同步。</p><h3 id="首次从台式电脑上传本地文件到github"><a class="markdownIt-Anchor" href="#首次从台式电脑上传本地文件到github"></a> 首次从台式电脑上传本地文件到GitHub</h3><p>*注意所有命令都要在Hexo项目的目录下执行。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> init <span class="token comment"># 首先要在台式电脑上初始化git</span><span class="token function">git</span> remote <span class="token function">add</span> origin https://github.com/username/username.github.io.git <span class="token comment"># 添加Github上的仓库地址</span><span class="token comment"># username是你的GitHub的用户名</span><span class="token function">git</span> checkout -b branch_name <span class="token comment"># 新建分支并切换到新建的分支</span><span class="token comment"># branch_name随便起名字，不过最好简单一点，比如Hexo</span><span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span> <span class="token comment"># 添加所有本地文件到本地的git</span><span class="token function">git</span> commit -m <span class="token string">"This is the first time to syn!"</span> <span class="token comment"># 提交备注</span><span class="token comment"># “这里的内容随便写，不过这句代码一定不要省略，后面会出问题！”</span><span class="token function">git</span> push origin branch_name <span class="token comment"># 本地文件上传到hexo分支</span></code></pre><h3 id="首次从笔记本下载工程文件"><a class="markdownIt-Anchor" href="#首次从笔记本下载工程文件"></a> 首次从笔记本下载工程文件</h3><p>*注意另一台电脑上要部署好所有的环境，如git，Nodejs，SSH等，详情参考：<a href="https://tonylsx611.github.io/2022/02/24/Hexo_creation/">Hexo 网站搭建指南</a></p><p>*注意所有命令都要在Hexo项目的目录下执行，没有目录的话找个地方新建一个。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone -b branch_name https://github.com/username/username<span class="token comment"># 克隆分支到本地的博客文件夹</span><span class="token function">sudo</span> <span class="token function">npm</span> <span class="token function">install</span> -g hexo-cli <span class="token comment"># install hexo</span><span class="token function">sudo</span> <span class="token function">npm</span> <span class="token function">install</span> <span class="token comment"># 安装依赖库</span><span class="token function">sudo</span> <span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git <span class="token comment"># git部署相关配置</span></code></pre><h3 id="首次用笔记本更新文件"><a class="markdownIt-Anchor" href="#首次用笔记本更新文件"></a> 首次用笔记本更新文件</h3><pre class="language-bash" data-language="bash"><code class="language-bash">hexo clean <span class="token operator">&amp;&amp;</span> hexo d <span class="token operator">&amp;&amp;</span> hexo g <span class="token operator">&amp;&amp;</span> hexo s <span class="token comment">#更新Github中的master文件</span><span class="token comment"># 如果上面这部成功部署，就可以更新分支文件了</span><span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span><span class="token function">git</span> commit -m <span class="token string">"..."</span><span class="token function">git</span> push origin branch_name</code></pre><h3 id="返回台式电脑进行编辑"><a class="markdownIt-Anchor" href="#返回台式电脑进行编辑"></a> 返回台式电脑进行编辑</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> pull origin branch_name <span class="token comment"># 从Github同步数据到台式电脑</span><span class="token comment"># 或者直接git pull也可以</span><span class="token comment"># 修改或者更新文章。。。</span>hexo clean <span class="token operator">&amp;&amp;</span> hexo d <span class="token operator">&amp;&amp;</span> hexo g <span class="token operator">&amp;&amp;</span> hexo s <span class="token comment">#更新Github中的master文件</span><span class="token comment"># 如果上面这部成功部署，就可以更新分支文件了</span><span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span><span class="token function">git</span> commit -m <span class="token string">"..."</span><span class="token function">git</span> push origin branch_name<span class="token comment">#有没有发现，跟上面的代码一样了，没错，这样就形成了循环！</span></code></pre><p>完成首次同步之后的任何设备都可以使用上面的代码进行同步和更新。</p><h2 id="同步过程中遇到的问题"><a class="markdownIt-Anchor" href="#同步过程中遇到的问题"></a> 同步过程中遇到的问题</h2><h3 id="git-pull文件冲突报错"><a class="markdownIt-Anchor" href="#git-pull文件冲突报错"></a> <code>git pull</code>文件冲突报错</h3><p><img src="/2022/03/08/Hexo-synchronization/Screenshot%202022-03-08%20161552.png" alt="Screenshot 2022-03-08 161552" loading="lazy"></p><p>报错信息：</p><p><code>error: Your local changes to the following files would be overwritten by merge</code></p><p>报错原因：</p><p>在同步的时候出现两个相同文件名内容不同的文件，导致冲突；比如笔记本修改了之前的某个文章，在台式机<code>pull</code> 的时候就会产生这样的错误。</p><p>解决方法：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> stash <span class="token comment"># 备份工作区内容</span><span class="token function">git</span> pull origin branch_name <span class="token comment"># 下载分支内容</span><span class="token function">git</span> stash pop <span class="token comment"># 恢复工作区内容</span></code></pre><h3 id="本地未关联远程分支报错"><a class="markdownIt-Anchor" href="#本地未关联远程分支报错"></a> 本地未关联远程分支报错</h3><p>报错信息：</p><pre class="language-bash" data-language="bash"><code class="language-bash">There is no tracking information <span class="token keyword">for</span> the current branch.Please specify <span class="token function">which</span> branch you want to merge with.See git-pull<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">for</span> details.<span class="token function">git</span> pull <span class="token operator">&lt;</span>remote<span class="token operator">></span> <span class="token operator">&lt;</span>branch<span class="token operator">></span>If you wish to <span class="token builtin class-name">set</span> tracking information <span class="token keyword">for</span> this branch you can <span class="token keyword">do</span> so with:<span class="token function">git</span> branch --set-upstream-to<span class="token operator">=</span>origin/<span class="token operator">&lt;</span>branch<span class="token operator">></span> release</code></pre><p>报错原因：</p><p>在建立新的本地分支后，未与GitHub分支关联，通常出现在首次添加新的电脑时报错。</p><p>解决方法：</p><p>他不是说的明明白白的嘛，你就按照他的提示加一行代码，关联上就完了！这里的<code>remote_branch</code>就是GitHub上的远程分支，<code>your branch</code>就是你的本地分支。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> branch --set-upstream-to<span class="token operator">=</span>origin/remote_branch your_branch</code></pre><hr><p>注：本文部分内容参考自<a href="https://cloud.tencent.com/developer/article/1046404">Hexo博客的安装部署及多电脑同步</a>，如有侵权，请联系我。</p>]]></content>
      
      
      <categories>
          
          <category> Hexo搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>R2S家庭组网实操</title>
      <link href="/2022/02/26/R2S_build/"/>
      <url>/2022/02/26/R2S_build/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h2><p>本文授权转载自<a href="https://www.bytedance.fit/?p=1051">R2S家庭组网实操 – Orange Tien</a>，作者：Orange Tien，在此基础上略加修改，<s>并不会定期更新</s>。</p><p>本文主要介绍R2S的基本使用方法，目前本人（Tony）也在原作者（Orange Tien）的怂恿下在两个地方分别搭建了两个R2S，看起来很简单，其实不是一帆风顺；因此也会把实际组网中遇到的问题列到最后供大家参考。</p><h2 id="确定所需物理设备"><a class="markdownIt-Anchor" href="#确定所需物理设备"></a> 确定所需物理设备</h2><ul><li>一台R2S软路由以及它的电源线</li><li>两根用不着太长的网线一张TF卡（作为R2S的系统盘）以及一个读写TF卡的读卡器</li><li>一台可以插网线的电脑</li><li>交换机（可选）</li><li>插排（某些时候插座不够用）</li></ul><h2 id="烧录openwrt系统"><a class="markdownIt-Anchor" href="#烧录openwrt系统"></a> 烧录OpenWrt系统</h2><p>烧录软件：<a href="https://www.balena.io/etcher/">BalenaEtcher</a></p><p>软路由系统：</p><p><a href="https://bigdongdong.cowtransfer.com/s/a3420546d30343">OpenWrt-R2S-dongdong</a></p><p><a href="https://bigdongdong.cowtransfer.com/s/9a349ee597aa4f">OpenWrt-R2S-esir</a></p><p>第一个链接比较新，界面比较好看一些，推荐选择这个下载；第二个系统是eSir大人写的2020版本，已经很旧了；<s>奈何暂时没找到别的系统</s>，如果自行找到更好的系统也可以不用这俩链接。注意系统是要支持Arm架构的，因为Openwrt不是x86架构下的产物。</p><h2 id="开始烧录系统至tf卡"><a class="markdownIt-Anchor" href="#开始烧录系统至tf卡"></a> 开始烧录系统至TF卡</h2><p>打开BalenaEtcher，选择Flash from file，然后将OpenWrt系统烧录到TF卡中即可。</p><p><img src="/2022/02/26/R2S_build/image-1.png" alt="img" loading="lazy"></p><p>注意：选择文件时只选择镜像文件，不要把那些七七八八的文档说明也选进去。选择<code>.gz</code>(<code>.img</code>)文件来烧录即可，烧录完成后直接拔掉读卡器；系统会提示格式化，此时千万<strong>不要</strong>格式化！！！（<s>否则，就重来一遍吧</s>）</p><h2 id="登入r2s后台"><a class="markdownIt-Anchor" href="#登入r2s后台"></a> 登入R2S后台</h2><p>把烧录好固件的TF卡插入R2S，然后给它插上电源，WAN口可以不接，将R2S的LAN口连接电脑的网口，根据所刷入的固件（软路由系统）的不同来决定后台地址，一般来说，软路由后台是<code>192.168.X.1</code> ，本文的系统后台是<code>192.168.22.1</code>，所以说我们在电脑浏览器内输入<code>192.168.5.1</code>(<code>192.168.22.1</code>)以进入后台。后台账号是root，默认密码基本都是password（若下载本文的系统，密码则为空），具体操作链接里面写的很清楚。</p><h2 id="拨号或者dhcp客户端"><a class="markdownIt-Anchor" href="#拨号或者dhcp客户端"></a> 拨号或者DHCP客户端</h2><h3 id="光猫拨号"><a class="markdownIt-Anchor" href="#光猫拨号"></a> 光猫拨号</h3><p>如果你家里的组网方式是通过光猫拨号（通常都是光猫拨号），那么设置方法如下：</p><p>选择 网络-接口， 然后选择 修改WAN口设置</p><p><img src="/2022/02/26/R2S_build/image-2-1024x507.png" alt="img" loading="lazy"></p><p>将WAN口设置成DHCP客户端，然后保存应用即可，此外无须做其他任何设置。</p><p><img src="/2022/02/26/R2S_build/image-3-1024x485.png" alt="img" loading="lazy"></p><h3 id="r2s拨号"><a class="markdownIt-Anchor" href="#r2s拨号"></a> R2S拨号</h3><p>如果你的光猫是桥接，那么就由路由器来拨号（通常来说，哪个网络设备配置更好，就誰来拨号，由于R2S的稳定性远不如光猫，所以这里选择光猫拨号更好），设置方法如下：</p><p><img src="/2022/02/26/R2S_build/image-5.png" alt="img" loading="lazy"></p><p>同样，选择修改WAN口，协议设置成PPPoE, PAP/CHAP，账号密码就是光猫的账号密码。比如电信宽带就是以<code>@163.gd</code>结尾的，密码如果忘记的话直接拨打10000（10086）重置就好，省时省力。</p><p><img src="/2022/02/26/R2S_build/image-2-1024x507.png" alt="img" loading="lazy"></p><p>接下来，需要用超级管理员账号登陆到光猫的IP中（<code>192.168.1.1</code>）,各大运营商的超级管理员账号和密码可以自行搜索。选择 网络-协议，然后设置成DHCP客户端。</p><h3 id="小结"><a class="markdownIt-Anchor" href="#小结"></a> 小结</h3><p>用什么拨号，什么就选择PPPoE，然后其它设备就都设置成DHCP。</p><p>用光猫拨号，光猫的设置里面就选择PPPoE，软路由以及其它路由器就选择DHCP客户端；</p><p>用R2S拨号，光猫和其它路由设备的设置里面就选择DHCP客户端，软路由选择PPPoE。</p><h2 id="各设备接入网络"><a class="markdownIt-Anchor" href="#各设备接入网络"></a> 各设备接入网络</h2><p>将软路由的WAN口与光猫的千兆口相连，然后断开软路由的LAN口与电脑网口的连接，此时软路由的LAN口根据各人组网要求的不同选择接不同的设备，可以接交换机，也可以接一台路由器（路由器设置为有线中继模式，也就是无线AP模式）</p><p>如果家中设备比较多，或者很多屋子都需要连网线的话，可以买一个最便宜的千兆交换机放到弱电箱中，然后吧R2S接到交换机与光猫中间，这样就可以实现整个局域网都接入到软路由中来。（我来草草的画个图）</p><p><img src="/2022/02/26/R2S_build/image-20220305212846426.png" alt="image-20220305212846426" loading="lazy"></p><h2 id="利用插件设置科学上网"><a class="markdownIt-Anchor" href="#利用插件设置科学上网"></a> 利用插件设置科学上网</h2><p>根据前面的步骤，如果你的设备能够正常访问网络了，就可以开始探索OpenWrt的各类插件了。关于科学上网，常见的插件有PassWall, ShadowScoksR++, OpenClash，由于OpenClash具备强大的分流策略机制（根据你访问的域名或者IP的不同决定走不同的节点），我们在此以OpenCalsh为例设置科学上网</p><p><img src="/2022/02/26/R2S_build/image-7.png" alt="img" loading="lazy"></p><p>首先，在服务菜单中找到OpenClash，然后选择配置文件订阅，选择添加配置文件</p><p><img src="/2022/02/26/R2S_build/image-8.png" alt="img" loading="lazy"></p><p>配置文件名随便写，用途是给用户自己区分的，订阅地址填上机场给你的订阅地址，其余地方无需设置，直接应用并保存即可。然后回到OpenClash主页，配置文件区域发送了变化。</p><p><img src="/2022/02/26/R2S_build/image-9-1024x194.png" alt="img" loading="lazy"></p><p>最后点击左下角的启动按钮，等待服务器上线运行即可。</p><p><img src="/2022/02/26/R2S_build/image-10.png" alt="img" loading="lazy"></p><p>如果你设置后无法正常科学上网，原因是有很多的，需要你自己慢慢排查。</p><h2 id="更多原作者的话"><a class="markdownIt-Anchor" href="#更多原作者的话"></a> 更多（原作者的话）</h2><p><a href="https://wiki.friendlyarm.com/wiki/index.php/NanoPi_R2S/zh">NanoPi R2S WIKI</a></p><p>上面的链接是R2S的WIKI书，上面详细记录了R2S的配置以及实际测速情况，也有如何编译系统等教程。</p><p>个人使用R2S两年，从大一到大三都在用这个，感觉就是到千兆不太行，500M是瓶颈了，然后连久了没那么稳定，官网手册上宣传它是又稳定又能达到千兆的，这个听听就好，R2S本来是适合入门的，但是现在价格炒的太高了，没这个必要去买它，目前有很多更具有性价比的软路由可供选择。</p><p>此外向大家推荐软路由界的大佬: <a href="https://youtube.com/c/jackstone">JackStone的Youtube主页</a> ，人称老白，做了很多小主机的视频，如果想选购更具性价比的设备，可以看他的合集，比如2021软路由选购建议这些。</p><h2 id="组网时遇到过的问题我的话"><a class="markdownIt-Anchor" href="#组网时遇到过的问题我的话"></a> 组网时遇到过的问题（我的话）</h2><ol><li>组网的过程中可能出现无法自动分配IP地址的问题，比如说小米的路由器默认会分配<code>192.168.31.XXX</code>；如果你会手动配置的话可以试试，不过最简单的办法就是等，去洗个澡回来就好了。如果还没好，那么可以考虑RESET一下路由器。</li><li>OpenClash插件在首次启动的时候，可能会启动失败，他会提示需要你选择编译架构，按照他的提示，选择Arm-v8架构即可。</li><li>网线通常插上马上就会亮灯，5s左右就能ping通，不过不要太相信科学。~~我有一次ping了10多分钟。~~真的，不通的话不一定是没插紧，也不一定是插错了，<strong>很有可能是因为你没给我微信或者支付宝赞赏</strong>。</li><li>R2S是很基础的一款软路由，稳定性可能不会太好，不过最有可能导致网络不稳定的还是机场的选择，如果选择廉价机场的话，要做好不知道什么时候突然断网10分钟的准备。</li><li>计算机网络这门学科是玄学的一个分支。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> R2S </tag>
            
            <tag> Computer Network </tag>
            
            <tag> 软路由 </tag>
            
            <tag> 科学上网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>链式二叉树简介</title>
      <link href="/2022/02/25/binary_tree_1/"/>
      <url>/2022/02/25/binary_tree_1/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h2><blockquote><p>人为什么难做选择？</p></blockquote><p><strong>选择意味着放弃</strong></p><p>你选择一方，也就意味着放弃了另一方。摆在你面前的选择项越接近，你的选择就会越困难，因为放弃其中任何一个选择项都不容易。如果摆在你面前的选择项对比明显，那么选择起来就会轻松许多，大家几乎都会毫不犹豫的选择“好”的选择项，放弃掉“差”的选择项。</p><p><strong>选择永远都不是完美的</strong></p><p>选择永远都不可能十全十美，只可能满足尽量多的侧重点。选择的时候想满足越多的侧重点，可能就会越难做出选择。所以在选择上不要过于追求完美。</p><p>警惕<strong>逃避性选择</strong>——不知道自己要去哪儿，还要选择离开。</p><p>有一种选择是对现状不满，想逃离这种现状，但是却不知道去哪里。举个例子，可能目前的公司有各种问题，比如开发流程不规范等，如果因为这些问题离开，可能就会从一个坑跳到另外一个更大的坑。当决定离开的时候，一定是自己有明确的目标，很清楚自己想要什么。</p><hr><h2 id="二叉树的定义"><a class="markdownIt-Anchor" href="#二叉树的定义"></a> 二叉树的定义</h2><p>二叉树要么为空，要么由根节点（root），左子树（left subtree）和右子树（right subtree）组成，而且左子树和右子树分别是一棵二叉树。</p><hr><h2 id="二叉树的遍历"><a class="markdownIt-Anchor" href="#二叉树的遍历"></a> 二叉树的遍历</h2><ul><li>先序遍历<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mi>r</mi><mi>e</mi><mi>O</mi><mi>r</mi><mi>d</mi><mi>e</mi><mi>r</mi><mo stretchy="false">(</mo><mi>T</mi><mo stretchy="false">)</mo><mo>=</mo><mi>R</mi><mi>o</mi><mi>o</mi><mi>t</mi><mo stretchy="false">(</mo><mi>T</mi><mo stretchy="false">)</mo><mo>+</mo><mi>P</mi><mi>r</mi><mi>e</mi><mi>O</mi><mi>r</mi><mi>d</mi><mi>e</mi><mi>r</mi><mo stretchy="false">(</mo><mi>l</mi><mi>e</mi><mi>f</mi><mi>t</mi><mi>s</mi><mi>u</mi><mi>b</mi><mi>T</mi><mo stretchy="false">)</mo><mo>+</mo><mi>P</mi><mi>r</mi><mi>e</mi><mi>O</mi><mi>r</mi><mi>d</mi><mi>e</mi><mi>r</mi><mo stretchy="false">(</mo><mi>r</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi><mi>s</mi><mi>u</mi><mi>b</mi><mi>T</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">PreOrder(T)=Root(T)+PreOrder(left subT)+PreOrder(right subT)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">d</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mord mathdefault">o</span><span class="mord mathdefault">o</span><span class="mord mathdefault">t</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">d</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault">t</span><span class="mord mathdefault">s</span><span class="mord mathdefault">u</span><span class="mord mathdefault">b</span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">d</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">h</span><span class="mord mathdefault">t</span><span class="mord mathdefault">s</span><span class="mord mathdefault">u</span><span class="mord mathdefault">b</span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mclose">)</span></span></span></span></li><li>中序遍历<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>I</mi><mi>n</mi><mi>O</mi><mi>r</mi><mi>d</mi><mi>e</mi><mi>r</mi><mo stretchy="false">(</mo><mi>T</mi><mo stretchy="false">)</mo><mo>=</mo><mi>I</mi><mi>n</mi><mi>O</mi><mi>r</mi><mi>d</mi><mi>e</mi><mi>r</mi><mo stretchy="false">(</mo><mi>l</mi><mi>e</mi><mi>f</mi><mi>t</mi><mi>s</mi><mi>u</mi><mi>b</mi><mi>T</mi><mo stretchy="false">)</mo><mo>+</mo><mi>R</mi><mi>o</mi><mi>o</mi><mi>t</mi><mo stretchy="false">(</mo><mi>T</mi><mo stretchy="false">)</mo><mo>+</mo><mi>I</mi><mi>n</mi><mi>O</mi><mi>r</mi><mi>d</mi><mi>e</mi><mi>r</mi><mo stretchy="false">(</mo><mi>r</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi><mi>s</mi><mi>u</mi><mi>b</mi><mi>T</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">InOrder(T)=InOrder(left subT)+Root(T)+InOrder(right subT)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">d</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">d</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault">t</span><span class="mord mathdefault">s</span><span class="mord mathdefault">u</span><span class="mord mathdefault">b</span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mord mathdefault">o</span><span class="mord mathdefault">o</span><span class="mord mathdefault">t</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">d</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">h</span><span class="mord mathdefault">t</span><span class="mord mathdefault">s</span><span class="mord mathdefault">u</span><span class="mord mathdefault">b</span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mclose">)</span></span></span></span></li><li>后序遍历<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mi>o</mi><mi>s</mi><mi>t</mi><mi>O</mi><mi>r</mi><mi>d</mi><mi>e</mi><mi>r</mi><mo stretchy="false">(</mo><mi>T</mi><mo stretchy="false">)</mo><mo>=</mo><mi>P</mi><mi>o</mi><mi>s</mi><mi>t</mi><mi>O</mi><mi>r</mi><mi>d</mi><mi>e</mi><mi>r</mi><mo stretchy="false">(</mo><mi>l</mi><mi>e</mi><mi>f</mi><mi>t</mi><mi>s</mi><mi>u</mi><mi>b</mi><mi>T</mi><mo stretchy="false">)</mo><mo>+</mo><mi>P</mi><mi>o</mi><mi>s</mi><mi>t</mi><mi>O</mi><mi>r</mi><mi>d</mi><mi>e</mi><mi>r</mi><mo stretchy="false">(</mo><mi>R</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi><mi>s</mi><mi>u</mi><mi>b</mi><mi>T</mi><mo stretchy="false">)</mo><mo>+</mo><mi>R</mi><mi>o</mi><mi>o</mi><mi>t</mi><mo stretchy="false">(</mo><mi>T</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">PostOrder(T)=PostOrder(left subT)+PostOrder(Right subT)+Root(T)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mord mathdefault">o</span><span class="mord mathdefault">s</span><span class="mord mathdefault">t</span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">d</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mord mathdefault">o</span><span class="mord mathdefault">s</span><span class="mord mathdefault">t</span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">d</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault">t</span><span class="mord mathdefault">s</span><span class="mord mathdefault">u</span><span class="mord mathdefault">b</span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mord mathdefault">o</span><span class="mord mathdefault">s</span><span class="mord mathdefault">t</span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">d</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">h</span><span class="mord mathdefault">t</span><span class="mord mathdefault">s</span><span class="mord mathdefault">u</span><span class="mord mathdefault">b</span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mord mathdefault">o</span><span class="mord mathdefault">o</span><span class="mord mathdefault">t</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mclose">)</span></span></span></span></li></ul><p><img src="/2022/02/25/binary_tree_1/image.png" alt="img" loading="lazy"></p><hr><pre class="language-none"><code class="language-none">struct Bitree &#x2F;&#x2F;definition&#123;    int data;    Bitree Lchild;    Bitree Rchild;&#125;;</code></pre><h2 id="先序遍历"><a class="markdownIt-Anchor" href="#先序遍历"></a> 先序遍历</h2><ol><li>递归实现</li></ol><pre class="language-none"><code class="language-none">void PreOrderTraverse(BiTree tree)&#123;    if (tree &#x3D;&#x3D; NULL)        return;    cout &lt;&lt; tree-&gt;data;    PreOrderTraverse(tree-&gt;lchild);    PreOrderTraverse(tree-&gt;rchild);&#125;</code></pre><ol start="2"><li>迭代实现</li></ol><pre class="language-none"><code class="language-none">void PreOrder(BiTree Root)&#123;    stack &lt;BiTree&gt; s;    if (root) &#x2F;&#x2F;如果根节点不为空        s.push(root); &#x2F;&#x2F;则令根节点入栈    while (!s.empty()) &#x2F;&#x2F;在栈变空之前反复循环    &#123;         root &#x3D; s.pop();         cout &lt;&lt; root-&gt;data; &#x2F;&#x2F;弹出并访问当前节点        &#x2F;&#x2F;下面左右孩子的顺序不能颠倒        &#x2F;&#x2F;必须先让右孩子先入栈，再让左孩子入栈。        if (root-&gt;RChild)            s.push(root-&gt;RChild); &#x2F;&#x2F;右孩子先入后出        if (root-&gt;LChild)            s.push(root-&gt;LChild); &#x2F;&#x2F;左孩子后入先出    &#125;&#125;</code></pre><p>我们通过一个实例来了解一下该迭代版本是如何工作的 :</p><p><img src="/2022/02/25/binary_tree_1/v2-0ccba83c7b3dbf7b89964c04021025d9_720w.jpg" alt="img" loading="lazy"></p><h2 id="中序遍历"><a class="markdownIt-Anchor" href="#中序遍历"></a> 中序遍历</h2><ol><li>递归实现</li></ol><pre class="language-none"><code class="language-none">void InOrderTraverse(BiTree tree)&#123;    if (!tree)        return;    InOrderTraverse(tree-&gt;lchild);    cout &lt;&lt; tree-&gt;data;    IndOrderTraverse(tree-&gt;rchild);&#125;</code></pre><ol start="2"><li>迭代实现</li></ol><pre class="language-none"><code class="language-none">void InOrderTraverse(BiTree root)&#123;   Stack&lt;BiTree&gt; S; &#x2F;&#x2F;辅助栈   while (true)      if (root)       &#123;         S.push (root); &#x2F;&#x2F;根节点进栈         root &#x3D; root-&gt;LChild; &#x2F;&#x2F;深入遍历左子树      &#125;       else if (!S.empty())       &#123;         root &#x3D; S.pop(); &#x2F;&#x2F;尚未访问的最低祖先节点退栈         cout &lt;&lt; root-&gt;data; &#x2F;&#x2F;访问该祖先节点         root &#x3D; root-&gt;RChild; &#x2F;&#x2F;遍历祖先的右子树      &#125;       else         break; &#x2F;&#x2F;遍历完成&#125;</code></pre><h2 id="后序遍历"><a class="markdownIt-Anchor" href="#后序遍历"></a> 后序遍历</h2><ol><li>递归实现</li></ol><pre class="language-none"><code class="language-none">void PostOrderTraverse(BiTree tree)&#123;    if (!tree)        return;    InOrderTraverse(tree-&gt;Lchild);    IndOrderTraverse(tree-&gt;Rchild);    cout &lt;&lt; tree-&gt;data;&#125;</code></pre><ol start="2"><li>迭代实现</li></ol><pre class="language-none"><code class="language-none">#define A !cur-&gt;Lchild &amp;&amp; !cur-&gt;Rchild&#x2F;&#x2F;如果P不存在左孩子和右孩子，则可以直接访问它；#define B pre&#x3D;&#x3D;cur-&gt;Lchild || pre&#x3D;&#x3D;cur-&gt;Rchild&#x2F;&#x2F;P存在左孩子或者右孩子，但是其左孩子和右孩子都已被访问过了;void PostOrder(BiTree Root)&#123;    if (!Root)        return;    stack &lt;BiTree&gt; s;&#x2F;&#x2F;辅助栈    BiTree cur&#x3D;Root,pre&#x3D;NULL;    s.push(Root);&#x2F;&#x2F;根节点进栈    while (!s.empty())    &#123;        cur&#x3D;s.top();        if (A || B)        &#123;            cout &lt;&lt; cur-&gt;data;            s.pop();            pre&#x3D;cur;        &#125;        else        &#123;            if (cur-&gt;Rchild)                s.push(cur-&gt;Rchild);            if (cur-&gt;Lchild)                s.push(cur-&gt;Lchild);        &#125;    &#125;&#125;</code></pre><hr><p>下一篇文章：<a href="https://tonylsx611.github.io/2022/02/24/binary_tree_2/">数组与链式二叉树之间的转换 | Tony (tonylsx611.github.io)</a></p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>E</mi><mi>N</mi><mi>D</mi></mrow><annotation encoding="application/x-tex">END</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span></span></span></span></span></p>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> algorithm </tag>
            
            <tag> Binary-tree </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数组与链式二叉树的转换</title>
      <link href="/2022/02/24/binary_tree_2/"/>
      <url>/2022/02/24/binary_tree_2/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h2><p>对二叉树不是很了解的同学可以先看一下我之前的文章：</p><p><a href="https://tonylsx611.github.io/2022/02/25/binary_tree_1/">链式二叉树简介</a></p><h2 id="正文"><a class="markdownIt-Anchor" href="#正文"></a> 正文</h2><p>在了解二叉树的基本原理后，我们尝试将一个数组转化成链表形式的二叉树，之后将二叉树以中序遍历打印出来。整个的过程即<mark>数组——链表——数组</mark>。</p><p>幸运的是，正好在leetcode中有着一道非常相似的题，所以我就直接拿来使用了，链接如下：</p><p><a href="https://leetcode-cn.com/problems/binary-tree-inorder-traversal/">94. 二叉树的中序遍历 – 力扣（LeetCode） (leetcode-cn.com)</a></p><p>我们稍加修改，首先声明一个int类型的数组，然后把它放入链表二叉树中，如图所示：</p><p><img src="/2022/02/24/binary_tree_2/image.png" alt="img" loading="lazy"></p><pre class="language-none"><code class="language-none">int arr[7] &#x3D; &#123; 1, 2, 3, 4, 5, NULL, 6 &#125;;</code></pre><p>之后的任务就是将数组转化为链表形式，链表的定义如下：</p><pre class="language-none"><code class="language-none">struct TreeNode &#123;    int val;    TreeNode* left;    TreeNode* right;    TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;    TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;    TreeNode(int x, TreeNode* left, TreeNode* right) : val(x), left(left), right(right) &#123;&#125;&#125;;</code></pre><p>转化为链表过后，剩下的事情就很容易了，无非就是前中后序的遍历，我们在<a href="https://tonylsx611.github.io/2022/02/25/binary_tree_1/">上一个blog</a>中已经有详细的介绍，这里更希望大家掌握迭代的算法，而非递归；因为递归在电脑的底层逻辑中，依然是维护一个栈。</p><h2 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h2><p>那么全部的代码如下，不做过多解释，有疑问可以在留言板留言。</p><pre class="language-none"><code class="language-none">#include&lt;iostream&gt;#include&lt;vector&gt;using namespace std;struct TreeNode &#123;...&#125;;class Solution &#123;public:    int arr[7] &#x3D; &#123; 1, 2, 3, 4, 5, NULL, 6 &#125;;    void inorder(TreeNode* root, vector&lt;int&gt;&amp; res)&#x2F;&#x2F;中序遍历    &#123;        if (root &#x3D;&#x3D; nullptr)            return;        inorder(root-&gt;left, res);        res.push_back(root-&gt;val);        inorder(root-&gt;right, res);    &#125;    vector&lt;int&gt; inorderTraversal(TreeNode* root)&#x2F;&#x2F;递归法    &#123;        vector&lt;int&gt; ans;        inorder(root, ans);        return ans;    &#125;    vector&lt;int&gt; inorderTraversal(TreeNode* root)&#x2F;&#x2F;迭代法    &#123;        vector&lt;int&gt; ans;        stack&lt;TreeNode*&gt; stk;                   while (1)        &#123;            if (root !&#x3D; nullptr)            &#123;                stk.push(root);                root &#x3D; root-&gt;left;            &#125;            else if (!stk.empty())            &#123;                root &#x3D; stk.top();                stk.pop();                ans.push_back(root-&gt;val);                root &#x3D; root-&gt;right;            &#125;            else                return ans;        &#125;            &#125;    TreeNode* addtree(TreeNode* tree, int arr[], int i)&#x2F;&#x2F;数组转链表    &#123;        if (arr[i] &#x3D;&#x3D; 0)            return NULL;        if (i &lt; 7)&#x2F;&#x2F;arr.length()        &#123;            TreeNode* tree &#x3D; new TreeNode();                        tree-&gt;val &#x3D; arr[i];            tree-&gt;left &#x3D; addtree(tree, arr, i + i + 1);            tree-&gt;right &#x3D; addtree(tree, arr, i + i + 2);            return tree;        &#125;        return NULL;    &#125;&#125;;int main()&#123;    Solution sol;    TreeNode* tree &#x3D; NULL;    tree&#x3D; sol.addtree(tree, sol.arr, 0);    sol.inorderTraversal(tree);    for(int i&#x3D; 0; i&lt; sol.inorderTraversal(tree).size(); i++)        cout &lt;&lt; sol.inorderTraversal(tree)[i]&lt;&lt;&quot; &quot;;    return 0;&#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> algorithm </tag>
            
            <tag> Binary-tree </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo 网站搭建指南</title>
      <link href="/2022/02/24/Hexo_creation/"/>
      <url>/2022/02/24/Hexo_creation/</url>
      
        <content type="html"><![CDATA[<h1 id="hexo-网站搭建指南"><a class="markdownIt-Anchor" href="#hexo-网站搭建指南"></a> Hexo 网站搭建指南</h1><p>Welcome to <a href="https://hexo.io/">Hexo</a>!</p><p>This is a Guideline of building your own hexo, which is written in English, but easy to understand!</p><h2 id="preparation-and-installation"><a class="markdownIt-Anchor" href="#preparation-and-installation"></a> Preparation and Installation</h2><h3 id="git-installation"><a class="markdownIt-Anchor" href="#git-installation"></a> Git Installation</h3><ul><li>Linux/Mac:</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> <span class="token function">git</span></code></pre><ul><li>Windows:</li></ul><p>Official link: <a href="https://gitforwindows.org/">Download git</a></p><ul><li>Check whether installed or not:</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> --version</code></pre><h3 id="nodejs-installation"><a class="markdownIt-Anchor" href="#nodejs-installation"></a> Nodejs Installation</h3><ul><li>Linux/Mac:</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> nodejs<span class="token function">sudo</span> aot <span class="token function">install</span> <span class="token function">npm</span></code></pre><ul><li>Windows:</li></ul><p>Official link: <a href="https://nodejs.org/en/download/">nodejs</a> (Suggest you to choose LTS version)</p><ul><li>Check whether installed or not:</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">node</span> -v<span class="token function">npm</span> -v</code></pre><h3 id="hexo-installation"><a class="markdownIt-Anchor" href="#hexo-installation"></a> Hexo Installation</h3><ul><li>Linux/Mac:</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">npm</span> <span class="token function">install</span> -g hexo-cli</code></pre><ul><li>Windows:</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -g hexo-cli</code></pre><ul><li>Check whether installed or not:</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash">hexo -v</code></pre><h2 id="deploy-local-hexo"><a class="markdownIt-Anchor" href="#deploy-local-hexo"></a> Deploy local Hexo</h2><p>​First you need to <strong>choose or create a folder</strong> to storage the local hexo website. For instance, in <code>C:/Software/My_Hexo</code>.</p><p>​Then right click the folder, click <code>open in Windows terminal</code>; or just use command line to get into that folder.</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> hexo init Mybolg<span class="token function">ls</span> Myblog<span class="token function">sudo</span> <span class="token function">npm</span> <span class="token function">install</span></code></pre><p>​*Note that you can replace <code>Mybolg</code> into any word you like.</p><p>​Now you can see some files inside the folder, but only three folders you need to concerntrated.</p><p><img src="/2022/02/24/Hexo_creation/image-20220308165404552.png" alt="image-20220308165404552" loading="lazy"></p><ul><li>node_modules: 依赖包</li><li>public：存放生成的页面</li><li>scaffolds：生成文章的一些模板</li><li><mark>source</mark>：你的文章和素材放在这里</li><li><mark>themes</mark>：字面意思</li><li><mark>_config.yml</mark>: 博客的配置文件</li></ul><h2 id="use-github-to-host"><a class="markdownIt-Anchor" href="#use-github-to-host"></a> Use GitHub to host</h2><h3 id="create-a-new-repository-on-github"><a class="markdownIt-Anchor" href="#create-a-new-repository-on-github"></a> Create a new repository on GitHub</h3><p>​Firstly, you need to have a GitHub account…</p><p>​Then, create a <strong>new repository</strong> on GitHub and named <code>yourusername.github.io</code>, note that you <strong>must</strong> named like this (<code>yourusername</code> is your user name), otherwise the deployment cannot be recognized.</p><p><img src="/2022/02/24/Hexo_creation/image-20220308165502809.png" alt="image-20220308165502809" loading="lazy"></p><h3 id="add-ssh-key-to-github"><a class="markdownIt-Anchor" href="#add-ssh-key-to-github"></a> Add SSH key to GitHub</h3><p>​Back to the terminal, generate the SSH and add it into GitHub so that GitHub can know whether the your computer are visiting the corresponding account.</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> cofig --global user.name <span class="token string">"yourusername"</span><span class="token function">git</span> cofig --global user.email <span class="token string">"youremail"</span>ssh-keygen -t rsa -C <span class="token string">"youremail"</span></code></pre><p>​The computer then will tell you the path of <code>.ssh</code>, find it on your computer, and open it via notepad.</p><p>​To say it simpler, SSH is just the ID of your computer, GitHub recognized your computer via this ID. <code>id_rsa</code> is your private key that you cannot show it to others, while <code>id_rsa.pub</code> is the public key, you can copy the info to GitHub.</p><p>​<code>Github -&gt; settings -&gt; personal settings -&gt; SSH and PGP keys -&gt; New SSH key</code></p><p>​You can verify whether add the SSH key successfully via your terminal:</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">ssh</span> -T git@github.com</code></pre><h3 id="deploy-hexo-to-github"><a class="markdownIt-Anchor" href="#deploy-hexo-to-github"></a> Deploy hexo to GitHub</h3><p>​Open your folder, remember the three folders that I let you to concentrate? Now it turns into <code>_config.yml</code> file, open it and add something in the end:</p><pre class="language-bash" data-language="bash"><code class="language-bash">deploy:  type: <span class="token function">git</span>  repo: https://github.com/yourusername/yourusername.github.io.git  branch: master</code></pre><p>​*Notice the format must be totally same with me, pay attention to the <strong>blanks</strong>.</p><p>​Before deployment, you need to install the <code>deploy-git</code> in your computer so that you can deploy your own hexo into GitHub.</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git --save</code></pre><p>​Finally, deploy your website via the following commands, and you can visit your bolg via <code>http://yourusername.github.io</code>.</p><pre class="language-bash" data-language="bash"><code class="language-bash">hexo cleanhexo deployhexo generate</code></pre><hr><p>注：本文部分内容引用自<a href="https://blog.csdn.net/sinat_37781304/article/details/82729029">hexo史上最全搭建教程_Fangzh的技术博客</a>， 如有侵权，请联系我。</p>]]></content>
      
      
      <categories>
          
          <category> Hexo搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo文章发布指南</title>
      <link href="/2022/02/20/Hexo_article/"/>
      <url>/2022/02/20/Hexo_article/</url>
      
        <content type="html"><![CDATA[<h2 id="upload-your-first-article"><a class="markdownIt-Anchor" href="#upload-your-first-article"></a> Upload your first article</h2><h3 id="create-a-new-post"><a class="markdownIt-Anchor" href="#create-a-new-post"></a> Create a new post</h3><pre class="language-bash" data-language="bash"><code class="language-bash">hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="run-server"><a class="markdownIt-Anchor" href="#run-server"></a> Run server</h3><pre class="language-bash" data-language="bash"><code class="language-bash">hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="generate-static-files"><a class="markdownIt-Anchor" href="#generate-static-files"></a> Generate static files</h3><pre class="language-bash" data-language="bash"><code class="language-bash">hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="deploy-to-remote-sites"><a class="markdownIt-Anchor" href="#deploy-to-remote-sites"></a> Deploy to remote sites</h3><pre class="language-bash" data-language="bash"><code class="language-bash">hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><h3 id="advanced-settings"><a class="markdownIt-Anchor" href="#advanced-settings"></a> Advanced Settings</h3><p>​Create a bat format file (e.g. <code>start.bat</code>) in the root folder of your blog.</p><pre class="language-bash" data-language="bash"><code class="language-bash">hexo clean <span class="token operator">&amp;</span> hexo d <span class="token operator">&amp;</span> hexo g <span class="token operator">&amp;</span> hexo spause</code></pre><p>​Then every time you uploaded a file or change any settings, you can just double click the .bat file to update your blog, which is very convenience.</p><h2 id="hexo发布类型样例"><a class="markdownIt-Anchor" href="#hexo发布类型样例"></a> Hexo发布类型样例</h2><h3 id="title"><a class="markdownIt-Anchor" href="#title"></a> Title</h3><p>在md下直接使用 # 进行新建标题，左侧菜单栏会自动生成H1-H6的标题，very nice!</p><img src="/2022/02/20/Hexo_article/image-20220308162506034.png" alt="image-20220308162506034" style="zoom:50%;" loading="lazy"><h3 id="头部字段"><a class="markdownIt-Anchor" href="#头部字段"></a> 头部字段</h3><p>在文章的第一行使用三个<code>-</code>（就是分割线）来创建头部字段。</p><ul><li>格式如下：</li></ul><pre class="language-none"><code class="language-none">title: Hexo文章发布指南date: 2077-02-20 00:34:49author: Tonycategories:- Hexo搭建tags: - tag1- tag2katex: true</code></pre><p>其中，<code>categories</code>在一篇文章中建议只设置一个，而<code>tags</code>可以设置很多个。这样可以防止文章分类混乱，在左侧菜单栏中可以很方便的访问。</p><p><img src="/2022/02/20/Hexo_article/image-20220308162715529.png" alt="image-20220308162715529" loading="lazy"></p><h3 id="数学公式"><a class="markdownIt-Anchor" href="#数学公式"></a> 数学公式</h3><p>行内公式使用 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">$</mi></mrow><annotation encoding="application/x-tex">\$</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.80556em;vertical-align:-0.05556em;"></span><span class="mord">$</span></span></span></span> 将数学公式括起来就好，行间公式使用两个<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">$</mi><mi mathvariant="normal">$</mi></mrow><annotation encoding="application/x-tex">\$\$</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.80556em;vertical-align:-0.05556em;"></span><span class="mord">$</span><span class="mord">$</span></span></span></span>，这跟md的格式是一样的。</p><p>需要注意的是，如果文章中需要使用数学公式，最好在头部字段前添加<code>katex: true</code>的字样。</p><ul><li>数学公式样例：</li></ul><p>我是行内公式：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mo>=</mo><msup><mi>x</mi><mn>45</mn></msup><mo>+</mo><mn>3</mn></mrow><annotation encoding="application/x-tex">x=x^{45}+3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">4</span><span class="mord mtight">5</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">3</span></span></span></span>，我还可以接着写。。。</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>x</mi><mn>1</mn></msub><mo>=</mo><msub><mi>x</mi><mn>3</mn></msub><mo>+</mo><mn>2</mn><mo>×</mo><msup><mi>x</mi><mn>6</mn></msup><mspace linebreak="newline"></mspace><mi>α</mi><mi mathvariant="normal">：</mi><mi mathvariant="normal">我</mi><mi mathvariant="normal">是</mi><mi mathvariant="normal">行</mi><mi mathvariant="normal">间</mi><mi mathvariant="normal">公</mi><mi mathvariant="normal">式</mi><mspace linebreak="newline"></mspace><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>2</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>3</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>4</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>5</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>6</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>7</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>8</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>9</mn></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow></mrow><annotation encoding="application/x-tex">x_1=x_3+2\times x^6\\\alpha：我是行间公式\\\left[\begin{matrix}1 &amp; 2 &amp; 3\\4 &amp; 5 &amp; 6\\7 &amp; 8 &amp; 9\\\end{matrix}\right]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.73333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8641079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">6</span></span></span></span></span></span></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span><span class="mord cjk_fallback">：</span><span class="mord cjk_fallback">我</span><span class="mord cjk_fallback">是</span><span class="mord cjk_fallback">行</span><span class="mord cjk_fallback">间</span><span class="mord cjk_fallback">公</span><span class="mord cjk_fallback">式</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:3.60004em;vertical-align:-1.55002em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">4</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">7</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">5</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">8</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">3</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">6</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">9</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><h3 id="图片"><a class="markdownIt-Anchor" href="#图片"></a> 图片</h3><p>只需要将图片拖入md文档中即可，md会自动创建一个与文件名相同的文件夹以储存所有的图片素材，并会自动将图片复制到该文件夹中，因此所有的图片只需要输入相对路径即可。</p><p>比如，本文章的名字为test，那么只需要这样写：<code>![IMG_1479](test/IMG_1479.jpg)</code></p><p>注：Hexo支持GIF格式的图片哦！</p><p><img src="/2022/02/20/Hexo_article/IMG_1479.jpg" alt="IMG_1479" loading="lazy"></p><p><img src="/2022/02/20/Hexo_article/2d6f869662e83398f06070e2a14f838.jpg" alt="2d6f869662e83398f06070e2a14f838" loading="lazy"></p><p><img src="/2022/02/20/Hexo_article/traffic-light.gif" alt="traffic-light" loading="lazy"></p><h3 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h3><p>主题中默认代码有些会很丑，建议修改<code>_config.yml</code>中的指令把代码前面的行号取消，这样或许会变得好看一些，个人建议仅供参考。</p><pre class="language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;using namespace std;int main()&#123;int a,b,c;cin&gt;&gt;a&gt;&gt;c;for(int i&#x3D;0;i&lt;a;i++)cout&lt;&lt;c*a&lt;&lt;endl;return 0;&#125;</code></pre><h3 id="文字"><a class="markdownIt-Anchor" href="#文字"></a> 文字</h3><ul><li>高亮语法：<mark>Highlight</mark>ing （==）</li><li>加粗：<strong>Bold</strong> （**）</li><li>斜体：<em>Wall</em>（*）</li><li>删除线：<s>请给我打钱</s>（~~）</li></ul><h3 id="音频及视频"><a class="markdownIt-Anchor" href="#音频及视频"></a> 音频及视频</h3><p>暂不支持。。。</p><p>（正在努力开发中。。。）</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>video</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>test/DSC_7412.MOV<span class="token punctuation">'</span></span>        <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>video/mp4<span class="token punctuation">'</span></span>        <span class="token attr-name">controls</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>controls<span class="token punctuation">'</span></span>         <span class="token attr-name">preload</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>auto<span class="token punctuation">"</span></span>       <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>100%<span class="token punctuation">'</span></span>        <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>100%<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>video</span><span class="token punctuation">></span></span></code></pre><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>E</mi><mi>N</mi><mi>D</mi></mrow><annotation encoding="application/x-tex">END</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span></span></span></span></span></p>]]></content>
      
      
      <categories>
          
          <category> Hexo搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
