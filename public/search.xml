<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>微博信息采集Crawler</title>
      <link href="/2023/03/20/weibo-crwaler/"/>
      <url>/2023/03/20/weibo-crwaler/</url>
      
        <content type="html"><![CDATA[<h1 id="内容简介"><a class="markdownIt-Anchor" href="#内容简介"></a> 内容简介</h1><p>本文主要内容为微博移动端[<a href="https://m.weibo.cn/">微博 (weibo.cn)</a>]的正文、图片和评论内容的爬取方法。目前可以实现两个主要的功能：</p><ol><li>通过搜索关键词来获取关键词下前50页的热门微博，获取每条微博下的作者信息，评论信息，点赞数和转发数，图片和视频等。</li></ol><p>![image-20230320160522808](C:\Users\Tony Lee\Documents\忆潇湘的小站\<a href="http://tonylsx611.github.io">tonylsx611.github.io</a>\source_posts\weibo-crwaler\image-20230320160522808.png)</p><ol start="2"><li>通过搜索博主id获取该博主所发布的所有微博内容，包括评论信息，点赞数和转发数，图片和视频等。</li></ol><p>![image-20230320160746584](C:\Users\Tony Lee\Documents\忆潇湘的小站\<a href="http://tonylsx611.github.io">tonylsx611.github.io</a>\source_posts\weibo-crwaler\image-20230320160746584.png)</p><h1 id="数据分析"><a class="markdownIt-Anchor" href="#数据分析"></a> 数据分析</h1><h2 id="网址分析"><a class="markdownIt-Anchor" href="#网址分析"></a> 网址分析</h2><p>以搜索”小米13“关键词为例， 其http网址为：</p><pre class="language-http" data-language="http"><code class="language-http"><span class="token header"><span class="token header-name keyword">https</span><span class="token punctuation">:</span><span class="token header-value">//m.weibo.cn/search?containerid=100103type%3D1%26q%3D%E5%B0%8F%E7%B1%B313</span></span></code></pre><p>其中，<code>%E5%B0%8F%E7%B1%B313</code>为<code>小米13</code>，通过<code>quote()</code>函数将中文转换为网址信息，前面的内容<code>https://m.weibo.cn/search?containerid=100103type%3D1%26q%3D</code>为固定信息，无论更换任何关键词其值都不发生改变。</p><p>![image-20230320162055981](C:\Users\Tony Lee\Documents\忆潇湘的小站\<a href="http://tonylsx611.github.io">tonylsx611.github.io</a>\source_posts\weibo-crwaler\image-20230320162055981.png)</p><p>该URL为GET请求，请求得到的信息中包含详细的每条卡片信息，包含卡片的ID信息，图片信息，作者信息，发布时间等等。</p><p>![image-20230320162420077](C:\Users\Tony Lee\Documents\忆潇湘的小站\<a href="http://tonylsx611.github.io">tonylsx611.github.io</a>\source_posts\weibo-crwaler\image-20230320162420077.png)</p><p><code>data-&gt;cards-&gt;1-&gt;mblog</code>中包含了我们需要搜集的绝大多数信息，这些信息是开放的未加密的。</p><h2 id="页面下拉分析"><a class="markdownIt-Anchor" href="#页面下拉分析"></a> 页面下拉分析</h2><ol><li>微博关键词页面请求的URL格式为：</li></ol><pre class="language-http" data-language="http"><code class="language-http"><span class="token header"><span class="token header-name keyword">https</span><span class="token punctuation">:</span><span class="token header-value">//m.weibo.cn/api/container/getIndex?containerid=100103type=1&amp;q=小米13&amp;page_type=searchall&amp;page=2</span></span></code></pre><p>因此翻页的请求操作就很简单，只需要修改page的值即可。</p><ol start="2"><li>微博主页下面评论请求的URL格式为：</li></ol><pre class="language-http" data-language="http"><code class="language-http"><span class="token header"><span class="token header-name keyword">https</span><span class="token punctuation">:</span><span class="token header-value">//m.weibo.cn/comments/hotflow?id=4881387725260346&amp;mid=4881387725260346&amp;max_id_type=0</span></span><span class="token header"><span class="token header-name keyword">https</span><span class="token punctuation">:</span><span class="token header-value">//m.weibo.cn/comments/hotflow?id=4881387725260346&amp;mid=4881387725260346&amp;max_id=190628723632&amp;max_id_type=0</span></span></code></pre><p>因此可以看出翻页请求的方式为修改max_id的值，而max_id的值是从上一个URL获取到的。只需要不停的将上一个max_id迭代给下一个URL中的参数中，直到max_id=0结束迭代即可。</p><p>![image-20230320202213798](C:\Users\Tony Lee\Documents\忆潇湘的小站\<a href="http://tonylsx611.github.io">tonylsx611.github.io</a>\source_posts\weibo-crwaler\image-20230320202213798.png)</p><ol start="3"><li>个人主页下面的微博页面请求URL格式为：</li></ol><pre class="language-http" data-language="http"><code class="language-http"><span class="token header"><span class="token header-name keyword">https</span><span class="token punctuation">:</span><span class="token header-value">//m.weibo.cn/api/container/getIndex?uid=2022252207&amp;luicode=10000011&amp;lfid=100103type=1&amp;q=小米13&amp;type=uid&amp;value=2022252207&amp;containerid=1005052022252207</span></span><span class="token header"><span class="token header-name keyword">https</span><span class="token punctuation">:</span><span class="token header-value">//m.weibo.cn/api/container/getIndex?uid=2022252207&amp;luicode=10000011&amp;lfid=100103type=1&amp;q=小米13&amp;type=uid&amp;value=2022252207&amp;containerid=1076032022252207&amp;since_id=4881342653007337</span></span></code></pre><p>因此可以看出翻页的请求方式为修改since_id的值，而since_id的值也是从上一个URL获取到的。跟上面的操作方法一样迭代，直到<code>data-&gt;cards</code>为空即可。</p><p>![image-20230320204124708](C:\Users\Tony Lee\Documents\忆潇湘的小站\<a href="http://tonylsx611.github.io">tonylsx611.github.io</a>\source_posts\weibo-crwaler\image-20230320204124708.png)</p><h1 id="全部代码"><a class="markdownIt-Anchor" href="#全部代码"></a> 全部代码</h1><h2 id="通过关键词获取"><a class="markdownIt-Anchor" href="#通过关键词获取"></a> 通过关键词获取</h2><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> os<span class="token punctuation">.</span>path<span class="token keyword">import</span> re<span class="token keyword">import</span> requests<span class="token keyword">from</span> datetime <span class="token keyword">import</span> datetime<span class="token keyword">from</span> time <span class="token keyword">import</span> sleep<span class="token keyword">from</span> urllib<span class="token punctuation">.</span>parse <span class="token keyword">import</span> urlencode<span class="token keyword">from</span> urllib<span class="token punctuation">.</span>parse <span class="token keyword">import</span> quoteheaders <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">'authority'</span><span class="token punctuation">:</span> <span class="token string">'m.weibo.cn'</span><span class="token punctuation">,</span>    <span class="token string">'accept'</span><span class="token punctuation">:</span> <span class="token string">'application/json, text/plain, */*'</span><span class="token punctuation">,</span>    <span class="token string">'accept-language'</span><span class="token punctuation">:</span> <span class="token string">'zh-CN,zh;q=0.9,en-CN;q=0.8,en;q=0.7,es-MX;q=0.6,es;q=0.5'</span><span class="token punctuation">,</span>    <span class="token string">'client-version'</span><span class="token punctuation">:</span> <span class="token string">'v2.38.9'</span><span class="token punctuation">,</span>    cookie <span class="token operator">=</span> <span class="token string">'这里需要自己获取哈'</span>    <span class="token string">'referer'</span><span class="token punctuation">:</span> <span class="token string">'https://m.weibo.cn/detail/4877693583361088'</span><span class="token punctuation">,</span>    <span class="token string">'sec-ch-ua'</span><span class="token punctuation">:</span> <span class="token string">'"Chromium";v="110", "Not A(Brand";v="24", "Microsoft Edge";v="110"'</span><span class="token punctuation">,</span>    <span class="token string">'sec-ch-ua-mobile'</span><span class="token punctuation">:</span> <span class="token string">'?0'</span><span class="token punctuation">,</span>    <span class="token string">'sec-ch-ua-platform'</span><span class="token punctuation">:</span> <span class="token string">'"Windows"'</span><span class="token punctuation">,</span>    <span class="token string">'sec-fetch-dest'</span><span class="token punctuation">:</span> <span class="token string">'empty'</span><span class="token punctuation">,</span>    <span class="token string">'sec-fetch-mode'</span><span class="token punctuation">:</span> <span class="token string">'cors'</span><span class="token punctuation">,</span>    <span class="token string">'sec-fetch-site'</span><span class="token punctuation">:</span> <span class="token string">'same-origin'</span><span class="token punctuation">,</span>    <span class="token string">'server-version'</span><span class="token punctuation">:</span> <span class="token string">'v2023.02.13.1'</span><span class="token punctuation">,</span>    <span class="token string">'user-agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 '</span>                  <span class="token string">'Safari/537.36 Edg/110.0.1587.63'</span><span class="token punctuation">,</span>    <span class="token string">'x-requested-with'</span><span class="token punctuation">:</span> <span class="token string">'XMLHttpRequest'</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token keyword">def</span> <span class="token function">make_text</span><span class="token punctuation">(</span>uid<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># https://m.weibo.cn/statuses/extend?id=4877693583361088 正文格式</span>    param0 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token string">'id'</span><span class="token punctuation">:</span> uid    <span class="token punctuation">&#125;</span>    url0 <span class="token operator">=</span> <span class="token string">'https://m.weibo.cn/statuses/extend?'</span>    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url0<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">,</span> params<span class="token operator">=</span>param0<span class="token punctuation">)</span>    resp_json <span class="token operator">=</span> response<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># print(resp_json)</span>    <span class="token keyword">if</span> resp_json<span class="token punctuation">[</span><span class="token string">'ok'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>  <span class="token comment"># 请求成功</span>        attitude <span class="token operator">=</span> resp_json<span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'attitudes_count'</span><span class="token punctuation">]</span>  <span class="token comment"># 点赞数</span>        comments <span class="token operator">=</span> resp_json<span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'comments_count'</span><span class="token punctuation">]</span>  <span class="token comment"># 评论数</span>        reposts <span class="token operator">=</span> resp_json<span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'reposts_count'</span><span class="token punctuation">]</span>  <span class="token comment"># 转发数</span>        data <span class="token operator">=</span> resp_json<span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'longTextContent'</span><span class="token punctuation">]</span>  <span class="token comment"># 正文</span>        data1 <span class="token operator">=</span> re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">"&lt;br />"</span><span class="token punctuation">,</span> <span class="token string">"\n"</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span>  <span class="token comment"># 处理换行符问题</span>        <span class="token comment"># 还未处理： #...# 的超链接</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"正文:"</span><span class="token punctuation">,</span> data1<span class="token punctuation">)</span>        <span class="token comment"># 导出到 data/uid/text.txt 文件中</span>        <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"data/"</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>uid<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span> <span class="token string">"text.txt"</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>data1<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">">> 正文获取失败..."</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">make_commit</span><span class="token punctuation">(</span>uid<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># https://m.weibo.cn/comments/hotflow?id=4877693583361088&amp;mid=4877693583361088&amp;max_id_type=0 评论</span>    <span class="token comment"># 清空 data/uid/commit.txt 中的内容</span>    <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token string">"data/"</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>uid<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"/commit.txt"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"data/"</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>uid<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"/commit.txt"</span><span class="token punctuation">,</span> <span class="token string">"a+"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>            f<span class="token punctuation">.</span>truncate<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    cnt <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment"># 评论数</span>    param1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token string">'id'</span><span class="token punctuation">:</span> uid<span class="token punctuation">,</span>        <span class="token string">'mid'</span><span class="token punctuation">:</span> uid<span class="token punctuation">,</span>        <span class="token string">'max_id_type'</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>        <span class="token string">'max_id'</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span>    url1 <span class="token operator">=</span> <span class="token string">'https://m.weibo.cn/comments/hotflow?'</span>    <span class="token keyword">while</span> <span class="token number">1</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>        url1 <span class="token operator">+=</span> urlencode<span class="token punctuation">(</span>param1<span class="token punctuation">)</span>        response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url1<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>        resp_json <span class="token operator">=</span> response<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> resp_json<span class="token punctuation">[</span><span class="token string">'ok'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>  <span class="token comment"># 请求成功</span>            data <span class="token operator">=</span> resp_json<span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span>            <span class="token keyword">for</span> num <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                cnt <span class="token operator">+=</span> <span class="token number">1</span>                <span class="token comment"># 写入data/uid/commit.txt</span>                <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"data/"</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>uid<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span> <span class="token string">"commit.txt"</span><span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>                    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span><span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\n\n"</span><span class="token punctuation">)</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span><span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 打印每一条评论</span>            <span class="token comment"># https://m.weibo.cn/comments/hotflow?id=4876699311019002&amp;mid=4876699311019002&amp;max_id_type=0</span>            <span class="token comment"># https://m.weibo.cn/comments/hotflow?id=4876699311019002&amp;mid=4876699311019002&amp;max_id=193017192550121&amp;max_id_type=0</span>            <span class="token comment"># 上一页url请求的 max_id 就是下一页的url中的值</span>            max_id <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">'max_id'</span><span class="token punctuation">]</span>            param1<span class="token punctuation">[</span><span class="token string">'max_id'</span><span class="token punctuation">]</span> <span class="token operator">=</span> max_id            <span class="token keyword">if</span> max_id <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">">> 没有更多评论了..."</span><span class="token punctuation">)</span>                <span class="token keyword">break</span>            sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">">> 暂无评论..."</span><span class="token punctuation">)</span>            <span class="token keyword">break</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">">> 评论个数:"</span><span class="token punctuation">,</span> cnt<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">find_uid</span><span class="token punctuation">(</span>keywords<span class="token punctuation">,</span> page<span class="token punctuation">)</span><span class="token punctuation">:</span>    uid_arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    img_arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    url2 <span class="token operator">=</span> <span class="token string">"https://m.weibo.cn/api/container/getIndex?containerid=100103type%3D1%26q%3D"</span>    url2 <span class="token operator">+=</span> quote<span class="token punctuation">(</span>keywords<span class="token punctuation">)</span>    url2 <span class="token operator">+=</span> <span class="token string">"&amp;page_type=searchall&amp;page="</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"正在查询关键词为"</span><span class="token punctuation">,</span> keywords<span class="token punctuation">,</span> <span class="token string">"的网址:"</span><span class="token punctuation">,</span> url2<span class="token punctuation">)</span>    <span class="token keyword">for</span> pages <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> page <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># pages</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"-"</span> <span class="token operator">*</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token string">"page:"</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>pages<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"-"</span> <span class="token operator">*</span> <span class="token number">25</span><span class="token punctuation">)</span>        response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url2 <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>pages<span class="token punctuation">)</span><span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>        resp_json <span class="token operator">=</span> response<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span>        val <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>resp_json<span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'cards'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> pages <span class="token operator">==</span> <span class="token number">1</span> <span class="token keyword">and</span> j <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                <span class="token keyword">continue</span>            img_url <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>            commit <span class="token operator">=</span> resp_json<span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'cards'</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span>            <span class="token keyword">if</span> commit<span class="token punctuation">[</span><span class="token string">'card_type'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">9</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> commit<span class="token punctuation">[</span><span class="token string">'mblog'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'created_at'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'2023'</span><span class="token punctuation">:</span>  <span class="token comment"># 按时间判断</span>                    uid_arr<span class="token punctuation">.</span>append<span class="token punctuation">(</span>commit<span class="token punctuation">[</span><span class="token string">'mblog'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'mid'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># id</span>                    <span class="token comment"># 图片处理</span>                    <span class="token keyword">if</span> commit<span class="token punctuation">[</span><span class="token string">'mblog'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'pic_num'</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>  <span class="token comment"># 有图片</span>                        num <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>commit<span class="token punctuation">[</span><span class="token string">'mblog'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'pics'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 图片个数</span>                        <span class="token keyword">for</span> k <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>                            img_url<span class="token punctuation">.</span>append<span class="token punctuation">(</span>commit<span class="token punctuation">[</span><span class="token string">'mblog'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'pics'</span><span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'large'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'url'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                    img_arr<span class="token punctuation">.</span>append<span class="token punctuation">(</span>img_url<span class="token punctuation">)</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>commit<span class="token punctuation">[</span><span class="token string">'mblog'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'mid'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># uid</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>commit<span class="token punctuation">[</span><span class="token string">'mblog'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'created_at'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># create time</span>            <span class="token keyword">elif</span> commit<span class="token punctuation">[</span><span class="token string">'card_type'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">11</span> <span class="token keyword">and</span> commit<span class="token punctuation">[</span><span class="token string">'card_group'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'card_type'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">9</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> commit<span class="token punctuation">[</span><span class="token string">'card_group'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'mblog'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'created_at'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'2023'</span><span class="token punctuation">:</span>  <span class="token comment"># 按时间判断</span>                    uid_arr<span class="token punctuation">.</span>append<span class="token punctuation">(</span>commit<span class="token punctuation">[</span><span class="token string">'card_group'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'mblog'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'mid'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># id</span>                    <span class="token comment"># 图片处理</span>                    <span class="token keyword">if</span> commit<span class="token punctuation">[</span><span class="token string">'card_group'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'mblog'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'pic_num'</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>  <span class="token comment"># 有图片</span>                        <span class="token comment"># print(commit['card_group'][0]['mblog']['pics'][0]['url'])</span>                        num <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>commit<span class="token punctuation">[</span><span class="token string">'card_group'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'mblog'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'pics'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 图片个数</span>                        <span class="token keyword">for</span> k <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>                            <span class="token keyword">try</span><span class="token punctuation">:</span>                                img_url<span class="token punctuation">.</span>append<span class="token punctuation">(</span>commit<span class="token punctuation">[</span><span class="token string">'card_group'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'mblog'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'pics'</span><span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'large'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'url'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                            <span class="token keyword">except</span><span class="token punctuation">:</span>                                <span class="token keyword">continue</span>                    img_arr<span class="token punctuation">.</span>append<span class="token punctuation">(</span>img_url<span class="token punctuation">)</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>commit<span class="token punctuation">[</span><span class="token string">'card_group'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'mblog'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'mid'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># uid</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>commit<span class="token punctuation">[</span><span class="token string">'card_group'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'mblog'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'created_at'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># create time</span>        sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> uid_arr<span class="token punctuation">,</span> img_arr<span class="token keyword">def</span> <span class="token function">make_img</span><span class="token punctuation">(</span>uid<span class="token punctuation">,</span> img_url<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> num <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>img_url<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        img <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>img_url<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>content        <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"data/"</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>uid<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>uid<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"_"</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">".jpg"</span><span class="token punctuation">,</span> <span class="token string">"wb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>img<span class="token punctuation">)</span>        sleep<span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    search_page <span class="token operator">=</span> <span class="token number">50</span>  <span class="token comment"># 更改爬取的页数</span>    keyword <span class="token operator">=</span> <span class="token string">"银河澳门"</span>    uid_list<span class="token punctuation">,</span> img_list <span class="token operator">=</span> find_uid<span class="token punctuation">(</span>keyword<span class="token punctuation">,</span> search_page<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>uid_list<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>img_list<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment"># 需要先在根目录下创建data文件夹</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>uid_list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token string">"data/"</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>uid_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            os<span class="token punctuation">.</span>makedirs<span class="token punctuation">(</span><span class="token string">"data/"</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>uid_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 创建文件夹</span>            make_text<span class="token punctuation">(</span>uid_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            make_commit<span class="token punctuation">(</span>uid_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            make_img<span class="token punctuation">(</span>uid_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> img_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>  <span class="token comment"># 之前已经爬取过了</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">">> 爬过的帖子..."</span><span class="token punctuation">)</span>            <span class="token keyword">continue</span>    exit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span></code></pre><h2 id="通过个人主页微博获取"><a class="markdownIt-Anchor" href="#通过个人主页微博获取"></a> 通过个人主页微博获取</h2>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> crawler </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/03/20/hello-world/"/>
      <url>/2023/03/20/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="quick-start"><a class="markdownIt-Anchor" href="#quick-start"></a> Quick Start</h2><h3 id="create-a-new-post"><a class="markdownIt-Anchor" href="#create-a-new-post"></a> Create a new post</h3><pre class="language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="run-server"><a class="markdownIt-Anchor" href="#run-server"></a> Run server</h3><pre class="language-bash" data-language="bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="generate-static-files"><a class="markdownIt-Anchor" href="#generate-static-files"></a> Generate static files</h3><pre class="language-bash" data-language="bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="deploy-to-remote-sites"><a class="markdownIt-Anchor" href="#deploy-to-remote-sites"></a> Deploy to remote sites</h3><pre class="language-bash" data-language="bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>随机森林回归模型进行机票预测</title>
      <link href="/2023/02/07/flyfare-predict/"/>
      <url>/2023/02/07/flyfare-predict/</url>
      
        <content type="html"><![CDATA[<p>机器学习模型大致分为有监督模型、无监督模型（以及概率模型）。我们熟知的线性回归和神经网络模型都是基于有监督的机器学习模型。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/86fe39a01eb033f06cdf6a9b3140d2c4.png" alt="img" loading="lazy"></p><p>从模型的个数和性质角度来看，我们可以将机器学习模型分为单模型和集成模型（single model and ensemble model）。单模型为仅以某种模型独立训练和验证，如线性回归和逻辑回归模型等，集成模型为多个独立模型组合构成一个混合模型，使得模型获得更合理的于此模型，如随机森林等模型。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/916819b2c072b4173b9424b519a063e4.png" alt="img" loading="lazy"></p><p>从监督类型角度看，机器学习模型分为监督模型和无监督模型（supervised model and unsupervised model)。无监督模型是指从无标注的数据中学习得到模型，监督学习模型则需要在训练过程中根据数据的输入和输出进行学习。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/11a8177f38892654daa17dc86ecfd13f.png" alt="img" loading="lazy"></p><p>对于机票预测，我们需要选取集成-监督学习模型以得到最佳预测结果；在机票价格数据验证方面我们采用r2_score指标，同时可以观测真实值与预测值之间的区别，进而调整模型参数来进一步提升模型拟合度。</p><h2 id="数据清洗代码"><a class="markdownIt-Anchor" href="#数据清洗代码"></a> 数据清洗代码</h2><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd <span class="token keyword">import</span> numpy <span class="token keyword">as</span> np <span class="token keyword">import</span> seaborn <span class="token keyword">as</span> sns <span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>preprocessing <span class="token keyword">import</span> StandardScaler<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> train_test_split<span class="token punctuation">,</span>GridSearchCV<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>metrics <span class="token keyword">import</span> accuracy_score<span class="token punctuation">,</span>confusion_matrixdf<span class="token operator">=</span>pd<span class="token punctuation">.</span>read_excel<span class="token punctuation">(</span><span class="token string">'Train.xlsx'</span><span class="token punctuation">)</span>df<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">)</span>sns<span class="token punctuation">.</span>heatmap<span class="token punctuation">(</span>df<span class="token punctuation">.</span>corr<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            annot<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>              center<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">,</span>              fmt<span class="token operator">=</span><span class="token string">'.2f'</span><span class="token punctuation">,</span>              linewidth<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">,</span>              linecolor<span class="token operator">=</span><span class="token string">'blue'</span><span class="token punctuation">,</span>              vmin<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> vmax<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>              xticklabels<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> yticklabels<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>             square<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>            cbar<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>              cmap<span class="token operator">=</span><span class="token string">'coolwarm_r'</span><span class="token punctuation">,</span>              <span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show</code></pre><p>![屏幕截图 2023-02-07 165418](flyfare-predict\屏幕截图 2023-02-07 165418.png)</p><p>数据清洗的目标就是把<code>df</code>中所有<code>object</code>类型的数据变为<code>int</code>类型，以便于通过机器学习数据预测。</p><p>![image-20230207165916491](flyfare-predict\屏幕截图 2023-02-07 165905.png)</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#drop the nullvalues</span>df<span class="token punctuation">.</span>dropna<span class="token punctuation">(</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>df<span class="token punctuation">.</span>isnull<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">change_into_datetime</span><span class="token punctuation">(</span>col<span class="token punctuation">)</span><span class="token punctuation">:</span>    df<span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token operator">=</span>pd<span class="token punctuation">.</span>to_datetime<span class="token punctuation">(</span>df<span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token punctuation">)</span>df<span class="token punctuation">.</span>columns<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token string">'Date_of_Journey'</span><span class="token punctuation">,</span><span class="token string">'Dep_Time'</span><span class="token punctuation">,</span> <span class="token string">'Arrival_Time'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    change_into_datetime<span class="token punctuation">(</span>i<span class="token punctuation">)</span>df<span class="token punctuation">.</span>dtypesdf<span class="token punctuation">[</span><span class="token string">'journey_day'</span><span class="token punctuation">]</span><span class="token operator">=</span>df<span class="token punctuation">[</span><span class="token string">'Date_of_Journey'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>dt<span class="token punctuation">.</span>daydf<span class="token punctuation">[</span><span class="token string">'journey_month'</span><span class="token punctuation">]</span><span class="token operator">=</span>df<span class="token punctuation">[</span><span class="token string">'Date_of_Journey'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>dt<span class="token punctuation">.</span>monthdf<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>df<span class="token punctuation">.</span>drop<span class="token punctuation">(</span><span class="token string">'Date_of_Journey'</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">extract_hour</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span>col<span class="token punctuation">)</span><span class="token punctuation">:</span>    data<span class="token punctuation">[</span>col<span class="token operator">+</span><span class="token string">'_hour'</span><span class="token punctuation">]</span><span class="token operator">=</span>data<span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token punctuation">.</span>dt<span class="token punctuation">.</span>hour    <span class="token keyword">def</span> <span class="token function">extract_min</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span>col<span class="token punctuation">)</span><span class="token punctuation">:</span>    data<span class="token punctuation">[</span>col<span class="token operator">+</span><span class="token string">'_min'</span><span class="token punctuation">]</span><span class="token operator">=</span>data<span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token punctuation">.</span>dt<span class="token punctuation">.</span>minute    <span class="token keyword">def</span> <span class="token function">drop_col</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span>col<span class="token punctuation">)</span><span class="token punctuation">:</span>    data<span class="token punctuation">.</span>drop<span class="token punctuation">(</span>col<span class="token punctuation">,</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>  extract_hour<span class="token punctuation">(</span>df<span class="token punctuation">,</span><span class="token string">'Dep_Time'</span><span class="token punctuation">)</span><span class="token comment">#extracting minutes</span>extract_min<span class="token punctuation">(</span>df<span class="token punctuation">,</span><span class="token string">'Dep_Time'</span><span class="token punctuation">)</span><span class="token comment">#drop the column</span>drop_col<span class="token punctuation">(</span>df<span class="token punctuation">,</span><span class="token string">'Dep_Time'</span><span class="token punctuation">)</span>extract_hour<span class="token punctuation">(</span>df<span class="token punctuation">,</span><span class="token string">'Arrival_Time'</span><span class="token punctuation">)</span><span class="token comment">#extracting min</span>extract_min<span class="token punctuation">(</span>df<span class="token punctuation">,</span><span class="token string">'Arrival_Time'</span><span class="token punctuation">)</span><span class="token comment">#drop the column</span>drop_col<span class="token punctuation">(</span>df<span class="token punctuation">,</span><span class="token string">'Arrival_Time'</span><span class="token punctuation">)</span>duration<span class="token operator">=</span><span class="token builtin">list</span><span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token string">'Duration'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>duration<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>duration<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token string">'h'</span> <span class="token keyword">in</span> duration<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token comment"># Check if duration contains only hour</span>             duration<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>duration<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">' 0m'</span> <span class="token comment"># Adds 0 minute</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>             duration<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'0h '</span><span class="token operator">+</span> duration<span class="token punctuation">[</span>i<span class="token punctuation">]</span>             df<span class="token punctuation">[</span><span class="token string">'Duration'</span><span class="token punctuation">]</span><span class="token operator">=</span>durationdf<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">hour</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> x<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">minutes</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> x<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>    df<span class="token punctuation">[</span><span class="token string">'dur_hour'</span><span class="token punctuation">]</span><span class="token operator">=</span>df<span class="token punctuation">[</span><span class="token string">'Duration'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span>hour<span class="token punctuation">)</span>df<span class="token punctuation">[</span><span class="token string">'dur_min'</span><span class="token punctuation">]</span><span class="token operator">=</span>df<span class="token punctuation">[</span><span class="token string">'Duration'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span>minutes<span class="token punctuation">)</span>drop_col<span class="token punctuation">(</span>df<span class="token punctuation">,</span><span class="token string">'Duration'</span><span class="token punctuation">)</span>df<span class="token punctuation">[</span><span class="token string">'dur_hour'</span><span class="token punctuation">]</span> <span class="token operator">=</span> df<span class="token punctuation">[</span><span class="token string">'dur_hour'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span>df<span class="token punctuation">[</span><span class="token string">'dur_min'</span><span class="token punctuation">]</span> <span class="token operator">=</span> df<span class="token punctuation">[</span><span class="token string">'dur_min'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span>column<span class="token operator">=</span><span class="token punctuation">[</span>column <span class="token keyword">for</span> column <span class="token keyword">in</span> df<span class="token punctuation">.</span>columns <span class="token keyword">if</span> df<span class="token punctuation">[</span>column<span class="token punctuation">]</span><span class="token punctuation">.</span>dtype<span class="token operator">==</span><span class="token string">'object'</span><span class="token punctuation">]</span><span class="token comment"># column</span><span class="token comment"># ['Airline', 'Source', 'Destination', 'Route', 'Total_Stops', 'Additional_Info']</span>continuous_col <span class="token operator">=</span><span class="token punctuation">[</span>column <span class="token keyword">for</span> column <span class="token keyword">in</span> df<span class="token punctuation">.</span>columns <span class="token keyword">if</span> df<span class="token punctuation">[</span>column<span class="token punctuation">]</span><span class="token punctuation">.</span>dtype<span class="token operator">!=</span><span class="token string">'object'</span><span class="token punctuation">]</span><span class="token comment"># continuous_col</span><span class="token comment"># ['Price',</span><span class="token comment"># 'journey_day',</span><span class="token comment"># 'journey_month',</span><span class="token comment"># 'Dep_Time_hour',</span><span class="token comment"># 'Dep_Time_min',</span><span class="token comment"># 'Arrival_Time_hour',</span><span class="token comment"># 'Arrival_Time_min',</span><span class="token comment"># 'dur_hour',</span><span class="token comment"># 'dur_min']</span>categorical <span class="token operator">=</span> df<span class="token punctuation">[</span>column<span class="token punctuation">]</span>categorical<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span>categorical<span class="token punctuation">[</span><span class="token string">'Airline'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value_counts<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># Jet Airways                          3849</span><span class="token comment"># IndiGo                               2053</span><span class="token comment"># Air India                            1751</span><span class="token comment"># Multiple carriers                    1196</span><span class="token comment"># SpiceJet                              818</span><span class="token comment"># Vistara                               479</span><span class="token comment"># Air Asia                              319</span><span class="token comment"># GoAir                                 194</span><span class="token comment"># Multiple carriers Premium economy      13</span><span class="token comment"># Jet Airways Business                    6</span><span class="token comment"># Vistara Premium economy                 3</span><span class="token comment"># Trujet                                  1</span><span class="token comment"># Name: Airline, dtype: int64</span>plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span>sns<span class="token punctuation">.</span>boxplot<span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token string">'Airline'</span><span class="token punctuation">,</span>y<span class="token operator">=</span><span class="token string">'Price'</span><span class="token punctuation">,</span>data<span class="token operator">=</span>df<span class="token punctuation">.</span>sort_values<span class="token punctuation">(</span><span class="token string">'Price'</span><span class="token punctuation">,</span>ascending<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># As Airline is Nominal Categorical data we will perform OneHotEncoding</span>Airline<span class="token operator">=</span>pd<span class="token punctuation">.</span>get_dummies<span class="token punctuation">(</span>categorical<span class="token punctuation">[</span><span class="token string">'Airline'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>drop_first<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment">#encoding of source column</span>source<span class="token operator">=</span>pd<span class="token punctuation">.</span>get_dummies<span class="token punctuation">(</span>categorical<span class="token punctuation">[</span><span class="token string">'Source'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>drop_first<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment">#encoding of destination column</span>destination<span class="token operator">=</span>pd<span class="token punctuation">.</span>get_dummies<span class="token punctuation">(</span>categorical<span class="token punctuation">[</span><span class="token string">'Destination'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>drop_first<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>categorical<span class="token punctuation">[</span><span class="token string">'Route1'</span><span class="token punctuation">]</span><span class="token operator">=</span>categorical<span class="token punctuation">[</span><span class="token string">'Route'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">str</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'→'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">str</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>categorical<span class="token punctuation">[</span><span class="token string">'Route2'</span><span class="token punctuation">]</span><span class="token operator">=</span>categorical<span class="token punctuation">[</span><span class="token string">'Route'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">str</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'→'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">str</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>categorical<span class="token punctuation">[</span><span class="token string">'Route3'</span><span class="token punctuation">]</span><span class="token operator">=</span>categorical<span class="token punctuation">[</span><span class="token string">'Route'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">str</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'→'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">str</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>categorical<span class="token punctuation">[</span><span class="token string">'Route4'</span><span class="token punctuation">]</span><span class="token operator">=</span>categorical<span class="token punctuation">[</span><span class="token string">'Route'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">str</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'→'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">str</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span>categorical<span class="token punctuation">[</span><span class="token string">'Route5'</span><span class="token punctuation">]</span><span class="token operator">=</span>categorical<span class="token punctuation">[</span><span class="token string">'Route'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">str</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'→'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">str</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span>drop_col<span class="token punctuation">(</span>categorical<span class="token punctuation">,</span><span class="token string">'Route'</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token string">'Route3'</span><span class="token punctuation">,</span> <span class="token string">'Route4'</span><span class="token punctuation">,</span> <span class="token string">'Route5'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    categorical<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">'None'</span><span class="token punctuation">,</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    categorical<span class="token punctuation">.</span>isnull<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># all zeros</span><span class="token keyword">for</span> i <span class="token keyword">in</span> categorical<span class="token punctuation">.</span>columns<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'&#123;&#125; has total &#123;&#125; categories'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>categorical<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>value_counts<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># Airline has total 12 categories</span><span class="token comment"># Source has total 5 categories</span><span class="token comment"># Destination has total 6 categories</span><span class="token comment"># Total_Stops has total 5 categories</span><span class="token comment"># Additional_Info has total 10 categories</span><span class="token comment"># Route1 has total 5 categories</span><span class="token comment"># Route2 has total 45 categories</span><span class="token comment"># Route3 has total 30 categories</span><span class="token comment"># Route4 has total 14 categories</span><span class="token comment"># Route5 has total 6 categories</span><span class="token comment"># Applying label encoder</span><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>preprocessing <span class="token keyword">import</span> LabelEncoderencoder <span class="token operator">=</span> LabelEncoder<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token string">'Route1'</span><span class="token punctuation">,</span> <span class="token string">'Route2'</span><span class="token punctuation">,</span> <span class="token string">'Route3'</span><span class="token punctuation">,</span> <span class="token string">'Route4'</span><span class="token punctuation">,</span> <span class="token string">'Route5'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>categorical<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>encoder<span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span>categorical<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    drop_col<span class="token punctuation">(</span>categorical<span class="token punctuation">,</span><span class="token string">'Additional_Info'</span><span class="token punctuation">)</span><span class="token comment"># encoding Total stops</span><span class="token builtin">dict</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'non-stop'</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'2 stops'</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'1 stop'</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'3 stops'</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'4 stops'</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">&#125;</span>categorical<span class="token punctuation">[</span><span class="token string">'Total_Stops'</span><span class="token punctuation">]</span><span class="token operator">=</span>categorical<span class="token punctuation">[</span><span class="token string">'Total_Stops'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">dict</span><span class="token punctuation">)</span>drop_col<span class="token punctuation">(</span>categorical<span class="token punctuation">,</span><span class="token string">'Source'</span><span class="token punctuation">)</span>drop_col<span class="token punctuation">(</span>categorical<span class="token punctuation">,</span><span class="token string">'Destination'</span><span class="token punctuation">)</span>drop_col<span class="token punctuation">(</span>categorical<span class="token punctuation">,</span><span class="token string">'Airline'</span><span class="token punctuation">)</span>final_df<span class="token operator">=</span>pd<span class="token punctuation">.</span>concat<span class="token punctuation">(</span><span class="token punctuation">[</span>categorical<span class="token punctuation">,</span>Airline<span class="token punctuation">,</span>source<span class="token punctuation">,</span>destination<span class="token punctuation">,</span>df<span class="token punctuation">[</span>continuous_col<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span> X<span class="token operator">=</span>final_df<span class="token punctuation">.</span>drop<span class="token punctuation">(</span><span class="token string">'Price'</span><span class="token punctuation">,</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>y<span class="token operator">=</span>df<span class="token punctuation">[</span><span class="token string">'Price'</span><span class="token punctuation">]</span></code></pre><h2 id="数据预测代码"><a class="markdownIt-Anchor" href="#数据预测代码"></a> 数据预测代码</h2><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>feature_selection <span class="token keyword">import</span> mutual_info_classif<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> train_test_split<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>metrics <span class="token keyword">import</span> r2_score<span class="token punctuation">,</span>mean_absolute_error<span class="token punctuation">,</span>mean_squared_error<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>linear_model <span class="token keyword">import</span> LogisticRegression<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>neighbors <span class="token keyword">import</span> KNeighborsRegressor<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>tree <span class="token keyword">import</span> DecisionTreeRegressor<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>ensemble <span class="token keyword">import</span> GradientBoostingRegressor<span class="token punctuation">,</span>RandomForestRegressor<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>naive_bayes <span class="token keyword">import</span> MultinomialNB<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>svm <span class="token keyword">import</span> SVRmutual_info_classif<span class="token punctuation">(</span>X<span class="token punctuation">,</span>y<span class="token punctuation">)</span> <span class="token comment"># 标准化 归一化</span>imp <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>mutual_info_classif<span class="token punctuation">(</span>X<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span>index<span class="token operator">=</span>X<span class="token punctuation">.</span>columns<span class="token punctuation">)</span><span class="token comment"># spiliting the dataset</span>X_train<span class="token punctuation">,</span>X_test<span class="token punctuation">,</span>y_train<span class="token punctuation">,</span>y_test <span class="token operator">=</span> train_test_split<span class="token punctuation">(</span>X<span class="token punctuation">,</span>y<span class="token punctuation">,</span>test_size<span class="token operator">=</span><span class="token number">0.20</span><span class="token punctuation">,</span>random_state<span class="token operator">=</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">predict</span><span class="token punctuation">(</span>ml_model<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Model is: &#123;&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>ml_model<span class="token punctuation">)</span><span class="token punctuation">)</span>    model<span class="token operator">=</span> ml_model<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X_train<span class="token punctuation">,</span>y_train<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Training score: &#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>model<span class="token punctuation">.</span>score<span class="token punctuation">(</span>X_train<span class="token punctuation">,</span>y_train<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    predictions <span class="token operator">=</span> model<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>X_test<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Predictions are: &#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>predictions<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>    r2score<span class="token operator">=</span>r2_score<span class="token punctuation">(</span>y_test<span class="token punctuation">,</span>predictions<span class="token punctuation">)</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"r2 score is: &#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>r2score<span class="token punctuation">)</span><span class="token punctuation">)</span>              <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'MAE:&#123;&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>mean_absolute_error<span class="token punctuation">(</span>y_test<span class="token punctuation">,</span>predictions<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'MSE:&#123;&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>mean_squared_error<span class="token punctuation">(</span>y_test<span class="token punctuation">,</span>predictions<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'RMSE:&#123;&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>mean_squared_error<span class="token punctuation">(</span>y_test<span class="token punctuation">,</span>predictions<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>         sns<span class="token punctuation">.</span>distplot<span class="token punctuation">(</span>y_test<span class="token operator">-</span>predictions<span class="token punctuation">)</span> </code></pre><h6 id="random-forest-regressors"><a class="markdownIt-Anchor" href="#random-forest-regressors"></a> Random Forest Regressors</h6><pre class="language-python" data-language="python"><code class="language-python">predict<span class="token punctuation">(</span>RandomForestRegressor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>![image-20230208225110702](C:\Users\Tony Lee\Documents\忆潇湘的小站\source_posts\flyfare-predict\image-20230208225110702.png)</p><h6 id="k-neighbor-regressors"><a class="markdownIt-Anchor" href="#k-neighbor-regressors"></a> K-Neighbor Regressors</h6><pre class="language-python" data-language="python"><code class="language-python">predict<span class="token punctuation">(</span>KNeighborsRegressor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>![image-20230208225204468](C:\Users\Tony Lee\Documents\忆潇湘的小站\source_posts\flyfare-predict\image-20230208225204468.png)</p><h6 id="simple-vector-regressors"><a class="markdownIt-Anchor" href="#simple-vector-regressors"></a> Simple Vector Regressors</h6><pre class="language-python" data-language="python"><code class="language-python">predict<span class="token punctuation">(</span>SVR<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>![image-20230208225431216](C:\Users\Tony Lee\Documents\忆潇湘的小站\source_posts\flyfare-predict\image-20230208225431216.png)</p><h2 id="优化预测代码"><a class="markdownIt-Anchor" href="#优化预测代码"></a> 优化预测代码</h2><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> RandomizedSearchCVrandom_grid <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">'n_estimators'</span> <span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">120</span><span class="token punctuation">,</span> <span class="token number">150</span><span class="token punctuation">,</span> <span class="token number">180</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span><span class="token number">220</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'max_features'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'auto'</span><span class="token punctuation">,</span><span class="token string">'sqrt'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'max_depth'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span>rf<span class="token operator">=</span>RandomForestRegressor<span class="token punctuation">(</span><span class="token punctuation">)</span>rf_random<span class="token operator">=</span>RandomizedSearchCV<span class="token punctuation">(</span>estimator<span class="token operator">=</span>rf<span class="token punctuation">,</span>param_distributions<span class="token operator">=</span>random_grid<span class="token punctuation">,</span>cv<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span>verbose<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>n_jobs<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">)</span>rf_random<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X_train<span class="token punctuation">,</span>y_train<span class="token punctuation">)</span><span class="token comment"># best parameter</span>rf_random<span class="token punctuation">.</span>best_params_<span class="token comment"># &#123;'n_estimators': 200, 'max_features': 'auto', 'max_depth': 15&#125;</span><span class="token comment">#predicting the values</span>prediction <span class="token operator">=</span> rf_random<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>X_test<span class="token punctuation">)</span><span class="token comment">#distribution plot between actual value and predicted value</span>sns<span class="token punctuation">.</span>displot<span class="token punctuation">(</span>y_test<span class="token operator">-</span>prediction<span class="token punctuation">)</span>r2_score<span class="token punctuation">(</span>y_test<span class="token punctuation">,</span>prediction<span class="token punctuation">)</span> <span class="token comment"># 0.8602</span></code></pre><p>![image-20230208225639379](C:\Users\Tony Lee\Documents\忆潇湘的小站\source_posts\flyfare-predict\image-20230208225639379.png)</p><hr><p>本文部分内容和图片引用自文章：<a href="https://blog.csdn.net/fengdu78/article/details/115878843">(14条消息) 【机器学习基础】机器学习模型与算法最全分类汇总！_风度78的博客-CSDN博客</a>，如有侵权，请联系我。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Socket网络编程 5——多人聊天室</title>
      <link href="/2022/12/01/socket-multi-2/"/>
      <url>/2022/12/01/socket-multi-2/</url>
      
        <content type="html"><![CDATA[<h2 id="原理"><a class="markdownIt-Anchor" href="#原理"></a> 原理</h2><p><img src="/2022/12/01/socket-multi-2/image-20221201102754586.png" alt="image-20221201102754586" loading="lazy"></p><h2 id="server-code"><a class="markdownIt-Anchor" href="#server-code"></a> Server Code</h2><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> queue <span class="token keyword">import</span> Queue<span class="token keyword">import</span> socket<span class="token keyword">import</span> threading<span class="token keyword">import</span> timeclients <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>messages <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">new_thread</span><span class="token punctuation">(</span>sock<span class="token punctuation">,</span> addr<span class="token punctuation">,</span> q<span class="token punctuation">)</span><span class="token punctuation">:</span>    msg <span class="token operator">=</span> <span class="token string">"Hello, "</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>addr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"! You've joined the group."</span>    sock<span class="token punctuation">.</span>send<span class="token punctuation">(</span>msg<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    temp_msg <span class="token operator">=</span> <span class="token string">"Client "</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" join the group"</span>    messages<span class="token punctuation">.</span>append<span class="token punctuation">(</span>temp_msg<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>temp_msg<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token punctuation">(</span>threading<span class="token punctuation">.</span>active_count<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        q<span class="token punctuation">.</span>put<span class="token punctuation">(</span>addr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Now there are "</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token punctuation">(</span>threading<span class="token punctuation">.</span>active_count<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">" people in the group!"</span><span class="token punctuation">)</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        msg <span class="token operator">=</span> sock<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> msg <span class="token operator">==</span> <span class="token string">"quit"</span><span class="token punctuation">:</span>            temp_msg <span class="token operator">=</span> <span class="token string">"Bye-bye"</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"!"</span>            messages<span class="token punctuation">.</span>append<span class="token punctuation">(</span>temp_msg<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>temp_msg<span class="token punctuation">)</span>  <span class="token comment"># (Id, port)</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token punctuation">(</span>threading<span class="token punctuation">.</span>active_count<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                q<span class="token punctuation">.</span>put<span class="token punctuation">(</span>addr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Now there are "</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token punctuation">(</span>threading<span class="token punctuation">.</span>active_count<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">" people in the group!"</span><span class="token punctuation">)</span>            <span class="token keyword">break</span>        <span class="token keyword">elif</span> msg <span class="token operator">==</span> <span class="token string">""</span><span class="token punctuation">:</span>            temp_msg <span class="token operator">=</span> addr <span class="token operator">+</span> <span class="token string">"has quit the group accidentally..."</span>            messages<span class="token punctuation">.</span>append<span class="token punctuation">(</span>temp_msg<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>temp_msg<span class="token punctuation">)</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token punctuation">(</span>threading<span class="token punctuation">.</span>active_count<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                q<span class="token punctuation">.</span>put<span class="token punctuation">(</span>addr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Now there are "</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token punctuation">(</span>threading<span class="token punctuation">.</span>active_count<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">" people in the group!"</span><span class="token punctuation">)</span>            <span class="token keyword">break</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            temp_msg <span class="token operator">=</span> <span class="token string">"    "</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>addr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">": "</span> <span class="token operator">+</span> msg            messages<span class="token punctuation">.</span>append<span class="token punctuation">(</span>temp_msg<span class="token punctuation">)</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token punctuation">(</span>threading<span class="token punctuation">.</span>active_count<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                q<span class="token punctuation">.</span>put<span class="token punctuation">(</span>addr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>temp_msg<span class="token punctuation">)</span>    clients<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>sock<span class="token punctuation">)</span>    sock<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">message_record</span><span class="token punctuation">(</span>sock<span class="token punctuation">,</span> q<span class="token punctuation">)</span><span class="token punctuation">:</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> q<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> sock<span class="token punctuation">.</span>getpeername<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            sock<span class="token punctuation">.</span>send<span class="token punctuation">(</span>messages<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    q <span class="token operator">=</span> Queue<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        s <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span>    <span class="token keyword">except</span> Exception<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Socket Error!"</span><span class="token punctuation">)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        s<span class="token punctuation">.</span>bind<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span> <span class="token number">7777</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> Exception<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Bind Error!"</span><span class="token punctuation">)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        s<span class="token punctuation">.</span>listen<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> Exception<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Listen Error!"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Server is running...'</span><span class="token punctuation">)</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            sock<span class="token punctuation">,</span> addr <span class="token operator">=</span> s<span class="token punctuation">.</span>accept<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">except</span> Exception<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Accept Error!"</span><span class="token punctuation">)</span>        clients<span class="token punctuation">.</span>append<span class="token punctuation">(</span>sock<span class="token punctuation">)</span>        t <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>new_thread<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>sock<span class="token punctuation">,</span> addr<span class="token punctuation">,</span> q<span class="token punctuation">,</span> <span class="token punctuation">)</span><span class="token punctuation">)</span>        t<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>        t1 <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>message_record<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>sock<span class="token punctuation">,</span> q<span class="token punctuation">,</span> <span class="token punctuation">)</span><span class="token punctuation">)</span>        t1<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="client-code"><a class="markdownIt-Anchor" href="#client-code"></a> Client Code</h2><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> socket<span class="token keyword">import</span> threading<span class="token keyword">def</span> <span class="token function">recv_thread</span><span class="token punctuation">(</span>sock<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">while</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>        message <span class="token operator">=</span> sock<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> message <span class="token operator">!=</span> <span class="token string">""</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        s <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span>    <span class="token keyword">except</span> Exception<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Socket Error!"</span><span class="token punctuation">)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        s<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span> <span class="token number">7777</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> Exception<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Connection Error!"</span><span class="token punctuation">)</span>    t <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>recv_thread<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token punctuation">)</span><span class="token punctuation">)</span>    t<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        msg <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> msg<span class="token punctuation">:</span>            <span class="token keyword">continue</span>        s<span class="token punctuation">.</span>send<span class="token punctuation">(</span>msg<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> msg <span class="token operator">==</span> <span class="token string">"quit"</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"See you next time, bye!"</span><span class="token punctuation">)</span>            s<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">break</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Socket </tag>
            
            <tag> Client </tag>
            
            <tag> Server </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python网络爬虫——多线程</title>
      <link href="/2022/11/30/Crawl-multi/"/>
      <url>/2022/11/30/Crawl-multi/</url>
      
        <content type="html"><![CDATA[<h2 id="如何爬取网站"><a class="markdownIt-Anchor" href="#如何爬取网站"></a> 如何爬取网站</h2><p>首先获取网址，通过模拟真实真实网页请求来获取网站的html文档。代码如下：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> urllib<span class="token punctuation">.</span>requesturl <span class="token operator">=</span> <span class="token string">"https://www.google.com"</span>headers <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36 Edg/107.0.1418.56"</span><span class="token punctuation">&#125;</span>req <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>url<span class="token operator">=</span>weather_url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>html_encode <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>req<span class="token punctuation">)</span>html_txt <span class="token operator">=</span> html_encode<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>html_txt <span class="token operator">=</span> html_txt<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token comment"># print(html_txt)</span>html_encode<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="数据清洗"><a class="markdownIt-Anchor" href="#数据清洗"></a> 数据清洗</h2><p>通过正则表达式筛选我们所需要的信息和剔除冗余信息。代码如下：</p><pre class="language-python" data-language="python"><code class="language-python">date <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">r'&lt;div class="th200">.* &lt;/div>'</span><span class="token punctuation">,</span> html_txt<span class="token punctuation">)</span>Date <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> date<span class="token punctuation">:</span>        temp <span class="token operator">=</span> i<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'&lt;div class="th200">'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>        temp <span class="token operator">=</span> temp<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'&lt;/div>'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>        Date<span class="token punctuation">.</span>append<span class="token punctuation">(</span>temp<span class="token punctuation">)</span></code></pre><h2 id="数据储存"><a class="markdownIt-Anchor" href="#数据储存"></a> 数据储存</h2><p>将清洗好的数据通过Pandas存放在<code>.csv</code>文件中。代码如下：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pddata <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">[</span>Date<span class="token punctuation">,</span> Highest<span class="token punctuation">,</span> Lowest<span class="token punctuation">,</span> Weather<span class="token punctuation">,</span> Wind<span class="token punctuation">]</span><span class="token punctuation">)</span>data <span class="token operator">=</span> data<span class="token punctuation">.</span>Tdata<span class="token punctuation">.</span>to_csv<span class="token punctuation">(</span><span class="token string">'data.csv'</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> header<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf_8_sig'</span><span class="token punctuation">)</span></code></pre><h2 id="多线程加速"><a class="markdownIt-Anchor" href="#多线程加速"></a> 多线程加速</h2><p>代码如下：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> threading <span class="token keyword">import</span> Threadthread_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> yr <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2012</span><span class="token punctuation">,</span> <span class="token number">2022</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    thread <span class="token operator">=</span> Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>get_year<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>yr<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    thread<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    thread_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>thread<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    thread<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># time usage: 25.76s</span></code></pre><h2 id="多进程加速"><a class="markdownIt-Anchor" href="#多进程加速"></a> 多进程加速</h2><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> multiprocessing <span class="token keyword">import</span> Processprocess_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> yr <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2012</span><span class="token punctuation">,</span> <span class="token number">2022</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    process <span class="token operator">=</span> Process<span class="token punctuation">(</span>target<span class="token operator">=</span>get_year<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>yr<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    process<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    process_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>process<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    process<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># time usage: 25.30s</span></code></pre><h2 id="多线程和多进程的利弊"><a class="markdownIt-Anchor" href="#多线程和多进程的利弊"></a> 多线程和多进程的利弊</h2><p>多线程编程更加适合于I/O密集型任务的程序；</p><p>多进程编程更加适合于CPU密集型任务的程序。</p><p>因为网络爬虫的时候大部分时间都会用在网页的请求和相应上，因此多线程综合体验更优。对于Python来说，可能有人会说Python有GIL锁阻止多个线程在同一时刻运行，但是对于I/O密集型任务来说，等待网络请求阶段占据绝大多数时间，此时线程是会释放GIL锁的，因此线程间的锁冲突情况其实并不多。而多进程没有这个问题，理论上运行时间应该更快，但是多个进程占用的资源会很多，对于大型程序来说，线程的开销远远小于进程的开销，在性能差距不大的情况下，为什么不用多进程来节约资源呢？</p><h2 id="全部代码"><a class="markdownIt-Anchor" href="#全部代码"></a> 全部代码</h2><pre class="language-none"><code class="language-none">import threadingfrom urllib.error import HTTPErrorimport randomimport urllib.requestimport timeimport redef get_month(year, month):    weather_url &#x3D; &quot;https:&#x2F;&#x2F;lishi.tianqi.com&#x2F;zhuhai&#x2F;&quot; + year + month + &quot;.html&quot;    headers &#x3D; &#123;&#39;User-Agent&#39;: &quot;Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;107.0.0.0 Safari&#x2F;537.36 Edg&#x2F;107.0.1418.56&quot;&#125;    req &#x3D; urllib.request.Request(url&#x3D;weather_url, headers&#x3D;headers)    try:        html_encode &#x3D; urllib.request.urlopen(req)    except HTTPError as err:        print(err)    else:        html_txt &#x3D; html_encode.read()        html_txt &#x3D; html_txt.decode(&#39;utf-8&#39;)        # print(html_txt)        html_encode.close()    date &#x3D; re.findall(r&#39;&lt;div class&#x3D;&quot;th200&quot;&gt;.* &lt;&#x2F;div&gt;&#39;, html_txt)    for i in date:        temp &#x3D; i.replace(&#39;&lt;div class&#x3D;&quot;th200&quot;&gt;&#39;, &#39;&#39;)        temp &#x3D; temp.replace(&#39;&lt;&#x2F;div&gt;&#39;, &#39;&#39;)        Date.append(temp)    climate_sum &#x3D; []    climate &#x3D; re.findall(r&#39;&lt;div class&#x3D;&quot;th140&quot;&gt;.*&lt;&#x2F;div&gt;&#39;, html_txt)    for i in climate:        temp &#x3D; i.replace(&#39;&lt;div class&#x3D;&quot;th140&quot;&gt;&#39;, &#39;&#39;)        temp &#x3D; temp.replace(&#39;&lt;&#x2F;div&gt;&#39;, &#39;&#39;)        climate_sum.append(temp)    num &#x3D; 0    for i in climate_sum[4:]:        if num &#x3D;&#x3D; 0:            Highest.append(i)        elif num &#x3D;&#x3D; 1:            Lowest.append(i)        elif num &#x3D;&#x3D; 2:            Weather.append(i)        elif num &#x3D;&#x3D; 3:            Wind.append(i)        num +&#x3D; 1        if num &#x3D;&#x3D; 4:            num &#x3D; 0def list_to_csv():    import pandas as pd    data &#x3D; pd.DataFrame([Date, Highest, Lowest, Weather, Wind])    data &#x3D; data.T    data.to_csv(&#39;data.csv&#39;, index&#x3D;False, header&#x3D;False, encoding&#x3D;&#39;utf_8_sig&#39;)def get_year(y):    y &#x3D; str(y)    for m in range(1, 13):        time.sleep(1)        m &#x3D; str(m).zfill(2)        print(&quot;Downloading &quot; + y + &quot;-&quot; + m + &quot; weather data...&quot;)        get_month(y, m)def single_thread():    start &#x3D; time.time()    for yr in range(2012, 2022):        get_year(yr)    end &#x3D; time.time()    print(&quot;time:&quot;, end - start)    print(len(Date), len(Highest), len(Lowest), len(Weather), len(Wind))def multi_thread():    thread_list &#x3D; []    start &#x3D; time.time()    for yr in range(2012, 2022):        thread &#x3D; threading.Thread(target&#x3D;get_year, args&#x3D;(yr,))        thread_list.append(thread)        thread.start()    for i in range(10):        thread.join()    end &#x3D; time.time()    print(&quot;time:&quot;, end - start)    print(len(Date), len(Highest), len(Lowest), len(Weather), len(Wind))if __name__ &#x3D;&#x3D; &quot;__main__&quot;:    # Single-thread program    Date &#x3D; Highest &#x3D; Lowest &#x3D; Weather &#x3D; Wind &#x3D; []    single_thread()    # Multi-thread program    Date &#x3D; Highest &#x3D; Lowest &#x3D; Weather &#x3D; Wind &#x3D; []    multi_thread()    list_to_csv()</code></pre><h2 id="运行结果"><a class="markdownIt-Anchor" href="#运行结果"></a> 运行结果</h2><p>左侧是多线程的结果，右侧是单进程的结果，多进程结果未截图，多进程与多线程对于此程序用时相近，单进程和多线程（本例为10线程）的时间差距在8-9倍左右，由此可以看出多线程的加速成绩对于网络爬虫来说是非常明显的。</p><p><img src="/2022/11/30/Crawl-multi/image-20221201103211709.png" alt="image-20221201103211709" loading="lazy"></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python - Socket - Multi-thread </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android Studio 开发 7</title>
      <link href="/2022/11/25/Android-Studio-7/"/>
      <url>/2022/11/25/Android-Studio-7/</url>
      
        <content type="html"><![CDATA[<h2 id="任务目标"><a class="markdownIt-Anchor" href="#任务目标"></a> 任务目标</h2><p>实现针对Tablets平板设备的大屏适配，一个屏幕下显示更多信息。实现方式为Fragments。</p><p><img src="/2022/11/25/Android-Studio-7/image-20221125135252991.png" alt="image-20221125135252991" loading="lazy"></p><h2 id="项目管理"><a class="markdownIt-Anchor" href="#项目管理"></a> 项目管理</h2><p><img src="/2022/11/25/Android-Studio-7/image-20221125135412770.png" alt="image-20221125135412770" loading="lazy"></p><p>项目需要创建以上文件，包括创建两个Activities，分别是创建工程时自动创建的<code>MainActivity</code>和手动创建的<code>DetailActivity</code>；以及一个Fragment需要手动创建，为<code>WorkoutDetailFragment</code>（Fragment的创建方式如下如）；以及两个Java Class文件，分别是<code>Workout</code>和<code>WorkoutListFragment</code>。另外，需要在<code>res</code>文件夹下手动创建<code>layout-large</code>文件夹，用来适配Tablet的Layout文件；在该文件夹下手动创建<code>activity_main.xml</code>即可。</p><p><img src="/2022/11/25/Android-Studio-7/image-20221125135917426.png" alt="image-20221125135917426" loading="lazy"></p><h2 id="界面编辑"><a class="markdownIt-Anchor" href="#界面编辑"></a> 界面编辑</h2><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- activity_main.xml --></span><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>androidx.appcompat.widget.LinearLayoutCompat</span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>orientation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>horizontal<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fragment</span>        <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/list_fragment<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.example.fragment.WorkoutListFragment<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>        <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>androidx.appcompat.widget.LinearLayoutCompat</span><span class="token punctuation">></span></span></code></pre><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- activity_detail.xml --></span><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>androidx.appcompat.widget.LinearLayoutCompat</span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>tools</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.android.com/tools<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">tools:</span>context</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>.DetailActivity<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>androidx.fragment.app.FragmentContainerView</span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/fragment_workout<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.example.fragment.WorkoutDetailFragment<span class="token punctuation">"</span></span>        <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>androidx.appcompat.widget.LinearLayoutCompat</span><span class="token punctuation">></span></span></code></pre><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- fragment_workout_detail.xml --></span><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>androidx.constraintlayout.widget.ConstraintLayout</span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>app</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res-auto<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- TODO: Update blank fragment layout --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextView</span>        <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/Title_View<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_marginStart</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>16dp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_marginTop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>42dp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>textSize</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>34dp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintStart_toStartOf</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintTop_toTopOf</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextView</span>        <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/Description_View<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_marginStart</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>16dp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_marginTop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>19dp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>26dp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintStart_toStartOf</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintTop_toBottomOf</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/Title_View<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>androidx.constraintlayout.widget.ConstraintLayout</span><span class="token punctuation">></span></span></code></pre><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- layout-large/activity_main.xml --></span><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>androidx.appcompat.widget.LinearLayoutCompat</span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>orientation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>horizontal<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fragment</span>        <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/list_frag<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.example.fragment.WorkoutListFragment<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_weight</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span>              <span class="token attr-name">&lt;!--</span> <span class="token attr-name"><span class="token namespace">这个fragment在屏幕上占的比例2:</span>3</span> <span class="token attr-name">--</span><span class="token punctuation">></span></span>        android:layout_width="0dp"        android:layout_height="match_parent"        />    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>FrameLayout</span>        <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/fragment_container<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.example.fragment.WorkoutDetailFragment<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_weight</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>3<span class="token punctuation">"</span></span>                 <span class="token attr-name">&lt;!--</span> <span class="token attr-name"><span class="token namespace">这个fragment在屏幕上占的比例2:</span>3</span> <span class="token attr-name">--</span><span class="token punctuation">></span></span>        android:layout_width="0dp"        android:layout_height="match_parent"        /><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>androidx.appcompat.widget.LinearLayoutCompat</span><span class="token punctuation">></span></span></code></pre><h2 id="java-逻辑编辑"><a class="markdownIt-Anchor" href="#java-逻辑编辑"></a> Java 逻辑编辑</h2><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//MainActivity.java</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainActivity</span> <span class="token keyword">extends</span> <span class="token class-name">AppCompatActivity</span> <span class="token keyword">implements</span> <span class="token class-name">WorkoutListFragment<span class="token punctuation">.</span>Listener</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token class-name">Bundle</span> savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_main<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">itemClicked</span><span class="token punctuation">(</span><span class="token keyword">long</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">View</span> fragmentContainer <span class="token operator">=</span> <span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>fragment_container<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>fragmentContainer <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//fragmentContainer是为了适配fragment的容器</span>            <span class="token class-name">WorkoutDetailFragment</span> details <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WorkoutDetailFragment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">FragmentTransaction</span> ft <span class="token operator">=</span> <span class="token function">getSupportFragmentManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">beginTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            details<span class="token punctuation">.</span><span class="token function">setWorkoutId</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//?</span>            ft<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>fragment_container<span class="token punctuation">,</span> details<span class="token punctuation">)</span><span class="token punctuation">;</span>            ft<span class="token punctuation">.</span><span class="token function">setTransition</span><span class="token punctuation">(</span><span class="token class-name">FragmentTransaction</span><span class="token punctuation">.</span>TRANSIT_FRAGMENT_FADE<span class="token punctuation">)</span><span class="token punctuation">;</span>            ft<span class="token punctuation">.</span><span class="token function">addToBackStack</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ft<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//如果是手机的话，正常情况下就只有这三句话</span>            <span class="token class-name">Intent</span> intent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token class-name">DetailActivity</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            intent<span class="token punctuation">.</span><span class="token function">putExtra</span><span class="token punctuation">(</span><span class="token class-name">DetailActivity</span><span class="token punctuation">.</span>EXTRA_WORKOUT_ID<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">startActivity</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//DetailActivity.java</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DetailActivity</span> <span class="token keyword">extends</span> <span class="token class-name">AppCompatActivity</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> EXTRA_WORKOUT_ID <span class="token operator">=</span> <span class="token string">"id"</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token class-name">Bundle</span> savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_detail<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">WorkoutDetailFragment</span> frag <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">WorkoutDetailFragment</span><span class="token punctuation">)</span> <span class="token function">getSupportFragmentManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findFragmentById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>fragment_workout<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> workoutID <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token function">getIntent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getExtras</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>EXTRA_WORKOUT_ID<span class="token punctuation">)</span><span class="token punctuation">;</span>        frag<span class="token punctuation">.</span><span class="token function">setWorkoutId</span><span class="token punctuation">(</span>workoutID<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//Detail.java</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Workout</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> description<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Workout</span><span class="token punctuation">[</span><span class="token punctuation">]</span> workouts <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">new</span> <span class="token class-name">Workout</span><span class="token punctuation">(</span><span class="token string">"Title 1"</span><span class="token punctuation">,</span> <span class="token string">"Description 1"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">new</span> <span class="token class-name">Workout</span><span class="token punctuation">(</span><span class="token string">"Title 2"</span><span class="token punctuation">,</span> <span class="token string">"Description 2"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">new</span> <span class="token class-name">Workout</span><span class="token punctuation">(</span><span class="token string">"Title 3"</span><span class="token punctuation">,</span> <span class="token string">"Description 3"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">new</span> <span class="token class-name">Workout</span><span class="token punctuation">(</span><span class="token string">"Title 4"</span><span class="token punctuation">,</span> <span class="token string">"Description 4"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Workout</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> description<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>description <span class="token operator">=</span> description<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> description<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//WorkoutDetailFragment.java</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WorkoutDetailFragment</span> <span class="token keyword">extends</span> <span class="token class-name">Fragment</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> workoutId<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">View</span> <span class="token function">onCreateView</span><span class="token punctuation">(</span><span class="token class-name">LayoutInflater</span> inflater<span class="token punctuation">,</span> <span class="token class-name">ViewGroup</span> container<span class="token punctuation">,</span>                             <span class="token class-name">Bundle</span> savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// Inflate the layout for this fragment</span>        <span class="token keyword">return</span> inflater<span class="token punctuation">.</span><span class="token function">inflate</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>layout<span class="token punctuation">.</span>fragment_workout_detail<span class="token punctuation">,</span> container<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">View</span> view <span class="token operator">=</span> <span class="token function">getView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>view<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">TextView</span> title <span class="token operator">=</span> view<span class="token punctuation">.</span><span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>Title_View<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Workout</span> workout <span class="token operator">=</span> <span class="token class-name">Workout</span><span class="token punctuation">.</span>workouts<span class="token punctuation">[</span>workoutId<span class="token punctuation">]</span><span class="token punctuation">;</span>            title<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>workout<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">TextView</span> description<span class="token operator">=</span> view<span class="token punctuation">.</span><span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>Description_View<span class="token punctuation">)</span><span class="token punctuation">;</span>            description<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>workout<span class="token punctuation">.</span><span class="token function">getDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setWorkoutId</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>workoutId <span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//WorkoutListFragment.java</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WorkoutListFragment</span> <span class="token keyword">extends</span> <span class="token class-name">ListFragment</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> <span class="token keyword">interface</span> <span class="token class-name">Listener</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">void</span> <span class="token function">itemClicked</span><span class="token punctuation">(</span><span class="token keyword">long</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token class-name">Listener</span> listener<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">View</span> <span class="token function">onCreateView</span><span class="token punctuation">(</span><span class="token class-name">LayoutInflater</span> inflater<span class="token punctuation">,</span> <span class="token class-name">ViewGroup</span> container<span class="token punctuation">,</span> <span class="token class-name">Bundle</span> savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> names <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token class-name">Workout</span><span class="token punctuation">.</span>workouts<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> names<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            names<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Workout</span><span class="token punctuation">.</span>workouts<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">ArrayAdapter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> adapter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayAdapter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>inflater<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name"><span class="token namespace">android<span class="token punctuation">.</span></span>R</span><span class="token punctuation">.</span>layout<span class="token punctuation">.</span>simple_list_item_1<span class="token punctuation">,</span> names<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setListAdapter</span><span class="token punctuation">(</span>adapter<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreateView</span><span class="token punctuation">(</span>inflater<span class="token punctuation">,</span> container<span class="token punctuation">,</span> savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onAttach</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onAttach</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>listener <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Listener</span><span class="token punctuation">)</span> context<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onListItemClick</span><span class="token punctuation">(</span><span class="token class-name">ListView</span> listView<span class="token punctuation">,</span> <span class="token class-name">View</span> itemView<span class="token punctuation">,</span> <span class="token keyword">int</span> position<span class="token punctuation">,</span> <span class="token keyword">long</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>listener <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            listener<span class="token punctuation">.</span><span class="token function">itemClicked</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="kotlin-逻辑编辑"><a class="markdownIt-Anchor" href="#kotlin-逻辑编辑"></a> Kotlin 逻辑编辑</h2><pre class="language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">//MainActivity.kt</span><span class="token keyword">class</span> MainActivity <span class="token operator">:</span> <span class="token function">AppCompatActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> WorkoutListFragment<span class="token punctuation">.</span><span class="token function">Listener</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token operator">:</span> Bundle<span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_main<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">itemClicked</span><span class="token punctuation">(</span>id<span class="token operator">:</span> Long<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">val</span> fragmentContainer <span class="token operator">=</span> findViewById<span class="token operator">&lt;</span>View<span class="token operator">></span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>fragment_container<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>fragmentContainer <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">val</span> details <span class="token operator">=</span> <span class="token function">WorkoutDetailFragment</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">val</span> ft <span class="token operator">=</span> supportFragmentManager<span class="token punctuation">.</span><span class="token function">beginTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            details<span class="token punctuation">.</span><span class="token function">setWorkoutId</span><span class="token punctuation">(</span>id<span class="token punctuation">.</span><span class="token function">toInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//?</span>            ft<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>fragment_container<span class="token punctuation">,</span> details<span class="token punctuation">)</span>            ft<span class="token punctuation">.</span><span class="token function">setTransition</span><span class="token punctuation">(</span>FragmentTransaction<span class="token punctuation">.</span>TRANSIT_FRAGMENT_FADE<span class="token punctuation">)</span>            ft<span class="token punctuation">.</span><span class="token function">addToBackStack</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>            ft<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">val</span> intent <span class="token operator">=</span> <span class="token function">Intent</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> DetailActivity<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">.</span>java<span class="token punctuation">)</span>            intent<span class="token punctuation">.</span><span class="token function">putExtra</span><span class="token punctuation">(</span>DetailActivity<span class="token punctuation">.</span>EXTRA_WORKOUT_ID<span class="token punctuation">,</span> id<span class="token punctuation">.</span><span class="token function">toInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token function">startActivity</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">//DetailActivity.kt</span><span class="token keyword">class</span> DetailActivity <span class="token operator">:</span> <span class="token function">AppCompatActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token operator">:</span> Bundle<span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_detail<span class="token punctuation">)</span>        <span class="token keyword">val</span> frag<span class="token operator">:</span> WorkoutDetailFragment<span class="token operator">?</span> <span class="token operator">=</span>            supportFragmentManager<span class="token punctuation">.</span><span class="token function">findFragmentById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>fragment_workout<span class="token punctuation">)</span> <span class="token keyword">as</span> WorkoutDetailFragment<span class="token operator">?</span>        <span class="token keyword">val</span> workoutID <span class="token operator">=</span> intent<span class="token punctuation">.</span>extras<span class="token operator">!!</span><span class="token punctuation">[</span>EXTRA_WORKOUT_ID<span class="token punctuation">]</span> <span class="token keyword">as</span> Int        frag<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">setWorkoutId</span><span class="token punctuation">(</span>workoutID<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">companion</span> <span class="token keyword">object</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> <span class="token keyword">val</span> EXTRA_WORKOUT_ID <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">"id"</span></span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">//Workout.kt</span><span class="token keyword">class</span> Workout <span class="token keyword">private</span> <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token keyword">private</span> <span class="token keyword">val</span> name<span class="token operator">:</span> String<span class="token punctuation">,</span> <span class="token keyword">private</span> <span class="token keyword">val</span> description<span class="token operator">:</span> String<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> String <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> name    <span class="token punctuation">&#125;</span>    <span class="token annotation builtin">@JvmName</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"GetDescription"</span></span><span class="token punctuation">)</span>    <span class="token keyword">fun</span> <span class="token function">getDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> String <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> description    <span class="token punctuation">&#125;</span>    <span class="token annotation builtin">@JvmName</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"GetName"</span></span><span class="token punctuation">)</span>    <span class="token keyword">fun</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> String <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> name    <span class="token punctuation">&#125;</span>    <span class="token keyword">companion</span> <span class="token keyword">object</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">val</span> workouts <span class="token operator">=</span> <span class="token function">arrayOf</span><span class="token punctuation">(</span>            <span class="token function">Workout</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"Title 1"</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">"Description 1"</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token function">Workout</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"Title 2"</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">"Description 2"</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token function">Workout</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"Title 3"</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">"Description 3"</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token function">Workout</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"Title 4"</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">"Description 4"</span></span><span class="token punctuation">)</span>        <span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">//WorkoutDetailFragment.kt</span><span class="token keyword">class</span> WorkoutDetailFragment <span class="token operator">:</span> <span class="token function">Fragment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">var</span> workoutId <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onCreateView</span><span class="token punctuation">(</span>        inflater<span class="token operator">:</span> LayoutInflater<span class="token punctuation">,</span> container<span class="token operator">:</span> ViewGroup<span class="token operator">?</span><span class="token punctuation">,</span>        savedInstanceState<span class="token operator">:</span> Bundle<span class="token operator">?</span>    <span class="token punctuation">)</span><span class="token operator">:</span> View<span class="token operator">?</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// Inflate the layout for this fragment</span>        <span class="token keyword">return</span> inflater<span class="token punctuation">.</span><span class="token function">inflate</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>fragment_workout_detail<span class="token punctuation">,</span> container<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">val</span> view <span class="token operator">=</span> view        <span class="token keyword">if</span> <span class="token punctuation">(</span>view <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">val</span> title <span class="token operator">=</span> view<span class="token punctuation">.</span>findViewById<span class="token operator">&lt;</span>TextView<span class="token operator">></span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>Title_View<span class="token punctuation">)</span>            <span class="token keyword">val</span> workout<span class="token operator">:</span> Workout <span class="token operator">=</span> Workout<span class="token punctuation">.</span>workouts<span class="token punctuation">[</span>workoutId<span class="token punctuation">]</span>            title<span class="token punctuation">.</span>text <span class="token operator">=</span> workout<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">val</span> description <span class="token operator">=</span> view<span class="token punctuation">.</span>findViewById<span class="token operator">&lt;</span>TextView<span class="token operator">></span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>Description_View<span class="token punctuation">)</span>            description<span class="token punctuation">.</span>text <span class="token operator">=</span> workout<span class="token punctuation">.</span><span class="token function">getDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">fun</span> <span class="token function">setWorkoutId</span><span class="token punctuation">(</span>i<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        workoutId <span class="token operator">=</span> i    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">//WorkoutListFragment.kt</span><span class="token keyword">class</span> WorkoutListFragment <span class="token operator">:</span> <span class="token function">ListFragment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">internal</span> <span class="token keyword">interface</span> Listener <span class="token punctuation">&#123;</span>        <span class="token keyword">fun</span> <span class="token function">itemClicked</span><span class="token punctuation">(</span>id<span class="token operator">:</span> Long<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">var</span> listener<span class="token operator">:</span> Listener<span class="token operator">?</span> <span class="token operator">=</span> <span class="token keyword">null</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onCreateView</span><span class="token punctuation">(</span>        inflater<span class="token operator">:</span> LayoutInflater<span class="token punctuation">,</span>        container<span class="token operator">:</span> ViewGroup<span class="token operator">?</span><span class="token punctuation">,</span>        savedInstanceState<span class="token operator">:</span> Bundle<span class="token operator">?</span>    <span class="token punctuation">)</span><span class="token operator">:</span> View<span class="token operator">?</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">val</span> names <span class="token operator">=</span> arrayOfNulls<span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span>Workout<span class="token punctuation">.</span>workouts<span class="token punctuation">.</span>size<span class="token punctuation">)</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token keyword">in</span> names<span class="token punctuation">.</span>indices<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            names<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> Workout<span class="token punctuation">.</span>workouts<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">val</span> adapter <span class="token operator">=</span> <span class="token function">ArrayAdapter</span><span class="token punctuation">(</span>inflater<span class="token punctuation">.</span>context<span class="token punctuation">,</span> R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>simple_list_item_1<span class="token punctuation">,</span> names<span class="token punctuation">)</span>        listAdapter <span class="token operator">=</span> adapter        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreateView</span><span class="token punctuation">(</span>inflater<span class="token punctuation">,</span> container<span class="token punctuation">,</span> savedInstanceState<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onAttach</span><span class="token punctuation">(</span>context<span class="token operator">:</span> Context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onAttach</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span>        listener <span class="token operator">=</span> context <span class="token keyword">as</span> Listener    <span class="token punctuation">&#125;</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onListItemClick</span><span class="token punctuation">(</span>listView<span class="token operator">:</span> ListView<span class="token punctuation">,</span> itemView<span class="token operator">:</span> View<span class="token punctuation">,</span> position<span class="token operator">:</span> Int<span class="token punctuation">,</span> id<span class="token operator">:</span> Long<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>listener <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            listener<span class="token operator">!!</span><span class="token punctuation">.</span><span class="token function">itemClicked</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><hr><p>上一篇：<a href="http://tonylsx.top/2022/11/21/Android-Studio-6/">Android Studio 开发 6 | Tony</a></p><p>下一篇：马上就好了…</p>]]></content>
      
      
      <categories>
          
          <category> Android Studio </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android Studio </tag>
            
            <tag> Java </tag>
            
            <tag> Kotlin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android Studio 开发 6</title>
      <link href="/2022/11/21/Android-Studio-6/"/>
      <url>/2022/11/21/Android-Studio-6/</url>
      
        <content type="html"><![CDATA[<h2 id="任务目标"><a class="markdownIt-Anchor" href="#任务目标"></a> 任务目标</h2><p>​点击菜单栏右上角的“+号”按钮即可进入新的页面，在新的页面中点击菜单栏左上角“返回”按钮即可返回主界面。</p><p><img src="/2022/11/21/Android-Studio-6/image-20221121181019527.png" alt="image-20221121181019527" loading="lazy"></p><h2 id="menu-bar设置步骤"><a class="markdownIt-Anchor" href="#menu-bar设置步骤"></a> Menu Bar设置步骤</h2><h5 id="1-删除自带的basic-app-bar"><a class="markdownIt-Anchor" href="#1-删除自带的basic-app-bar"></a> 1. 删除自带的basic app bar</h5><p>在<code>res-&gt;values-&gt;themes.xml</code>下，将<code>parent</code>值中的<code>DarkActionBar</code>改为<code>NoActionBar</code>.</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resources</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>tools</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.android.com/tools<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- Base application theme. --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Theme.MenuBar<span class="token punctuation">"</span></span>        <span class="token attr-name">parent</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Theme.MaterialComponents.DayNight.NoActionBar<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- Primary brand color. --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>...</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>...</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resources</span><span class="token punctuation">></span></span></code></pre><h5 id="2-创建自己的tool-bar"><a class="markdownIt-Anchor" href="#2-创建自己的tool-bar"></a> 2. 创建自己的Tool Bar</h5><p>在<code>res</code>文件夹下新建<code>Android Resource Directory</code>，将<code>Resource type</code>选定为<code>menu</code>类型，文件夹名字随意。</p><p><img src="/2022/11/21/Android-Studio-6/image-20221121182649615.png" alt="image-20221121182649615" loading="lazy"></p><p><img src="/2022/11/21/Android-Studio-6/image-20221121182911410.png" alt="image-20221121182911410" loading="lazy"></p><p>Android Studio有可能不显示用户自行创建的文件夹，请将左上角的Android目录列表转换为工程目录列表即可。</p><p><img src="/2022/11/21/Android-Studio-6/image-20221121230804933.png" alt="image-20221121230804933" loading="lazy"></p><p>创建好文件夹之后，在该<code>menu</code>类型的文件夹下创建一个<code>Menu Resource File</code>文件，名字随意。</p><p><img src="/2022/11/21/Android-Studio-6/image-20221121183031659.png" alt="image-20221121183031659" loading="lazy"></p><h5 id="3-添加toolbar到layout"><a class="markdownIt-Anchor" href="#3-添加toolbar到layout"></a> 3. 添加Toolbar到layout</h5><p>可以根据需要高度自行定制Toolbar的颜色、样式、大小等。</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- activity_main.xml --></span><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>androidx.constraintlayout.widget.ConstraintLayout</span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>app</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res-auto<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>tools</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.android.com/tools<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">tools:</span>context</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>.MainActivity<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>androidx.appcompat.widget.Toolbar</span>        <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/toolbar<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0dp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>?attr/actionBarSize<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>background</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>?attr/colorPrimary<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>theme</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@style/ThemeOverlay.AppCompat.Dark.ActionBar<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintEnd_toEndOf</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintStart_toStartOf</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintTop_toTopOf</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>androidx.constraintlayout.widget.ConstraintLayout</span><span class="token punctuation">></span></span></code></pre><p>在<code>activity_order.xml</code>中，添加<code>include</code>的方法，可以实现对<code>layout</code>的覆用。这样可以省去重写一遍<code>ToolBar</code>的参数喽。</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- activity_order.xml --></span><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>androidx.constraintlayout.widget.ConstraintLayout</span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>tools</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.android.com/tools<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">tools:</span>context</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>.OrderActivity<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">layout</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@layout/activity_main<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>androidx.constraintlayout.widget.ConstraintLayout</span><span class="token punctuation">></span></span></code></pre><h5 id="4-配置自己的tool-bar"><a class="markdownIt-Anchor" href="#4-配置自己的tool-bar"></a> 4. 配置自己的Tool Bar</h5><p>在<code>toolbar.xml</code>文件中(文件名或许与我不同)配置自己希望的Actions，如返回按钮和添加按钮。</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- toolbar.xml --></span><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>menu</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>app</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res-auto<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 这个item是右上角的“+”按钮 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span> <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/action_create_order<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@string/create_order_title<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>icon</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@drawable/ic_add_white_24dp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>orderInCategory</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">app:</span>showAsAction</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ifRoom<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment">&lt;!-- 这个item是右上角的“share”按钮 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span>        <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/action_share<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@string/action_share<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>orderInCategory</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">app:</span>showAsAction</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ifRoom<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">app:</span>actionProviderClass</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>androidx.appcompat.widget.ShareActionProvider<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>menu</span><span class="token punctuation">></span></span></code></pre><h2 id="java逻辑编辑"><a class="markdownIt-Anchor" href="#java逻辑编辑"></a> Java逻辑编辑</h2><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//MainActivity.java</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainActivity</span> <span class="token keyword">extends</span> <span class="token class-name">AppCompatActivity</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">ShareActionProvider</span> shareActionProvider<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token class-name">Bundle</span> savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_main<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">Toolbar</span> toolbar <span class="token operator">=</span> <span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>toolbar<span class="token punctuation">)</span><span class="token punctuation">;</span>        toolbar<span class="token punctuation">.</span><span class="token function">setTitle</span><span class="token punctuation">(</span><span class="token string">"Main menu"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setSupportActionBar</span><span class="token punctuation">(</span>toolbar<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">onCreateOptionsMenu</span><span class="token punctuation">(</span><span class="token class-name">Menu</span> menu<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">getMenuInflater</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">inflate</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>menu<span class="token punctuation">.</span>toolbar<span class="token punctuation">,</span> menu<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">MenuItem</span> menuItem <span class="token operator">=</span> menu<span class="token punctuation">.</span><span class="token function">findItem</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>action_share<span class="token punctuation">)</span><span class="token punctuation">;</span>        shareActionProvider <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ShareActionProvider</span><span class="token punctuation">)</span> <span class="token class-name">MenuItemCompat</span><span class="token punctuation">.</span><span class="token function">getActionProvider</span><span class="token punctuation">(</span>menuItem<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setShareActionIntent</span><span class="token punctuation">(</span><span class="token string">"Tony"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreateOptionsMenu</span><span class="token punctuation">(</span>menu<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">setShareActionIntent</span><span class="token punctuation">(</span><span class="token class-name">String</span> text<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Intent</span> intent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token class-name">Intent</span><span class="token punctuation">.</span>ACTION_SEND<span class="token punctuation">)</span><span class="token punctuation">;</span>        intent<span class="token punctuation">.</span><span class="token function">setType</span><span class="token punctuation">(</span><span class="token string">"text/plain"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        intent<span class="token punctuation">.</span><span class="token function">putExtra</span><span class="token punctuation">(</span><span class="token class-name">Intent</span><span class="token punctuation">.</span>EXTRA_TEXT<span class="token punctuation">,</span> text<span class="token punctuation">)</span><span class="token punctuation">;</span>        shareActionProvider<span class="token punctuation">.</span><span class="token function">setShareIntent</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">onOptionsItemSelected</span><span class="token punctuation">(</span><span class="token class-name">MenuItem</span> item<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">getItemId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">case</span> <span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>action_create_order<span class="token operator">:</span>                <span class="token comment">//Code to run when the Create Order item is clicked</span>                <span class="token class-name">Intent</span> intent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token class-name">OrderActivity</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">startActivity</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token keyword">default</span><span class="token operator">:</span>                <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onOptionsItemSelected</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//OrderActivity.java</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderActivity</span> <span class="token keyword">extends</span> <span class="token class-name">AppCompatActivity</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token class-name">Bundle</span> savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_order<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">Toolbar</span> toolbar <span class="token operator">=</span> <span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>toolbar<span class="token punctuation">)</span><span class="token punctuation">;</span>        toolbar<span class="token punctuation">.</span><span class="token function">setTitle</span><span class="token punctuation">(</span><span class="token string">"Order Menu"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setSupportActionBar</span><span class="token punctuation">(</span>toolbar<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//Add return key &lt;-</span>        <span class="token class-name">ActionBar</span> actionBar <span class="token operator">=</span> <span class="token function">getSupportActionBar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        actionBar<span class="token punctuation">.</span><span class="token function">setDisplayHomeAsUpEnabled</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>在<code>AndroidMainfest.xml</code>中应当添加<code>parentActivityName</code>变量，应在子Activity中加入父Activity的名字，如下图所示，如果不添加则无法通过单机返回键返回父页面。</p><p><img src="/2022/11/21/Android-Studio-6/image-20221121232452816.png" alt="image-20221121232452816" loading="lazy"></p><h2 id="kotlin-逻辑编辑"><a class="markdownIt-Anchor" href="#kotlin-逻辑编辑"></a> Kotlin 逻辑编辑</h2><pre class="language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">//MainActivity.kt</span><span class="token keyword">class</span> MainActivity <span class="token operator">:</span> <span class="token function">AppCompatActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">var</span> shareActionProvider<span class="token operator">:</span> ShareActionProvider<span class="token operator">?</span> <span class="token operator">=</span> <span class="token keyword">null</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token operator">:</span> Bundle<span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_main<span class="token punctuation">)</span>        <span class="token keyword">val</span> toolbar <span class="token operator">=</span> findViewById<span class="token operator">&lt;</span>Toolbar<span class="token operator">></span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>toolbar<span class="token punctuation">)</span>        toolbar<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">"Main menu"</span></span>        <span class="token function">setSupportActionBar</span><span class="token punctuation">(</span>toolbar<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onCreateOptionsMenu</span><span class="token punctuation">(</span>menu<span class="token operator">:</span> Menu<span class="token punctuation">)</span><span class="token operator">:</span> Boolean <span class="token punctuation">&#123;</span>        menuInflater<span class="token punctuation">.</span><span class="token function">inflate</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>menu<span class="token punctuation">.</span>toolbar<span class="token punctuation">,</span> menu<span class="token punctuation">)</span>        <span class="token keyword">val</span> menuItem <span class="token operator">=</span> menu<span class="token punctuation">.</span><span class="token function">findItem</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>action_share<span class="token punctuation">)</span>        shareActionProvider <span class="token operator">=</span> MenuItemCompat<span class="token punctuation">.</span><span class="token function">getActionProvider</span><span class="token punctuation">(</span>menuItem<span class="token punctuation">)</span> <span class="token keyword">as</span> ShareActionProvider<span class="token operator">?</span>        <span class="token function">setShareActionIntent</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"Tony"</span></span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreateOptionsMenu</span><span class="token punctuation">(</span>menu<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">fun</span> <span class="token function">setShareActionIntent</span><span class="token punctuation">(</span>text<span class="token operator">:</span> String<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">val</span> intent <span class="token operator">=</span> <span class="token function">Intent</span><span class="token punctuation">(</span>Intent<span class="token punctuation">.</span>ACTION_SEND<span class="token punctuation">)</span>        intent<span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">"text/plain"</span></span>        intent<span class="token punctuation">.</span><span class="token function">putExtra</span><span class="token punctuation">(</span>Intent<span class="token punctuation">.</span>EXTRA_TEXT<span class="token punctuation">,</span> text<span class="token punctuation">)</span>        shareActionProvider<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">setShareIntent</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onOptionsItemSelected</span><span class="token punctuation">(</span>item<span class="token operator">:</span> MenuItem<span class="token punctuation">)</span><span class="token operator">:</span> Boolean <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">when</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span>itemId<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>action_create_order <span class="token operator">-></span> <span class="token punctuation">&#123;</span>                <span class="token comment">//Code to run when the Create Order item is clicked</span>                <span class="token keyword">val</span> intent <span class="token operator">=</span> <span class="token function">Intent</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> OrderActivity<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">.</span>java<span class="token punctuation">)</span>                <span class="token function">startActivity</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span>                <span class="token boolean">true</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span> <span class="token operator">-></span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onOptionsItemSelected</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">class</span> OrderActivity <span class="token operator">:</span> <span class="token function">AppCompatActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token operator">:</span> Bundle<span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_order<span class="token punctuation">)</span>        <span class="token keyword">val</span> toolbar <span class="token operator">=</span> findViewById<span class="token operator">&lt;</span>Toolbar<span class="token operator">></span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>toolbar<span class="token punctuation">)</span>        toolbar<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">"Order Menu"</span></span>        <span class="token function">setSupportActionBar</span><span class="token punctuation">(</span>toolbar<span class="token punctuation">)</span>        <span class="token comment">//return key &lt;-</span>        <span class="token keyword">val</span> actionBar <span class="token operator">=</span> supportActionBar        actionBar<span class="token operator">!!</span><span class="token punctuation">.</span><span class="token function">setDisplayHomeAsUpEnabled</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>同理，仍然需在<code>AndroidMainfest</code>中添加以下代码：</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activity</span>    <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>.OrderActivity<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>parentActivityName</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>.MainActivity<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>exported</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta-data</span>        <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>android.app.lib_name<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activity</span><span class="token punctuation">></span></span></code></pre><hr><p>上一篇：<a href="http://tonylsx.top/2022/10/11/Android-Studio-4/">Android Studio开发 5 | Tony </a></p><p>下一篇：<a href="http://tonylsx.top/2022/11/25/Android-Studio-7/">Android Studio开发 7 | Tony</a></p>]]></content>
      
      
      <categories>
          
          <category> Android Studio </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android Studio </tag>
            
            <tag> Java </tag>
            
            <tag> Kotlin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Socket网络编程 4——多线程</title>
      <link href="/2022/11/11/socket-multi-1/"/>
      <url>/2022/11/11/socket-multi-1/</url>
      
        <content type="html"><![CDATA[<h2 id="迭代服务器与并发服务器的区别"><a class="markdownIt-Anchor" href="#迭代服务器与并发服务器的区别"></a> 迭代服务器与并发服务器的区别</h2><p><img src="/2022/11/11/socket-multi-1/image-20221111145514251.png" alt="image-20221111145514251" loading="lazy"></p><h2 id="windows-server"><a class="markdownIt-Anchor" href="#windows-server"></a> Windows Server</h2><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression"><span class="token function">comment</span><span class="token punctuation">(</span>lib<span class="token punctuation">,</span> </span><span class="token string">"ws2_32.lib"</span><span class="token expression"><span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;thread></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;winsock2.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;windows.h></span></span>using namespace std<span class="token punctuation">;</span>SOCKET s<span class="token punctuation">;</span>sockaddr_in ss<span class="token punctuation">;</span><span class="token comment">//SOCKET fd;</span><span class="token keyword">void</span> <span class="token function">Windows_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    WORD sockVersion <span class="token operator">=</span> <span class="token function">MAKEWORD</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    WSADATA wsdata<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">WSAStartup</span><span class="token punctuation">(</span>sockVersion<span class="token punctuation">,</span> <span class="token operator">&amp;</span>wsdata<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        cerr <span class="token operator">&lt;&lt;</span> <span class="token string">"Initialize Error!"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">create_socket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    s <span class="token operator">=</span> <span class="token function">socket</span><span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span> SOCK_STREAM<span class="token punctuation">,</span> IPPROTO_TCP<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">==</span> INVALID_SOCKET<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        cerr <span class="token operator">&lt;&lt;</span> <span class="token string">"socket Error!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ss<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>ss<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ss<span class="token punctuation">.</span>sin_family <span class="token operator">=</span> AF_INET<span class="token punctuation">;</span><span class="token comment">//IPv4</span>    ss<span class="token punctuation">.</span>sin_port <span class="token operator">=</span> <span class="token function">htons</span><span class="token punctuation">(</span><span class="token number">6789</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//port No.</span>    ss<span class="token punctuation">.</span>sin_addr<span class="token punctuation">.</span>s_addr <span class="token operator">=</span> <span class="token function">inet_addr</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">bind</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token punctuation">(</span>sockaddr<span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>ss<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>ss<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> SOCKET_ERROR<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        cerr<span class="token operator">&lt;&lt;</span><span class="token string">"Bind Error!"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">listen</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        cerr<span class="token operator">&lt;&lt;</span><span class="token string">"Listen Error!"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    cout<span class="token operator">&lt;&lt;</span><span class="token string">"Server is running..."</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">accept_socket</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>fd<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    sockaddr_in clnt_addr<span class="token punctuation">;</span>    <span class="token keyword">int</span> clnt_addr_size <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>clnt_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>    fd <span class="token operator">=</span> <span class="token function">accept</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token punctuation">(</span>sockaddr<span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>clnt_addr<span class="token punctuation">,</span> <span class="token operator">&amp;</span>clnt_addr_size<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>fd <span class="token operator">==</span> INVALID_SOCKET<span class="token punctuation">)</span>        cerr <span class="token operator">&lt;&lt;</span> <span class="token string">"Accept Error"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">else</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"Connected to Server:"</span> <span class="token operator">&lt;&lt;</span> fd <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">thread_n</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    cout<span class="token operator">&lt;&lt;</span><span class="token string">"Start thread "</span><span class="token operator">&lt;&lt;</span>n<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    string msg <span class="token operator">=</span> <span class="token string">"Hi, Client "</span> <span class="token operator">+</span> <span class="token function">to_string</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">send</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> msg<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> msg<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Sending:\" "</span> <span class="token operator">&lt;&lt;</span> msg <span class="token operator">&lt;&lt;</span> <span class="token string">"\" to Client..."</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>true<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">char</span> message<span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">memset</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> jud <span class="token operator">=</span> <span class="token function">recv</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> message<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>jud <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            cerr<span class="token operator">&lt;&lt;</span><span class="token string">"Receive Error!!!"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>            cout<span class="token operator">&lt;&lt;</span><span class="token string">"Did you close the Window?"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> <span class="token string">"quit\n"</span><span class="token punctuation">)</span> <span class="token operator">==</span> false<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"  Bye-bye "</span> <span class="token operator">&lt;&lt;</span> n <span class="token operator">&lt;&lt;</span> <span class="token string">"!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"  Received by Client: "</span> <span class="token operator">&lt;&lt;</span> message <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Clients "</span> <span class="token operator">&lt;&lt;</span> n <span class="token operator">&lt;&lt;</span> <span class="token string">" request..."</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    cout<span class="token operator">&lt;&lt;</span><span class="token string">"Finish thread "</span> <span class="token operator">&lt;&lt;</span> n <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">Windows_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">create_socket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    thread threads<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> fd <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token function">accept_socket</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>        threads<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">thread</span><span class="token punctuation">(</span>thread_n<span class="token punctuation">,</span> fd<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//threads[n].join();</span>        threads<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">detach</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        n<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">10</span><span class="token punctuation">)</span>            n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">closesocket</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">WSACleanup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="python-server"><a class="markdownIt-Anchor" href="#python-server"></a> Python Server</h2><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> socket<span class="token keyword">import</span> threading<span class="token keyword">import</span> timeclients <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">new_thread</span><span class="token punctuation">(</span>sock<span class="token punctuation">,</span> addr<span class="token punctuation">,</span> q<span class="token punctuation">)</span><span class="token punctuation">:</span>    msg <span class="token operator">=</span> <span class="token string">"Hello, "</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>addr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"! You've joined the group."</span>    sock<span class="token punctuation">.</span>send<span class="token punctuation">(</span>msg<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    temp_msg <span class="token operator">=</span> <span class="token string">"Client "</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" join the group"</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>temp_msg<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Now there are "</span><span class="token punctuation">,</span> threading<span class="token punctuation">.</span>active_count<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">" people in the group!"</span><span class="token punctuation">)</span>    <span class="token keyword">while</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>        msg <span class="token operator">=</span> sock<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> msg <span class="token operator">==</span> <span class="token string">"quit"</span><span class="token punctuation">:</span>            temp_msg <span class="token operator">=</span> <span class="token string">"Bye-bye"</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"!"</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>temp_msg<span class="token punctuation">)</span>  <span class="token comment"># (Id, port)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Now there are "</span><span class="token punctuation">,</span> threading<span class="token punctuation">.</span>active_count<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">" people in the group!"</span><span class="token punctuation">)</span>            <span class="token keyword">break</span>        <span class="token keyword">elif</span> msg <span class="token operator">==</span> <span class="token string">""</span><span class="token punctuation">:</span>            temp_msg <span class="token operator">=</span> addr <span class="token operator">+</span> <span class="token string">"has quit the group accidentally..."</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>temp_msg<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Now there are "</span><span class="token punctuation">,</span> threading<span class="token punctuation">.</span>active_count<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">" people in the group!"</span><span class="token punctuation">)</span>            <span class="token keyword">break</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            temp_msg <span class="token operator">=</span> <span class="token string">"    "</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>addr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">": "</span> <span class="token operator">+</span> msg            <span class="token keyword">print</span><span class="token punctuation">(</span>temp_msg<span class="token punctuation">)</span>    clients<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>sock<span class="token punctuation">)</span>    sock<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        s <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span>    <span class="token keyword">except</span> Exception<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Socket Error!"</span><span class="token punctuation">)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        s<span class="token punctuation">.</span>bind<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span> <span class="token number">7777</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> Exception<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Bind Error!"</span><span class="token punctuation">)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        s<span class="token punctuation">.</span>listen<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> Exception<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Listen Error!"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Server is running...'</span><span class="token punctuation">)</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            sock<span class="token punctuation">,</span> addr <span class="token operator">=</span> s<span class="token punctuation">.</span>accept<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">except</span> Exception<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Accept Error!"</span><span class="token punctuation">)</span>        clients<span class="token punctuation">.</span>append<span class="token punctuation">(</span>sock<span class="token punctuation">)</span>        t <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>new_thread<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>sock<span class="token punctuation">,</span> addr<span class="token punctuation">,</span> q<span class="token punctuation">,</span> <span class="token punctuation">)</span><span class="token punctuation">)</span>        t<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="运行结果"><a class="markdownIt-Anchor" href="#运行结果"></a> 运行结果</h2><p><img src="/2022/11/11/socket-multi-1/socket-multi-1%5Cimage-20221127201744608.png" alt="image-20221127201744608" loading="lazy"></p><hr><p>上一篇：</p>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Socket </tag>
            
            <tag> Client </tag>
            
            <tag> Server </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android Studio 开发 5</title>
      <link href="/2022/11/09/Android-Studio-5/"/>
      <url>/2022/11/09/Android-Studio-5/</url>
      
        <content type="html"><![CDATA[<h2 id="任务目标"><a class="markdownIt-Anchor" href="#任务目标"></a> 任务目标</h2><p>实现一个简单的饮品搜索应用，用户可以查看不同饮品的图片、名字和简介。</p><p><img src="/2022/11/09/Android-Studio-5/image-20221121161500306.png" alt="image-20221121161500306" loading="lazy"></p><h2 id="界面编辑"><a class="markdownIt-Anchor" href="#界面编辑"></a> 界面编辑</h2><p>这里需要三个界面，分别是<strong>主界面，饮品选择界面和饮品界面</strong>。</p><h4 id="activity_main-code"><a class="markdownIt-Anchor" href="#activity_main-code"></a> Activity_main Code</h4><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- activity_main.xml --></span><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>androidx.constraintlayout.widget.ConstraintLayout</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>app</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res-auto<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>tools</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.android.com/tools<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">tools:</span>context</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>.MainActivity<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ImageView</span>        <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/imageView<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintStart_toStartOf</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/list_options<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintTop_toTopOf</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">app:</span>srcCompat</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@drawable/starbuzz_logo<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ListView</span>        <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/list_options<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0dp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>471dp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_marginBottom</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1dp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>entries</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@array/options<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintBottom_toBottomOf</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintEnd_toEndOf</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintStart_toStartOf</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>androidx.constraintlayout.widget.ConstraintLayout</span><span class="token punctuation">></span></span></code></pre><h4 id="activity_main-sample"><a class="markdownIt-Anchor" href="#activity_main-sample"></a> Activity_main Sample</h4><img src="/2022/11/09/Android-Studio-5/image-20221109150451204.png" alt="image-20221109150451204" style="zoom:50%;" loading="lazy"><h4 id="activity_drink_category-code"><a class="markdownIt-Anchor" href="#activity_drink_category-code"></a> Activity_drink_category Code</h4><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- activity_drink_category.xml --></span><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>androidx.constraintlayout.widget.ConstraintLayout</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>app</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res-auto<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>tools</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.android.com/tools<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">tools:</span>context</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>.DrinkCategoryActivity<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ListView</span>        <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/list_drinks<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0dp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0dp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintBottom_toBottomOf</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintEnd_toEndOf</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintStart_toStartOf</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintTop_toTopOf</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>androidx.constraintlayout.widget.ConstraintLayout</span><span class="token punctuation">></span></span></code></pre><h4 id="activity_drink_category-sample"><a class="markdownIt-Anchor" href="#activity_drink_category-sample"></a> Activity_drink_category Sample</h4><p><img src="/2022/11/09/Android-Studio-5/image-20221109150911874.png" alt="image-20221109150911874" loading="lazy"></p><h4 id="activity_drink-code"><a class="markdownIt-Anchor" href="#activity_drink-code"></a> Activity_drink Code</h4><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- activity_drink.xml --></span><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>androidx.constraintlayout.widget.ConstraintLayout</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>app</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res-auto<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>tools</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.android.com/tools<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">tools:</span>context</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>.DrinkActivity<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextView</span>        <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/name<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>TextView<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintBottom_toBottomOf</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintEnd_toEndOf</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintStart_toStartOf</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintTop_toTopOf</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ImageView</span>        <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/photo<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_marginTop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>80dp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintEnd_toEndOf</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintStart_toStartOf</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintTop_toTopOf</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextView</span>        <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/description<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_marginTop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>63dp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_marginEnd</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1dp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>TextView<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintEnd_toEndOf</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/name<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintTop_toBottomOf</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/name<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>androidx.constraintlayout.widget.ConstraintLayout</span><span class="token punctuation">></span></span></code></pre><h4 id="activity_drink-sample"><a class="markdownIt-Anchor" href="#activity_drink-sample"></a> Activity_drink Sample</h4><p><img src="/2022/11/09/Android-Studio-5/image-20221109151131798.png" alt="image-20221109151131798" loading="lazy"></p><h2 id="java-逻辑编辑"><a class="markdownIt-Anchor" href="#java-逻辑编辑"></a> Java 逻辑编辑</h2><p>单独创建一个<code>Drink.java</code>文件来编写<code>Drink</code>类。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Drink</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> description<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> imageResourceID<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Drink</span><span class="token punctuation">[</span><span class="token punctuation">]</span> drinks <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">new</span> <span class="token class-name">Drink</span><span class="token punctuation">(</span><span class="token string">"Latte"</span><span class="token punctuation">,</span> <span class="token string">"Description of latte"</span><span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token punctuation">.</span>drawable<span class="token punctuation">.</span>latte<span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">new</span> <span class="token class-name">Drink</span><span class="token punctuation">(</span><span class="token string">"Cappuccino"</span><span class="token punctuation">,</span> <span class="token string">"Description of cappuccino"</span><span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token punctuation">.</span>drawable<span class="token punctuation">.</span>cappuccino<span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">new</span> <span class="token class-name">Drink</span><span class="token punctuation">(</span><span class="token string">"Filter"</span><span class="token punctuation">,</span> <span class="token string">"Description of Filter"</span><span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token punctuation">.</span>drawable<span class="token punctuation">.</span>filter<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Drink</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> description<span class="token punctuation">,</span> <span class="token keyword">int</span> imageResourceID<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>description <span class="token operator">=</span> description<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>imageResourceID <span class="token operator">=</span> imageResourceID<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> description<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getImageResourceID</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> imageResourceID<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>主界面Java中，值得注意的是，这里使用了<code>OnItemClickLister()</code>对<code>ListView</code>进行监听，比起只能对按钮进行操作的<code>OnClick()</code>函数，这种监听方式更加安全，难以被恶意攻击，且监听时Android能够更好的利用内存和进程，此外，<code>OnItemClickLister()</code>比<code>OnClick()</code>拥有更多的参数可供调用。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainActivity</span> <span class="token keyword">extends</span> <span class="token class-name">AppCompatActivity</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token class-name">Bundle</span> savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_main<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">AdapterView<span class="token punctuation">.</span>OnItemClickListener</span> itemClickListener <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AdapterView<span class="token punctuation">.</span>OnItemClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onItemClick</span><span class="token punctuation">(</span><span class="token class-name">AdapterView</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> parent<span class="token punctuation">,</span> <span class="token class-name">View</span> view<span class="token punctuation">,</span> <span class="token keyword">int</span> position<span class="token punctuation">,</span> <span class="token keyword">long</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>position <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>                <span class="token punctuation">&#123;</span>                    <span class="token class-name">Intent</span> intent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token class-name">MainActivity</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token class-name">DrinkCategoryActivity</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">startActivity</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token class-name">ListView</span> listView <span class="token operator">=</span> <span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>list_options<span class="token punctuation">)</span><span class="token punctuation">;</span>        listView<span class="token punctuation">.</span><span class="token function">setOnItemClickListener</span><span class="token punctuation">(</span>itemClickListener<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>接下来是饮品选择界面，同理使用<code>OnClickListener()</code>函数进行点击的监听，并将监听到的用户选择的参数<code>(id)</code>通过<code>intent.putExtra()</code>函数传入下一个界面中。值得注意的是，界面里面的<code>list_drinks(ListView)</code>是以软连接的方式来获取名字的，具体的实现方式在<code>Drink.java</code>中定义。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DrinkCategoryActivity</span> <span class="token keyword">extends</span> <span class="token class-name">AppCompatActivity</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token class-name">Bundle</span> savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_drink_category<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ArrayAdapter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Drink</span><span class="token punctuation">></span></span> listAdapter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayAdapter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token class-name"><span class="token namespace">android<span class="token punctuation">.</span></span>R</span><span class="token punctuation">.</span>layout<span class="token punctuation">.</span>simple_list_item_1<span class="token punctuation">,</span> <span class="token class-name">Drink</span><span class="token punctuation">.</span>drinks<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ListView</span> listDrinks <span class="token operator">=</span> <span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>list_drinks<span class="token punctuation">)</span><span class="token punctuation">;</span>        listDrinks<span class="token punctuation">.</span><span class="token function">setAdapter</span><span class="token punctuation">(</span>listAdapter<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//Create the listener</span>        <span class="token class-name">AdapterView<span class="token punctuation">.</span>OnItemClickListener</span> itemClickListener <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AdapterView<span class="token punctuation">.</span>OnItemClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onItemClick</span><span class="token punctuation">(</span><span class="token class-name">AdapterView</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> parent<span class="token punctuation">,</span> <span class="token class-name">View</span> view<span class="token punctuation">,</span> <span class="token keyword">int</span> position<span class="token punctuation">,</span> <span class="token keyword">long</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Intent</span> intent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token class-name">DrinkCategoryActivity</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token class-name">DrinkActivity</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                intent<span class="token punctuation">.</span><span class="token function">putExtra</span><span class="token punctuation">(</span><span class="token class-name">DrinkActivity</span><span class="token punctuation">.</span>EXTRA_DRINKID<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//(int) is a must</span>                <span class="token function">startActivity</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        listDrinks<span class="token punctuation">.</span><span class="token function">setOnItemClickListener</span><span class="token punctuation">(</span>itemClickListener<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>最后便是各种饮品的详情页面了，这里需要注意的是，代码中使用了一个<code>EXTRA_DRINKID</code>的全局变量进行参数的传递，将<code>DrinkCategoryActivity</code>中的<code>id</code>值传入<code>DrinkActivity</code>的全局变量中。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DrinkActivity</span> <span class="token keyword">extends</span> <span class="token class-name">AppCompatActivity</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> EXTRA_DRINKID <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token class-name">Bundle</span> savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_drink<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> drinkID <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">)</span> <span class="token function">getIntent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getExtras</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>EXTRA_DRINKID<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Drink</span> drink <span class="token operator">=</span> <span class="token class-name">Drink</span><span class="token punctuation">.</span>drinks<span class="token punctuation">[</span>drinkID<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token class-name">TextView</span> name <span class="token operator">=</span> <span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        name<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>drink<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">TextView</span> description <span class="token operator">=</span> <span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>description<span class="token punctuation">)</span><span class="token punctuation">;</span>        description<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>drink<span class="token punctuation">.</span><span class="token function">getDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ImageView</span> photo <span class="token operator">=</span> <span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>photo<span class="token punctuation">)</span><span class="token punctuation">;</span>        photo<span class="token punctuation">.</span><span class="token function">setImageResource</span><span class="token punctuation">(</span>drink<span class="token punctuation">.</span><span class="token function">getImageResourceID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        photo<span class="token punctuation">.</span><span class="token function">setContentDescription</span><span class="token punctuation">(</span>drink<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="kotlin逻辑编辑"><a class="markdownIt-Anchor" href="#kotlin逻辑编辑"></a> Kotlin逻辑编辑</h2><pre class="language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">//Drink.kt</span><span class="token keyword">class</span> Drink <span class="token keyword">private</span> <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token keyword">val</span> name<span class="token operator">:</span> String<span class="token punctuation">,</span> <span class="token keyword">val</span> description<span class="token operator">:</span> String<span class="token punctuation">,</span> <span class="token keyword">val</span> imageResourceID<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> String <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> name <span class="token punctuation">&#125;</span>    <span class="token annotation builtin">@JvmName</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"GetDescription"</span></span><span class="token punctuation">)</span>    <span class="token keyword">fun</span> <span class="token function">getDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> String<span class="token operator">?</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> description <span class="token punctuation">&#125;</span>    <span class="token annotation builtin">@JvmName</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"GetName"</span></span><span class="token punctuation">)</span>    <span class="token keyword">fun</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> String<span class="token operator">?</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> name <span class="token punctuation">&#125;</span>    <span class="token annotation builtin">@JvmName</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"GetImageResourceID"</span></span><span class="token punctuation">)</span>    <span class="token keyword">fun</span> <span class="token function">getImageResourceID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Int <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> imageResourceID <span class="token punctuation">&#125;</span>    <span class="token keyword">companion</span> <span class="token keyword">object</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">val</span> drinks <span class="token operator">=</span> <span class="token function">arrayOf</span><span class="token punctuation">(</span>            <span class="token function">Drink</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"Cappuccino"</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">"Description of cappuccino"</span></span><span class="token punctuation">,</span> R<span class="token punctuation">.</span>drawable<span class="token punctuation">.</span>cappuccino<span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token function">Drink</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"Latte"</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">"Description of latte"</span></span><span class="token punctuation">,</span> R<span class="token punctuation">.</span>drawable<span class="token punctuation">.</span>latte<span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token function">Drink</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"Filter"</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">"Description of Filter"</span></span><span class="token punctuation">,</span> R<span class="token punctuation">.</span>drawable<span class="token punctuation">.</span>filter<span class="token punctuation">)</span>        <span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">//MainActivity.kt</span><span class="token keyword">class</span> MainActivity <span class="token operator">:</span> <span class="token function">AppCompatActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token operator">:</span> Bundle<span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_main<span class="token punctuation">)</span>        <span class="token keyword">val</span> itemClickListener <span class="token operator">=</span>            OnItemClickListener <span class="token punctuation">&#123;</span> parent<span class="token punctuation">,</span> view<span class="token punctuation">,</span> position<span class="token punctuation">,</span> id <span class="token operator">-></span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>position <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">val</span> intent <span class="token operator">=</span> <span class="token function">Intent</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token label symbol">@MainActivity</span><span class="token punctuation">,</span> DrinkCategoryActivity<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">.</span>java<span class="token punctuation">)</span>                    <span class="token function">startActivity</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token keyword">val</span> listView <span class="token operator">=</span> findViewById<span class="token operator">&lt;</span>ListView<span class="token operator">></span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>list_options<span class="token punctuation">)</span>        listView<span class="token punctuation">.</span>onItemClickListener <span class="token operator">=</span> itemClickListener    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">//DrinkCategoryActivity.kt</span><span class="token keyword">class</span> DrinkCategoryActivity <span class="token operator">:</span> <span class="token function">AppCompatActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token operator">:</span> Bundle<span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_drink_category<span class="token punctuation">)</span>        <span class="token keyword">val</span> listAdapter<span class="token operator">:</span> ArrayAdapter<span class="token operator">&lt;</span>Drink<span class="token operator">?</span><span class="token operator">></span> <span class="token operator">=</span>            ArrayAdapter<span class="token operator">&lt;</span>Drink<span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> android<span class="token punctuation">.</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>simple_list_item_1<span class="token punctuation">,</span> Drink<span class="token punctuation">.</span>drinks<span class="token punctuation">)</span>        <span class="token keyword">val</span> listDrinks <span class="token operator">=</span> findViewById<span class="token operator">&lt;</span>ListView<span class="token operator">></span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>list_drinks<span class="token punctuation">)</span>        listDrinks<span class="token punctuation">.</span>adapter <span class="token operator">=</span> listAdapter        <span class="token comment">//Create the listener</span>        <span class="token keyword">val</span> itemClickListener <span class="token operator">=</span>            OnItemClickListener <span class="token punctuation">&#123;</span> parent<span class="token punctuation">,</span> view<span class="token punctuation">,</span> position<span class="token punctuation">,</span> id <span class="token operator">-></span>                <span class="token keyword">val</span> intent <span class="token operator">=</span> <span class="token function">Intent</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token label symbol">@DrinkCategoryActivity</span><span class="token punctuation">,</span> DrinkActivity<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">.</span>java<span class="token punctuation">)</span>                intent<span class="token punctuation">.</span><span class="token function">putExtra</span><span class="token punctuation">(</span>DrinkActivity<span class="token punctuation">.</span>EXTRA_DRINKID<span class="token punctuation">,</span> id<span class="token punctuation">.</span><span class="token function">toInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// .toInt() is a must</span>                <span class="token function">startActivity</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        listDrinks<span class="token punctuation">.</span>onItemClickListener <span class="token operator">=</span> itemClickListener    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">//DrinkActivity.kt</span><span class="token keyword">class</span> DrinkActivity <span class="token operator">:</span> <span class="token function">AppCompatActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token operator">:</span> Bundle<span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_drink<span class="token punctuation">)</span>        <span class="token keyword">val</span> drinkID <span class="token operator">=</span> intent<span class="token punctuation">.</span>extras<span class="token operator">!!</span><span class="token punctuation">[</span>EXTRA_DRINKID<span class="token punctuation">]</span> <span class="token keyword">as</span> Int        <span class="token keyword">val</span> drink <span class="token operator">=</span> Drink<span class="token punctuation">.</span>drinks<span class="token punctuation">[</span>drinkID<span class="token punctuation">]</span>        <span class="token keyword">val</span> name <span class="token operator">=</span> findViewById<span class="token operator">&lt;</span>TextView<span class="token operator">></span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>name<span class="token punctuation">)</span>        name<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>drink<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">val</span> description <span class="token operator">=</span> findViewById<span class="token operator">&lt;</span>TextView<span class="token operator">></span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>description<span class="token punctuation">)</span>        description<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>drink<span class="token punctuation">.</span><span class="token function">getDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">val</span> photo <span class="token operator">=</span> findViewById<span class="token operator">&lt;</span>ImageView<span class="token operator">></span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>photo<span class="token punctuation">)</span>        photo<span class="token punctuation">.</span><span class="token function">setImageResource</span><span class="token punctuation">(</span>drink<span class="token punctuation">.</span><span class="token function">getImageResourceID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        photo<span class="token punctuation">.</span>contentDescription <span class="token operator">=</span> drink<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">companion</span> <span class="token keyword">object</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> <span class="token keyword">val</span> EXTRA_DRINKID <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">""</span></span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>还是Kotlin简洁啊!</p><hr><p>上一篇：<a href="http://tonylsx.top/2022/10/11/Android-Studio-4/">Android Studio开发 4 | Tony </a></p><p>下一篇：马上就好了…</p>]]></content>
      
      
      <categories>
          
          <category> Android Studio </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android Studio </tag>
            
            <tag> Java </tag>
            
            <tag> Kotlin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python WordCloud</title>
      <link href="/2022/11/03/Python-WordCloud/"/>
      <url>/2022/11/03/Python-WordCloud/</url>
      
        <content type="html"><![CDATA[<h1 id="python-wordcloud简介"><a class="markdownIt-Anchor" href="#python-wordcloud简介"></a> Python WordCloud简介</h1><h3 id="code"><a class="markdownIt-Anchor" href="#code"></a> Code</h3><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> wordcloud<span class="token keyword">import</span> jieba <span class="token comment"># 用于中文词语分割</span><span class="token keyword">from</span> urllib <span class="token keyword">import</span> request<span class="token keyword">from</span> html2text <span class="token keyword">import</span> html2text<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    w <span class="token operator">=</span> wordcloud<span class="token punctuation">.</span>WordCloud<span class="token punctuation">(</span>width<span class="token operator">=</span><span class="token number">3500</span><span class="token punctuation">,</span> height<span class="token operator">=</span><span class="token number">3500</span><span class="token punctuation">,</span> font_path<span class="token operator">=</span><span class="token string">r'C:\Windows\Fonts\simfang.ttf'</span><span class="token punctuation">,</span> background_color<span class="token operator">=</span><span class="token string">"white"</span><span class="token punctuation">)</span>    w<span class="token punctuation">.</span>generate<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>jieba<span class="token punctuation">.</span>cut<span class="token punctuation">(</span>file_content<span class="token punctuation">,</span> cut_all<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    w<span class="token punctuation">.</span>to_file<span class="token punctuation">(</span><span class="token string">"output.png"</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token comment"># url = 'http://tonylsx.top/2022/04/09/4-dimensional/'</span>    url <span class="token operator">=</span> <span class="token string">'http://tonylsx.top/2022/07/21/Python-json/'</span>    <span class="token builtin">file</span> <span class="token operator">=</span> request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>url<span class="token punctuation">)</span>    file_text <span class="token operator">=</span> <span class="token builtin">file</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>    file_content <span class="token operator">=</span> html2text<span class="token punctuation">(</span>file_text<span class="token punctuation">)</span>    <span class="token comment"># print(file_content)</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="wordcloud-output"><a class="markdownIt-Anchor" href="#wordcloud-output"></a> WordCloud Output</h3><p>WordCloud输出图片(<code>output.png</code>)：</p><p><img src="/2022/11/03/Python-WordCloud/haha.png" alt="haha" loading="lazy"></p><h1 id="为wordcloud添加图片轮廓"><a class="markdownIt-Anchor" href="#为wordcloud添加图片轮廓"></a> 为WordCloud添加图片轮廓</h1><h3 id="code-2"><a class="markdownIt-Anchor" href="#code-2"></a> Code</h3><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> wordcloud<span class="token keyword">import</span> jieba<span class="token keyword">from</span> imageio <span class="token keyword">import</span> imread<span class="token keyword">from</span> urllib <span class="token keyword">import</span> request<span class="token keyword">from</span> html2text <span class="token keyword">import</span> html2text<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    photo1 <span class="token operator">=</span> imread<span class="token punctuation">(</span><span class="token string">"photo.png"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>photo1<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>  <span class="token comment"># (748, 1029, 4)</span>    photo2 <span class="token operator">=</span> imread<span class="token punctuation">(</span><span class="token string">"photo2.jpg"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>photo2<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>  <span class="token comment"># (1270, 1585, 3)</span>    w <span class="token operator">=</span> wordcloud<span class="token punctuation">.</span>WordCloud<span class="token punctuation">(</span>width<span class="token operator">=</span><span class="token number">3500</span><span class="token punctuation">,</span> height<span class="token operator">=</span><span class="token number">3500</span><span class="token punctuation">,</span> font_path<span class="token operator">=</span><span class="token string">r'C:\Windows\Fonts\simfang.ttf'</span><span class="token punctuation">,</span>                            mask<span class="token operator">=</span>photo2<span class="token punctuation">,</span> background_color<span class="token operator">=</span><span class="token string">"white"</span><span class="token punctuation">)</span>    w<span class="token punctuation">.</span>generate<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>jieba<span class="token punctuation">.</span>cut<span class="token punctuation">(</span>file_content<span class="token punctuation">,</span> cut_all<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    w<span class="token punctuation">.</span>to_file<span class="token punctuation">(</span><span class="token string">"output.png"</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token comment"># url = 'http://tonylsx.top/2022/04/09/4-dimensional/'</span>    url <span class="token operator">=</span> <span class="token string">'http://tonylsx.top/2022/07/21/Python-json/'</span>    <span class="token builtin">file</span> <span class="token operator">=</span> request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>url<span class="token punctuation">)</span>    file_text <span class="token operator">=</span> <span class="token builtin">file</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>    file_content <span class="token operator">=</span> html2text<span class="token punctuation">(</span>file_text<span class="token punctuation">)</span>    <span class="token comment"># print(file_content)</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>代码中可以看到，<code>.png</code>图片是四维数组，其中第四维度是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>α</mi></mrow><annotation encoding="application/x-tex">\alpha</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span></span></span></span>通道，代表透明度；<code>.jpg</code>图片是三维数组，三个维度分别代表RGB三元色。通过调整图片元素的值，全0代表白色，全255代表黑色，可以控制WordCloud的输出轮廓，实现美丽且优雅的图片哦~</p><h3 id="wordcloud-output-2"><a class="markdownIt-Anchor" href="#wordcloud-output-2"></a> WordCloud Output</h3><p>原图片(<code>photo2.png</code>)：</p><p><img src="/2022/11/03/Python-WordCloud/photo2.jpg" alt="photo2" loading="lazy"></p><p>WordCloud输出图片(<code>output.png</code>)：</p><p><img src="/2022/11/03/Python-WordCloud/haha-1667472516501-1-1667473201885-3.png" alt="haha-1667472516501-1" loading="lazy"></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> WordCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Socket网络编程3——UDP</title>
      <link href="/2022/10/14/socket-program-3/"/>
      <url>/2022/10/14/socket-program-3/</url>
      
        <content type="html"><![CDATA[<h2 id="tcp与udp的区别"><a class="markdownIt-Anchor" href="#tcp与udp的区别"></a> TCP与UDP的区别</h2><p><img src="/2022/10/14/socket-program-3/image-20221013181230269.png" alt="image-20221013181230269" loading="lazy"></p><h2 id="windows-server"><a class="markdownIt-Anchor" href="#windows-server"></a> Windows Server</h2><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression"><span class="token function">comment</span><span class="token punctuation">(</span>lib<span class="token punctuation">,</span> </span><span class="token string">"ws2_32.lib"</span><span class="token expression"><span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdlib></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;winsock2.h></span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//初始化模块，仅Windows系统需要</span>    WORD sockVersion <span class="token operator">=</span> <span class="token function">MAKEWORD</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    WSADATA wsdata<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">WSAStartup</span><span class="token punctuation">(</span>sockVersion<span class="token punctuation">,</span> <span class="token operator">&amp;</span>wsdata<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Initialize Error!"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//建立socket</span>    SOCKET s <span class="token operator">=</span> <span class="token function">socket</span><span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span> SOCK_DGRAM<span class="token punctuation">,</span> IPPROTO_UDP<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">==</span> INVALID_SOCKET<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"socket Error!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    sockaddr_in ss<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ss<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>ss<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ss<span class="token punctuation">.</span>sin_family <span class="token operator">=</span> AF_INET<span class="token punctuation">;</span><span class="token comment">//IPv4</span>    ss<span class="token punctuation">.</span>sin_port <span class="token operator">=</span> <span class="token function">htons</span><span class="token punctuation">(</span><span class="token number">6666</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//port No.</span>    ss<span class="token punctuation">.</span>sin_addr<span class="token punctuation">.</span>s_addr <span class="token operator">=</span> <span class="token function">inet_addr</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//bind:socket绑定IP地址和端口用于监听</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">bind</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token punctuation">(</span>sockaddr<span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>ss<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>sockaddr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> SOCKET_ERROR<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"Bind Error!"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//不需要listen</span>    cout<span class="token operator">&lt;&lt;</span><span class="token string">"UDP Server is running..."</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>true<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        bool end_while <span class="token operator">=</span> false<span class="token punctuation">;</span>        <span class="token comment">//accept:等待客户端链接</span>        sockaddr_in client_addr<span class="token punctuation">;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>client_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>        string message<span class="token punctuation">;</span>        <span class="token function">recvfrom</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> message<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>SOCKADDR<span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>client_addr<span class="token punctuation">,</span> <span class="token operator">&amp;</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>        string msg <span class="token operator">=</span> <span class="token string">"Hi, Client"</span><span class="token punctuation">;</span>        <span class="token function">sendto</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> msg<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> msg<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>SOCKADDR<span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>client_addr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>SOCKADDR<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Sending: \""</span> <span class="token operator">&lt;&lt;</span> msg <span class="token operator">&lt;&lt;</span> <span class="token string">"\" to Client..."</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>true<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Waiting for Clients request..."</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            <span class="token keyword">int</span> jud <span class="token operator">=</span> <span class="token function">recvfrom</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> message<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>sockaddr<span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>client_addr<span class="token punctuation">,</span> <span class="token operator">&amp;</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>jud <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Receive Error!!!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>                cout <span class="token operator">&lt;&lt;</span> <span class="token string">"  Make sure your input length &lt; 31."</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> <span class="token string">"quit_server"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                end_while <span class="token operator">=</span> true<span class="token punctuation">;</span>                cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Server is closing..."</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>message <span class="token operator">==</span> <span class="token string">"quit"</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                cout <span class="token operator">&lt;&lt;</span> <span class="token string">"  Bye-bye "</span> <span class="token operator">&lt;&lt;</span> jud <span class="token operator">&lt;&lt;</span> <span class="token string">"!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span>                cout <span class="token operator">&lt;&lt;</span> <span class="token string">"  Received by Client: "</span> <span class="token operator">&lt;&lt;</span> message <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            <span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>end_while<span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    cout<span class="token operator">&lt;&lt;</span><span class="token string">"Server has been Closed."</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token function">closesocket</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">WSACleanup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="windows-client"><a class="markdownIt-Anchor" href="#windows-client"></a> Windows Client</h2><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression"><span class="token function">comment</span><span class="token punctuation">(</span>lib<span class="token punctuation">,</span> </span><span class="token string">"ws2_32.lib"</span><span class="token expression"><span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdlib></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;winsock2.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//初始化模块，仅Windows系统需要</span>    WORD sockVersion <span class="token operator">=</span> <span class="token function">MAKEWORD</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    WSADATA wsdata<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">WSAStartup</span><span class="token punctuation">(</span>sockVersion<span class="token punctuation">,</span> <span class="token operator">&amp;</span>wsdata<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Initialize Error!"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    SOCKET s <span class="token operator">=</span> <span class="token function">socket</span><span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span> SOCK_DGRAM<span class="token punctuation">,</span> IPPROTO_UDP<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">==</span> INVALID_SOCKET<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"Invalid Socket!"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    sockaddr_in ss<span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ss<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>ss<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ss<span class="token punctuation">.</span>sin_family <span class="token operator">=</span> AF_INET<span class="token punctuation">;</span><span class="token comment">//IPv4</span>    ss<span class="token punctuation">.</span>sin_port <span class="token operator">=</span> <span class="token function">htons</span><span class="token punctuation">(</span><span class="token number">6666</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//port No.</span>    ss<span class="token punctuation">.</span>sin_addr<span class="token punctuation">.</span>s_addr <span class="token operator">=</span> <span class="token function">htonl</span><span class="token punctuation">(</span>INADDR_LOOPBACK<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// No need to Connect()</span>    string message <span class="token operator">=</span> <span class="token string">"Hi, Server!"</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>SOCKADDR<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sendto</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> message<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> message<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>sockaddr<span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>ss<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">recvfrom</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> message<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>sockaddr<span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>ss<span class="token punctuation">,</span> <span class="token operator">&amp;</span>len<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"Successfully Connected to Server: "</span><span class="token punctuation">;</span>        cout<span class="token operator">&lt;&lt;</span>message<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>true<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        string msg<span class="token punctuation">;</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"Please input your message:"</span><span class="token punctuation">;</span>        <span class="token function">getline</span><span class="token punctuation">(</span>cin<span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> send_len <span class="token operator">=</span> <span class="token function">sendto</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> msg<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> msg<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>sockaddr<span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>ss<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>send_len <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            cout<span class="token operator">&lt;&lt;</span><span class="token string">"Sending Error!!!"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>msg <span class="token operator">==</span> <span class="token string">"quit"</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            cout<span class="token operator">&lt;&lt;</span><span class="token string">"See you next time, bye!"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>            <span class="token function">closesocket</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">WSACleanup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="linux-server"><a class="markdownIt-Anchor" href="#linux-server"></a> Linux Server</h2><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/socket.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;netinet/in.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;ctype.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//建立socket</span>    <span class="token keyword">int</span> s <span class="token operator">=</span> <span class="token function">socket</span><span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span> SOCK_DGRAM<span class="token punctuation">,</span> IPPROTO_UDP<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"socket Error!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    sockaddr_in ss<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ss<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>ss<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ss<span class="token punctuation">.</span>sin_family <span class="token operator">=</span> AF_INET<span class="token punctuation">;</span><span class="token comment">//IPv4</span>    ss<span class="token punctuation">.</span>sin_port <span class="token operator">=</span> <span class="token function">htons</span><span class="token punctuation">(</span><span class="token number">6666</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//port No.</span>    ss<span class="token punctuation">.</span>sin_addr<span class="token punctuation">.</span>s_addr <span class="token operator">=</span> <span class="token function">inet_addr</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//bind:socket绑定IP地址和端口用于监听</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">bind</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token punctuation">(</span>sockaddr<span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>ss<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>sockaddr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Bind Error!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//不需要listen</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"UDP Server is running...\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>true<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        bool end_while <span class="token operator">=</span> false<span class="token punctuation">;</span>        <span class="token comment">//accept:等待客户端链接</span>        sockaddr_in client_addr<span class="token punctuation">;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>client_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">char</span> message<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">memset</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">recvfrom</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> message<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>SOCKADDR<span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>client_addr<span class="token punctuation">,</span> <span class="token operator">&amp;</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">char</span> msg<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Hi, Client"</span><span class="token punctuation">;</span>        <span class="token function">sendto</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> msg<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>SOCKADDR<span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>client_addr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>SOCKADDR<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Sending: \"%s\" to Client...\n"</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>true<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Waiting for Clients request...\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">memset</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> jud <span class="token operator">=</span> <span class="token function">recvfrom</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> message<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>sockaddr<span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>client_addr<span class="token punctuation">,</span> <span class="token operator">&amp;</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>jud <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Receive Error!!!\n  Make sure your input length &lt; 31.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> <span class="token string">"quit_server"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                end_while <span class="token operator">=</span> true<span class="token punctuation">;</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Server is closing...\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> <span class="token string">"quit"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"  Bye-bye %d !\n"</span><span class="token punctuation">,</span> jud<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"  Received by Client: %s\n"</span><span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>end_while<span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Server has been Closed.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">close</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="linux-client"><a class="markdownIt-Anchor" href="#linux-client"></a> Linux Client</h2><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/socket.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;netinet/in.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;ctype.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> s <span class="token operator">=</span> <span class="token function">socket</span><span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span> SOCK_DGRAM<span class="token punctuation">,</span> IPPROTO_UDP<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"socket Error!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    sockaddr_in ss<span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ss<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>ss<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ss<span class="token punctuation">.</span>sin_family <span class="token operator">=</span> AF_INET<span class="token punctuation">;</span><span class="token comment">//IPv4</span>    ss<span class="token punctuation">.</span>sin_port <span class="token operator">=</span> <span class="token function">htons</span><span class="token punctuation">(</span><span class="token number">6666</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//port No.</span>    ss<span class="token punctuation">.</span>sin_addr<span class="token punctuation">.</span>s_addr <span class="token operator">=</span> <span class="token function">htonl</span><span class="token punctuation">(</span>INADDR_LOOPBACK<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// No need to Connect()</span>    <span class="token keyword">char</span> message<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Hi, Server!"</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>SOCKADDR<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sendto</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> message<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>sockaddr<span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>ss<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">recvfrom</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> message<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>sockaddr<span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>ss<span class="token punctuation">,</span> <span class="token operator">&amp;</span>len<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Successfully Connected to Server: %s\n"</span><span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>true<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">char</span> msg<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Please input your message:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">gets</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> send_len <span class="token operator">=</span> <span class="token function">sendto</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> msg<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>sockaddr<span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>ss<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>send_len <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Sending Error!!!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> <span class="token string">"quit"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"See you next time, bye!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">close</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="python-server"><a class="markdownIt-Anchor" href="#python-server"></a> Python Server</h2><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> socket<span class="token keyword">try</span><span class="token punctuation">:</span>    s <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_DGRAM<span class="token punctuation">)</span><span class="token keyword">except</span> Exception<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Socket Error!"</span><span class="token punctuation">)</span>server_add <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span> <span class="token number">9999</span><span class="token punctuation">)</span><span class="token keyword">try</span><span class="token punctuation">:</span>    s<span class="token punctuation">.</span>bind<span class="token punctuation">(</span>server_add<span class="token punctuation">)</span><span class="token keyword">except</span> Exception<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Bind Error!"</span><span class="token punctuation">)</span><span class="token comment"># No need to Listen()</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Server_UDP is running...'</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    <span class="token comment"># No need to Accept()</span>    message<span class="token punctuation">,</span> client <span class="token operator">=</span> s<span class="token punctuation">.</span>recvfrom<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    msg <span class="token operator">=</span> <span class="token string">"Hello, Client!"</span>    s<span class="token punctuation">.</span>sendto<span class="token punctuation">(</span>msg<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> client<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Sending \""</span><span class="token punctuation">,</span> msg<span class="token punctuation">,</span> <span class="token string">"\" to Client..."</span><span class="token punctuation">)</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Waiting for Clients request..."</span><span class="token punctuation">)</span>        message<span class="token punctuation">,</span> client <span class="token operator">=</span> s<span class="token punctuation">.</span>recvfrom<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> message<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">"quit"</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Bye-bye"</span><span class="token punctuation">,</span> client<span class="token punctuation">,</span> <span class="token string">"!"</span><span class="token punctuation">)</span>            <span class="token keyword">break</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"  Received by Client: "</span><span class="token punctuation">,</span> message<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>exit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span></code></pre><h2 id="python-client"><a class="markdownIt-Anchor" href="#python-client"></a> Python Client</h2><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> socket<span class="token keyword">try</span><span class="token punctuation">:</span>    s <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_DGRAM<span class="token punctuation">)</span><span class="token keyword">except</span> Exception<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Socket Error!"</span><span class="token punctuation">)</span>server_add <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span> <span class="token number">9999</span><span class="token punctuation">)</span><span class="token keyword">try</span><span class="token punctuation">:</span>    message <span class="token operator">=</span> <span class="token string">"HI, Server!"</span>    s<span class="token punctuation">.</span>sendto<span class="token punctuation">(</span>message<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> server_add<span class="token punctuation">)</span>    message<span class="token punctuation">,</span> server <span class="token operator">=</span> s<span class="token punctuation">.</span>recvfrom<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">except</span> socket<span class="token punctuation">.</span>timeout<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Time out!"</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    msg <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"Please input your message: "</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> msg<span class="token punctuation">:</span>        <span class="token keyword">continue</span>    s<span class="token punctuation">.</span>sendto<span class="token punctuation">(</span>msg<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> server_add<span class="token punctuation">)</span>    <span class="token keyword">if</span> msg <span class="token operator">==</span> <span class="token string">"quit"</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"See you next time, bye!"</span><span class="token punctuation">)</span>        s<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">break</span>exit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span></code></pre><hr><p>上一篇：<a href="http://tonylsx.top/2022/10/14/socket-program-2/">Socket网络编程2 | Tony</a></p><p>下一篇：还没写好呢…</p>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Socket </tag>
            
            <tag> Client </tag>
            
            <tag> Server </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Socket网络编程2</title>
      <link href="/2022/10/14/socket-program-2/"/>
      <url>/2022/10/14/socket-program-2/</url>
      
        <content type="html"><![CDATA[<p><img src="/2022/10/14/socket-program-2/image-20221012143810496.png" alt="image-20221012143810496" loading="lazy"></p><h2 id="实现多条信息收发"><a class="markdownIt-Anchor" href="#实现多条信息收发"></a> 实现多条信息收发</h2><img src="/2022/10/14/socket-program-2/image-20221012143117864.png" alt="image-20221012143117864" style="zoom:66%;" loading="lazy"><h2 id="windows-server"><a class="markdownIt-Anchor" href="#windows-server"></a> Windows Server</h2><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression"><span class="token function">comment</span><span class="token punctuation">(</span>lib<span class="token punctuation">,</span> </span><span class="token string">"ws2_32.lib"</span><span class="token expression"><span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdlib></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;winsock2.h></span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//初始化模块，仅Windows系统需要</span>    WORD sockVersion <span class="token operator">=</span> <span class="token function">MAKEWORD</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    WSADATA wsdata<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">WSAStartup</span><span class="token punctuation">(</span>sockVersion<span class="token punctuation">,</span> <span class="token operator">&amp;</span>wsdata<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Initialize Error!"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//建立socket</span>    SOCKET s <span class="token operator">=</span> <span class="token function">socket</span><span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span> SOCK_STREAM<span class="token punctuation">,</span> IPPROTO_TCP<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">==</span> INVALID_SOCKET<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"socket Error!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    sockaddr_in ss<span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ss<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>ss<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ss<span class="token punctuation">.</span>sin_family <span class="token operator">=</span> AF_INET<span class="token punctuation">;</span><span class="token comment">//IPv4</span>    ss<span class="token punctuation">.</span>sin_port <span class="token operator">=</span> <span class="token function">htons</span><span class="token punctuation">(</span><span class="token number">6666</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//port No.</span>    ss<span class="token punctuation">.</span>sin_addr<span class="token punctuation">.</span>s_addr <span class="token operator">=</span> <span class="token function">inet_addr</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//ss.sin_addr.s_addr = htonl(INADDR_LOOPBACK);</span>    <span class="token comment">//bind:socket绑定IP地址和端口用于监听</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">bind</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token punctuation">(</span>sockaddr<span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>ss<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>ss<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> SOCKET_ERROR<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"Bind Error!"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//listen:设定可同时排队的Client最大连接个数</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">listen</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"Listen Error!"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    cout<span class="token operator">&lt;&lt;</span><span class="token string">"Server is running..."</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token comment">//accept:等待客户端链接</span>    sockaddr_in clnt_addr<span class="token punctuation">;</span>    <span class="token keyword">int</span> clnt_addr_size <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>clnt_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> fd <span class="token operator">=</span> <span class="token function">accept</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token punctuation">(</span>sockaddr <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>clnt_addr<span class="token punctuation">,</span> <span class="token operator">&amp;</span>clnt_addr_size<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//int fd = accept(s, (sockaddr*)NULL, NULL);</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>fd <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Accept Error"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"Connected to Server:"</span><span class="token operator">&lt;&lt;</span>fd<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    string msg <span class="token operator">=</span> <span class="token string">"Hi, Client"</span><span class="token punctuation">;</span>    <span class="token function">send</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> msg<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> msg<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Sending:\" "</span> <span class="token operator">&lt;&lt;</span> msg <span class="token operator">&lt;&lt;</span> <span class="token string">"\" to Client..."</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Waiting for Clients request..."</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        string message<span class="token punctuation">;</span>        <span class="token keyword">int</span> jud <span class="token operator">=</span> <span class="token function">recv</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> message<span class="token punctuation">.</span><span class="token function">to_cstr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>jud <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            cout<span class="token operator">&lt;&lt;</span><span class="token string">"Receive Error!!!"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>message <span class="token operator">==</span> <span class="token string">"quit"</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"  Bye-bye "</span> <span class="token operator">&lt;&lt;</span> fd <span class="token operator">&lt;&lt;</span> <span class="token string">"!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            <span class="token function">closesocket</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>             <span class="token keyword">else</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"  Received by Client: "</span> <span class="token operator">&lt;&lt;</span> message <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">closesocket</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="windows-client"><a class="markdownIt-Anchor" href="#windows-client"></a> Windows Client</h2><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression"><span class="token function">comment</span><span class="token punctuation">(</span>lib<span class="token punctuation">,</span> </span><span class="token string">"ws2_32.lib"</span><span class="token expression"><span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdlib></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;winsock2.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//初始化模块，仅Windows系统需要</span>    WORD sockVersion <span class="token operator">=</span> <span class="token function">MAKEWORD</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    WSADATA wsdata<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">WSAStartup</span><span class="token punctuation">(</span>sockVersion<span class="token punctuation">,</span> <span class="token operator">&amp;</span>wsdata<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Initialize Error!"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    SOCKET s <span class="token operator">=</span> <span class="token function">socket</span><span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span> SOCK_STREAM<span class="token punctuation">,</span> IPPROTO_TCP<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">==</span> INVALID_SOCKET<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"Invalid Socket!"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    sockaddr_in ss<span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ss<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>ss<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ss<span class="token punctuation">.</span>sin_family <span class="token operator">=</span> AF_INET<span class="token punctuation">;</span><span class="token comment">//IPv4</span>    ss<span class="token punctuation">.</span>sin_port <span class="token operator">=</span> <span class="token function">htons</span><span class="token punctuation">(</span><span class="token number">6666</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//port No.</span>    ss<span class="token punctuation">.</span>sin_addr<span class="token punctuation">.</span>s_addr <span class="token operator">=</span> <span class="token function">htonl</span><span class="token punctuation">(</span>INADDR_LOOPBACK<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">connect</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token punctuation">(</span>sockaddr<span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>ss<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>ss<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> SOCKET_ERROR<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"Connect Error!"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        <span class="token function">closesocket</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    string message<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">recv</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> message<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"Successfully Connected to Server: "</span><span class="token punctuation">;</span>        cout<span class="token operator">&lt;&lt;</span>message<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        string msg<span class="token punctuation">;</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"Please input your message:"</span><span class="token punctuation">;</span>        <span class="token function">getline</span><span class="token punctuation">(</span>cin<span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> send_len <span class="token operator">=</span> <span class="token function">send</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> msg<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> msg<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>send_len <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            cout<span class="token operator">&lt;&lt;</span><span class="token string">"Sending Error!!!"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>msg <span class="token operator">==</span> <span class="token string">"quit"</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            cout<span class="token operator">&lt;&lt;</span><span class="token string">"See you next time, bye!"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>            <span class="token function">closesocket</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="linux-server"><a class="markdownIt-Anchor" href="#linux-server"></a> Linux Server</h2><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/socket.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;netinet/in.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;ctype.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//建立socket</span>    <span class="token keyword">int</span> s <span class="token operator">=</span> <span class="token function">socket</span><span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span> SOCK_STREAM<span class="token punctuation">,</span> IPPROTO_TCP<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Socket Error!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">struct</span> <span class="token class-name">sockaddr_in</span> ss<span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ss<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>ss<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ss<span class="token punctuation">.</span>sin_family <span class="token operator">=</span> AF_INET<span class="token punctuation">;</span><span class="token comment">//IPv4</span>    ss<span class="token punctuation">.</span>sin_port <span class="token operator">=</span> <span class="token function">htons</span><span class="token punctuation">(</span><span class="token number">6666</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//port No.</span>    <span class="token comment">//ss.sin_addr.s_addr = inet_addr("127.0.0.1");</span>    ss<span class="token punctuation">.</span>sin_addr<span class="token punctuation">.</span>s_addr <span class="token operator">=</span> <span class="token function">htonl</span><span class="token punctuation">(</span>INADDR_ANY<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//bind:socket绑定IP地址和端口用于监听</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">bind</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token punctuation">(</span>sockaddr<span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>ss<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>ss<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Bind Error!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//listen:设定可同时排队的Client最大连接个数</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">listen</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Listen Error!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"======Server is running...======\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token comment">//accept:等待客户端链接</span>    <span class="token keyword">int</span> fd <span class="token operator">=</span> <span class="token function">accept</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>fd <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Accept Error!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Client %d, welcome!\n"</span><span class="token punctuation">,</span> connfd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> msg<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Hi, Client"</span><span class="token punctuation">;</span>    <span class="token comment">//send(fd, msg.c_str(), msg.length(), 0);</span>        <span class="token function">write</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> msg<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Sending:\"%s\" to Client\n"</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Waiting for Clients request...\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">char</span> message<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">memset</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//int jud = recv(fd, message, sizeof(message), 0);</span>            <span class="token keyword">int</span> jud <span class="token operator">=</span> <span class="token function">write</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> message<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>jud <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Receive Error!!!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> <span class="token string">"quit"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Bye-bye %d!"</span><span class="token punctuation">,</span> fd<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>             <span class="token keyword">else</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"  Received by Client: %s"</span><span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">close</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="linux-client"><a class="markdownIt-Anchor" href="#linux-client"></a> Linux Client</h2><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/socket.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;netinet/in.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;ctype.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> s <span class="token operator">=</span> <span class="token function">socket</span><span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span> SOCK_STREAM<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Socket Error!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">struct</span> <span class="token class-name">sockaddr_in</span> ss<span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ss<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>ss<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ss<span class="token punctuation">.</span>sin_family <span class="token operator">=</span> AF_INET<span class="token punctuation">;</span><span class="token comment">//IPv4</span>    ss<span class="token punctuation">.</span>sin_port <span class="token operator">=</span> <span class="token function">htons</span><span class="token punctuation">(</span><span class="token number">6666</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//port No.</span>    ss<span class="token punctuation">.</span>sin_addr<span class="token punctuation">.</span>s_addr <span class="token operator">=</span> <span class="token function">htonl</span><span class="token punctuation">(</span>INADDR_LOOPBACK<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">connect</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token punctuation">(</span>sockaddr<span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>ss<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>ss<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Connect Error!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">close</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">char</span> message<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">write</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> message<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Successfully Connected to Server: %s"</span><span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">char</span> msg<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Please input your message:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">gets</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> send_len <span class="token operator">=</span> <span class="token function">send</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> msg<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>send_len <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Sending Error!!!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>msg <span class="token operator">==</span> <span class="token string">"quit"</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"See you next time, bye!\n"</span><span class="token punctuation">)</span>            <span class="token function">close</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="python-server"><a class="markdownIt-Anchor" href="#python-server"></a> Python Server</h2><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> socket<span class="token keyword">try</span><span class="token punctuation">:</span>    s <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span><span class="token keyword">except</span> Exception<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Socket Error!"</span><span class="token punctuation">)</span><span class="token comment"># listen port</span><span class="token keyword">try</span><span class="token punctuation">:</span>    s<span class="token punctuation">.</span>bind<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span> <span class="token number">7777</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">except</span> Exception<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Bind Error!"</span><span class="token punctuation">)</span><span class="token keyword">try</span><span class="token punctuation">:</span>    s<span class="token punctuation">.</span>listen<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token keyword">except</span> Exception<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Listen Error!"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Server is running...'</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        sock<span class="token punctuation">,</span> addr <span class="token operator">=</span> s<span class="token punctuation">.</span>accept<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> Exception<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Accept Error!"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Connected to Server: "</span><span class="token punctuation">,</span> addr<span class="token punctuation">)</span>  <span class="token comment"># (Id, port)</span>    msg <span class="token operator">=</span> <span class="token string">"Hello Client!"</span>    sock<span class="token punctuation">.</span>send<span class="token punctuation">(</span>msg<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Sending \""</span><span class="token punctuation">,</span> msg<span class="token punctuation">,</span> <span class="token string">"\" to Client..."</span><span class="token punctuation">)</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Waiting for Clients request..."</span><span class="token punctuation">)</span>        message <span class="token operator">=</span> sock<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> message <span class="token operator">==</span> <span class="token string">"quit"</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Bye-bye"</span><span class="token punctuation">,</span> addr<span class="token punctuation">,</span> <span class="token string">"!"</span><span class="token punctuation">)</span>            <span class="token keyword">break</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"  Received by Client: "</span><span class="token punctuation">,</span> message<span class="token punctuation">)</span>    sock<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>exit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span></code></pre><h2 id="python-client"><a class="markdownIt-Anchor" href="#python-client"></a> Python Client</h2><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> socket<span class="token keyword">try</span><span class="token punctuation">:</span>    s <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span><span class="token keyword">except</span> Exception<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Socket Error!"</span><span class="token punctuation">)</span><span class="token keyword">try</span><span class="token punctuation">:</span>    s<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span> <span class="token number">7777</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">except</span> Exception<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Connection Error!"</span><span class="token punctuation">)</span>message <span class="token operator">=</span> s<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    msg <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"Please input your message: "</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> msg<span class="token punctuation">:</span>        <span class="token keyword">continue</span>    s<span class="token punctuation">.</span>send<span class="token punctuation">(</span>msg<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> msg <span class="token operator">==</span> <span class="token string">"quit"</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"See you next time, bye!"</span><span class="token punctuation">)</span>        s<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">break</span>exit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span></code></pre><hr><p>上一篇：<a href="http://tonylsx.top/2022/09/17/socket-program-1/">Socket网络编程1 | Tony</a></p><p>下一篇：<a href="http://tonylsx.top/2022/10/14/socket-program-3/">Socket网络编程 3——UDP | Tony</a></p>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Socket </tag>
            
            <tag> Client </tag>
            
            <tag> Server </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android Studio开发 4</title>
      <link href="/2022/10/11/Android-Studio-4/"/>
      <url>/2022/10/11/Android-Studio-4/</url>
      
        <content type="html"><![CDATA[<h2 id="任务目标"><a class="markdownIt-Anchor" href="#任务目标"></a> 任务目标</h2><p>制作一个简易计时器（秒表），实现Start, Stop, Restart三个按钮的功能。</p><p>在此基础上，实现当屏幕旋转后依旧可以继续计时，且当程序在后台运行时（如返回桌面或打开其它软件）暂停计时，并在返回该程序时继续计时。</p><p><img src="/2022/10/11/Android-Studio-4/image-20221011010417986.png" alt="image-20221011010417986" loading="lazy"></p><h2 id="界面编辑"><a class="markdownIt-Anchor" href="#界面编辑"></a> 界面编辑</h2><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>androidx.constraintlayout.widget.ConstraintLayout</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>app</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res-auto<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>tools</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.android.com/tools<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">tools:</span>context</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>.MainActivity<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextView</span>        <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/time_view<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>00：00：00<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>textAppearance</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@android:style/TextAppearance.Large<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintBottom_toBottomOf</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintEnd_toEndOf</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintStart_toStartOf</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintTop_toTopOf</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintVertical_bias</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0.2<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span>        <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/button_start<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Start<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>onClick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>onClickStart<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintBottom_toBottomOf</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintEnd_toEndOf</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintStart_toStartOf</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintTop_toTopOf</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span>        <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/button_stop<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Stop<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>onClick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>onClickStop<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintBottom_toBottomOf</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintEnd_toEndOf</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintStart_toStartOf</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintTop_toTopOf</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintVertical_bias</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0.4<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span>        <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/button_Reset<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Reset<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>onClick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>onClickReset<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintBottom_toBottomOf</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintEnd_toEndOf</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintStart_toStartOf</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintTop_toTopOf</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintVertical_bias</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0.3<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>androidx.constraintlayout.widget.ConstraintLayout</span><span class="token punctuation">></span></span></code></pre><h2 id="java编程逻辑"><a class="markdownIt-Anchor" href="#java编程逻辑"></a> Java编程逻辑</h2><p>我们通过<code>Handler.post(Runnable())</code>来更新UI界面，<code>Runnable</code>会调用重写的<code>run()</code>函数，然后通过<code>handler.postDelayed()</code>函数控制每次更新UI的延迟时间。具体原理还挺复杂的哈，希望深入了解handler机制和runnable函数的原理可以自行查阅资料或参考<a href="https://blog.csdn.net/zxw136511485/article/details/53032658">你不知道的Runnable接口，深度解析Runnable接口_程序员七哥的博客-CSDN博客_runnable</a></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainActivity</span> <span class="token keyword">extends</span> <span class="token class-name">AppCompatActivity</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> seconds <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> running<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClickStart</span><span class="token punctuation">(</span><span class="token class-name">View</span> view<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        running <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClickStop</span><span class="token punctuation">(</span><span class="token class-name">View</span> view<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        running <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClickReset</span><span class="token punctuation">(</span><span class="token class-name">View</span> view<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        running <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        seconds <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment">//下面这两行是为了防止点击Reset按钮后有1s的延迟</span>        <span class="token keyword">final</span> <span class="token class-name">TextView</span> timeView <span class="token operator">=</span> <span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>time_view<span class="token punctuation">)</span><span class="token punctuation">;</span>        timeView<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"00:00:00"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">runTimer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">final</span> <span class="token class-name">TextView</span> timeView <span class="token operator">=</span> <span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>time_view<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token class-name">Handler</span> handler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        handler<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>running<span class="token punctuation">)</span>                    seconds<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> hours <span class="token operator">=</span> seconds <span class="token operator">/</span> <span class="token number">3600</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> minutes <span class="token operator">=</span> seconds <span class="token operator">%</span> <span class="token number">3600</span> <span class="token operator">/</span> <span class="token number">60</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> secs <span class="token operator">=</span> seconds <span class="token operator">%</span> <span class="token number">3600</span> <span class="token operator">%</span> <span class="token number">60</span><span class="token punctuation">;</span>                <span class="token class-name">String</span> time <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token class-name">Locale</span><span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"%02d:%02d:%02d"</span><span class="token punctuation">,</span> hours<span class="token punctuation">,</span> minutes<span class="token punctuation">,</span> secs<span class="token punctuation">)</span><span class="token punctuation">;</span>                timeView<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">;</span>                handler<span class="token punctuation">.</span><span class="token function">postDelayed</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token class-name">Bundle</span> savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_main<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">runTimer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>以上，我们仅仅实现了最基本的计时器功能，如何实现在屏幕旋转后仍然计时呢？我们需要通过<code>Bundle</code>来暂时储存一些变量，在程序在后台运行或程序自动刷新时通过<code>bundle.getInt()</code>即使保存这些变量，然后在适当的时间通过<code>bundle.putInt()</code>释放这些保存的变量。这里我们要重写<code>onCreate(), onStop(), onStart()</code>等函数来完成目标任务，具体逻辑如下不做过多解释，代码如下：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">boolean</span> wasRunning<span class="token punctuation">;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token class-name">Bundle</span> bundle<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>bundle<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setContentView</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_main<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>bundle <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        seconds <span class="token operator">=</span> bundle<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">"seconds"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        running <span class="token operator">=</span> bundle<span class="token punctuation">.</span><span class="token function">getBoolean</span><span class="token punctuation">(</span><span class="token string">"running"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        wasRunning <span class="token operator">=</span> bundle<span class="token punctuation">.</span><span class="token function">getBoolean</span><span class="token punctuation">(</span><span class="token string">"wasRunning"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">runTimer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onSaveInstanceState</span><span class="token punctuation">(</span><span class="token class-name">Bundle</span> bundle<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onSaveInstanceState</span><span class="token punctuation">(</span>bundle<span class="token punctuation">)</span><span class="token punctuation">;</span>    bundle<span class="token punctuation">.</span><span class="token function">putInt</span><span class="token punctuation">(</span><span class="token string">"seconds"</span><span class="token punctuation">,</span> seconds<span class="token punctuation">)</span><span class="token punctuation">;</span>    bundle<span class="token punctuation">.</span><span class="token function">putBoolean</span><span class="token punctuation">(</span><span class="token string">"running"</span><span class="token punctuation">,</span> running<span class="token punctuation">)</span><span class="token punctuation">;</span>    bundle<span class="token punctuation">.</span><span class="token function">putBoolean</span><span class="token punctuation">(</span><span class="token string">"wasRunning"</span><span class="token punctuation">,</span> wasRunning<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onStop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onStop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    wasRunning <span class="token operator">=</span> running<span class="token punctuation">;</span>    running <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>wasRunning<span class="token punctuation">)</span>        running <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="kotlin编程逻辑"><a class="markdownIt-Anchor" href="#kotlin编程逻辑"></a> Kotlin编程逻辑</h2><pre class="language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">class</span> MainActivity <span class="token operator">:</span> <span class="token function">AppCompatActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">var</span> seconds <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">private</span> <span class="token keyword">var</span> running <span class="token operator">=</span> <span class="token boolean">false</span>    <span class="token keyword">fun</span> <span class="token function">onClickStart</span><span class="token punctuation">(</span>view<span class="token operator">:</span> View<span class="token operator">?</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        running <span class="token operator">=</span> <span class="token boolean">true</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">fun</span> <span class="token function">onClickStop</span><span class="token punctuation">(</span>view<span class="token operator">:</span> View<span class="token operator">?</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        running <span class="token operator">=</span> <span class="token boolean">false</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation builtin">@SuppressLint</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"SetTextI18n"</span></span><span class="token punctuation">)</span>    <span class="token keyword">fun</span> <span class="token function">onClickReset</span><span class="token punctuation">(</span>view<span class="token operator">:</span> View<span class="token operator">?</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        running <span class="token operator">=</span> <span class="token boolean">false</span>        seconds <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">val</span> timeView <span class="token operator">=</span> findViewById<span class="token operator">&lt;</span>TextView<span class="token operator">></span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>time_view<span class="token punctuation">)</span>        timeView<span class="token punctuation">.</span>text <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">"00:00:00"</span></span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">fun</span> <span class="token function">runTimer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">val</span> timeView <span class="token operator">=</span> findViewById<span class="token operator">&lt;</span>TextView<span class="token operator">></span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>time_view<span class="token punctuation">)</span>        <span class="token keyword">val</span> handler <span class="token operator">=</span> <span class="token function">Handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        handler<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token keyword">object</span> <span class="token operator">:</span> Runnable        <span class="token punctuation">&#123;</span>            <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>             <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>running<span class="token punctuation">)</span> seconds<span class="token operator">++</span>                <span class="token keyword">val</span> hours <span class="token operator">=</span> seconds <span class="token operator">/</span> <span class="token number">3600</span>                <span class="token keyword">val</span> minutes <span class="token operator">=</span> seconds <span class="token operator">%</span> <span class="token number">3600</span> <span class="token operator">/</span> <span class="token number">60</span>                <span class="token keyword">val</span> secs <span class="token operator">=</span> seconds <span class="token operator">%</span> <span class="token number">3600</span> <span class="token operator">%</span> <span class="token number">60</span>                <span class="token keyword">val</span> time <span class="token operator">=</span>                    String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>Locale<span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">"%02d:%02d:%02d"</span></span><span class="token punctuation">,</span> hours<span class="token punctuation">,</span> minutes<span class="token punctuation">,</span> secs<span class="token punctuation">)</span>                timeView<span class="token punctuation">.</span>text <span class="token operator">=</span> time                handler<span class="token punctuation">.</span><span class="token function">postDelayed</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">var</span> wasRunning <span class="token operator">=</span> <span class="token boolean">false</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>bundle<span class="token operator">:</span> Bundle<span class="token operator">?</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>bundle<span class="token punctuation">)</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_main<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>bundle <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            seconds <span class="token operator">=</span> bundle<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"seconds"</span></span><span class="token punctuation">)</span>            running <span class="token operator">=</span> bundle<span class="token punctuation">.</span><span class="token function">getBoolean</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"running"</span></span><span class="token punctuation">)</span>            wasRunning <span class="token operator">=</span> bundle<span class="token punctuation">.</span><span class="token function">getBoolean</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"wasRunning"</span></span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token function">runTimer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onSaveInstanceState</span><span class="token punctuation">(</span>bundle<span class="token operator">:</span> Bundle<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onSaveInstanceState</span><span class="token punctuation">(</span>bundle<span class="token punctuation">)</span>        bundle<span class="token punctuation">.</span><span class="token function">putInt</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"seconds"</span></span><span class="token punctuation">,</span> seconds<span class="token punctuation">)</span>        bundle<span class="token punctuation">.</span><span class="token function">putBoolean</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"running"</span></span><span class="token punctuation">,</span> running<span class="token punctuation">)</span>        bundle<span class="token punctuation">.</span><span class="token function">putBoolean</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"wasRunning"</span></span><span class="token punctuation">,</span> wasRunning<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onStop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onStop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        wasRunning <span class="token operator">=</span> running        running <span class="token operator">=</span> <span class="token boolean">false</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>wasRunning<span class="token punctuation">)</span> running <span class="token operator">=</span> <span class="token boolean">true</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><hr><p>上一篇：<a href="http://tonylsx.top/2022/10/10/Android-Studio-3/">Android-Studio开发3 | Tony</a></p><p>下一篇：<a href="http://tonylsx.top/2022/11/09/Android-Studio-5/">Android Studio开发 5 | Tony </a></p>]]></content>
      
      
      <categories>
          
          <category> Android Studio </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android Studio </tag>
            
            <tag> Java </tag>
            
            <tag> Kotlin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android-Studio开发3</title>
      <link href="/2022/10/10/Android-Studio-3/"/>
      <url>/2022/10/10/Android-Studio-3/</url>
      
        <content type="html"><![CDATA[<h2 id="任务目标"><a class="markdownIt-Anchor" href="#任务目标"></a> 任务目标</h2><p>用按钮设计一个输入电话号码的拨号盘，上面可以显示输入的电话号码。</p><p>设计一个发送按钮和删除按钮，点击删除按钮可以撤销输入的号码，点击发送按钮需要判断电话号码是否少于8位或大于11位，如果不满足要求需要提示用户输入的格式不正确，满足要求则需要将号码存放到手机外部储存的txt文件中。</p><img src="/2022/10/10/Android-Studio-3/image-20221010220838199.png" alt="image-20221010220838199" style="zoom:80%;" loading="lazy"><img src="/2022/10/10/Android-Studio-3/image-20221010221037424.png" alt="image-20221010221037424" style="zoom:80%;" loading="lazy"><h2 id="项目管理"><a class="markdownIt-Anchor" href="#项目管理"></a> 项目管理</h2><p><img src="/2022/10/10/Android-Studio-3/image-20221010221157489.png" alt="image-20221010221157489" loading="lazy"></p><p>该项目中我们主要用到以下四个文件：</p><ul><li>MainActivity.java</li><li>MainActivity.xml</li><li>AndroidManifest.xml</li><li>color_bg.xml</li></ul><p>其中，color_bg.xml需要在drawable文件夹下手动创建，其目的是更改号码按钮的背景颜色和背景图案。</p><p>AndroidManifest.xml文件需要添加几行代码，其作用是允许程序读取和写入手机内部储存，后面会详细说明。</p><h2 id="界面编辑"><a class="markdownIt-Anchor" href="#界面编辑"></a> 界面编辑</h2><p>拨号盘界面定义了12个TextView类型的控件，由于代码过于冗余且控件定义方式一模一样，这里以数字5的控件为例，其它数字控件的定义均省略。</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>androidx.constraintlayout.widget.ConstraintLayout</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>app</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res-auto<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>tools</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.android.com/tools<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">tools:</span>context</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>.MainActivity<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextView</span>        <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/textView5<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>50dp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>50dp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>background</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@drawable/color_bg<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>gravity</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>onClick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>onClickNumber<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@string/number_5<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>textColor</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#455A64<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>textSize</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>32sp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintBottom_toBottomOf</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintEnd_toEndOf</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintStart_toStartOf</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintTop_toTopOf</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextView</span> <span class="token attr-name">...</span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextView</span>        <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/textView_del<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>50dp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>50dp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>background</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@drawable/color_bg<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>gravity</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>onClick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>onClickDelete<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@string/del<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>textColor</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#4E342E<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>textSize</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>18sp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintBottom_toBottomOf</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintEnd_toEndOf</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintHorizontal_bias</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0.3<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintStart_toStartOf</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintTop_toTopOf</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintVertical_bias</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0.7<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextView</span>        <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/textView_Send<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>50dp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>50dp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>background</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@drawable/color_bg<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>gravity</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>onClick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>onClickSend<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@string/send<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>textColor</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#455A64<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>textSize</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>20sp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintBottom_toBottomOf</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintEnd_toEndOf</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintHorizontal_bias</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0.7<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintStart_toStartOf</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintTop_toTopOf</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintVertical_bias</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0.7<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>EditText</span>        <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/editTextPhone<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>ems</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>7<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>inputType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>phone<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>textSize</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>30sp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintBottom_toBottomOf</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintEnd_toEndOf</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintStart_toStartOf</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintTop_toTopOf</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintVertical_bias</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0.3<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>autofillHints</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Press Phone Number<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>androidx.constraintlayout.widget.ConstraintLayout</span><span class="token punctuation">></span></span></code></pre><p>另外，<code>background=&quot;@drawable/color_bg&quot;</code>代码是用来对控件进行背景美化和边缘棱角处理的方法，具体代码如下：</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>shape</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>corners</span>        <span class="token attr-name"><span class="token namespace">android:</span>radius</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>20dp<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>solid</span>        <span class="token attr-name"><span class="token namespace">android:</span>color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@android:color/holo_blue_light<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>shape</span><span class="token punctuation">></span></span></code></pre><p>最终样式如下：</p><p><img src="/2022/10/10/Android-Studio-3/image-20221010222245715.png" alt="image-20221010222245715" loading="lazy"></p><h2 id="java逻辑编辑"><a class="markdownIt-Anchor" href="#java逻辑编辑"></a> Java逻辑编辑</h2><p>首先，我们需要定义一个String类型字符串用来储存电话号码，然后我们需要对每个控件进行对应的按钮进行函数编辑，根据<a href="http://tonylsx.top/2022/09/17/Andriod-Studio-1/">Andriod Studio开发1 | Tony (tonylsx.top)</a>，我们可以很容易的在MainActivity类中写出每个按钮需要进行的操作。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainActivity</span> <span class="token keyword">extends</span> <span class="token class-name">AppCompatActivity</span><span class="token punctuation">&#123;</span><span class="token class-name">String</span> <span class="token class-name">PhoneNumber</span> <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClickNumber0</span><span class="token punctuation">(</span><span class="token class-name">View</span> view<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token class-name">EditText</span> number <span class="token operator">=</span> <span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>editTextPhone<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">PhoneNumber</span> <span class="token operator">+=</span> <span class="token string">"0"</span><span class="token punctuation">;</span>        number<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token class-name">PhoneNumber</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token comment">//省略1-9的OnClickNumber()函数...</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClickDelete</span><span class="token punctuation">(</span><span class="token class-name">View</span> view<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token class-name">EditText</span> number <span class="token operator">=</span> <span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>editTextPhone<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">PhoneNumber</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token class-name">PhoneNumber</span> <span class="token operator">=</span> <span class="token class-name">PhoneNumber</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token class-name">PhoneNumber</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        number<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token class-name">PhoneNumber</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClickSend</span><span class="token punctuation">(</span><span class="token class-name">View</span> view<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token class-name">EditText</span> number <span class="token operator">=</span> <span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>editTextPhone<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">PhoneNumber</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">11</span> <span class="token operator">||</span> <span class="token class-name">PhoneNumber</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">new</span> <span class="token class-name">AlertDialog<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token class-name">MainActivity</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">setIcon</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">android<span class="token punctuation">.</span></span>R</span><span class="token punctuation">.</span>drawable<span class="token punctuation">.</span>ic_dialog_alert<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">setTitle</span><span class="token punctuation">(</span><span class="token string">"Invalid Phone Number"</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">setMessage</span><span class="token punctuation">(</span><span class="token string">"Phone number should between 8 and 11 digits!"</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">setPositiveButton</span><span class="token punctuation">(</span><span class="token string">"Okay fine"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>dialogInterface<span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span> <span class="token comment">//Print to a txt file</span>            <span class="token class-name">Save_to_txt</span><span class="token punctuation">(</span><span class="token class-name">PhoneNumber</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">PhoneNumber</span> <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        number<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token class-name">PhoneNumber</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>首先我们需要关注<code>onClickDelete()</code>函数，需要注意的是<code>if</code>语句的重要性，如果没有写<code>if</code>的话，当<code>PhoneNumber</code>为空时再次删除最后一个元素时，即调用<code>substring()</code>函数时就会出现错误，导致程序崩溃！</p><p>然后，这里面需要关注的是<code>OnClickSend()</code>函数，当数字长度不满足要求时，Android会弹出警告，提示有误并将<code>PhoneNumber</code>清空让用户重新输入，如果没有问题的话执行<code>Save_to_txt(PhoneNumber);</code>该函数的作用是在手机的根目录下创建一个新的文件夹，并在该文件夹下创建一个新的TXT文件，并将<code>PhoneNumber</code>存放到该TXT文件中。其详细代码如下：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">Save_to_txt</span><span class="token punctuation">(</span><span class="token class-name">String</span> number<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> path <span class="token operator">=</span> <span class="token class-name">Environment</span><span class="token punctuation">.</span><span class="token function">getExternalStorageDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token class-name">File</span><span class="token punctuation">.</span>separator <span class="token operator">+</span> <span class="token string">"Tony"</span><span class="token punctuation">;</span>        <span class="token class-name">File</span> folder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>folder<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            folder<span class="token punctuation">.</span><span class="token function">mkdirs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>path <span class="token operator">+</span> <span class="token class-name">File</span><span class="token punctuation">.</span>separator <span class="token operator">+</span> <span class="token string">"New_File.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>path <span class="token operator">+</span> <span class="token class-name">File</span><span class="token punctuation">.</span>separator <span class="token operator">+</span> <span class="token string">"New_File.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            file<span class="token punctuation">.</span><span class="token function">createNewFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">FileWriter</span> fw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>            fw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>            fw<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span></code></pre><p>其中，<code>Environment.getExternalStorageDirectory()</code>代表的是手机的内部存储根目录，也即<code>/storage/emulated/0</code>（<code>/storage/emulated/1</code>代表的是手机外部存储根目录）；<code>File.separator</code>代表的是<code>/</code>，对，就是斜杠。</p><p>此外，如果需要写入手机外部存储（即SD卡），需要在<code>AndroidManifest.xml</code>中加入以下内容，作用是申请程序的外部存储读取权限。</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>uses-permission</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>android.permission.WRITE_EXTERNAL_STORAGE<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>uses-permission</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>android.permission.READ_EXTERNAL_STORAGE<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>&lt;application    android:requestLegacyExternalStorage="true"    ...</code></pre><p>当然，上面的代码是存储到手机的内存中去，因此需要在手机APP权限中手动开启存储权限，如下图所示。否则将无法创建文件夹和对应的文件，并会像下面这样报错：</p><pre class="language-http" data-language="http"><code class="language-http">W/System.err: java.io.FileNotFoundException: /storage/emulated/0/NewFolder/New_File.txt: open failed: EACCES (Permission denied)W/System.err:     at libcore.io.IoBridge.open(IoBridge.java:496)W/System.err:     at java.io.FileOutputStream.&lt;init>(FileOutputStream.java:235)W/System.err:     at java.io.FileOutputStream.&lt;init>(FileOutputStream.java:186)W/System.err:     at java.io.FileWriter.&lt;init>(FileWriter.java:90)W/System.err:     at com.example.assignment1.MainActivity.Save_to_txt(MainActivity.java:166)W/System.err:     at com.example.assignment1.MainActivity.onClickSend(MainActivity.java:148)W/System.err:     at java.lang.reflect.Method.invoke(Native Method)</code></pre><p><img src="/2022/10/10/Android-Studio-3/image-20221010225547722.png" alt="image-20221010225547722" loading="lazy"></p><h2 id="针对按钮响应函数的一些优化"><a class="markdownIt-Anchor" href="#针对按钮响应函数的一些优化"></a> 针对按钮响应函数的一些优化</h2><p>为什么要对<code>OnClickNumberX()</code>函数进行优化呢，因为这些函数的功能一毛一样，那为什么不写成一个函数呢，在调用的时候多个按钮都可以调用同一个函数，不是更加简洁嘛？在Java中我们可以使用<code>switch-case</code>函数进行编辑，具体代码如下：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClickNumber</span><span class="token punctuation">(</span><span class="token class-name">View</span> view<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token class-name">EditText</span> number <span class="token operator">=</span> <span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>editTextPhone<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">switch</span><span class="token punctuation">(</span>view<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">case</span> <span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>textView0<span class="token operator">:</span>                <span class="token class-name">PhoneNumber</span> <span class="token operator">+=</span> <span class="token string">"0"</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>textView1<span class="token operator">:</span>                <span class="token class-name">PhoneNumber</span> <span class="token operator">+=</span> <span class="token string">"1"</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token punctuation">&#125;</span>        number<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token class-name">PhoneNumber</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></code></pre><h2 id="kotlin逻辑编辑"><a class="markdownIt-Anchor" href="#kotlin逻辑编辑"></a> Kotlin逻辑编辑</h2><p>不做解释了，直接看代码（还是Kotlin简洁啊！）</p><pre class="language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">class</span> MainActivity <span class="token operator">:</span> <span class="token function">AppCompatActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">var</span> PhoneNumber <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">""</span></span>        <span class="token keyword">fun</span> <span class="token function">onClickNumber</span><span class="token punctuation">(</span>view<span class="token operator">:</span> View<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">val</span> number <span class="token operator">=</span> findViewById<span class="token operator">&lt;</span>EditText<span class="token operator">></span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>editTextPhone<span class="token punctuation">)</span>        <span class="token keyword">when</span> <span class="token punctuation">(</span>view<span class="token punctuation">.</span>id<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>textView0 <span class="token operator">-></span> PhoneNumber <span class="token operator">+=</span> <span class="token string-literal singleline"><span class="token string">"0"</span></span>            R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>textView1 <span class="token operator">-></span> PhoneNumber <span class="token operator">+=</span> <span class="token string-literal singleline"><span class="token string">"1"</span></span>            R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>textView2 <span class="token operator">-></span> PhoneNumber <span class="token operator">+=</span> <span class="token string-literal singleline"><span class="token string">"2"</span></span>            R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>textView3 <span class="token operator">-></span> PhoneNumber <span class="token operator">+=</span> <span class="token string-literal singleline"><span class="token string">"3"</span></span>            R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>textView4 <span class="token operator">-></span> PhoneNumber <span class="token operator">+=</span> <span class="token string-literal singleline"><span class="token string">"4"</span></span>            R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>textView5 <span class="token operator">-></span> PhoneNumber <span class="token operator">+=</span> <span class="token string-literal singleline"><span class="token string">"5"</span></span>            R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>textView6 <span class="token operator">-></span> PhoneNumber <span class="token operator">+=</span> <span class="token string-literal singleline"><span class="token string">"6"</span></span>            R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>textView7 <span class="token operator">-></span> PhoneNumber <span class="token operator">+=</span> <span class="token string-literal singleline"><span class="token string">"7"</span></span>            R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>textView8 <span class="token operator">-></span> PhoneNumber <span class="token operator">+=</span> <span class="token string-literal singleline"><span class="token string">"8"</span></span>            R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>textView9 <span class="token operator">-></span> PhoneNumber <span class="token operator">+=</span> <span class="token string-literal singleline"><span class="token string">"9"</span></span>        <span class="token punctuation">&#125;</span>        number<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>PhoneNumber<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">fun</span> <span class="token function">onClickDelete</span><span class="token punctuation">(</span>view<span class="token operator">:</span> View<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">val</span> number <span class="token operator">=</span> findViewById<span class="token operator">&lt;</span>EditText<span class="token operator">></span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>editTextPhone<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>PhoneNumber<span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            PhoneNumber <span class="token operator">=</span> PhoneNumber<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> PhoneNumber<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>        number<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>PhoneNumber<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">fun</span> <span class="token function">onClickSend</span><span class="token punctuation">(</span>view<span class="token operator">:</span> View<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">val</span> number <span class="token operator">=</span> findViewById<span class="token operator">&lt;</span>EditText<span class="token operator">></span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>editTextPhone<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>PhoneNumber<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">11</span> <span class="token operator">||</span> PhoneNumber<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            AlertDialog<span class="token punctuation">.</span><span class="token function">Builder</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token label symbol">@MainActivity</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setIcon</span><span class="token punctuation">(</span>android<span class="token punctuation">.</span>R<span class="token punctuation">.</span>drawable<span class="token punctuation">.</span>ic_dialog_alert<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setTitle</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"Invalid Phone Number"</span></span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setMessage</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"Phone number should between 8 and 11 digits!"</span></span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setPositiveButton</span><span class="token punctuation">(</span>                    <span class="token string-literal singleline"><span class="token string">"Okay fine"</span></span>                <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> _<span class="token operator">:</span> DialogInterface<span class="token operator">?</span><span class="token punctuation">,</span> _<span class="token operator">:</span> Int <span class="token operator">-></span> <span class="token punctuation">&#125;</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span>  <span class="token comment">//Print to a txt file</span>        <span class="token punctuation">&#123;</span>            <span class="token function">Save_to_txt</span><span class="token punctuation">(</span>PhoneNumber<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        PhoneNumber <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">""</span></span>        number<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>PhoneNumber<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">fun</span> <span class="token function">Save_to_txt</span><span class="token punctuation">(</span>number<span class="token operator">:</span> String<span class="token operator">?</span><span class="token punctuation">)</span>     <span class="token punctuation">&#123;</span>        <span class="token keyword">val</span> path <span class="token operator">=</span> Environment<span class="token punctuation">.</span><span class="token function">getExternalStorageDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>absolutePath <span class="token operator">+</span> File<span class="token punctuation">.</span>separator <span class="token operator">+</span> <span class="token string-literal singleline"><span class="token string">"NewFolder"</span></span>        <span class="token keyword">val</span> folder <span class="token operator">=</span> <span class="token function">File</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>folder<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>             folder<span class="token punctuation">.</span><span class="token function">mkdirs</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">try</span>         <span class="token punctuation">&#123;</span>            <span class="token keyword">val</span> file <span class="token operator">=</span> <span class="token function">File</span><span class="token punctuation">(</span>path <span class="token operator">+</span> File<span class="token punctuation">.</span>separator <span class="token operator">+</span> <span class="token string-literal singleline"><span class="token string">"New_File.txt"</span></span><span class="token punctuation">)</span>            <span class="token function">println</span><span class="token punctuation">(</span>path <span class="token operator">+</span> File<span class="token punctuation">.</span>separator <span class="token operator">+</span> <span class="token string-literal singleline"><span class="token string">"New_File.txt"</span></span><span class="token punctuation">)</span>            file<span class="token punctuation">.</span><span class="token function">createNewFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">val</span> fw <span class="token operator">=</span> <span class="token function">FileWriter</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span>            fw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span>            fw<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>         <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token operator">:</span> Exception<span class="token punctuation">)</span>         <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token operator">:</span> Bundle<span class="token operator">?</span><span class="token punctuation">)</span>     <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_main<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="效果展示"><a class="markdownIt-Anchor" href="#效果展示"></a> 效果展示</h2><img src="/2022/10/10/Android-Studio-3/image-20221010232513124.png" alt="image-20221010232513124" style="zoom:80%;" loading="lazy"><hr><p>上一篇：<a href="http://tonylsx.top/2022/09/27/Android-studio-2/">Android Studio开发 2 | Tony</a></p><p>下一篇：<a href="http://tonylsx.top/2022/10/11/Android-Studio-4/">Android-Studio开发 4 | Tony</a></p>]]></content>
      
      
      <categories>
          
          <category> Android Studio </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android Studio </tag>
            
            <tag> Java </tag>
            
            <tag> Kotlin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android Studio开发 2</title>
      <link href="/2022/09/27/Android-studio-2/"/>
      <url>/2022/09/27/Android-studio-2/</url>
      
        <content type="html"><![CDATA[<h2 id="任务目标显式跳转"><a class="markdownIt-Anchor" href="#任务目标显式跳转"></a> 任务目标——显式跳转</h2><p>实现两个Activities之间的文字信息传输。</p><p><img src="/2022/09/27/Android-studio-2/image-20220927021701138.png" alt="image-20220927021701138" loading="lazy"></p><h2 id="项目管理"><a class="markdownIt-Anchor" href="#项目管理"></a> 项目管理</h2><p><img src="/2022/09/27/Android-studio-2/image-20220927021810857.png" alt="image-20220927021810857" loading="lazy"></p><p>该项目中我们主要用到以下四个文件：</p><ul><li>MainActivity.java</li><li>MainActivity.xml</li><li>MainActivity2.java</li><li>MainActivity2.xml</li></ul><p>其中，MainActivity2需要手动创建。在管理栏下点击右键选择<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi><mi>e</mi><mi>w</mi><mo>→</mo><mi>A</mi><mi>c</mi><mi>t</mi><mi>i</mi><mi>v</mi><mi>i</mi><mi>t</mi><mi>y</mi><mo>→</mo><mi>E</mi><mi>m</mi><mi>p</mi><mi>t</mi><mi>y</mi><mtext> </mtext><mi>A</mi><mi>c</mi><mi>t</mi><mi>i</mi><mi>v</mi><mi>i</mi><mi>t</mi><mi>y</mi></mrow><annotation encoding="application/x-tex">New\to Activity\to Empty\ Activity</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">A</span><span class="mord mathdefault">c</span><span class="mord mathdefault">t</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord mathdefault">i</span><span class="mord mathdefault">t</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mord mathdefault">m</span><span class="mord mathdefault">p</span><span class="mord mathdefault">t</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace"> </span><span class="mord mathdefault">A</span><span class="mord mathdefault">c</span><span class="mord mathdefault">t</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord mathdefault">i</span><span class="mord mathdefault">t</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span>.创建后AndroidMainfeast.xml文件会自动生成有关MainActivity2的代码，如下图所示：</p><p><img src="/2022/09/27/Android-studio-2/image-20220927022235374.png" alt="image-20220927022235374" loading="lazy"></p><h2 id="界面编辑"><a class="markdownIt-Anchor" href="#界面编辑"></a> 界面编辑</h2><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!---activity_main.xml---></span><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>androidx.constraintlayout.widget.ConstraintLayout</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>app</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res-auto<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>tools</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.android.com/tools<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">tools:</span>context</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>.MainActivity<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span>        <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/button<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_marginTop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>20dp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Send Message<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>onClick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>onSendMessage<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintEnd_toEndOf</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintHorizontal_bias</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0.498<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintStart_toStartOf</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintTop_toBottomOf</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/message<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>EditText</span>        <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/message<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_marginTop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>30dp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>ems</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>hint</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Enter a message...<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>inputType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>textPersonName<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>minHeight</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>48dp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintEnd_toEndOf</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintStart_toStartOf</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintTop_toTopOf</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>androidx.constraintlayout.widget.ConstraintLayout</span><span class="token punctuation">></span></span></code></pre><p><img src="/2022/09/27/Android-studio-2/image-20220927022446373.png" alt="image-20220927022446373" loading="lazy"></p><hr><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!---activity_main2.xml---></span><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>androidx.constraintlayout.widget.ConstraintLayout</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>app</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res-auto<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>tools</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.android.com/tools<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">tools:</span>context</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>.MainActivity2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextView</span>        <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/get_message<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_marginTop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>80dp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>TextView<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintEnd_toEndOf</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintHorizontal_bias</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0.498<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintStart_toStartOf</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintTop_toTopOf</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>androidx.constraintlayout.widget.ConstraintLayout</span><span class="token punctuation">></span></span></code></pre><p><img src="/2022/09/27/Android-studio-2/image-20220927022539379.png" alt="image-20220927022539379" loading="lazy"></p><h2 id="java逻辑编辑"><a class="markdownIt-Anchor" href="#java逻辑编辑"></a> Java逻辑编辑</h2><p>首先编辑<code>onSendMessage()</code>函数用来控制按下按钮之后的操作。其中，Intent关联新的界面，对其操作可实现特定的<strong>意图</strong>，编辑完成后可利用StartActivity函数进行打开新的界面。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// MainActivity.java</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainActivity</span> <span class="token keyword">extends</span> <span class="token class-name">AppCompatActivity</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token class-name">Bundle</span> savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_main<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onSendMessage</span><span class="token punctuation">(</span><span class="token class-name">View</span> view<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">EditText</span> messageView <span class="token operator">=</span> <span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> messageText <span class="token operator">=</span> messageView<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Intent</span> intent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token class-name">MainActivity2</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        intent<span class="token punctuation">.</span><span class="token function">putExtra</span><span class="token punctuation">(</span><span class="token class-name">MainActivity2</span><span class="token punctuation">.</span>message<span class="token punctuation">,</span> messageText<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//传入message</span>        <span class="token function">startActivity</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p><code>putExtra()</code>函数会添加一些信息到指定的intent中，而<code>getIntent()</code>会获取之前得到的信息。这样就可以实现消息在两个activities中的传递与交互了。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//MainActivity2.java</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainActivity2</span> <span class="token keyword">extends</span> <span class="token class-name">AppCompatActivity</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> message <span class="token operator">=</span> <span class="token string">"MESSAGE!!!"</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token class-name">Bundle</span> savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_main2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Intent</span> intent <span class="token operator">=</span> <span class="token function">getIntent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取Message</span>        <span class="token class-name">String</span> messageText <span class="token operator">=</span> intent<span class="token punctuation">.</span><span class="token function">getStringExtra</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">TextView</span> messageView <span class="token operator">=</span> <span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>get_message<span class="token punctuation">)</span><span class="token punctuation">;</span>        messageView<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>messageText<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></code></pre><h2 id="kotlin逻辑编辑"><a class="markdownIt-Anchor" href="#kotlin逻辑编辑"></a> Kotlin逻辑编辑</h2><pre class="language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">// MainActivity.kt</span><span class="token keyword">class</span> MainActivity <span class="token operator">:</span> <span class="token function">AppCompatActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token operator">:</span> Bundle<span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_main<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">fun</span> <span class="token function">onSendMessage</span><span class="token punctuation">(</span>view<span class="token operator">:</span> View<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">val</span> messageView <span class="token operator">=</span> findViewById<span class="token operator">&lt;</span>EditText<span class="token operator">></span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>message<span class="token punctuation">)</span>        <span class="token keyword">val</span> messageText <span class="token operator">=</span> messageView<span class="token punctuation">.</span>text<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">val</span> intent <span class="token operator">=</span> <span class="token function">Intent</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> MainActivity2<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">.</span>java<span class="token punctuation">)</span>        intent<span class="token punctuation">.</span><span class="token function">putExtra</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"msg"</span></span><span class="token punctuation">,</span> messageText<span class="token punctuation">)</span>        <span class="token function">startActivity</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">//MainActivity2.kt</span><span class="token keyword">class</span> MainActivity2 <span class="token operator">:</span> <span class="token function">AppCompatActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token operator">:</span> Bundle<span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_main2<span class="token punctuation">)</span>        <span class="token keyword">val</span> messageText <span class="token operator">=</span> intent<span class="token punctuation">.</span><span class="token function">getStringExtra</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"msg"</span></span><span class="token punctuation">)</span>        <span class="token keyword">val</span> messageView <span class="token operator">=</span> findViewById<span class="token operator">&lt;</span>TextView<span class="token operator">></span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>get_message<span class="token punctuation">)</span>        messageView<span class="token punctuation">.</span>text <span class="token operator">=</span> messageText    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="任务目标隐式跳转"><a class="markdownIt-Anchor" href="#任务目标隐式跳转"></a> 任务目标——隐式跳转</h2><p>实现将程序中的文字发送到指定程序（如短信）。</p><p><img src="/2022/09/27/Android-studio-2/image-20221031161231815.png" alt="image-20221031161231815" loading="lazy"></p><p><img src="/2022/09/27/Android-studio-2/image-20221031161159345.png" alt="image-20221031161159345" loading="lazy"></p><h2 id="java逻辑编辑-2"><a class="markdownIt-Anchor" href="#java逻辑编辑-2"></a> Java逻辑编辑</h2><p><code>Intent.createChooser</code>是打开Android默认的选择器， 如上图所示。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainActivity</span> <span class="token keyword">extends</span> <span class="token class-name">AppCompatActivity</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onSendMessage</span><span class="token punctuation">(</span><span class="token class-name">View</span> view<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token class-name">EditText</span> messageView <span class="token operator">=</span> <span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> messagetext <span class="token operator">=</span> messageView<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Intent</span> intent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token class-name">Intent</span><span class="token punctuation">.</span>ACTION_SEND<span class="token punctuation">)</span><span class="token punctuation">;</span>        intent<span class="token punctuation">.</span><span class="token function">setType</span><span class="token punctuation">(</span><span class="token string">"text/plain"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        intent<span class="token punctuation">.</span><span class="token function">putExtra</span><span class="token punctuation">(</span><span class="token class-name">Intent</span><span class="token punctuation">.</span>EXTRA_TEXT<span class="token punctuation">,</span> messagetext<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> chooserTitle <span class="token operator">=</span> <span class="token string">"YZDD"</span><span class="token punctuation">;</span>        <span class="token class-name">Intent</span> choosenIntent <span class="token operator">=</span> <span class="token class-name">Intent</span><span class="token punctuation">.</span><span class="token function">createChooser</span><span class="token punctuation">(</span>intent<span class="token punctuation">,</span> chooserTitle<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">startActivity</span><span class="token punctuation">(</span>choosenIntent<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token class-name">Bundle</span> savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_main<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>我们也可以直接打开自己的软件或系统自带的软件，如下面的程序就是打开短信APP的方法：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onSendMessage</span><span class="token punctuation">(</span><span class="token class-name">View</span> view<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token class-name">EditText</span> messageView <span class="token operator">=</span> <span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> messagetext <span class="token operator">=</span> messageView<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Intent</span> intent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token class-name">Intent</span><span class="token punctuation">.</span>ACTION_SENDTO<span class="token punctuation">)</span><span class="token punctuation">;</span>        intent<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token class-name">Uri</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"smsto:10086"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//使用"smsto:"可不指定联系人</span>        intent<span class="token punctuation">.</span><span class="token function">putExtra</span><span class="token punctuation">(</span><span class="token string">"sms_body"</span><span class="token punctuation">,</span> messagetext<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">startActivity</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></code></pre><h2 id="kotlin逻辑编辑-2"><a class="markdownIt-Anchor" href="#kotlin逻辑编辑-2"></a> Kotlin逻辑编辑</h2><pre class="language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">class</span> MainActivity <span class="token operator">:</span> <span class="token function">AppCompatActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token operator">:</span> Bundle<span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_main<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">fun</span> <span class="token function">onSendMessage</span><span class="token punctuation">(</span>view<span class="token operator">:</span> View<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> messageView <span class="token operator">=</span> findViewById<span class="token operator">&lt;</span>EditText<span class="token operator">></span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>message<span class="token punctuation">)</span>        <span class="token keyword">var</span> messageText <span class="token operator">=</span> messageView<span class="token punctuation">.</span>text<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">var</span> intent <span class="token operator">=</span> <span class="token function">Intent</span><span class="token punctuation">(</span>Intent<span class="token punctuation">.</span>ACTION_SENDTO<span class="token punctuation">)</span>        intent<span class="token punctuation">.</span>data <span class="token operator">=</span> Uri<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"smsto:10086"</span></span><span class="token punctuation">)</span>        intent<span class="token punctuation">.</span><span class="token function">putExtra</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"sms_body"</span></span><span class="token punctuation">,</span> messageText<span class="token punctuation">)</span>        <span class="token function">startActivity</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">class</span> MainActivity <span class="token operator">:</span> <span class="token function">AppCompatActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token operator">:</span> Bundle<span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_main<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">fun</span> <span class="token function">onSendMessage</span><span class="token punctuation">(</span>view<span class="token operator">:</span> View<span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">val</span> messageView <span class="token operator">=</span> findViewById<span class="token operator">&lt;</span>EditText<span class="token operator">></span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>message<span class="token punctuation">)</span>        <span class="token keyword">val</span> messagetext <span class="token operator">=</span> messageView<span class="token punctuation">.</span>text<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">val</span> intent <span class="token operator">=</span> <span class="token function">Intent</span><span class="token punctuation">(</span>Intent<span class="token punctuation">.</span>ACTION_SEND<span class="token punctuation">)</span>        intent<span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">"text/plain"</span></span>        intent<span class="token punctuation">.</span><span class="token function">putExtra</span><span class="token punctuation">(</span>Intent<span class="token punctuation">.</span>EXTRA_TEXT<span class="token punctuation">,</span> messagetext<span class="token punctuation">)</span>        <span class="token keyword">val</span> chooserTitle <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">"YZDD"</span></span>        <span class="token keyword">val</span> choosenIntent <span class="token operator">=</span> Intent<span class="token punctuation">.</span><span class="token function">createChooser</span><span class="token punctuation">(</span>intent<span class="token punctuation">,</span> chooserTitle<span class="token punctuation">)</span>        <span class="token function">startActivity</span><span class="token punctuation">(</span>choosenIntent<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><hr><p>上一篇：<a href="http://tonylsx.top/2022/09/17/Andriod-Studio-1/">Android Studio 开发 1| Tony</a></p><p>下一篇：<a href="http://tonylsx.top/2022/10/10/Android-Studio-3/">Android-Studio开发 3 | Tony</a></p>]]></content>
      
      
      <categories>
          
          <category> Android Studio </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android Studio </tag>
            
            <tag> Java </tag>
            
            <tag> Kotlin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Socket网络编程1</title>
      <link href="/2022/09/17/socket-program-1/"/>
      <url>/2022/09/17/socket-program-1/</url>
      
        <content type="html"><![CDATA[<h1 id="server-通信步骤"><a class="markdownIt-Anchor" href="#server-通信步骤"></a> Server 通信步骤</h1><ol><li><strong>Socket()</strong> to Create a TCP socket</li><li><strong>Bind()</strong> to Assign a port to socket</li><li>Set socket to <strong>Listen</strong></li><li><strong>Accept</strong> new connection</li><li><strong>Communicate</strong></li><li><strong>Close</strong> the connection</li></ol><h2 id="windows-c版"><a class="markdownIt-Anchor" href="#windows-c版"></a> Windows C++版</h2><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression"><span class="token function">comment</span><span class="token punctuation">(</span>lib<span class="token punctuation">,</span> </span><span class="token string">"ws2_32.lib"</span><span class="token expression"><span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdlib></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;winsock2.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;io.h></span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//初始化模块，仅Windows系统需要</span>WORD sockVersion <span class="token operator">=</span> <span class="token function">MAKEWORD</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>WSADATA wsdata<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">WSAStartup</span><span class="token punctuation">(</span>sockVersion<span class="token punctuation">,</span> <span class="token operator">&amp;</span>wsdata<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Initialize Error!"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//建立socket</span>SOCKET s <span class="token operator">=</span> <span class="token function">socket</span><span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span> SOCK_STREAM<span class="token punctuation">,</span> IPPROTO_TCP<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//IPPROTO_TCP参数也可写为0</span><span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">==</span> INVALID_SOCKET<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"socket Error!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>sockaddr_in ss<span class="token punctuation">;</span><span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ss<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>ss<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ss<span class="token punctuation">.</span>sin_family <span class="token operator">=</span> AF_INET<span class="token punctuation">;</span><span class="token comment">//IPv4</span>ss<span class="token punctuation">.</span>sin_port <span class="token operator">=</span> <span class="token function">htons</span><span class="token punctuation">(</span><span class="token number">6666</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//port No.</span>ss<span class="token punctuation">.</span>sin_addr<span class="token punctuation">.</span>s_addr <span class="token operator">=</span> <span class="token function">htonl</span><span class="token punctuation">(</span>INADDR_LOOPBACK<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//INADDR_LOOPBACK：默认本机IP地址127.0.0.1</span>    <span class="token comment">//Windows不支持INADDR_ANY写法，默认IP地址为0.0.0.0</span><span class="token comment">//Windows支持该种写法：inet_addr("127.0.0.1")</span>    <span class="token comment">//bind:socket绑定IP地址和端口用于监听</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">bind</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token punctuation">(</span>sockaddr<span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>ss<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>ss<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> SOCKET_ERROR<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"Bind Error!"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token comment">//listen:设定可同时排队的Client最大连接个数</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">listen</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"Listen Error!"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    cout<span class="token operator">&lt;&lt;</span><span class="token string">"Waiting for Clients request..."</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token comment">//accept:等待客户端链接</span>    sockaddr_in clnt_addr<span class="token punctuation">;</span>    <span class="token keyword">int</span> clnt_addr_size <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>clnt_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> fd <span class="token operator">=</span> <span class="token function">accept</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token punctuation">(</span>sockaddr<span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>clnt_addr<span class="token punctuation">,</span> <span class="token operator">&amp;</span>clnt_addr_size<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//int fd = accept(s, (sockaddr*)NULL, NULL);</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>fd <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"Accept Error"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//Linux或Mac是write()函数</span>    string message <span class="token operator">=</span> <span class="token string">"Hello Client!"</span><span class="token punctuation">;</span>    <span class="token function">send</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> message<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> message<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//Linux或Mac是close()函数</span>    <span class="token function">closesocket</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">closesocket</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="linuxmac-c版"><a class="markdownIt-Anchor" href="#linuxmac-c版"></a> Linux/Mac C版</h2><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/socket.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;netinet/in.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;ctype.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//建立socket套接字 注意是int类型</span><span class="token keyword">int</span> listenfd <span class="token operator">=</span> <span class="token function">socket</span><span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span> SOCK_STREAM<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>listenfd <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Socket Error!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr_in</span> st_sersock<span class="token punctuation">;</span><span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>st_sersock<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>st_sersock<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>st_sersock<span class="token punctuation">.</span>sin_family <span class="token operator">=</span> AF_INET<span class="token punctuation">;</span>  <span class="token comment">//IPv4协议</span>st_sersock<span class="token punctuation">.</span>sin_addr<span class="token punctuation">.</span>s_addr <span class="token operator">=</span> <span class="token function">htonl</span><span class="token punctuation">(</span>INADDR_ANY<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//127.0.0.1</span><span class="token comment">//INADDR_ANY是0.0.0.0指的是本机IP地址</span><span class="token comment">//Windows要写成INADDR_LOOPBACK</span>st_sersock<span class="token punctuation">.</span>sin_port <span class="token operator">=</span> <span class="token function">htons</span><span class="token punctuation">(</span><span class="token number">6666</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//host number</span><span class="token comment">//Socket绑定IP和端口用于监听</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">bind</span><span class="token punctuation">(</span>listenfd<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>st_sersock<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>st_sersock<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Bind Error!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//设定可同时排队的客户端最大连接个数</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">listen</span><span class="token punctuation">(</span>listenfd<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Listen Error!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//准备接受客户端连接</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"======Waiting for client's request======\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//阻塞等待客户端连接</span><span class="token keyword">int</span> connfd <span class="token operator">=</span> <span class="token function">accept</span><span class="token punctuation">(</span>i_listenfd<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>connfd <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Accept Error!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Client %d, welcome!\n"</span><span class="token punctuation">,</span> connfd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">char</span> msg<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Hello Client!"</span><span class="token punctuation">;</span><span class="token comment">//将msg发送到Client端</span><span class="token function">write</span><span class="token punctuation">(</span>connfd<span class="token punctuation">,</span> message<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Windows下是closesocket</span><span class="token function">close</span><span class="token punctuation">(</span>connfd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">close</span><span class="token punctuation">(</span>listenfd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="python版"><a class="markdownIt-Anchor" href="#python版"></a> Python版</h2><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> socket<span class="token keyword">try</span><span class="token punctuation">:</span>    s <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span><span class="token keyword">except</span> Exception<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Socket Error!"</span><span class="token punctuation">)</span><span class="token comment"># listen port</span><span class="token keyword">try</span><span class="token punctuation">:</span>    s<span class="token punctuation">.</span>bind<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span> <span class="token number">6666</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">except</span> Exception<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Bind Error!"</span><span class="token punctuation">)</span><span class="token keyword">try</span><span class="token punctuation">:</span>    s<span class="token punctuation">.</span>listen<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token keyword">except</span> Exception<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Listen Error!"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Waiting for connection...'</span><span class="token punctuation">)</span><span class="token keyword">try</span><span class="token punctuation">:</span>sock<span class="token punctuation">,</span> addr <span class="token operator">=</span> s<span class="token punctuation">.</span>accept<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">except</span> Exception<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Accept Error!"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span>  <span class="token comment"># (Id, port)</span>msg <span class="token operator">=</span> <span class="token string">"Hello Client!"</span>sock<span class="token punctuation">.</span>send<span class="token punctuation">(</span>msg<span class="token punctuation">)</span>sock<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>exit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span></code></pre><h1 id="client通信步骤"><a class="markdownIt-Anchor" href="#client通信步骤"></a> Client通信步骤</h1><ol><li><strong>Socket()</strong> to Create a TCP socket</li><li>Establish <strong>connection</strong></li><li>Communicate (<strong>read</strong>)</li><li><strong>Close</strong> the connection</li></ol><h2 id="windows-c版-2"><a class="markdownIt-Anchor" href="#windows-c版-2"></a> Windows C++版</h2><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression"><span class="token function">comment</span><span class="token punctuation">(</span>lib<span class="token punctuation">,</span> </span><span class="token string">"ws2_32.lib"</span><span class="token expression"><span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdlib></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;winsock2.h></span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//初始化模块，仅Windows系统需要</span>    WORD sockVersion <span class="token operator">=</span> <span class="token function">MAKEWORD</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    WSADATA wsdata<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">WSAStartup</span><span class="token punctuation">(</span>sockVersion<span class="token punctuation">,</span> <span class="token operator">&amp;</span>wsdata<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Initialize Error!"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    SOCKET s <span class="token operator">=</span> <span class="token function">socket</span><span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span> SOCK_STREAM<span class="token punctuation">,</span> IPPROTO_TCP<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">==</span> INVALID_SOCKET<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"Invalid Socket!"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    sockaddr_in ss<span class="token punctuation">;</span>    ss<span class="token punctuation">.</span>sin_family <span class="token operator">=</span> AF_INET<span class="token punctuation">;</span><span class="token comment">//IPv4</span>    ss<span class="token punctuation">.</span>sin_port <span class="token operator">=</span> <span class="token function">htons</span><span class="token punctuation">(</span><span class="token number">6666</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//port No.</span>    ss<span class="token punctuation">.</span>sin_addr<span class="token punctuation">.</span>s_addr <span class="token operator">=</span> <span class="token function">htonl</span><span class="token punctuation">(</span>INADDR_LOOPBACK<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">connect</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token punctuation">(</span>sockaddr<span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>ss<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>ss<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> SOCKET_ERROR<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"Connect Error!"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        <span class="token function">closesocket</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    string message<span class="token punctuation">;</span>    <span class="token comment">//LInux或Mac是read()函数</span>    <span class="token comment">//read函数第三个参数必须为固定值，不能使用message.length()</span>    <span class="token comment">//因为message.length()对于c++的string来说初始值为0！</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">recv</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> message<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        cout<span class="token operator">&lt;&lt;</span>message<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token function">closesocket</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="linuxmac-c版-2"><a class="markdownIt-Anchor" href="#linuxmac-c版-2"></a> Linux/Mac C版</h2><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/socket.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;netinet/in.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;ctype.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> s <span class="token operator">=</span> <span class="token function">socket</span><span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span> SOCK_STREAM<span class="token punctuation">,</span> IPPROTO_TCP<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">==</span> INVALID_SOCKET<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Invalid Socket!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    sockaddr_in ss<span class="token punctuation">;</span>    ss<span class="token punctuation">.</span>sin_family <span class="token operator">=</span> AF_INET<span class="token punctuation">;</span><span class="token comment">//IPv4</span>    ss<span class="token punctuation">.</span>sin_port <span class="token operator">=</span> <span class="token function">htons</span><span class="token punctuation">(</span><span class="token number">6666</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//port No.</span>    ss<span class="token punctuation">.</span>sin_addr<span class="token punctuation">.</span>s_addr <span class="token operator">=</span> <span class="token function">htonl</span><span class="token punctuation">(</span>INADDR_ANY<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">connect</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token punctuation">(</span>sockaddr<span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>ss<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>ss<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> SOCKET_ERROR<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Connect Error!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">close</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">char</span> message<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">read</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> message<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">close</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="python版-2"><a class="markdownIt-Anchor" href="#python版-2"></a> Python版</h2><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> socket<span class="token keyword">try</span><span class="token punctuation">:</span>    s <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span><span class="token keyword">except</span> Exception<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Socket Error!"</span><span class="token punctuation">)</span><span class="token comment"># listen port</span><span class="token keyword">try</span><span class="token punctuation">:</span>s<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span> <span class="token number">6666</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">except</span> Exception<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Connection Error!"</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">b'exit'</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>exit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span></code></pre><hr><p>下一篇：<a href="http://tonylsx.top/2022/10/14/socket-program-2/">Socket网络编程2 | Tony</a></p>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Socket </tag>
            
            <tag> Client </tag>
            
            <tag> Server </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Andriod Studio开发 1</title>
      <link href="/2022/09/17/Andriod-Studio-1/"/>
      <url>/2022/09/17/Andriod-Studio-1/</url>
      
        <content type="html"><![CDATA[<h2 id="任务目标"><a class="markdownIt-Anchor" href="#任务目标"></a> 任务目标</h2><p>在Spinner中提供四个可选项，当点击BUTTON按钮时，下方文字显示对应的选项。</p><p><img src="/2022/09/17/Andriod-Studio-1/image-20220916130832425.png" alt="image-20220916130832425" loading="lazy"></p><h2 id="项目管理"><a class="markdownIt-Anchor" href="#项目管理"></a> 项目管理</h2><p><img src="/2022/09/17/Andriod-Studio-1/image-20220916131246387.png" alt="image-20220916131246387" loading="lazy"></p><p>该项目中我们主要用到以下四个文件：</p><ul><li>MainActivity.java</li><li>BeerExport.java</li><li>activity_main.xml</li><li>strings.xml</li></ul><p>其中，MainActivity.java是核心的java文件，BeerExport.java是用来定义新的class的java文件，需要手动创建。Activity_main.xml是定义主界面控件的文件，strings.xml是用来定义特定字符串的文件。</p><h2 id="界面编辑"><a class="markdownIt-Anchor" href="#界面编辑"></a> 界面编辑</h2><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!---Activity_main.xml---></span><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LinearLayout</span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>app</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res-auto<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>tools</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.android.com/tools<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>padding</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>16dp<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>orientation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>vertical<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">tools:</span>context</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>.MainActivity<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Spinner</span>        <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/color<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_gravity</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_margin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>16dp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_marginTop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>40dp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>entries</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@array/beer_color<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>minHeight</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>48dp<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span>        <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/find_beer<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_gravity</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_margin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>24dp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>onClick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>onClickFindBeer<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextView</span>        <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/brands<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Hello World!<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_gravity</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_margin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>16dp<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>LinearLayout</span><span class="token punctuation">></span></span></code></pre><p>我们分别定义了三个主要的控件，其中Spinner的名字是color，Button的名字是find_beer，TextView的名字是brands.</p><p>需要注意的是，spinner控件中定义了名为beer_color的entries，而我们可以在strings.xml中定义一个字符串数组来储存这些选项。</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!---strings.xml---></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resources</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>string</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app_name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>My Application test911<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>string</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>string-array</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>beer_color<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span><span class="token punctuation">></span></span>light<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span><span class="token punctuation">></span></span>amber<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span><span class="token punctuation">></span></span>brown<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span><span class="token punctuation">></span></span>dark<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>string-array</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resources</span><span class="token punctuation">></span></span></code></pre><h2 id="java逻辑编辑"><a class="markdownIt-Anchor" href="#java逻辑编辑"></a> Java逻辑编辑</h2><p>注意到在activity_main.xml的Button控件中，我们定义了一个Onclick功能，每次按下按钮时，都会执行该功能。因此我们需要在MainActivity.java中定义该函数。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainActivity</span> <span class="token keyword">extends</span> <span class="token class-name">AppCompatActivity</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">BeerExpert</span> expert <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BeerExpert</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClickFindBeer</span><span class="token punctuation">(</span><span class="token class-name">View</span> view<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token class-name">TextView</span> brands <span class="token operator">=</span> <span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>brands<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Spinner</span> color <span class="token operator">=</span> <span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>color<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> beerType <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>color<span class="token punctuation">.</span><span class="token function">getSelectedItemId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        brands<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>beerType<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//0-3</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> brandlist <span class="token operator">=</span> expert<span class="token punctuation">.</span><span class="token function">getBrands</span><span class="token punctuation">(</span>beerType<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">StringBuilder</span> brandFormatted <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> brand<span class="token operator">:</span>brandlist<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            brandFormatted<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>brand<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        brands<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>brandFormatted<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@SuppressLint</span><span class="token punctuation">(</span><span class="token string">"SetTextI18n"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token class-name">Bundle</span> savedInstanceState<span class="token punctuation">)</span>     <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_main<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">TextView</span> <span class="token class-name">Brands</span> <span class="token operator">=</span> <span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>brands<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Brands</span><span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"This is the initial TEXT"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>而BeerExpert.java中的函数则是判断Spinner中选中了哪个选项，并返回相应的文字。然后将文字打印到下方的文字框中。对于这个程序，其实完全可以在MainActivity中定义一个函数，我们这里选择新建一个Class的原因是为了体现面向对象的编程。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BeerExpert</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">BeerExpert</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token function">getBrands</span><span class="token punctuation">(</span><span class="token class-name">String</span> color<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> bands <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>color<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            bands<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Amber"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>color<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            bands<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Light"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>color<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            bands<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Brown"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>color<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            bands<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Dark"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span>        <span class="token punctuation">&#123;</span>            bands<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Error!!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> bands<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="程序运行"><a class="markdownIt-Anchor" href="#程序运行"></a> 程序运行</h2><p><img src="/2022/09/17/Andriod-Studio-1/image-20220916143713242.png" alt="image-20220916143713242" loading="lazy"></p><h2 id="kotlin语言"><a class="markdownIt-Anchor" href="#kotlin语言"></a> Kotlin语言</h2><pre class="language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">package</span> com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>kotlin_test<span class="token keyword">import</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>Bundle<span class="token keyword">import</span> android<span class="token punctuation">.</span>view<span class="token punctuation">.</span>View<span class="token keyword">import</span> android<span class="token punctuation">.</span>widget<span class="token punctuation">.</span>Spinner<span class="token keyword">import</span> android<span class="token punctuation">.</span>widget<span class="token punctuation">.</span>TextView<span class="token keyword">import</span> androidx<span class="token punctuation">.</span>appcompat<span class="token punctuation">.</span>app<span class="token punctuation">.</span>AppCompatActivity<span class="token keyword">class</span> MainActivity <span class="token operator">:</span> <span class="token function">AppCompatActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">fun</span> <span class="token function">getBrands</span><span class="token punctuation">(</span>color<span class="token operator">:</span> String<span class="token punctuation">)</span><span class="token operator">:</span> MutableList<span class="token operator">&lt;</span>String<span class="token operator">></span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">val</span> bands<span class="token operator">:</span> MutableList<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token operator">=</span> <span class="token function">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>color <span class="token operator">==</span> <span class="token string-literal singleline"><span class="token string">"0"</span></span><span class="token punctuation">)</span>             bands<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"Black"</span></span><span class="token punctuation">)</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>color <span class="token operator">==</span> <span class="token string-literal singleline"><span class="token string">"1"</span></span><span class="token punctuation">)</span>             bands<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"White"</span></span><span class="token punctuation">)</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>color <span class="token operator">==</span> <span class="token string-literal singleline"><span class="token string">"2"</span></span><span class="token punctuation">)</span>             bands<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"Brown"</span></span><span class="token punctuation">)</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>color <span class="token operator">==</span> <span class="token string-literal singleline"><span class="token string">"3"</span></span><span class="token punctuation">)</span>            bands<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"Pink"</span></span><span class="token punctuation">)</span>        <span class="token keyword">else</span>            bands<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"Error!!!"</span></span><span class="token punctuation">)</span>        <span class="token keyword">return</span> bands    <span class="token punctuation">&#125;</span>    <span class="token keyword">fun</span> <span class="token function">onClickButton</span><span class="token punctuation">(</span>view<span class="token operator">:</span> View<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">val</span> brands <span class="token operator">=</span> findViewById<span class="token operator">&lt;</span>TextView<span class="token operator">></span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>textView<span class="token punctuation">)</span>        <span class="token keyword">val</span> color <span class="token operator">=</span> findViewById<span class="token operator">&lt;</span>Spinner<span class="token operator">></span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>spinner<span class="token punctuation">)</span>        <span class="token keyword">val</span> beerType <span class="token operator">=</span> color<span class="token punctuation">.</span>selectedItemId<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        brands<span class="token punctuation">.</span>text <span class="token operator">=</span> beerType <span class="token comment">//0-3</span>        <span class="token keyword">val</span> brandlist<span class="token operator">:</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token operator">=</span> <span class="token function">getBrands</span><span class="token punctuation">(</span>beerType<span class="token punctuation">)</span>        <span class="token keyword">val</span> brandFormatted <span class="token operator">=</span> <span class="token function">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>brand <span class="token keyword">in</span> brandlist<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            brandFormatted<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>brand<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"\n"</span></span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        brands<span class="token punctuation">.</span>text <span class="token operator">=</span> brandFormatted    <span class="token punctuation">&#125;</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token operator">:</span> Bundle<span class="token operator">?</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_main<span class="token punctuation">)</span>        <span class="token keyword">var</span> Text <span class="token operator">=</span> findViewById<span class="token operator">&lt;</span>TextView<span class="token operator">></span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>textView<span class="token punctuation">)</span>        Text<span class="token punctuation">.</span>text <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">"Powered by Kotlin"</span></span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p><img src="/2022/09/17/Andriod-Studio-1/image-20220918210702397.png" alt="image-20220918210702397" loading="lazy"></p><hr><p>下一篇：<a href="http://tonylsx.top/2022/09/27/Android-studio-2/">Android Studio开发 2 | Tony</a></p>]]></content>
      
      
      <categories>
          
          <category> Android Studio </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android Studio </tag>
            
            <tag> Java </tag>
            
            <tag> Kotlin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CUDA安装教程</title>
      <link href="/2022/09/17/CUDA-install/"/>
      <url>/2022/09/17/CUDA-install/</url>
      
        <content type="html"><![CDATA[<h1 id="cuda安装教程"><a class="markdownIt-Anchor" href="#cuda安装教程"></a> CUDA安装教程</h1><p>CUDA仅针对NVIDIA显卡进行加速，对于AMD显卡及Inter集成显卡没有加速效果，此教程仅适用于拥有NVIDIA显卡电脑的朋友。</p><h2 id="cuda下载"><a class="markdownIt-Anchor" href="#cuda下载"></a> CUDA下载</h2><p>CUDA下载网址：<a href="https://developer.nvidia.com/cuda-toolkit-archive">https://developer.nvidia.com/cuda-toolkit-archive</a></p><p>选择电脑系统和版本型号，较旧的电脑需要根据电脑显卡版本选择较旧的CUDA Toolkit，一般电脑选择最新版即可。</p><p><img src="/2022/09/17/CUDA-install/image-20220718135746089-1663410928185-1.png" alt="image-20220718135746089" loading="lazy"></p><p>傻瓜式下一步：</p><img src="/2022/09/17/CUDA-install/image-20220718135714318-1663410937840-3.png" alt="image-20220718135714318" style="zoom:67%;" loading="lazy"><img src="/2022/09/17/CUDA-install/image-20220718135833425-1663410950886-5.png" alt="image-20220718135833425" style="zoom:67%;" loading="lazy"><p>使用命令<code>nvcc -V</code>验证是否安装成功：</p><img src="/2022/09/17/CUDA-install/image-20220718135956517-1663410961962-7.png" alt="image-20220718135956517" style="zoom:67%;" loading="lazy"><h2 id="cudnn下载"><a class="markdownIt-Anchor" href="#cudnn下载"></a> cuDNN下载</h2><p>cuDNN下载网址：<a href="https://developer.nvidia.com/cudnn">https://developer.nvidia.com/cudnn</a></p><p>选择电脑系统和版本型号，较旧的电脑需要根据电脑显卡版本选择较旧的CUDNN，一般电脑选择最新版即可。</p><img src="/2022/09/17/CUDA-install/image-20220718160333419-1663410975368-9.png" alt="image-20220718160333419" style="zoom:80%;" loading="lazy"><p>下载后打开压缩包：</p><img src="/2022/09/17/CUDA-install/image-20220718160419835-1663410988631-11.png" alt="image-20220718160419835" style="zoom:67%;" loading="lazy"><p>将下载好的cudnn文件复制到cuda的安装目录下面，默认路径为C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\vXX.X.</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> CUDA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Anaconda-Python环境搭建</title>
      <link href="/2022/09/17/Anaconda-env/"/>
      <url>/2022/09/17/Anaconda-env/</url>
      
        <content type="html"><![CDATA[<h2 id="anaconda-python-环境搭建"><a class="markdownIt-Anchor" href="#anaconda-python-环境搭建"></a> Anaconda Python 环境搭建</h2><h2 id="下载并安装anaconda"><a class="markdownIt-Anchor" href="#下载并安装anaconda"></a> 下载并安装anaconda</h2><p>官网下载链接: <a href="https://www.anaconda.com/">Anaconda | The World’s Most Popular Data Science Platform</a>)</p><p><img src="/2022/09/17/Anaconda-env/U0I112981_%25MPSVS4CXL8BF.png" alt="U0I112981_%MPSVS4CXL8BF" loading="lazy"></p><p>下载后一键安装：</p><img src="/2022/09/17/Anaconda-env/QQ图片20220722134623.jpg" alt="QQ图片20220722134623" style="zoom:50%;" loading="lazy"><h2 id="添加anaconda到环境变量"><a class="markdownIt-Anchor" href="#添加anaconda到环境变量"></a> 添加Anaconda到环境变量</h2><p>在计算机中搜索“环境变量”（快捷键 Win+S），选择系统变量中的path，编辑Path。</p><p><img src="/2022/09/17/Anaconda-env/image-20220722135753076.png" alt="image-20220722135753076" loading="lazy"></p><p>若安装Anaconda时使用的时默认安装位置，在Path中添加如下地址：</p><pre class="language-bash" data-language="bash"><code class="language-bash">C:<span class="token punctuation">\</span>ProgramData<span class="token punctuation">\</span>Anaconda3C:<span class="token punctuation">\</span>ProgramData<span class="token punctuation">\</span>Anaconda3<span class="token punctuation">\</span>ScriptsC:<span class="token punctuation">\</span>ProgramData<span class="token punctuation">\</span>Anaconda3<span class="token punctuation">\</span>Library<span class="token punctuation">\</span>binC:<span class="token punctuation">\</span>ProgramData<span class="token punctuation">\</span>Anaconda3<span class="token punctuation">\</span>Library<span class="token punctuation">\</span>mingw-w64<span class="token punctuation">\</span>bin</code></pre><p><img src="/2022/09/17/Anaconda-env/image-20220917183015892.png" alt="image-20220917183015892" loading="lazy"></p><p>添加后验证是否成功配置环境变量，在本地计算机中搜索<code>prompt</code>，以管理员身份运行。</p><p><img src="/2022/09/17/Anaconda-env/image-20220722141130992-1663410673096-7.png" alt="image-20220722141130992" loading="lazy"></p><p>输入以下指令：</p><pre class="language-bash" data-language="bash"><code class="language-bash">conda --versionconda infopython --version</code></pre><p><img src="/2022/09/17/Anaconda-env/image-20220722141252367.png" alt="image-20220722141252367" loading="lazy"></p><p>如果可以正常输出则证明安装成功，部分老机型需要重启电脑才能应用path添加的新环境，若仍不成功则检查path路径是否有误。</p><h2 id="运行python"><a class="markdownIt-Anchor" href="#运行python"></a> 运行Python</h2><p>打开Anaconda Navigator并运行Spyder，随便输入点什么（比如print语句），若能正常运行，则证明Python安装成功。</p><p><img src="/2022/09/17/Anaconda-env/image-20220722141736616.png" alt="image-20220722141736616" loading="lazy"></p><p>Pycharm是Python较为常用的IDE，这里我们放一个官网链接供快捷跳转下载。</p><p><a href="https://www.jetbrains.com/pycharm/">Pycharm官网安装网址</a></p><p><img src="/2022/09/17/Anaconda-env/image-20220722142107169.png" alt="image-20220722142107169" loading="lazy"></p><p>安装过程中记得勾选“添加bin到path环境变量中”，否则还得手动添加一遍，麻烦死。</p><img src="/2022/09/17/Anaconda-env/image-20220722142150620.png" alt="image-20220722142150620" style="zoom:67%;" loading="lazy"><p>安装好后重启电脑，Anaconda可视化界面下多出了一个Pycharm Community的图标，可从anaconda中直接打开Pycharm。</p><p><img src="/2022/09/17/Anaconda-env/image-20220722142444023.png" alt="image-20220722142444023" loading="lazy"></p><h2 id="python环境管理"><a class="markdownIt-Anchor" href="#python环境管理"></a> Python环境管理</h2><p>当我们通过Pycharm新建一个项目时，可以选择新建环境或者使用之前配置好的环境。</p><p><img src="/2022/09/17/Anaconda-env/image-20220722144502752.png" alt="image-20220722144502752" loading="lazy"></p><h3 id="新建环境"><a class="markdownIt-Anchor" href="#新建环境"></a> 新建环境</h3><ul><li>Virtuallenv: Pycharm的虚拟环境，项目之间默认不通用，也就是说每新建一个项目都要新开一个虚拟环境，较为占用空间。</li><li>Conda：Anaconda环境，也可在anaconda的environment可视化界面下添加环境，如图所示：</li></ul><p><img src="/2022/09/17/Anaconda-env/image-20220722152550108.png" alt="image-20220722152550108" loading="lazy"></p><p>我们可以将Anaconda的environment理解为环境管理工具，也可以在prompt中使用命令添加或删除环境。</p><h3 id="先前配置的环境"><a class="markdownIt-Anchor" href="#先前配置的环境"></a> 先前配置的环境</h3><p>选择Conda环境，解释器的位置为Anaconda的安装目录根目录，下面有个Python.exe，选择此目录（如果没有ProgramData目录，则手动打上去，就有了），此环境为anaconda的base目录。</p><p><img src="/2022/09/17/Anaconda-env/image-20220722145541034.png" alt="image-20220722145541034" loading="lazy"></p><p>如果选择其它目录，则在Python解释器中更改为指定的解释器目录。</p><p><img src="/2022/09/17/Anaconda-env/image-20220722154032582.png" alt="image-20220722154032582" loading="lazy"></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> anaconda </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python环境配置</title>
      <link href="/2022/07/22/python-environment/"/>
      <url>/2022/07/22/python-environment/</url>
      
        <content type="html"><![CDATA[<h1 id="anaconda-python-环境搭建"><a class="markdownIt-Anchor" href="#anaconda-python-环境搭建"></a> Anaconda Python 环境搭建</h1><h2 id="下载并安装anaconda"><a class="markdownIt-Anchor" href="#下载并安装anaconda"></a> 下载并安装anaconda</h2><p>官网下载链接: <a href="https://www.anaconda.com/">Anaconda | The World’s Most Popular Data Science Platform</a>)</p><p><img src="/2022/07/22/python-environment/U0I112981_%25MPSVS4CXL8BF.png" alt="img" loading="lazy"></p><p>下载后一键安装：</p><img src="/2022/07/22/python-environment/QQ%E5%9B%BE%E7%89%8720220722134623.jpg" alt="QQ图片20220722134623" style="zoom:50%;" loading="lazy"><h2 id="添加anaconda到环境变量"><a class="markdownIt-Anchor" href="#添加anaconda到环境变量"></a> 添加Anaconda到环境变量</h2><p>在计算机中搜索“环境变量”（快捷键 Win+S），选择系统变量中的path，编辑Path。</p><p><img src="/2022/07/22/python-environment/image-20220722135753076.png" alt="image-20220722135753076" loading="lazy"></p><p>若安装Anaconda时使用的时默认安装位置，在Path中添加如下地址：</p><pre class="language-bash" data-language="bash"><code class="language-bash">C:<span class="token punctuation">\</span>ProgramData<span class="token punctuation">\</span>Anaconda3C:<span class="token punctuation">\</span>ProgramData<span class="token punctuation">\</span>Anaconda3<span class="token punctuation">\</span>ScriptsC:<span class="token punctuation">\</span>ProgramData<span class="token punctuation">\</span>Anaconda3<span class="token punctuation">\</span>Library<span class="token punctuation">\</span>binC:<span class="token punctuation">\</span>ProgramData<span class="token punctuation">\</span>Anaconda3<span class="token punctuation">\</span>Library<span class="token punctuation">\</span>mingw-w64<span class="token punctuation">\</span>bin</code></pre><p><img src="/2022/07/22/python-environment/1%60SS$TH%5BEI4%7BJ1_I%5D9%5DL%60EY.png" alt="img" loading="lazy"></p><p>添加后验证是否成功配置环境变量，在本地计算机中搜索<code>prompt</code>，以管理员身份运行。</p><p><img src="/2022/07/22/python-environment/image-20220722141130992.png" alt="image-20220722141130992" loading="lazy"></p><p>输入以下指令：</p><pre class="language-bash" data-language="bash"><code class="language-bash">conda --versionconda infopython --version</code></pre><p><img src="/2022/07/22/python-environment/image-20220722141252367.png" alt="image-20220722141252367" loading="lazy"></p><p>如果可以正常输出则证明安装成功，部分老机型需要重启电脑才能应用path添加的新环境，若仍不成功则检查path路径是否有误。</p><h2 id="运行python"><a class="markdownIt-Anchor" href="#运行python"></a> 运行Python</h2><p>打开Anaconda Navigator并运行Spyder，随便输入点什么（比如print语句），若能正常运行，则证明Python安装成功。</p><p><img src="/2022/07/22/python-environment/image-20220722141736616.png" alt="image-20220722141736616" loading="lazy"></p><p>Pycharm是Python较为常用的IDE，这里我们放一个官网链接供快捷跳转下载。</p><p><a href="https://www.jetbrains.com/pycharm/">Pycharm官网安装网址</a></p><p><img src="/2022/07/22/python-environment/image-20220722142107169.png" alt="image-20220722142107169" loading="lazy"></p><p>安装过程中记得勾选“添加bin到path环境变量中”，否则还得手动添加一遍，麻烦死。</p><img src="/2022/07/22/python-environment/image-20220722142150620.png" alt="image-20220722142150620" style="zoom:67%;" loading="lazy"><p>安装好后重启电脑，Anaconda可视化界面下多出了一个Pycharm Community的图标，可从anaconda中直接打开Pycharm。</p><p><img src="/2022/07/22/python-environment/image-20220722142444023.png" alt="image-20220722142444023" loading="lazy"></p><h2 id="python环境管理"><a class="markdownIt-Anchor" href="#python环境管理"></a> Python环境管理</h2><p>当我们通过Pycharm新建一个项目时，可以选择新建环境或者使用之前配置好的环境。</p><p><img src="/2022/07/22/python-environment/image-20220722144502752.png" alt="image-20220722144502752" loading="lazy"></p><h3 id="新建环境"><a class="markdownIt-Anchor" href="#新建环境"></a> 新建环境</h3><ul><li>Virtuallenv: Pycharm的虚拟环境，项目之间默认不通用，也就是说每新建一个项目都要新开一个虚拟环境，较为占用空间。</li><li>Conda：Anaconda环境，也可在anaconda的environment可视化界面下添加环境，如图所示：<img src="/2022/07/22/python-environment/image-20220722152550108.png" alt="image-20220722152550108" loading="lazy"></li></ul><p>我们可以将Anaconda的environment理解为环境管理工具，也可以在prompt中使用命令添加或删除环境。</p><h3 id="先前配置的环境"><a class="markdownIt-Anchor" href="#先前配置的环境"></a> 先前配置的环境</h3><p>选择Conda环境，解释器的位置为Anaconda的安装目录根目录，下面有个Python.exe，选择此目录（如果没有ProgramData目录，则手动打上去，就有了），此环境为anaconda的base目录。</p><p><img src="/2022/07/22/python-environment/image-20220722145541034.png" alt="image-20220722145541034" loading="lazy"></p><p>如果选择其它目录，则在Python解释器中更改为指定的解释器目录。</p><p><img src="/2022/07/22/python-environment/image-20220722154032582-165847602920414.png" alt="image-20220722154032582" loading="lazy"></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> anaconda </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python处理json文件</title>
      <link href="/2022/07/21/Python-json/"/>
      <url>/2022/07/21/Python-json/</url>
      
        <content type="html"><![CDATA[<h1 id="使用python处理json文件"><a class="markdownIt-Anchor" href="#使用python处理json文件"></a> 使用python处理json文件</h1><p>本文简单介绍如何通过python正则表达式的方式和通过调用json package读取json数据，以及将python中的数组转化成json并导出到外部文档。</p><h2 id="11-什么是json"><a class="markdownIt-Anchor" href="#11-什么是json"></a> 1.1 什么是json</h2><p>JSON或JavaScript Object Notation，是一种**使用文本存储数据对象的格式。<strong>换句话说，它是一种</strong>数据结构，将对象用文本形式表示出来。**尽管它来源自JavaScript，但它已成为传输对象的实际标准。</p><p>大多数编程语言都支持JSON格式，本文将采用python读取数据。JSON格式的文件经常用于**API传输数据对象。**以下是JSON字符串的示例：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span><span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Tony"</span><span class="token punctuation">,</span><span class="token property">"ID"</span><span class="token operator">:</span> <span class="token string">"455190"</span><span class="token punctuation">,</span><span class="token property">"language"</span><span class="token operator">:</span> <span class="token string">"en"</span><span class="token punctuation">,</span><span class="token property">"course"</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">"Math"</span><span class="token punctuation">,</span><span class="token string">"Chinese"</span><span class="token punctuation">,</span><span class="token string">"Physics"</span><span class="token punctuation">,</span><span class="token string">"Computer Science"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token property">"Graduated"</span><span class="token operator">:</span> <span class="token string">"False"</span><span class="token punctuation">&#125;</span></code></pre><p>这里需要注意的是，<code>&#123;&#125;</code>里的值称之为<strong>key</strong>, <code>[]</code>里的值称之为<strong>array</strong>.</p><h2 id="正则表达式读取json文件"><a class="markdownIt-Anchor" href="#正则表达式读取json文件"></a> 正则表达式读取json文件</h2><p>这里使用的是正则表达式来查找所要搜索的内容，此方法不具有通用性，需要根据具体的json文件的格式手动更改正则表达式的内容。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">'''&#123;"DATA1": [&#123;"name": "Tony", "age": "19", "ID": "344909"&#125;,&#123;"name": "Tina", "age": "22", "ID": "311921"&#125;,&#123;"name": "Jack", "age": "23", "ID": "340223"&#125;,&#123;"name": "Tian", "age": "20", "ID": "122008"&#125;]&#125;'''</span><span class="token keyword">import</span> re <span class="token comment"># 正则表达式</span><span class="token comment"># 读入文件</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'test.json'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    data <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 读取json文件</span>    age <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment"># 存放字符串 "age": "XX"</span>ans <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment"># 存放年龄数字 19 20 22</span>m <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">r"\"age\": \"\d+\""</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token comment"># "age": "XX"</span><span class="token keyword">if</span> m<span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> m<span class="token punctuation">:</span>        age<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> age<span class="token punctuation">:</span>    temp <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">r"\d+"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token comment"># 搜索 "age": "XX" 中的XX</span>    ans<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>temp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># str转换为int</span>    <span class="token comment"># temp = i.replace("age\": \"", "")</span>    <span class="token comment"># temp = temp.replace("\",", "")</span>    <span class="token comment"># age.append(temp)</span><span class="token comment"># 读出文件</span>f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'ans.txt'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> ans<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token builtin">file</span><span class="token operator">=</span>f<span class="token punctuation">)</span>f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>对于数字等区分度较大类型的格式，正则表达式相对容易些，但是如果要处理如姓名的json文件，正则表达式将会极其复杂；而且若是要处理较多种类的数据，我们需要对每一种数据类型都编写特定的正则表达式，其工作量将会极为庞大。</p><p>当然，这种相对传统的方法也有自己的优点，比如在非json文件格式下批量处理数据，我们就只能依靠这种”麻烦“的方法了，因此正则表达式的方法也需要我们熟练掌握。</p><h2 id="python中的json处理json文件"><a class="markdownIt-Anchor" href="#python中的json处理json文件"></a> Python中的JSON处理json文件</h2><p>当我们使用python中的json packages来处理json文件时，首先要保证json文件的格式是标准的，如果文件并非标准格式（比如少了一个后括号之类），python将会报错，文件无法正常读入。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">'''&#123;"DATA1": [&#123;"name": "Tony", "age": "19", "ID": "344909"&#125;,&#123;"name": "Tina", "age": "22", "ID": "311921"&#125;,&#123;"name": "Jack", "age": "23", "ID": "340223"&#125;,&#123;"name": "Tian", "age": "20", "ID": "122008"&#125;],"DATA2": "data2","DATA3": "data3"&#125;'''</span><span class="token keyword">import</span> json<span class="token keyword">import</span> jsonpath<span class="token comment"># input</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'test.json'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    <span class="token builtin">file</span> <span class="token operator">=</span> json<span class="token punctuation">.</span>load<span class="token punctuation">(</span>f<span class="token punctuation">)</span>    <span class="token comment"># print(type(file)) &lt;class 'dict'></span>    f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token builtin">file</span><span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># dict_keys['DATA1', 'DATA2', 'DATA3']</span>data<span class="token punctuation">[</span><span class="token string">'DATA2'</span><span class="token punctuation">]</span> <span class="token comment"># "data2"</span>name <span class="token operator">=</span> jsonpath<span class="token punctuation">.</span>jsonpath<span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">,</span> <span class="token string">'$..name'</span><span class="token punctuation">)</span>age <span class="token operator">=</span> jsonpath<span class="token punctuation">.</span>jsonpath<span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">,</span> <span class="token string">'$..age'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token comment"># ["Tony", "Tina", "Jack", "Tian"]</span><span class="token keyword">print</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span> <span class="token comment"># [19, 22, 23, 20]</span><span class="token comment"># output</span>f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'ans.txt'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">": "</span> <span class="token operator">+</span> age<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token builtin">file</span><span class="token operator">=</span>f<span class="token punctuation">)</span>f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>以上示例中，<code>json.load()</code>函数自动将文档转化为<code>dict</code>格式读取到python中，我们可以通过<code>key()</code>函数访问其字典键值，通过<code>jsonpath.jsonpath()</code>函数获取数组中对应关键字的值（需要导入jsonpath）。此方法可以高效的处理json文件，但是需要注意的是原始文件的格式必须为json文件。</p><h2 id="将python数据转换为json文件"><a class="markdownIt-Anchor" href="#将python数据转换为json文件"></a> 将python数据转换为json文件</h2><p>我们使用<code>dump()</code>函数可以将python数据写成json格式，详情见样例：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> jsonlanguages <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">"English"</span><span class="token punctuation">,</span> <span class="token string">"Chinese"</span><span class="token punctuation">)</span>country <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"Tony"</span><span class="token punctuation">,</span>    <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">34</span><span class="token punctuation">,</span>    <span class="token string">"languages"</span><span class="token punctuation">:</span> languages<span class="token punctuation">,</span>    <span class="token string">"Male"</span><span class="token punctuation">:</span> <span class="token boolean">False</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'countries_exported.json'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>json<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>country<span class="token punctuation">,</span> f<span class="token punctuation">,</span> indent<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token comment"># indent 缩进</span></code></pre><p>其导出的json文件格式如下：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Tony"</span><span class="token punctuation">,</span>    <span class="token property">"age"</span><span class="token operator">:</span> <span class="token number">34</span><span class="token punctuation">,</span>    <span class="token property">"languages"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token string">"English"</span><span class="token punctuation">,</span>        <span class="token string">"Chinese"</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token property">"Male"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> json </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>STM32 简介</title>
      <link href="/2022/05/09/STM32-Introduction/"/>
      <url>/2022/05/09/STM32-Introduction/</url>
      
        <content type="html"><![CDATA[<h1 id="stm32-介绍"><a class="markdownIt-Anchor" href="#stm32-介绍"></a> STM32 介绍</h1><p>STM32单片机主要是由意法半导体公司设计的微控制器,其具有低功耗、低成本和高性能的特点,适用于嵌入式应用。其采用ARM Cortex-O内核,根据其内核架构的不同,可以将其分成一系列产品,当前主流的产品包括STM32F0、STM32F1、STM32F3,具有超低功耗的产品包括STM32L0、STM32L1、STM32L4等。由于STM32单片机中应用的内核具有先进的架构,使其在实施性能以及功耗控制等方面都具有较强表现,因此在整合和集成方面就有较大的优势,开发起来较为方便,该类型的单片机能非常迅速地实现开发和投入市场,当前市场中这种类型的单片机十分常见,类型多样,包括基础型、智能型和高级型等,应用都比较广泛。</p><h1 id="stm32-cube-ide-介绍"><a class="markdownIt-Anchor" href="#stm32-cube-ide-介绍"></a> STM32 Cube IDE 介绍</h1><p>首先下载STM32的编程IDE：STM32CubeIDE. (下载链接：<a href="https://www.st.com/en/development-tools/stm32cubeide.html?msclkid=3559ada6cf6311ecbd9f53d57c28a659">STM32CubeIDE - Integrated Development Environment for STM32 - STMicroelectronics</a>)</p><p>与其它编程语言一样，嵌入式开发同样倾向于使用高大上的IDE进行编程，其原因是此类IDE可以自动生成绝大部分代码，以及代码补全，编译运行烧录等一条龙服务。不需要用户手动写入大量枯燥无味的代码，极大地降低学习成本。</p><p>下载后新建工程文件，本次编程的目标是<strong>将一个简单的跑马灯代码烧录到单片机中</strong>并运行MCU。</p><p>新建工程文件后需要手动选择MCU的具体型号，左上角搜索单片机的具体型号即可，选中手里的单片机型号，右下角点击下一步。</p><p><img src="/2022/05/09/STM32-Introduction/Screenshot%202022-05-09%20131459.png" alt="Screenshot 2022-05-09 131459" loading="lazy"></p><p>接下来会跳出如下界面，选择工程存放的目录和工程名称，其它的不需要做调整。这里我们选择C语言作为目标语言即可，不需要选择C<ins>语言，如果你熟悉C</ins>的单片机编译就当我没说。</p><img src="/2022/05/09/STM32-Introduction/Screenshot%202022-05-09%20131527.png" alt="Screenshot 2022-05-09 131527" style="zoom:75%;" loading="lazy"><p>接下来就会跳出STM32Cube IDE的主界面，我这里引用了<a href="https://blog.csdn.net/Naisu_kun/article/details/95935283?msclkid=ca6cf665cf6511ecae8b0207cf9b728f">Naisu Xu的博客</a>里面的一篇文章里的图片来介绍整个界面的各个模块的功能。</p><p><img src="/2022/05/09/STM32-Introduction/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L05haXN1X2t1bg==,size_16,color_FFFFFF,t_70.png" alt="在这里插入图片描述" loading="lazy"></p><p>最初的界面是单片机CPU的引脚视图，右上角可以切换到代码编辑视图；我们在编译工程时将频繁地使用这两个视图。</p><p><img src="/2022/05/09/STM32-Introduction/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L05haXN1X2t1bg==,size_16,color_FFFFFF,t_70-16520801218142.png" alt="在这里插入图片描述" loading="lazy"></p><h1 id="stm32-开发流程"><a class="markdownIt-Anchor" href="#stm32-开发流程"></a> STM32 开发流程</h1><p>首先在引脚视图下找到RCC， RCC是控制时钟频率的引脚，将High Speed Clock (HSE)调整成 Crystal/Ceramic Resonator模式。调整之后可以看到视图中的两个控制RCC的引脚变绿。</p><p><img src="/2022/05/09/STM32-Introduction/Screenshot%202022-05-09%20130125.png" alt="Screenshot 2022-05-09 130125" loading="lazy"></p><p>接下来找到SYS引脚，该引脚指向的是Debug模块，将其点亮可以更好的支持编译和调试代码，不过对于跑马灯程序来讲，可以忽略这一步。</p><p><img src="/2022/05/09/STM32-Introduction/Screenshot%202022-05-09%20130159.png" alt="Screenshot 2022-05-09 130159" loading="lazy"></p><p>下一步，找到自己手中的单片机的原理图，找到LED指示灯，我自己的STM32F407的LED灯的原理图如下，可以看到<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mi>D</mi><mn>12</mn><mo separator="true">,</mo><mi>P</mi><mi>D</mi><mn>13</mn><mo separator="true">,</mo><mi>P</mi><mi>D</mi><mn>14</mn><mo separator="true">,</mo><mi>P</mi><mi>D</mi><mn>15</mn></mrow><annotation encoding="application/x-tex">PD12, PD13, PD14, PD15</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mord">1</span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mord">1</span><span class="mord">3</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mord">1</span><span class="mord">4</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mord">1</span><span class="mord">5</span></span></span></span>引脚分别控制四种不同颜色的二极管。</p><p><img src="/2022/05/09/STM32-Introduction/Center.png" alt="img" loading="lazy"></p><p>右键点击<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mi>D</mi><mn>12</mn></mrow><annotation encoding="application/x-tex">PD12</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mord">1</span><span class="mord">2</span></span></span></span>引脚，选择<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>G</mi><mi>P</mi><mi>I</mi><mi>O</mi><mi mathvariant="normal">_</mi><mi>O</mi><mi>u</mi><mi>t</mi><mi>p</mi><mi>u</mi><mi>t</mi></mrow><annotation encoding="application/x-tex">GPIO\_Output</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.99333em;vertical-align:-0.31em;"></span><span class="mord mathdefault">G</span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mord" style="margin-right:0.02778em;">_</span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mord mathdefault">u</span><span class="mord mathdefault">t</span><span class="mord mathdefault">p</span><span class="mord mathdefault">u</span><span class="mord mathdefault">t</span></span></span></span>将其点亮，将GPIO调整到<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mi>u</mi><mi>l</mi><mi>l</mi><mo>−</mo><mi>u</mi><mi>p</mi></mrow><annotation encoding="application/x-tex">Pull-up</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mord mathdefault">u</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">u</span><span class="mord mathdefault">p</span></span></span></span>，并将引脚名称变为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>L</mi><mi>E</mi><msub><mi>D</mi><mn>3</mn></msub></mrow><annotation encoding="application/x-tex">LED_3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord mathdefault">L</span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>。如下图所示：</p><p><img src="/2022/05/09/STM32-Introduction/Screenshot%202022-05-09%20130051.png" alt="Screenshot 2022-05-09 130051" loading="lazy"></p><p>同理设置好<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mi>D</mi><mn>13</mn><mo separator="true">,</mo><mi>P</mi><mi>D</mi><mn>14</mn><mo separator="true">,</mo><mi>P</mi><mi>D</mi><mn>15</mn></mrow><annotation encoding="application/x-tex">PD13, PD14, PD15</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mord">1</span><span class="mord">3</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mord">1</span><span class="mord">4</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mord">1</span><span class="mord">5</span></span></span></span>的引脚，可以从上图中看到引脚在设置好之后会变绿。这时候转到代码编辑模式，可以看到我们在设置好这些引脚后在<code>main.h</code>中会自动生成一些宏定义代码，如下图所示：</p><p><img src="/2022/05/09/STM32-Introduction/Screenshot%202022-05-09%20125830-16520802827714.png" alt="Screenshot 2022-05-09 125830" loading="lazy"></p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">LED4_Pin</span> <span class="token expression">GPIO_PIN_12</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">LED4_GPIO_Port</span> <span class="token expression">GPIOD</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">LED3_Pin</span> <span class="token expression">GPIO_PIN_13</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">LED3_GPIO_Port</span> <span class="token expression">GPIOD</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">LED5_Pin</span> <span class="token expression">GPIO_PIN_14</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">LED5_GPIO_Port</span> <span class="token expression">GPIOD</span></span></code></pre><p>接下来转到<code>main.c</code>函数中，在<code>while()</code>循环中加入代码。需要注意的是，要在<code>/* USER CODE BEGIN WHILE */</code>和<code>/* USER CODE END WHILE */</code>之间编写代码，否则在重新编译固件的时候会将其余代码全部初始化。</p><p><img src="/2022/05/09/STM32-Introduction/Screenshot%202022-05-09%20130023.png" alt="Screenshot 2022-05-09 130023" loading="lazy"></p><pre class="language-c" data-language="c"><code class="language-c"><span class="token comment">/* USER CODE BEGIN WHILE */</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token function">HAL_GPIO_WritePin</span><span class="token punctuation">(</span>LED3_GPIO_Port<span class="token punctuation">,</span> LED3_Pin<span class="token punctuation">,</span> GPIO_PIN_RESET<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">HAL_Delay</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">HAL_GPIO_WritePin</span><span class="token punctuation">(</span>LED3_GPIO_Port<span class="token punctuation">,</span> LED3_Pin<span class="token punctuation">,</span> GPIO_PIN_SET<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">HAL_GPIO_WritePin</span><span class="token punctuation">(</span>LED4_GPIO_Port<span class="token punctuation">,</span> LED4_Pin<span class="token punctuation">,</span> GPIO_PIN_RESET<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">HAL_Delay</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">HAL_GPIO_WritePin</span><span class="token punctuation">(</span>LED4_GPIO_Port<span class="token punctuation">,</span> LED4_Pin<span class="token punctuation">,</span> GPIO_PIN_SET<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">HAL_GPIO_WritePin</span><span class="token punctuation">(</span>LED5_GPIO_Port<span class="token punctuation">,</span> LED5_Pin<span class="token punctuation">,</span> GPIO_PIN_RESET<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">HAL_Delay</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">HAL_GPIO_WritePin</span><span class="token punctuation">(</span>LED5_GPIO_Port<span class="token punctuation">,</span> LED5_Pin<span class="token punctuation">,</span> GPIO_PIN_SET<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">/* USER CODE END WHILE */</span>  <span class="token comment">/* USER CODE BEGIN 3 */</span><span class="token punctuation">&#125;</span></code></pre><p>写好后点击编译固件（就是那个锤子），然后在电脑上链接单片机，点击运行程序即可将代码写入单片机。</p><p><img src="/2022/05/09/STM32-Introduction/Screenshot%202022-05-09%20130250.png" alt="Screenshot 2022-05-09 130250" loading="lazy"></p><p>大功告成了！</p><p><video src="STM32-Introduction/b6b59519626c1efe2aa367207f45ce83.mp4"></video></p>]]></content>
      
      
      <categories>
          
          <category> MCU </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STM32 </tag>
            
            <tag> MCU </tag>
            
            <tag> 嵌入式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>KMP字符串匹配算法</title>
      <link href="/2022/04/14/KPM-algorithm/"/>
      <url>/2022/04/14/KPM-algorithm/</url>
      
        <content type="html"><![CDATA[<h2 id="算法简介"><a class="markdownIt-Anchor" href="#算法简介"></a> 算法简介</h2><p>KMP 算法（Knuth-Morris-Pratt 算法）是一个著名的字符串匹配算法，这个算法由Donald Knuth、Vaughan Pratt、James H. Morris三人于1977年联合发表，故取这3人的姓氏命名此算法。</p><p>该算法的执行时间是线性的，且只需要对目标字符串进行预处理，而非搜索的字符串；此算法利用这一特性以避免重新检查先前配对的字符。</p><p>该算法通常与BM算法同时被人们提及和熟知，其时间复杂度与空间复杂度均相同，但多数情况下KPM算法实际速度略逊一筹，如果还不了解BM算法，可以参考我的这篇文章：<a href="http://tonylsx.top/2022/03/27/BM-algorithm/">BM字符串匹配算法 | Tony (tonylsx.top)</a></p><h2 id="kmp算法原理"><a class="markdownIt-Anchor" href="#kmp算法原理"></a> KMP算法原理</h2><p>从起始位置不回溯地匹配字符串，当出现失配情况时，利用已经得到的部分结果，尽可能地向右移动更远的位置。具体通过一个<code>next[]</code>数组确定移动多远的距离。</p><h2 id="kmp的实现"><a class="markdownIt-Anchor" href="#kmp的实现"></a> KMP的实现</h2><p>最核心的问题便是如何求解<code>next[]</code>数组。而<code>next[]</code>数组的值即为公共前缀后缀长度向右移动一位的结果，特别的<code>next[0]=-1</code>。</p><p>如下面这个例子：<code>string substr=&quot;abaabca&quot;</code>，他的公共前缀后缀长度为<code>string public=&quot;0011201&quot;</code>，那么next数组为<code>&#123;-1,0,0,1,1,2,0&#125;</code>.</p><p><img src="https://img-blog.csdnimg.cn/20190423221541855.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3l5enNpcg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><h2 id="完整代码"><a class="markdownIt-Anchor" href="#完整代码"></a> 完整代码</h2><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">KMP</span><span class="token punctuation">(</span>string str<span class="token punctuation">,</span> string substr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    string str<span class="token operator">=</span><span class="token string">"abcdfffaerssssse"</span><span class="token punctuation">;</span>    string substr<span class="token operator">=</span><span class="token string">"aers"</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token function">KMP</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> substr<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">KMP</span><span class="token punctuation">(</span>string str<span class="token punctuation">,</span> string substr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> m <span class="token operator">=</span> substr<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">next</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//预处理</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> substr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> substr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>            j <span class="token operator">=</span> next<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>substr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> substr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>            j<span class="token operator">++</span><span class="token punctuation">;</span>        next<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> j<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> substr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>            j <span class="token operator">=</span> next<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> substr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>            j<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> m<span class="token punctuation">)</span>            <span class="token keyword">return</span> i <span class="token operator">-</span> m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="kmp与有限状态自动机"><a class="markdownIt-Anchor" href="#kmp与有限状态自动机"></a> KMP与有限状态自动机</h2><p><code>next[]</code>数组可以以有限状态自动机的方式来理解，状态转移图便是<code>next[]</code>数组所储存的信息，一个是当前匹配的状态，另一个是遇到的字符。</p><p>如<code>string substr=&quot;ABABC&quot;</code>，那么他的状态转移图如下所示：</p><p><img src="/2022/04/14/KPM-algorithm/image-20220415153721845.png" alt="image-20220415153721845" loading="lazy"></p><p>而<code>next[]=&#123;-1,0,0,1,1&#125;</code>，不知是否看出某些规律呢?</p><h2 id="完整代码-2"><a class="markdownIt-Anchor" href="#完整代码-2"></a> 完整代码</h2><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> len<span class="token operator">=</span><span class="token number">10000</span><span class="token punctuation">;</span><span class="token keyword">int</span> dp<span class="token punctuation">[</span>len<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span><span class="token punctuation">;</span>string str<span class="token punctuation">,</span>substr<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">KMP</span><span class="token punctuation">(</span>string pat<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> M <span class="token operator">=</span> pat<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// dp[状态][字符] = 下个状态</span>    dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>pat<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">// base case</span>    <span class="token keyword">int</span> X <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">// 影子状态 X 初始为 0</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> M<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">// 构建状态转移图</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> c <span class="token operator">&lt;</span> <span class="token number">256</span><span class="token punctuation">;</span> c<span class="token operator">++</span><span class="token punctuation">)</span>            dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>X<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>pat<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        X <span class="token operator">=</span> dp<span class="token punctuation">[</span>X<span class="token punctuation">]</span><span class="token punctuation">[</span>pat<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 更新影子状态</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">search</span><span class="token punctuation">(</span>string txt<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> M <span class="token operator">=</span> substr<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> N <span class="token operator">=</span> txt<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">// pat 的初始态为 0</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        j <span class="token operator">=</span> dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>txt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 计算 pat 的下一个状态</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> M<span class="token punctuation">)</span> <span class="token comment">// 到达终止态，返回结果</span>            <span class="token keyword">return</span> i <span class="token operator">-</span> M <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">// 没到达终止态，匹配失败</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    str<span class="token operator">=</span><span class="token string">"aaac5a9aab"</span><span class="token punctuation">;</span>    substr<span class="token operator">=</span><span class="token string">"aaab"</span><span class="token punctuation">;</span>    <span class="token function">KMP</span><span class="token punctuation">(</span>substr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token function">search</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span>ans<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="参考文章"><a class="markdownIt-Anchor" href="#参考文章"></a> 参考文章</h2><ol><li><a href="https://zhuanlan.zhihu.com/p/83334559">KMP 算法详解 - 知乎 (zhihu.com)</a></li><li><a href="https://blog.csdn.net/yyzsir/article/details/89462339">KMP算法详解_yyzsir的博客-CSDN博客_kmp算法详解</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> algorithm </tag>
            
            <tag> KPM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅谈四维空间</title>
      <link href="/2022/04/09/4-dimensional/"/>
      <url>/2022/04/09/4-dimensional/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是四维空间"><a class="markdownIt-Anchor" href="#什么是四维空间"></a> 什么是四维空间？</h2><p>首先，我们来看一下百度百科和维基百科中的定义：</p><blockquote><p>在物理学和数学中，可将<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>个数的序列理解为一个 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span> 维空间中的位置。当<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>=</mo><mn>4</mn></mrow><annotation encoding="application/x-tex">n=4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">4</span></span></span></span>时，所有这样的位置的集合就叫做<strong>四维空间</strong>。四维空间和人居住的三维空间不同，因为多了一个维度。</p></blockquote><p>以上内容很容易理解，这是在数学上和物理上对四维空间的定义；然而在日常生活中，我们经常误将第四维度认为成<strong>时间的概念</strong>，这种观念<strong>是大错特错的！</strong> 这种普遍性的误用，是由于相对论的相关科普和文艺作品的流行。</p><p>既然与时间的概念无关，那么我们如何具象化的理解四位空间呢？</p><h2 id="类比法了解四维空间"><a class="markdownIt-Anchor" href="#类比法了解四维空间"></a> 类比法了解四维空间</h2><p>最简单的，我们知道一维空间是一条直线，二维空间是一个由无数直线组成的平面，三维空间是一个由无数平面组成的空间，那么四位空间就是一个由无数个空间组成的空间。事实上，我们不应该用“空间”一词来形容一个四维的世界，因为三维世界已经是一个空间，四维世界是由无数个空间组成的世界。然而，很遗憾的是，我们很可能永远也无法理解比空间更庞大的体系，就像一只蚂蚁永远也无法理解三维空间一样。</p><p>我们无法脑补四维世界是什么样子的，因为我们根本想象不出把无穷个空间拼接在一起是一个什么样的景象。这里我要再次强调一点的是，不要把“时间“这个概念引入进来，因为无论是三维空间也好，四维空间也罢，都与时间没有任何的关系。所以有些人说，把多个空间连接起来，不就是一条时间线么？再说一遍，这个说法<strong>大错特错！</strong></p><p>我们换一种方式进行推理，假设现在我们所处在<strong>一维空间</strong>，只有左和右一种走向，那么我们如何从外界不经过黑色的区域达到红色的区域呢？</p><p><img src="/2022/04/09/4-dimensional/image-20220409164432423.png" alt="image-20220409164432423" loading="lazy"></p><p>在一维空间中，答案是不可能！如果要抵达红色区域，那么必须要经过黑色的区域。但是我们并不是一维生物，我们可以在二维空间中毫不费力的抵达红色区域而不经过黑色区域，如下图所示。</p><p><img src="/2022/04/09/4-dimensional/image-20220409164635308.png" alt="image-20220409164635308" loading="lazy"></p><p>好了，现在我们将这个问题类比一下，假设现在我们所处在<strong>二维空间</strong>，只有左右和上下两种走向，那么我们如何从外界不经过黑色的区域达到红色的区域呢？</p><p><img src="/2022/04/09/4-dimensional/image-20220409164912020.png" alt="image-20220409164912020" loading="lazy"></p><p>答案同样是不可能！在二维空间中，如果要抵达红色区域，那么必须要经过黑色的区域。但是我们也并不是二维生物，我们可以在三维空间中毫不费力的触碰到红色区域而不经过黑色区域，如下图所示。（图片有点草率，请多多担待）</p><p><img src="/2022/04/09/4-dimensional/image-20220409165234091.png" alt="image-20220409165234091" loading="lazy"></p><p>现在看清楚推理的过程了么？在三维空间中，如果我们要不触碰黑色的外壳而直接触碰红色的内部，那么我们必须要在四维空间才能做到！</p><p><img src="/2022/04/09/4-dimensional/image-20220409165723376.png" alt="image-20220409165723376" loading="lazy"></p><p>因此，我们可以通过类比得出这样一个结论：<strong>在四维空间中，任何三维物体的内部都将暴露无遗。</strong></p><p>从数学角度是很容易去推理四维空间，坐标无非就是从三维空间的<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mi>x</mi><mi mathvariant="normal">，</mi><mi>y</mi><mi mathvariant="normal">，</mi><mi>z</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(x，y，z)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mord cjk_fallback">，</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mord cjk_fallback">，</span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mclose">)</span></span></span></span>到思维空间的 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo separator="true">,</mo><mi>z</mi><mo separator="true">,</mo><mi>k</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(x,y,z,k)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mclose">)</span></span></span></span>，而最关键的一个变量就是这个<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span></span></span></span>。我们说在三维空间中有上下，左右，前后这三个维度；对于第四个维度，我们暂且称为”顶底“，而这个<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span></span></span></span>也就代表了顶底的值。</p><p>而这个<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span></span></span></span>的值在四维空间中到底指的是什么呢？我们无从知晓，但是，根据刚才的推理（我们认为这个推理是公理1）我们可以得出<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span></span></span></span>跟物体的深度或许有一定的关系，我们暂且假设<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span></span></span></span>代表的是一个物体的深度。那么当<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">k=0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>时，我们看到的时一个立体的表面，而当$k\neq 0 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">（</mi><mi mathvariant="normal">比</mi><mi mathvariant="normal">如</mi></mrow><annotation encoding="application/x-tex">（比如</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0em;vertical-align:0em;"></span><span class="mord cjk_fallback">（</span><span class="mord cjk_fallback">比</span><span class="mord cjk_fallback">如</span></span></span></span>k=1$）时，我们看到的四维世界在三维空间的投影就是这个物体深度为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>的内部。对于四维空间的生物来说，触碰一个物体的内部是再简单不过的事情。</p><p>当然，这个假设大概率是不正确的，或者说，一定不正确。之所以这样假设，是为了让我们更直观的理解思维空间，事实上的四维空间远不止如此，其复杂程度超出了我们的认知。我们只是管中窥豹罢了，就好比二维世界中的三角形生物费尽千辛万苦终于进入了三维世界，哪怕它可以理解第三维度<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>z</mi></mrow><annotation encoding="application/x-tex">z</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span></span></span></span>时什么，它也只是一个三角形纸片罢了，当它看到一个三棱锥时，一定会震惊的无以复加。</p><p>而对于三维生物的我们来说，我们还依然无法理解第四维度<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span></span></span></span>到底指代的是什么，更别提如何想象四维世界了。</p><h2 id="四维空间的轴对称性"><a class="markdownIt-Anchor" href="#四维空间的轴对称性"></a> 四维空间的轴对称性</h2><p>对于四维空间，人们普遍认为空间有轴对称性，类比二维空间的一个三角形生物，当它进入三维空间之后便可以以任意角度进行旋转和翻转（想象一个三角形纸片漂浮在太空中的场景），当它再次回到二位世界，或许会被“轴对称”了一下；同样的，对于三维世界的生物，进入四维世界再回到三维世界，同样也可能会被”轴对称”（想象一下你的心脏跑到了身体的右侧），这便是四维空间的轴对称性。（我们认为这个推理是公理2）</p><p>而这个轴对称性并不是我们想象的那样，沿着你的脑袋到脚一分为二（图一），也可能时这样轴对称的（图二）。因此，如果我们想要从四维世界返回三维空间将是非常危险的一个行为。此外，根据公理1所描述的，如果我们从三维空间进入四维世界，那么我们的一切从里到外将暴露在四维世界中，我们的血液内脏等等将直接暴露在四维世界的空气中，这也是极其危险的行为（根本就活不了的好吧）。</p><p><img src="/2022/04/09/4-dimensional/image-20220409173308465.png" alt="image-20220409173308465" loading="lazy"></p><h2 id="四维空间的遐想"><a class="markdownIt-Anchor" href="#四维空间的遐想"></a> 四维空间的遐想</h2><p>根据公理1和公理2，我们可以做出关于四维空间的一个合理的假设：四维空间的第四个维度<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span></span></span></span>代表着三维空间中以任何一个点（也可能是一条直线，这个要看我们如何定义零维空间了）为中心，到这个点的距离。而四维空间的生物可以在第四个维度自由穿梭，也就是说可以自由达到任意物体的外部或内部。而这个点也是无穷多个的，空间中的任意一个点都可以作为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span></span></span></span>的基点。我们知道从二维到三维提升了一个数量级，那么从三维到四维也同样提升了一个数量级。</p><p>以上想法并非正确，仅仅是在两个并非一定正确的公理上遐想出的结论，这种结论自然是站不住脚的，仅仅是提供了一个可能的观点而已。而我认为，在没有事实基础的情况下，我们是永远也无法得知四维空间真正的面目，就如我之前所说的三角形生物一样，我们做的一切猜想都是基于三维世界观，所做的一切假设都是去尝试将四维世界投影到三维空间中；并非说这种方法不正确，而是我们永远无法通过这种逆向推导去了解真正的四维世界。</p>]]></content>
      
      
      <categories>
          
          <category> 神学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 四维空间 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Computer Network 6 - Layer 5-7 Technology, Application Protocols</title>
      <link href="/2022/04/08/CN-6/"/>
      <url>/2022/04/08/CN-6/</url>
      
        <content type="html"><![CDATA[<h4 id="layer-5-7-technology-application-protocols"><a class="markdownIt-Anchor" href="#layer-5-7-technology-application-protocols"></a> Layer 5-7 Technology, Application Protocols</h4><h4 id="layer-5-7-technologies"><a class="markdownIt-Anchor" href="#layer-5-7-technologies"></a> Layer 5-7 technologies</h4><h6 id="what-are-the-two-types-of-application-communications"><a class="markdownIt-Anchor" href="#what-are-the-two-types-of-application-communications"></a> What are the two types of application communications?</h6><p>Peer-to-peer Communications</p><p>Client-Server Communications</p><h6 id="list-some-application-layer-protocols-that-is-familiar"><a class="markdownIt-Anchor" href="#list-some-application-layer-protocols-that-is-familiar"></a> List some Application layer protocols that is familiar</h6><p>▪ Domain Name System (DNS)</p><p>▪ Hypertext Transfer Protocol (HTTP)</p><p>▪ File Transfer Protocol (FTP)</p><p>▪ Trivial File Transfer Protocol (TFTP)</p><p>▪ Telnet</p><p>▪ Simple Mail Transfer Protocol (SMTP)</p><p>▪ Post Office Protocol, version 3 (POP3)</p><p>▪ Simple Network Management Protocol (SNMP)</p><h6 id="what-is-the-operations-of-dns-what-is-the-difference-between-the-authoritative-or-non-authoritative-dns-records"><a class="markdownIt-Anchor" href="#what-is-the-operations-of-dns-what-is-the-difference-between-the-authoritative-or-non-authoritative-dns-records"></a> What is the operations of DNS? What is the difference between the authoritative or non-authoritative DNS records?</h6><p>These article is worth to read:</p><p><a href="https://zhuanlan.zhihu.com/p/350054986">DNS 是什么？如何运作的？ - 知乎 (zhihu.com)</a></p><p><a href="https://www.jianshu.com/p/441de4542245">DNS运作方式 - 简书 (jianshu.com)</a></p><h6 id="what-is-the-operations-of-http"><a class="markdownIt-Anchor" href="#what-is-the-operations-of-http"></a> What is the operations of HTTP?</h6><p>Client use HTTP Protocol to request information from Server</p><p>Server then send the information(like HTML, CSS) to Client</p><p>Note that the HTTP Protocol is a stateless protocol</p><h6 id="what-is-the-format-of-url"><a class="markdownIt-Anchor" href="#what-is-the-format-of-url"></a> What is the format of URL?</h6><p>URL: <code>https://Tony:tonytony@must.icu/menu/folder1/answer.html</code></p><p>Protocol: <code>https://</code></p><p>Username&amp;password:<code>Tony:tonytony</code></p><p>Domain name:<code>www.must.icu</code></p><p>Folder&amp;file:<code>menu/folder1/answer.html</code></p><h6 id="what-is-the-operations-of-email-system-using-smtp-and-pop3"><a class="markdownIt-Anchor" href="#what-is-the-operations-of-email-system-using-smtp-and-pop3"></a> What is the operations of email system using SMTP and POP3?</h6><p>Client use SMTP Protocol to send packages to Server</p><p>Server use POP3 Protocol to receive packages to Client</p><p>Note that as long as the packages sent to the Server, Client will receive “send the E-mail successfully”, but actually we cannot guarantee that another has received the E-mail or not.</p><hr><p><img src="/2022/04/08/CN-6/image-20211207025902517.png" alt="image-20211207025902517" loading="lazy"></p><p>Domain name: <a href="http://www.must.edu.mo">www.must.edu.mo</a></p><p>Application protocol: HTTP (Note that the application protocol is only depend on <code>http://</code>)</p><p>Transport protocol: TCP (just recite it)</p>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> computer network </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Computer Network 5 -  Layer 4 Technology, Transport Protocols</title>
      <link href="/2022/04/08/CN-5/"/>
      <url>/2022/04/08/CN-5/</url>
      
        <content type="html"><![CDATA[<h3 id="layer-4-technology-transport-protocols"><a class="markdownIt-Anchor" href="#layer-4-technology-transport-protocols"></a> Layer 4 Technology, Transport Protocols</h3><h4 id="transport-protocols-tcp-and-udp"><a class="markdownIt-Anchor" href="#transport-protocols-tcp-and-udp"></a> Transport protocols (TCP and UDP)</h4><h6 id="what-are-the-differences-between-connect-oriented-and-connectionless-services-which-transport-protocol-is-providing-these-services"><a class="markdownIt-Anchor" href="#what-are-the-differences-between-connect-oriented-and-connectionless-services-which-transport-protocol-is-providing-these-services"></a> What are the differences between connect-oriented and connectionless services? Which transport  protocol is providing these services?</h6><p>Connection-oriented service is like telephone service, the first message sent from source device will first received by destination device, which means the messages are <mark>in order</mark>. TCP belongs to connection-oriented transport protocol.</p><p>Connectionless service is like postal service, the first message sent from source device may not first received by destination device, which means the messages are <mark>not in order</mark>. UDP belongs to connectionless transport protocol.</p><h6 id="what-functions-are-provided-by-the-transport-protocols-of-tcp-and-udp"><a class="markdownIt-Anchor" href="#what-functions-are-provided-by-the-transport-protocols-of-tcp-and-udp"></a> What functions are provided by the transport protocols of TCP and UDP?</h6><p>TCP:</p><ul><li><p>Connection-oriented.</p></li><li><p>Divides outgoing messages into segments, and reassembles messages at the destination host.</p></li><li><p>Reliable delivery that re-sends anything not received.</p></li><li><p>Provides flow control.</p></li></ul><p>UDP:</p><ul><li>Connectionless</li><li>Unreliable delivery that uses no acknowledgments, and provides no software checking for message  delivery</li><li>Provides no flow control</li></ul><h6 id="which-application-layer-protocols-use-tcp-or-udp-as-transport-protocol"><a class="markdownIt-Anchor" href="#which-application-layer-protocols-use-tcp-or-udp-as-transport-protocol"></a> Which application layer protocols use TCP or UDP as transport protocol?</h6><p>TCP protocols include: FTP, HTTP, SMTP and Telnet.</p><p>UDP protocols include: DNS, SNMP, TFTP and DHCP.</p><h6 id="what-is-the-purpose-of-port-number-how-to-assign-the-port-number-for-the-application-on-the-server-site-and-client-site-list-some-common-used-port-numbers-for-famous-application-protocols"><a class="markdownIt-Anchor" href="#what-is-the-purpose-of-port-number-how-to-assign-the-port-number-for-the-application-on-the-server-site-and-client-site-list-some-common-used-port-numbers-for-famous-application-protocols"></a> What is the purpose of port number? How to assign the port number for the application on the server site and client site? List some common used port numbers for famous application protocols.</h6><p>Transport layer assigns port numbers to each of these <mark>applications or services</mark>  to keep track of <mark>different conversations</mark> that cross the network <mark>at the same time</mark>.</p><p>Port numbers have the following assigned ranges:</p><ul><li><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0</mn></mrow><annotation encoding="application/x-tex">0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span> ~ <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1023</mn></mrow><annotation encoding="application/x-tex">1023</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">2</span><span class="mord">3</span></span></span></span>: Well-known ports numbers. These numbers are reserved for well-known services and applications.</p></li><li><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1024</mn></mrow><annotation encoding="application/x-tex">1024</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">2</span><span class="mord">4</span></span></span></span> ~ <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>49151</mn></mrow><annotation encoding="application/x-tex">49151</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">4</span><span class="mord">9</span><span class="mord">1</span><span class="mord">5</span><span class="mord">1</span></span></span></span>: Registered for vendor-specific applications.</p><p>​These port numbers are assigned to individual applications that a user has chosen to install rather  than common applications that would receive a Well Known Port. When not used for a server  resource, these ports may also be used dynamically selected by a client as its source port.</p></li><li><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>49152</mn></mrow><annotation encoding="application/x-tex">49152</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">4</span><span class="mord">9</span><span class="mord">1</span><span class="mord">5</span><span class="mord">2</span></span></span></span> ~ <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>65535</mn></mrow><annotation encoding="application/x-tex">65535</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">6</span><span class="mord">5</span><span class="mord">5</span><span class="mord">3</span><span class="mord">5</span></span></span></span>: Private and/or dynamically assigned ports numbers.</p><p>​Also known as Ephemeral Ports, these are usually assigned dynamically to client applications when  initiating a connection.</p><p><img src="/2022/04/08/CN-5/image-20211211154556832.png" alt="image-20211211154556832" loading="lazy"></p></li></ul><h4 id="tcp-services"><a class="markdownIt-Anchor" href="#tcp-services"></a> TCP services</h4><h6 id="how-does-tcp-use-three-way-handshake-to-establish-a-connection"><a class="markdownIt-Anchor" href="#how-does-tcp-use-three-way-handshake-to-establish-a-connection"></a> How does TCP use three-way handshake to establish a connection?</h6><p><img src="/2022/04/08/CN-5/image-20211211154616223.png" alt="image-20211211154616223" loading="lazy"></p><h6 id="how-does-tcp-use-sequence-number-and-acknowledgment-to-provide-reliable-transmission"><a class="markdownIt-Anchor" href="#how-does-tcp-use-sequence-number-and-acknowledgment-to-provide-reliable-transmission"></a> How does TCP use sequence number and acknowledgment to provide reliable transmission?</h6><p><img src="/2022/04/08/CN-5/image-20211211154625242.png" alt="image-20211211154625242" loading="lazy"></p><p><img src="/2022/04/08/CN-5/image-20211211152352560.png" alt="image-20211211152352560" loading="lazy"></p><p>See more for three-way handshake. Client and Server has exchanged the sequence number and acknowledgment number.</p><p>Pay attention to the direction that messaged are sent. In this example, message is from client to server, therefore the <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi><mi>C</mi><mi>K</mi><mo>=</mo><mi>S</mi><mi>e</mi><mi>q</mi><mtext> </mtext><mi>n</mi><mi>u</mi><mi>m</mi><mi>b</mi><mi>e</mi><mi>r</mi><mo>+</mo><mi>P</mi><mi>a</mi><mi>c</mi><mi>k</mi><mi>e</mi><mi>t</mi><mtext> </mtext><mi>S</mi><mi>i</mi><mi>z</mi><mi>e</mi></mrow><annotation encoding="application/x-tex">ACK=Seq\ number + Packet\ Size</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mspace"> </span><span class="mord mathdefault">n</span><span class="mord mathdefault">u</span><span class="mord mathdefault">m</span><span class="mord mathdefault">b</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mord mathdefault">a</span><span class="mord mathdefault">c</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mord mathdefault">e</span><span class="mord mathdefault">t</span><span class="mspace"> </span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mord mathdefault">e</span></span></span></span>. However, if the message is sent by server, the ACK would changed into <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi><mi>C</mi><mi>K</mi><mo>=</mo><mi>S</mi><mi>e</mi><mi>q</mi><mtext> </mtext><mi>n</mi><mi>u</mi><mi>m</mi><mi>b</mi><mi>e</mi><mi>r</mi><mo>−</mo><mi>P</mi><mi>a</mi><mi>c</mi><mi>k</mi><mi>e</mi><mi>t</mi><mtext> </mtext><mi>S</mi><mi>i</mi><mi>z</mi><mi>e</mi></mrow><annotation encoding="application/x-tex">ACK=Seq\ number - Packet\ Size</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mspace"> </span><span class="mord mathdefault">n</span><span class="mord mathdefault">u</span><span class="mord mathdefault">m</span><span class="mord mathdefault">b</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mord mathdefault">a</span><span class="mord mathdefault">c</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mord mathdefault">e</span><span class="mord mathdefault">t</span><span class="mspace"> </span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mord mathdefault">e</span></span></span></span>.</p><p><img src="/2022/04/08/CN-5/image-20211211154842458.png" alt="image-20211211154842458" loading="lazy"></p>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> computer network </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Computer Network 4 - Layer 3, Routing Protocols</title>
      <link href="/2022/04/08/CN-4/"/>
      <url>/2022/04/08/CN-4/</url>
      
        <content type="html"><![CDATA[<h2 id="layer-3-routing-protocols"><a class="markdownIt-Anchor" href="#layer-3-routing-protocols"></a> Layer 3, Routing Protocols</h2><h4 id="routing-protocols"><a class="markdownIt-Anchor" href="#routing-protocols"></a> Routing protocols</h4><h6 id="what-are-the-differences-between-interior-gateway-protocol-igp-and-exterior-gateway-protocol-egp-list-some-example-of-them"><a class="markdownIt-Anchor" href="#what-are-the-differences-between-interior-gateway-protocol-igp-and-exterior-gateway-protocol-egp-list-some-example-of-them"></a> What are the differences between Interior Gateway Protocol (IGP) and Exterior Gateway Protocol  (EGP)? List some example of them.</h6><p>​Interior Gateway Protocols (IGP) route data <mark>in</mark> an autonomous system. Like EIGRP, OSPF.</p><p>​Exterior Gateway Protocols (EGP) route data <mark>between</mark> autonomous system. Like BGP.</p><h6 id="what-algorithm-is-used-by-distance-vector-routing-protocols"><a class="markdownIt-Anchor" href="#what-algorithm-is-used-by-distance-vector-routing-protocols"></a> What algorithm is used by distance vector routing protocols?</h6><p>​Distance vector routing protocol algorithm: <mark>Bellman-Ford algorithm</mark></p><p>​Link-state routing protocol algorithm: <mark>Dijkstra algorithm</mark></p><h6 id="what-are-the-features-of-distance-vector-routing-protocols"><a class="markdownIt-Anchor" href="#what-are-the-features-of-distance-vector-routing-protocols"></a> What are the features of distance vector routing protocols?</h6><p>​<mark>Features:</mark> Periodic updates, send entire routing table to directly connected routers, do not know the  exact network topology.</p><p>When the topology changes, routing table updates must occur. It passes periodic copies of a routing  table from router to router. Distance-vector algorithms call for each router to send its entire routing  table to each of its directly connected neighboring routers.</p><p>​The algorithm eventually accumulates network distances so that it can maintain a database of  network topology information.</p><p>​Distance-vector algorithms do not know the exact topology of an internetwork.</p><h6 id="what-algorithm-is-used-by-link-state-routing-protocols"><a class="markdownIt-Anchor" href="#what-algorithm-is-used-by-link-state-routing-protocols"></a> What algorithm is used by link-state routing protocols?</h6><p>​Distance vector routing protocol algorithm: <mark>Bellman-Ford algorithm</mark></p><p>​Link-state routing protocol algorithm: <mark>Dijkstra algorithm</mark></p><h6 id="what-are-the-features-of-link-state-routing-protocols"><a class="markdownIt-Anchor" href="#what-are-the-features-of-link-state-routing-protocols"></a> What are the features of link-state routing protocols?</h6><p>​<mark>Features:</mark> Trigger updates, send partial routing to all routers on the network, know the exact  network topology.</p><p>​It exchanges LSAs (Link-state advertisements) to collect the routing information between routers  starting with directly connected networks.</p><p>​Each router in parallel with the others constructs this logical topology as a tree, with itself as the root,  consisting of all possible paths to each network in the link-state protocol internetwork.</p><p>​SPF algorithm calculation is performed on the database resulting in the SPF tree. A list of the known  paths and interfaces is stored in the routing tables.</p><p>​A link-state routing algorithm maintains full knowledge of distant routers and how they interconnect.</p><h4 id="eigrp"><a class="markdownIt-Anchor" href="#eigrp"></a> EIGRP</h4><h6 id="what-three-tables-are-maintained-by-eigrp-for-each-routed-protocol-what-information-are-stored-in-these-tables-which-tables-does-eigrp-store-the-primary-route-successor-to-the-destination-which-tables-does-eigrp-store-the-backup-route-feasible-successor-to-the-destination"><a class="markdownIt-Anchor" href="#what-three-tables-are-maintained-by-eigrp-for-each-routed-protocol-what-information-are-stored-in-these-tables-which-tables-does-eigrp-store-the-primary-route-successor-to-the-destination-which-tables-does-eigrp-store-the-backup-route-feasible-successor-to-the-destination"></a> What three tables are maintained by EIGRP for each routed protocol? What information are stored  in these tables? Which tables does EIGRP store the primary route (successor) to the destination?  Which tables does EIGRP store the backup route (feasible successor) to the destination?</h6><p>Three tables: <mark>neighbor table,  topology table and routing table</mark></p><p>Both topology table and routing table stored the successor route (primary route).</p><p>Topology table stored the feasible successor route (backup route).</p><p>See more for: <a href="https://www.jianshu.com/p/5ec0e020d97a">EIGRP路由协议 - 简书 (jianshu.com)</a></p><h6 id="what-are-the-operations-of-dual-how-can-eigrp-determine-the-feasible-distance-reported-distance-successor-and-feasible-successor-for-a-destination-network"><a class="markdownIt-Anchor" href="#what-are-the-operations-of-dual-how-can-eigrp-determine-the-feasible-distance-reported-distance-successor-and-feasible-successor-for-a-destination-network"></a> What are the operations of DUAL? How can EIGRP determine the feasible distance, reported  distance, successor and feasible successor for a destination network?</h6><p>DUAL (Diffusing Update Algorithm) is the method to guarantee the successor distance and feasible successor distance of a non-circle topology network.</p><p>FD (Feasible Distance): the local route’s metric of the <mark>best route</mark> to reach a specific network.</p><p>RD (Reported Distance): the metric advertised by the neighbor router for a specific route.</p><p>Successor for a destination network: the next hop on the primary route with the shortest feasible distance to the destination.</p><p>Feasible successor for a destination network: When a destination network is removed from the EIGRP topology, a router initiates a route querying process in an attempt to locate a different route to that destination. As it is preferable to avoid this querying process, EIGRP routers will opportunistically store backup routes, known as <em>feasible successors</em>, when certain requirements are met.</p><h6 id="what-are-used-as-metric-for-eigrp-how-to-calculate-the-metric-for-a-destination-network"><a class="markdownIt-Anchor" href="#what-are-used-as-metric-for-eigrp-how-to-calculate-the-metric-for-a-destination-network"></a> What are used as metric for EIGRP? How to calculate the metric for a destination network?</h6><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>M</mi><mi>e</mi><mi>t</mi><mi>r</mi><mi>i</mi><mi>c</mi><mo>=</mo><mi>B</mi><mi>a</mi><mi>n</mi><mi>d</mi><mi>w</mi><mi>i</mi><mi>d</mi><mi>t</mi><mi>h</mi><mo>+</mo><mi>D</mi><mi>e</mi><mi>l</mi><mi>a</mi><mi>y</mi></mrow><annotation encoding="application/x-tex">Metric = Bandwidth + Delay</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mord mathdefault">e</span><span class="mord mathdefault">t</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">i</span><span class="mord mathdefault">c</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mord mathdefault">a</span><span class="mord mathdefault">n</span><span class="mord mathdefault">d</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mord mathdefault">i</span><span class="mord mathdefault">d</span><span class="mord mathdefault">t</span><span class="mord mathdefault">h</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span></span></p><p>Note that the unit of bandwidth is <mark><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>K</mi><mi>b</mi><mi>p</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">Kbps</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="mord mathdefault">b</span><span class="mord mathdefault">p</span><span class="mord mathdefault">s</span></span></span></span></mark> and the unit of delay is <mark><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>μ</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">\mu s</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">μ</span><span class="mord mathdefault">s</span></span></span></span></mark></p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>F</mi><mi>D</mi><mo>=</mo><mo fence="false">(</mo><mfrac><mrow><mn>1</mn><msup><mn>0</mn><mn>7</mn></msup></mrow><mrow><mi>B</mi><mi>a</mi><mi>n</mi><mi>d</mi><mi>W</mi><mi>i</mi><mi>d</mi><mi>t</mi><mi>h</mi></mrow></mfrac><mo>+</mo><mfrac><mrow><mi>D</mi><mi>e</mi><mi>l</mi><mi>a</mi><mi>y</mi><mo stretchy="false">(</mo><mi>μ</mi><mi>s</mi><mo stretchy="false">)</mo></mrow><mn>10</mn></mfrac><mo fence="false">)</mo><mo>×</mo><mn>256</mn></mrow><annotation encoding="application/x-tex">FD=\Big( \frac{10^7}{BandWidth}+\frac{Delay(\mu s)}{10}  \Big)\times 256</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.177108em;vertical-align:-0.686em;"></span><span class="mord"><span class="delimsizing size2">(</span></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.491108em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mord mathdefault">a</span><span class="mord mathdefault">n</span><span class="mord mathdefault">d</span><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="mord mathdefault">i</span><span class="mord mathdefault">d</span><span class="mord mathdefault">t</span><span class="mord mathdefault">h</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">7</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:2.113em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mord">0</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mopen">(</span><span class="mord mathdefault">μ</span><span class="mord mathdefault">s</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord"><span class="delimsizing size2">)</span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mord">5</span><span class="mord">6</span></span></span></span></span></p><h6 id="which-multicast-addresses-are-used-by-eigrp-to-exchange-the-routing-information"><a class="markdownIt-Anchor" href="#which-multicast-addresses-are-used-by-eigrp-to-exchange-the-routing-information"></a> Which multicast addresses are used by EIGRP to exchange the routing information?</h6><p>IPv4: <code>224.0.0.10</code></p><p>IPv6: <code>FF02::A</code></p><h4 id="ospf"><a class="markdownIt-Anchor" href="#ospf"></a> OSPF</h4><h6 id="what-three-databases-are-maintained-by-ospf-what-information-are-stored-in-these-databases"><a class="markdownIt-Anchor" href="#what-three-databases-are-maintained-by-ospf-what-information-are-stored-in-these-databases"></a> What three databases are maintained by OSPF? What information are stored in these databases?</h6><p>Three databases: <mark>neighbor database,  topology database and routing database</mark></p><p>See more for: <a href="https://blog.csdn.net/qq_44967475/article/details/90901793">OSPF详解（一）_智慧云工具箱的博客-CSDN博客_ospf详解</a></p><h6 id="what-types-of-networks-need-a-dr-designated-router-and-bdr-backup-designated-router-election-whyhow-to-determine-the-dr-and-bdr-in-ospf-network"><a class="markdownIt-Anchor" href="#what-types-of-networks-need-a-dr-designated-router-and-bdr-backup-designated-router-election-whyhow-to-determine-the-dr-and-bdr-in-ospf-network"></a> What types of networks need a DR (Designated Router) and BDR (Backup Designated Router)  election? Why?How to determine the DR and BDR in OSPF network?</h6><p><mark>Multi-access networks</mark> need a DR and BDR election.</p><p><mark>Point-to-point networks</mark> do <strong>NOT</strong> need a DR or BDR election.</p><p>DR is the <mark>largest</mark> number of the router ID set of a sub-network.</p><p>BDR is the <mark>second largest</mark> number of the router ID set of a sub-network.</p><h6 id="what-is-used-as-metric-for-ospf-how-to-calculate-the-metric-for-a-destination-network"><a class="markdownIt-Anchor" href="#what-is-used-as-metric-for-ospf-how-to-calculate-the-metric-for-a-destination-network"></a> What is used as metric for OSPF? How to calculate the metric for a destination network?</h6><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mi>S</mi><mi>P</mi><mi>F</mi><mtext> </mtext><mi>C</mi><mi>o</mi><mi>s</mi><mi>t</mi><mo>=</mo><mo>∑</mo><mfrac><mrow><mn>1</mn><msup><mn>0</mn><mn>8</mn></msup></mrow><mrow><mi>B</mi><mi>a</mi><mi>n</mi><mi>d</mi><mi>W</mi><mi>i</mi><mi>d</mi><mi>t</mi><mi>h</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">OSPF\ Cost=\sum \frac{10^8}{BandWidth}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mspace"> </span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord mathdefault">o</span><span class="mord mathdefault">s</span><span class="mord mathdefault">t</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.177108em;vertical-align:-0.686em;"></span><span class="mop op-symbol large-op" style="position:relative;top:-0.000004999999999977245em;">∑</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.491108em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mord mathdefault">a</span><span class="mord mathdefault">n</span><span class="mord mathdefault">d</span><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="mord mathdefault">i</span><span class="mord mathdefault">d</span><span class="mord mathdefault">t</span><span class="mord mathdefault">h</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">8</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>Note that the unit of bandwidth is <mark><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>b</mi><mi>p</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">bps</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">b</span><span class="mord mathdefault">p</span><span class="mord mathdefault">s</span></span></span></span></mark></p><h6 id="which-multicast-addresses-are-used-by-ospf-to-exchange-the-routing-information"><a class="markdownIt-Anchor" href="#which-multicast-addresses-are-used-by-ospf-to-exchange-the-routing-information"></a> Which multicast addresses are used by OSPF to exchange the routing information?</h6><p>IPv4: <code>224.0.0.5</code> or <code>224.0.0.6</code></p><p>IPv6: <code>FF02::5</code> or <code>FF02::6</code></p><p><img src="/2022/04/08/CN-4/image-20211206080928415-1649432396057.png" alt="image-20211206080928415" loading="lazy"></p><p>To <code>192.168.1.11</code>: Find out <code>192.168.1.0/24</code> in routing table and next-hop is <code>172.16.1.2</code></p><p>To <code>172,16.1.1</code>: Find out <code>172.16.1.0/24</code> in routing table and next-hop is Serial0</p><p>To <code>172.16.2.22</code>: Find out <code>0.0.0.0/0</code> in routing table and next-hop is <code>172.16.1.2</code></p><p>To <code>255.255.255.255</code> drop since it is a broadcast IP therefore there is no next-hop.</p><p><img src="/2022/04/08/CN-4/image-20211206080908048-1649432396057.png" alt="image-20211206080908048" loading="lazy"></p><p>Note that <mark>Successor route</mark> means the best route and <mark>Feasible successor route</mark> means backup route.</p><p>And the <strong>feasible distance</strong> calculation formula is:</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>F</mi><mi>D</mi><mo>=</mo><mo fence="false">(</mo><mfrac><mrow><mn>1</mn><msup><mn>0</mn><mn>7</mn></msup></mrow><mrow><mi>B</mi><mi>a</mi><mi>n</mi><mi>d</mi><mi>W</mi><mi>i</mi><mi>d</mi><mi>t</mi><mi>h</mi><mo stretchy="false">(</mo><mi>K</mi><mi>b</mi><mi>p</mi><mi>s</mi><mo stretchy="false">)</mo></mrow></mfrac><mo>+</mo><mfrac><mrow><mi>D</mi><mi>e</mi><mi>l</mi><mi>a</mi><mi>y</mi><mo stretchy="false">(</mo><mi>μ</mi><mi>s</mi><mo stretchy="false">)</mo></mrow><mn>10</mn></mfrac><mo fence="false">)</mo><mo>×</mo><mn>256</mn></mrow><annotation encoding="application/x-tex">FD=\Big( \frac{10^7}{BandWidth(Kbps)}+\frac{Delay(\mu s)}{10}  \Big)\times 256</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.427108em;vertical-align:-0.936em;"></span><span class="mord"><span class="delimsizing size2">(</span></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.491108em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mord mathdefault">a</span><span class="mord mathdefault">n</span><span class="mord mathdefault">d</span><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="mord mathdefault">i</span><span class="mord mathdefault">d</span><span class="mord mathdefault">t</span><span class="mord mathdefault">h</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="mord mathdefault">b</span><span class="mord mathdefault">p</span><span class="mord mathdefault">s</span><span class="mclose">)</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">7</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:2.113em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mord">0</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mopen">(</span><span class="mord mathdefault">μ</span><span class="mord mathdefault">s</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord"><span class="delimsizing size2">)</span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mord">5</span><span class="mord">6</span></span></span></span></span></p><p>Route I: <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>R</mi><mi>o</mi><mi>u</mi><mi>t</mi><mi>e</mi><mi>r</mi><mn>1</mn><mo>→</mo><mi>R</mi><mi>o</mi><mi>u</mi><mi>t</mi><mi>e</mi><mi>r</mi><mn>2</mn><mo>→</mo><mi>R</mi><mi>o</mi><mi>u</mi><mi>t</mi><mi>e</mi><mi>r</mi><mn>3</mn><mo>→</mo><mn>192.168.33.0</mn><mi mathvariant="normal">/</mi><mn>24</mn></mrow><annotation encoding="application/x-tex">Router1\to Router2\to Router3\to192.168.33.0/24</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mord mathdefault">o</span><span class="mord mathdefault">u</span><span class="mord mathdefault">t</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mord mathdefault">o</span><span class="mord mathdefault">u</span><span class="mord mathdefault">t</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mord mathdefault">o</span><span class="mord mathdefault">u</span><span class="mord mathdefault">t</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord">3</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mord">9</span><span class="mord">2</span><span class="mord">.</span><span class="mord">1</span><span class="mord">6</span><span class="mord">8</span><span class="mord">.</span><span class="mord">3</span><span class="mord">3</span><span class="mord">.</span><span class="mord">0</span><span class="mord">/</span><span class="mord">2</span><span class="mord">4</span></span></span></span></p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>F</mi><msub><mi>D</mi><mn>2</mn></msub><mo>=</mo><mo fence="false">(</mo><mfrac><mrow><mn>1</mn><msup><mn>0</mn><mn>7</mn></msup></mrow><mrow><mn>10</mn><mo>×</mo><mn>1</mn><msup><mn>0</mn><mn>3</mn></msup></mrow></mfrac><mo>+</mo><mfrac><mrow><mn>1000</mn><mo>+</mo><mn>1000</mn><mo>+</mo><mn>100</mn></mrow><mn>10</mn></mfrac><mo fence="false">)</mo><mo>×</mo><mn>256</mn><mo>=</mo><mn>309760</mn></mrow><annotation encoding="application/x-tex">FD_2=\Big( \frac{10^7}{10\times 10^3}+\frac{1000+1000+100}{10}  \Big)\times 256=309760</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.260438em;vertical-align:-0.7693300000000001em;"></span><span class="mord"><span class="delimsizing size2">(</span></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.491108em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">7</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7693300000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:2.00744em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mord">0</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord"><span class="delimsizing size2">)</span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mord">5</span><span class="mord">6</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">3</span><span class="mord">0</span><span class="mord">9</span><span class="mord">7</span><span class="mord">6</span><span class="mord">0</span></span></span></span></span></p><p>Route II: <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>R</mi><mi>o</mi><mi>u</mi><mi>t</mi><mi>e</mi><mi>r</mi><mn>1</mn><mo>→</mo><mi>R</mi><mi>o</mi><mi>u</mi><mi>t</mi><mi>e</mi><mi>r</mi><mn>3</mn><mo>→</mo><mn>192.168.33.0</mn><mi mathvariant="normal">/</mi><mn>24</mn></mrow><annotation encoding="application/x-tex">Router1\to Router3\to192.168.33.0/24</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mord mathdefault">o</span><span class="mord mathdefault">u</span><span class="mord mathdefault">t</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mord mathdefault">o</span><span class="mord mathdefault">u</span><span class="mord mathdefault">t</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord">3</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mord">9</span><span class="mord">2</span><span class="mord">.</span><span class="mord">1</span><span class="mord">6</span><span class="mord">8</span><span class="mord">.</span><span class="mord">3</span><span class="mord">3</span><span class="mord">.</span><span class="mord">0</span><span class="mord">/</span><span class="mord">2</span><span class="mord">4</span></span></span></span></p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>F</mi><msub><mi>D</mi><mn>3</mn></msub><mo>=</mo><mo fence="false">(</mo><mfrac><mrow><mn>1</mn><msup><mn>0</mn><mn>7</mn></msup></mrow><mn>56</mn></mfrac><mo>+</mo><mfrac><mrow><mn>20000</mn><mo>+</mo><mn>100</mn></mrow><mn>10</mn></mfrac><mo fence="false">)</mo><mo>×</mo><mn>256</mn><mo>=</mo><mn>46228845</mn></mrow><annotation encoding="application/x-tex">FD_3=\Big( \frac{10^7}{56}+\frac{20000+100}{10}  \Big)\times 256=46228845</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.177108em;vertical-align:-0.686em;"></span><span class="mord"><span class="delimsizing size2">(</span></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.491108em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">5</span><span class="mord">6</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">7</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:2.00744em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mord">0</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord"><span class="delimsizing size2">)</span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mord">5</span><span class="mord">6</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">4</span><span class="mord">6</span><span class="mord">2</span><span class="mord">2</span><span class="mord">8</span><span class="mord">8</span><span class="mord">4</span><span class="mord">5</span></span></span></span></span></p><p>Route III: <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>R</mi><mi>o</mi><mi>u</mi><mi>t</mi><mi>e</mi><mi>r</mi><mn>1</mn><mo>→</mo><mi>R</mi><mi>o</mi><mi>u</mi><mi>t</mi><mi>e</mi><mi>r</mi><mn>4</mn><mo>→</mo><mi>R</mi><mi>o</mi><mi>u</mi><mi>t</mi><mi>e</mi><mi>r</mi><mn>3</mn><mo>→</mo><mn>192.168.33.0</mn><mi mathvariant="normal">/</mi><mn>24</mn></mrow><annotation encoding="application/x-tex">Router1\to Router4\to Router3\to192.168.33.0/24</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mord mathdefault">o</span><span class="mord mathdefault">u</span><span class="mord mathdefault">t</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mord mathdefault">o</span><span class="mord mathdefault">u</span><span class="mord mathdefault">t</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord">4</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mord mathdefault">o</span><span class="mord mathdefault">u</span><span class="mord mathdefault">t</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord">3</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mord">9</span><span class="mord">2</span><span class="mord">.</span><span class="mord">1</span><span class="mord">6</span><span class="mord">8</span><span class="mord">.</span><span class="mord">3</span><span class="mord">3</span><span class="mord">.</span><span class="mord">0</span><span class="mord">/</span><span class="mord">2</span><span class="mord">4</span></span></span></span></p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>F</mi><msub><mi>D</mi><mn>4</mn></msub><mo>=</mo><mo fence="false">(</mo><mfrac><mrow><mn>1</mn><msup><mn>0</mn><mn>7</mn></msup></mrow><mrow><mn>100</mn><mo>×</mo><mn>1</mn><msup><mn>0</mn><mn>3</mn></msup></mrow></mfrac><mo>+</mo><mfrac><mrow><mn>100</mn><mo>+</mo><mn>100</mn><mo>+</mo><mn>100</mn></mrow><mn>10</mn></mfrac><mo fence="false">)</mo><mo>×</mo><mn>256</mn><mo>=</mo><mn>33280</mn></mrow><annotation encoding="application/x-tex">FD_4=\Big( \frac{10^7}{100\times 10^3}+\frac{100+100+100}{10}  \Big)\times 256=33280</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.260438em;vertical-align:-0.7693300000000001em;"></span><span class="mord"><span class="delimsizing size2">(</span></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.491108em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">7</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7693300000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:2.00744em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mord">0</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord"><span class="delimsizing size2">)</span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mord">5</span><span class="mord">6</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">3</span><span class="mord">3</span><span class="mord">2</span><span class="mord">8</span><span class="mord">0</span></span></span></span></span></p><p>Since <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>F</mi><msub><mi>D</mi><mn>4</mn></msub></mrow><annotation encoding="application/x-tex">FD_4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> is the shortest path (easy to compare), route III is called successor route.</p><p>Now let’s calculate feasible successor route, or say, backup route.</p><p>Because <em>Router 4</em> is the successor router, we only need to calculate the RD of <em>Router 2</em> and <em>Router 3</em>. If <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>R</mi><mi>D</mi><mo>&lt;</mo><mi>F</mi><mi>D</mi></mrow><annotation encoding="application/x-tex">RD&lt;FD</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72243em;vertical-align:-0.0391em;"></span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span></span></span></span>, we can say the route is a feasible successor route.</p><p>Route I: <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>R</mi><mi>o</mi><mi>u</mi><mi>t</mi><mi>e</mi><mi>r</mi><mn>2</mn><mo>→</mo><mi>R</mi><mi>o</mi><mi>u</mi><mi>t</mi><mi>e</mi><mi>r</mi><mn>3</mn><mo>→</mo><mn>192.168.33.0</mn><mi mathvariant="normal">/</mi><mn>24</mn></mrow><annotation encoding="application/x-tex">Router2\to Router3\to192.168.33.0/24</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mord mathdefault">o</span><span class="mord mathdefault">u</span><span class="mord mathdefault">t</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mord mathdefault">o</span><span class="mord mathdefault">u</span><span class="mord mathdefault">t</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord">3</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mord">9</span><span class="mord">2</span><span class="mord">.</span><span class="mord">1</span><span class="mord">6</span><span class="mord">8</span><span class="mord">.</span><span class="mord">3</span><span class="mord">3</span><span class="mord">.</span><span class="mord">0</span><span class="mord">/</span><span class="mord">2</span><span class="mord">4</span></span></span></span></p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>R</mi><msub><mi>D</mi><mn>2</mn></msub><mo>=</mo><mo fence="false">(</mo><mfrac><mrow><mn>1</mn><msup><mn>0</mn><mn>7</mn></msup></mrow><mrow><mn>10</mn><mo>×</mo><mn>1</mn><msup><mn>0</mn><mn>3</mn></msup></mrow></mfrac><mo>+</mo><mfrac><mrow><mn>1000</mn><mo>+</mo><mn>100</mn></mrow><mn>10</mn></mfrac><mo fence="false">)</mo><mo>×</mo><mn>256</mn></mrow><annotation encoding="application/x-tex">RD_2=\Big( \frac{10^7}{10\times 10^3}+\frac{1000+100}{10}  \Big)\times 256</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.260438em;vertical-align:-0.7693300000000001em;"></span><span class="mord"><span class="delimsizing size2">(</span></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.491108em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">7</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7693300000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:2.00744em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mord">0</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord"><span class="delimsizing size2">)</span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mord">5</span><span class="mord">6</span></span></span></span></span></p><p>Route II: <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>R</mi><mi>o</mi><mi>u</mi><mi>t</mi><mi>e</mi><mi>r</mi><mn>3</mn><mo>→</mo><mn>192.168.33.0</mn><mi mathvariant="normal">/</mi><mn>24</mn></mrow><annotation encoding="application/x-tex">Router3\to192.168.33.0/24</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mord mathdefault">o</span><span class="mord mathdefault">u</span><span class="mord mathdefault">t</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord">3</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mord">9</span><span class="mord">2</span><span class="mord">.</span><span class="mord">1</span><span class="mord">6</span><span class="mord">8</span><span class="mord">.</span><span class="mord">3</span><span class="mord">3</span><span class="mord">.</span><span class="mord">0</span><span class="mord">/</span><span class="mord">2</span><span class="mord">4</span></span></span></span></p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>R</mi><msub><mi>D</mi><mn>3</mn></msub><mo>=</mo><mo fence="false">(</mo><mfrac><mrow><mn>1</mn><msup><mn>0</mn><mn>7</mn></msup></mrow><mrow><mn>100</mn><mo>×</mo><mn>1</mn><msup><mn>0</mn><mn>3</mn></msup></mrow></mfrac><mo>+</mo><mfrac><mn>100</mn><mn>10</mn></mfrac><mo fence="false">)</mo><mo>×</mo><mn>256</mn><mspace linebreak="newline"></mspace></mrow><annotation encoding="application/x-tex">RD_3=\Big( \frac{10^7}{100\times 10^3}+\frac{100}{10}  \Big)\times 256\\</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.260438em;vertical-align:-0.7693300000000001em;"></span><span class="mord"><span class="delimsizing size2">(</span></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.491108em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">7</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7693300000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:2.00744em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mord">0</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord"><span class="delimsizing size2">)</span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mord">5</span><span class="mord">6</span></span><span class="mspace newline"></span></span></span></span></p><p>Since <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>R</mi><msub><mi>D</mi><mn>3</mn></msub></mrow><annotation encoding="application/x-tex">RD_3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> is faster than <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>R</mi><msub><mi>D</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">RD_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>, Route II is called feasible successor route.</p><p><img src="/2022/04/08/CN-4/image-20211206080942577-1649432396057.png" alt="image-20211206080942577" loading="lazy"></p><p>Q1:</p><p><code>192.168.11.0/24</code> sub-network and <code>192.168.44.0/24</code> sub-network require DR/BDR election.</p><p>Q2:</p><p>Use <mark>Router ID</mark> only to choose DR and BDR.</p><p>The IP of Router1 is <code>192.168.11.1</code></p><p>The IP of Router2 is <code>192.168.11.2</code></p><p>The IP of Router3 is <code>192.168.11.3</code></p><p>Since the IP of Router 3 is the largest, DR is Router 3.</p><p>Since the IP of Router 2 is the second largest, BDR is Router 2.</p><p>Q3:</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>M</mi><mi>e</mi><mi>t</mi><mi>r</mi><mi>i</mi><mi>c</mi><mi>s</mi><mo>=</mo><mfrac><mrow><mn>1</mn><msup><mn>0</mn><mn>8</mn></msup></mrow><mrow><mn>100</mn><mo>×</mo><mn>1</mn><msup><mn>0</mn><mn>6</mn></msup></mrow></mfrac><mo>+</mo><mfrac><mrow><mn>1</mn><msup><mn>0</mn><mn>8</mn></msup></mrow><mrow><mn>64</mn><mo>×</mo><mn>1</mn><msup><mn>0</mn><mn>3</mn></msup></mrow></mfrac><mo>+</mo><mfrac><mrow><mn>1</mn><msup><mn>0</mn><mn>8</mn></msup></mrow><mrow><mn>100</mn><mo>×</mo><mn>1</mn><msup><mn>0</mn><mn>6</mn></msup></mrow></mfrac></mrow><annotation encoding="application/x-tex">Metrics=\frac{10^8}{100\times10^6}+\frac{10^8}{64\times 10^3}+\frac{10^8}{100\times10^6}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mord mathdefault">e</span><span class="mord mathdefault">t</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">i</span><span class="mord mathdefault">c</span><span class="mord mathdefault">s</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.260438em;vertical-align:-0.7693300000000001em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.491108em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">6</span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">8</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7693300000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:2.260438em;vertical-align:-0.7693300000000001em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.491108em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">6</span><span class="mord">4</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">8</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7693300000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:2.260438em;vertical-align:-0.7693300000000001em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.491108em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">6</span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">8</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7693300000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>Note that the unit of bandwidth is <mark><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>b</mi><mi>p</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">bps</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">b</span><span class="mord mathdefault">p</span><span class="mord mathdefault">s</span></span></span></span></mark>, NOT <em>Kbps</em>!!!</p><hr><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>E</mi><mi>N</mi><mi>D</mi></mrow><annotation encoding="application/x-tex">END</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span></span></span></span></span></p>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> computer network </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>computer network 3 - Technology, IP Addressing and IP Routing</title>
      <link href="/2022/04/08/CN-3/"/>
      <url>/2022/04/08/CN-3/</url>
      
        <content type="html"><![CDATA[<h2 id="chapter-3-technology-ip-addressing-and-ip-routing"><a class="markdownIt-Anchor" href="#chapter-3-technology-ip-addressing-and-ip-routing"></a> Chapter 3 Technology, IP Addressing and IP Routing</h2><h3 id="layer-3-technologies"><a class="markdownIt-Anchor" href="#layer-3-technologies"></a> Layer 3 technologies</h3><h4 id="ipv4-addressing"><a class="markdownIt-Anchor" href="#ipv4-addressing"></a> IPv4 addressing</h4><h6 id="what-are-the-differences-between-flat-addressing-and-hierarchical-addressing"><a class="markdownIt-Anchor" href="#what-are-the-differences-between-flat-addressing-and-hierarchical-addressing"></a> What are the differences between flat addressing and hierarchical addressing?</h6><p><mark>Flat addressing</mark> assigns a device the next available address. For example, the <mark>MAC addressing</mark>.</p><p><mark>Hierarchical addressing</mark> contains different levels. For example, the <mark>IP addressing</mark>.</p><h6 id="what-are-the-ranges-of-the-class-a-b-c-addresses-and-their-default-subnet-masks"><a class="markdownIt-Anchor" href="#what-are-the-ranges-of-the-class-a-b-c-addresses-and-their-default-subnet-masks"></a> What are the ranges of the Class A, B, C addresses and their default subnet masks?</h6><p>Class A: <code>1.0.0.0/8 ~ 126.255.255.255/8</code></p><p>Class B: <code>128.0.0.0/16 ~ 191.255.255.255/16</code></p><p>Class C: <code>192.0.0.0/24 ~ 223.255.255.255/24</code></p><h6 id="what-are-the-three-ranges-of-private-ip-addresses"><a class="markdownIt-Anchor" href="#what-are-the-three-ranges-of-private-ip-addresses"></a> What are the three ranges of private IP addresses?</h6><p>There are certain addresses in each class of IPv4 address that are not assigned. These addresses are  called <mark>private addresses</mark>. <code>RFC 1918</code> sets aside 3 blocks of IPv4 addresses for private, internal use.  These 3 blocks consist of one Class A, a range of Class B addresses, and a range of Class C  addresses.</p><p><img src="/2022/04/08/CN-3/image-20211205162300456.png" alt="image-20211205162300456" loading="lazy"></p><h6 id="what-is-the-difference-of-network-address-broadcast-address-and-host-address-what-are-these-types-of-addresses-used-for"><a class="markdownIt-Anchor" href="#what-is-the-difference-of-network-address-broadcast-address-and-host-address-what-are-these-types-of-addresses-used-for"></a> What is the difference of network address, broadcast address and host address? What are these  types of addresses used for?</h6><p>(<strong>IP addresses</strong>: Addresses in computer networks which contains network address and host address.)</p><p><strong>Network address</strong>: Used to identify the network itself where the host portion were all zeros. For instance:</p><img src="/2022/04/08/CN-3/../../../../OneDrive - Macau University of Science and Technology/Junior/First Semester/Computer Network/Mid-term/Mid-term Assignment.assets/image-20211110131414754.png" alt="image-20211110131414754" style="zoom: 67%;" loading="lazy"><p><strong>Host address</strong> is the address in which the host portion cannot be all zeros (0s) or all ones (1s), can be assigned to a device on the network. For instance:</p><img src="/2022/04/08/CN-3/../../../../OneDrive - Macau University of Science and Technology/Junior/First Semester/Computer Network/Mid-term/Mid-term Assignment.assets/image-20211110131554883.png" alt="image-20211110131554883" style="zoom:67%;" loading="lazy"><p><strong>Broadcast address</strong>: Used for broadcasting packets to all the devices on a network. If the host portion were all ones (1s), it would be a broadcast address. For example:</p><img src="file://C:\Users\28580\OneDrive - Macau University of Science and Technology\Junior\First Semester\Computer Network\Mid-term\Mid-term Assignment.assets\image-20211110131623041.png?lastModify=1638693050" alt="image-20211110131623041" style="zoom:67%;" loading="lazy"><h4 id="ipv4-subnetting"><a class="markdownIt-Anchor" href="#ipv4-subnetting"></a> IPv4 subnetting</h4><h6 id="what-is-ipv4-classful-subnetting"><a class="markdownIt-Anchor" href="#what-is-ipv4-classful-subnetting"></a> What is IPv4 classful subnetting?</h6><p>Classful addressing is an IPv4 addressing architecture that divides addresses into five groups.</p><p><img src="/2022/04/08/CN-3/image-20211205174403372.png" alt="image-20211205174403372" loading="lazy"></p><h6 id="what-is-ipv4-classless-subnetting"><a class="markdownIt-Anchor" href="#what-is-ipv4-classless-subnetting"></a> What is IPv4 classless subnetting?</h6><p>Classless addressing is an IPv4 addressing architecture that uses <mark>VLSM</mark> (variable-length subnet masking).</p><p><img src="/2022/04/08/CN-3/image-20211205174543073.png" alt="image-20211205174543073" loading="lazy"></p><h4 id="ipv6-addressing"><a class="markdownIt-Anchor" href="#ipv6-addressing"></a> IPv6 addressing</h4><h6 id="how-to-represent-ipv6-address-in-full-form-and-simplified-form"><a class="markdownIt-Anchor" href="#how-to-represent-ipv6-address-in-full-form-and-simplified-form"></a> How to represent IPv6 address in full form and simplified form?</h6><p>Full form example: <code>FE80:0:0:0:0:2AA:FE9A:4CA2</code></p><p>Simplified form example: <code>FE80::2AA:FE9A:4CA2</code></p><h6 id="what-are-the-three-types-of-ipv6-addresses-what-specific-addresses-are-defined-for-these-types-ipv6-addresses"><a class="markdownIt-Anchor" href="#what-are-the-three-types-of-ipv6-addresses-what-specific-addresses-are-defined-for-these-types-ipv6-addresses"></a> What are the three types of IPv6 addresses? What specific addresses are defined for these types  IPv6 addresses?</h6><p>The three types of IPv6 addresses are <strong>unicast, multicast and anycast</strong> respectively.</p><ul><li><p><strong>Unicast (one to one)</strong>: A packet addressed to a unicast address is delivered to a single interface.</p></li><li><p><strong>Multicast (one to many)</strong>: A multicast address identifies multiple interfaces. A packet addressed to a multicast address is delivered to all interfaces that are identified by the address.</p></li><li><p><strong>Anycast (one to nearest-one / one to one-of-many)</strong>: An anycast address identifies multiple interfaces. A packet addressed to an anycast address is delivered to a single interface, the nearest interface that is identified by the address. The “nearest” interface is defined as being closest in terms of routing distance.</p></li></ul><p>Specific addresses of these three types of IPv6 addresses are:</p><ul><li><p>Prefix of <strong>Multicast</strong> is <code>FF00::/8</code>.</p></li><li><p>Prefix of <strong>Link-local unicast</strong> is <code>FE80::/10</code>.</p></li><li><p>Prefix of <strong>global unicast</strong> is <code>2000::/3</code>.</p></li></ul><h6 id="how-to-form-a-link-local-address-how-to-form-a-global-unicast-address-using-stateless-auto-configuration"><a class="markdownIt-Anchor" href="#how-to-form-a-link-local-address-how-to-form-a-global-unicast-address-using-stateless-auto-configuration"></a> How to form a link-local address? How to form a global unicast address using stateless auto-configuration?</h6><p>link-local scope all-nodes (<code>FF02::1</code>) and all-routers (<code>FF02::2</code>) multicast address.</p><p>Stateless autoconfiguration uses the information in RA(Router Advertisement) messages to configure the IPv6 hosts automatically. Thus, every IPv6 hosts (other than routers) is able to build its own global unicast address.</p><h4 id="ipv6-neighbor-discovery-protocol-ndp"><a class="markdownIt-Anchor" href="#ipv6-neighbor-discovery-protocol-ndp"></a> IPv6 neighbor discovery protocol (NDP)</h4><h6 id="what-4-icmpv6-messages-are-used-in-ndp"><a class="markdownIt-Anchor" href="#what-4-icmpv6-messages-are-used-in-ndp"></a> What 4 ICMPv6 messages are used in NDP?</h6><p>RA(Router Advertisement)</p><p>RS(Router Solicitation)</p><p>NS(Neighbor Solicitation)</p><p>NA(Neighbor Advertisement)</p><p>See more for: <a href="https://howdoesinternetwork.com/2012/ndp-ipv6-neighbor-discovery-protocol">NDP - Neighbor Discovery Protocol (howdoesinternetwork.com)</a></p><h6 id="what-icmpv6-messages-are-used-for-the-functions-provided-by-ndp-for-example-address-resolution-duplicate-address-detection-prefix-and-router-discovery"><a class="markdownIt-Anchor" href="#what-icmpv6-messages-are-used-for-the-functions-provided-by-ndp-for-example-address-resolution-duplicate-address-detection-prefix-and-router-discovery"></a> What ICMPv6 messages are used for the functions provided by NDP? (For example, Address  resolution, Duplicate address detection, Prefix and Router discovery.)</h6><p>DAD (Duplicate address detection) mechanism is realized through <strong>NS and NA</strong> messages.</p><p>What is DAD: when a new unicast address is configured, it will perform DAD testing— sending a NS message which contain the destination address of itself through the network. (for example, if the new address that want to allocate is <code>2000::1</code>, it will send the NS message with source address <code>::</code> and destination address <code>2000::1</code>). Note that the node will ignore the NS message sent by itself. If nobody respond a NA message, we can consider that this unicast address is unique on this link. This method is call DAD.</p><p>See more for: <a href="http://interop.thomasclausen.org/Interop05/Papers/Papers/paper-03.pdf">paper-03.pdf (thomasclausen.org)</a></p><p><a href="https://www.ibm.com/support/pages/what-duplicate-address-detection">What is duplicate address detection? (ibm.com)</a></p><p>Prefix and Router discovery mechanism is realized through <strong>RS and RA</strong> messages.</p><p>Router will send RA messages periodically in order to let the host computers and other equipment know of its existence, and the RA messages contain the prefix network information and more. Sometimes host computer will also actively send RS messages for communication with other nodes, and the router will respond with a RA message.</p><p>See more for: <a href="http://resources.intenseschool.com/ipv6-neighbor-discovery-router-discovery/">IPv6 part 10: Neighbor Discovery – Router Discovery - Intense School</a></p><h4 id="ip-routing"><a class="markdownIt-Anchor" href="#ip-routing"></a> IP Routing</h4><h6 id="what-are-the-differences-between-layer-2-switching-and-layer-3-routing"><a class="markdownIt-Anchor" href="#what-are-the-differences-between-layer-2-switching-and-layer-3-routing"></a> What are the differences between layer 2 switching and layer 3 routing?</h6><p><strong>Layer 2 switching</strong> is based on data-link layer information, e.g. MAC addresses. Switches (typically  stands for layer 2 switches) use layer 2 switching to forward frames.</p><p><strong>Layer 3 routing</strong> is based on network layer addresses information, e.g. IP addresses. Routers or  layer 3 switches use layer 3 switching to route a packet. It has 2 processes which is Path determination and Packet switching.</p><h6 id="what-is-the-difference-between-the-next-hop-and-the-default-gateway"><a class="markdownIt-Anchor" href="#what-is-the-difference-between-the-next-hop-and-the-default-gateway"></a> What is the difference between the next-hop and the default gateway?</h6><p><strong>Default gateway</strong> is used for a host to communicate with hosts on other networks. The default gateway’s IP address must be in the same network subnet as the source host.</p><p><strong>Next hop</strong> is a routing term that refers to the next closest router a packet can go through.</p><p>There are practically incomparable between default gateway and next hop.</p><h6 id="what-are-the-differences-between-the-intra-subnet-and-inter-subnet-communications"><a class="markdownIt-Anchor" href="#what-are-the-differences-between-the-intra-subnet-and-inter-subnet-communications"></a> What are the differences between the intra-subnet and inter-subnet communications?</h6><p>If a host communicates with each other <mark>within</mark> a subnet, called <mark>intra-subnet communication.</mark></p><p>If the IP communication is between hosts in <mark>different</mark> IP subnets, called <mark>inter-subnet  communication</mark>.</p><h6 id="how-to-use-address-resolution-protocol-arp-in-the-intra-subnet-and-inter-subnet-communications"><a class="markdownIt-Anchor" href="#how-to-use-address-resolution-protocol-arp-in-the-intra-subnet-and-inter-subnet-communications"></a> How to use Address Resolution Protocol (ARP) in the intra-subnet and inter-subnet communications?</h6><p>ARP is working in the networking layer, which is responsible for <mark>resolving IP address into MAC address</mark>.</p><p>In the intra-subnet communication, the source device will broadcast an ARP request and wait for an ARP reply from the destination devices. The source devices then record the destination IP and MAC address to an ARP table.</p><p>In the inter-subnet communication, however, the source device will obtain the MAC address of the default gateway router through ARP request.</p><h6 id="for-inter-subnet-communication-how-do-ip-addresses-and-mac-addresses-change-in-the-packet-during-the-data-transmission"><a class="markdownIt-Anchor" href="#for-inter-subnet-communication-how-do-ip-addresses-and-mac-addresses-change-in-the-packet-during-the-data-transmission"></a> For inter-subnet communication, how do IP addresses and MAC addresses change in the packet  during the data transmission?</h6><p>IP addresses are <mark>changeless</mark> during the data transmission.</p><p>MAC address are <mark>changing</mark> based on different routers during the data transmission.=</p><hr><p><img src="/2022/04/08/CN-3/image-20211205153141538.png" alt="image-20211205153141538" loading="lazy"></p><p>Q1:</p><p>Since subnet mast is 29, which means:<code>11111111.11111111.11111111.111111000</code>. Only 3bits are dynamic, which is <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mn>3</mn></msup><mo>=</mo><mn>8</mn></mrow><annotation encoding="application/x-tex">2^3=8</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">8</span></span></span></span>.</p><p>Since the IP address of router is <code>172.16.11.11/29</code>, the sub-network segment is <code>172.16.11.8--172.16.11.15</code>.</p><p><strong>Note that</strong> the host address with all 0s or with all 1s cannot be used for networking, which means <code>172.16.11.8</code> and <code>172.16.11.15</code> cannot be a client IP.</p><p>Therefore, the IP address of PC1 and PC2 are both wrong. What is more, the subnet mask of PC2 is not corresponding with this network domain(it should be 29).</p><p>Q2:</p><p>In the same way of Q1, we know the subnet mask of this network domain is 18 (<code>11111111.11111111.11000000.00000000</code>). <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>6</mn><mi>b</mi><mi>i</mi><mi>t</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">6bits</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord">6</span><span class="mord mathdefault">b</span><span class="mord mathdefault">i</span><span class="mord mathdefault">t</span><span class="mord mathdefault">s</span></span></span></span> are dynamic,which is <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mn>6</mn></msup><mo>=</mo><mn>64</mn></mrow><annotation encoding="application/x-tex">2^6=64</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">6</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">6</span><span class="mord">4</span></span></span></span>. The sub-network segment is <code>172.16.0.0--172.16.63.255</code>.</p><p>Therefor, PC3 is in this segment while PC4 is not in this subnet domain.</p><p>Q3:</p><p>We have already know that <code>172.16.0.0</code> is for network address and <code>172.16.63.255</code> is for broadcast address. Thus, the range of valid host address is <code>172.16.0.1--172.16.63.254</code>.</p><hr><p><img src="/2022/04/08/CN-3/image-20211205153202429.png" alt="image-20211205153202429" loading="lazy"></p><p>VLSM steps:</p><p><strong>Step 1: Divide the subnet</strong></p><p><img src="/2022/04/08/CN-3/image-20211205165352723.png" alt="image-20211205165352723" loading="lazy"></p><p><strong>Note that</strong> routers divide broadcast domain, therefore a point-to-point WAN connection is also a subnet.</p><p><strong>Step 2: Allocate the subnet(usually from largest to smallest)</strong></p><p>Subnet mask=24, <code>1111111.1111111.1111111.0000000</code>, which means all subnets are in the form of <code>192.168.1.H</code> and <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>H</mi></mrow><annotation encoding="application/x-tex">H</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.08125em;">H</span></span></span></span> contains 8 bits. Now lets allocate the <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>H</mi></mrow><annotation encoding="application/x-tex">H</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.08125em;">H</span></span></span></span>:</p><p><code>192.168.1.0XXXXXXX</code> <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>→</mo></mrow><annotation encoding="application/x-tex">\to</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">→</span></span></span></span> 120 hosts</p><p><code>192.168.1.10XXXXXX</code> <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>→</mo></mrow><annotation encoding="application/x-tex">\to</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">→</span></span></span></span> 60 hosts</p><p><code>192.168.1.110XXXXX</code> <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>→</mo></mrow><annotation encoding="application/x-tex">\to</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">→</span></span></span></span> 30 hosts</p><p><code>192.168.1.1110XXXX</code> <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>→</mo></mrow><annotation encoding="application/x-tex">\to</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">→</span></span></span></span> 10 hosts</p><p><code>192.168.1.111100XX</code> <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>→</mo></mrow><annotation encoding="application/x-tex">\to</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">→</span></span></span></span> 2 hosts</p><p><code>192.168.1.111101XX</code> <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>→</mo></mrow><annotation encoding="application/x-tex">\to</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">→</span></span></span></span> WAN link 1</p><p><code>192.168.1.111110XX</code> <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>→</mo></mrow><annotation encoding="application/x-tex">\to</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">→</span></span></span></span> WAN link 2</p><p><code>192.168.1.111111XX</code> <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>→</mo></mrow><annotation encoding="application/x-tex">\to</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">→</span></span></span></span> WAN link 3</p><p><strong>Note that</strong> <mark>at most</mark> a 30-bit mask can be used for point-to-point WAN connections since the first address and the last address are used for network address and broadcast address separately, which occupy 2 addresses, and the source address and destination address also occupy 2 addresses. Therefore, at least 4 addresses (<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">2^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span>) are used and <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>32</mn><mo>−</mo><mn>2</mn><mo>=</mo><mn>30</mn></mrow><annotation encoding="application/x-tex">32-2=30</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">3</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">3</span><span class="mord">0</span></span></span></span>.</p><p><img src="/2022/04/08/CN-3/image-20211205153214433.png" alt="image-20211205153214433" loading="lazy"></p><p>IP routing contains several steps, each step is in the same broadcast domain, but the source IP and destination IP are always changeless. In this example, they are always <code>192.168.1.11</code> and <code>192.168.2.88</code>.</p><p><img src="/2022/04/08/CN-3/image-20211205153227168.png" alt="image-20211205153227168" loading="lazy"></p><p>Q1: <code>FE80::/10</code></p><p>Q2: ???</p><p>Q3: RS-RA</p><p>Q4: DAD</p>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> computer network </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络1 - Network Architecture</title>
      <link href="/2022/04/08/CN-1/"/>
      <url>/2022/04/08/CN-1/</url>
      
        <content type="html"><![CDATA[<h3 id="networking-basics"><a class="markdownIt-Anchor" href="#networking-basics"></a> Networking basics</h3><p>Q: What are the differences between data networks and voice networks?</p><p>Data network -&gt; Digital transmission</p><p>Voice network -&gt; Analog transmission</p><p>Q: How many types of computer networks when it is classified by their scale?</p><p>Personal Area Networks(PAN), Local Area Networks(LAN), Metropolitan Area Networks(MAN), and Wide Area Networks(WAN).</p><h3 id="network-architecture"><a class="markdownIt-Anchor" href="#network-architecture"></a> Network architecture</h3><p>Q: What are the definitions of layers, protocols, and services in network architecture?</p><p>A layer is a level of abstraction which has a well defined function.</p><p>Protocols are executives of the functions.</p><p>Services are functions provided through protocols.</p><p>Q: What are the famous reference models used in computer networks?</p><p><mark>OSI reference model</mark> and <mark>TCP/IP reference model</mark></p><p>Q: What are the differences between OSI and TCP/IP reference model?</p><img src="/2022/04/08/CN-1/../../../../Users/28580/Desktop/Final Review/Final Review.assets/image-20211201142249636.png" alt="image-20211201142249636" style="zoom:50%;" loading="lazy"><h3 id="functions-and-technologies-in-osi-and-tcpip-reference-model"><a class="markdownIt-Anchor" href="#functions-and-technologies-in-osi-and-tcpip-reference-model"></a> Functions and technologies in OSI and TCP/IP reference model</h3><p>Q: What are the names of seven layers in OSI and TCP/IP reference model?</p><p>Physical layer, Data Link layer, Network layer, Transport layer, Session layer, Presentation layer, Application layer.</p><p>Q: What functions are defined in each layer?</p><img src="/2022/04/08/CN-1/image-20211201155433683.png" alt="image-20211201155433683" style="zoom:50%;" loading="lazy"><p>Q: What protocols are defined in each layer?</p><p>Some common protocols specified by the TCP/IP reference model layers.</p><ol><li>The <strong>application layer</strong> protocols include:<ul><li>Domain Name System (DNS)</li><li>Hypertext Transfer Protocol (HTTP)</li><li>File Transfer Protocol (FTP)</li><li>Simple Mail Transfer Protocol (SMTP)</li><li>Trivial File Transfer Protocol (TFTP)</li></ul></li><li>The <strong>transport layer</strong> protocols include:<ul><li>Transport Control Protocol (TCP)</li><li>User Datagram Protocol (UDP)</li></ul></li><li>The <strong>Internet layer</strong> protocols include:<ul><li>Internet Protocol (IP)</li></ul></li><li>The <strong>network access</strong> layer refers to any particular technology used on a specific network (Ethernet).</li></ol><p>Q: What addresses are defined in each layer?</p><p>MAC address — Layer 2</p><p>IP address — Layer 3</p><p>Domain name — Layer 7</p><p>Subnet mask — Layer 3</p><p>Q: What network devices are operating at each layer?</p><img src="/2022/04/08/CN-1/image-20211201155917959.png" alt="image-20211201155917959" style="zoom:50%;" loading="lazy"><p>Q: The technologies of LANs and WANs are usually designed in which layers?</p><p>Both layer1 and layer 2.</p><h3 id="data-encapsulation"><a class="markdownIt-Anchor" href="#data-encapsulation"></a> Data encapsulation</h3><p>Q: What is the process of data encapsulation?</p><p>From Top layer to the bottom layer.</p><img src="/2022/04/08/CN-1/image-20211201165246959.png" alt="image-20211201165246959" style="zoom:67%;" loading="lazy"><p>Q: What PDUs are used in each layers?</p><ol><li><strong>Data</strong> - Build the data at layer 7, 6 and 5.</li><li><strong>Segments</strong> - Package the data for end-to-end transport at layer 4.</li><li><strong>Packets</strong> - Append the network address (e.g. IP Address) to the network header at layer 3.</li><li><strong>Frames</strong> - Append the local address (e.g. MAC Address) to the data link header at layer 2.</li><li><strong>Bits</strong> - Convert to bits for transmission on a physical link at layer 1.</li></ol><p>Q: What are the header format of common used PDUs in each layer?</p><p>It usually contains the <strong>address information</strong> and control  information likes sequence numbers, and so on.</p><h3 id="network-topology-and-terminologies"><a class="markdownIt-Anchor" href="#network-topology-and-terminologies"></a> Network topology and terminologies</h3><p>Q: What are the differences of physical and logical network topologies? List some common used physical and logical network topologies.</p><p>Physical topology, which is the actual layout of the wire (media).</p><p>Logical topology, which defines how the media is accessed by the hosts.</p><p>The physical topologies that are commonly used are the <mark>P2P Topology, Bus Topology, Ring Topology, Star Topology, Extended Star Topology, Hierarchical Topology, Tree Topology, Hybrid Topology and Mesh Topology</mark>.</p><p>The ethernet protocol is the most common protocol used for logical topology. The physical topologies that are commonly used are the <mark>Ring Topology and Bus Topology</mark>.</p><p>See more for:</p><ul><li><a href="https://www.educba.com/physical-topology/">Physical Topology | Learn Top 7 Useful Types Of Physical Topology (educba.com)</a></li><li><a href="https://www.educba.com/logical-topology/">Logical Topology | Know Why Do We Use Logical Topology in Networking? (educba.com)</a></li></ul><p>Q: What is the unit of digital bandwidth and analog bandwidth?</p><p>In analog systems, the basic unit of analog bandwidth is <mark>hertz (Hz)</mark>, or cycles per second.</p><p>In digital systems, the basic unit of bandwidth is <mark>bits per second (bps)</mark>.</p><p>Q: What is the definition of bandwidth and throughput, and baud? What is the relationship among bandwidth, throughput, and baud?</p><p>Throughput ≤ Bandwidth</p><p>Throughput is the real life bandwidth.</p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>B</mi><mi>a</mi><mi>n</mi><mi>d</mi><mi>w</mi><mi>i</mi><mi>d</mi><mi>t</mi><mi>h</mi><mo>=</mo><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mi>L</mi><mo>×</mo><mi>b</mi><mi>u</mi><mi>a</mi><mi>d</mi></mrow><annotation encoding="application/x-tex">Bandwidth= log_2L\times buad</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mord mathdefault">a</span><span class="mord mathdefault">n</span><span class="mord mathdefault">d</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mord mathdefault">i</span><span class="mord mathdefault">d</span><span class="mord mathdefault">t</span><span class="mord mathdefault">h</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault">L</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">b</span><span class="mord mathdefault">u</span><span class="mord mathdefault">a</span><span class="mord mathdefault">d</span></span></span></span> where L is the base info.</p><p>See more for: <a href="https://www.technologyuk.net/telecommunications/telecom-principles/bits-bauds-and-bandwidth.shtml">Bits, Bauds and Bandwidth (technologyuk.net)</a></p><p>Q:  What is the difference between the transmission delay and propagation delay?</p><p><strong>Propagation delay</strong> is a simple measurement of how long it takes for a signal to travel along the cable being tested.(<strong>single</strong>)</p><p><strong>Transmission delay</strong> is the time needed to push all the packet bits on the transmission link.(<strong>total</strong>)</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mi>r</mi><mi>o</mi><mi>p</mi><mi>a</mi><mi>g</mi><mi>a</mi><mi>t</mi><mi>i</mi><mi>o</mi><mi>n</mi><mtext> </mtext><mi>d</mi><mi>e</mi><mi>l</mi><mi>a</mi><mi>y</mi><mo>=</mo><mfrac><mrow><mi>l</mi><mi>e</mi><mi>n</mi><mi>g</mi><mi>t</mi><mi>h</mi><mtext> </mtext><mi>o</mi><mi>f</mi><mtext> </mtext><mi>c</mi><mi>a</mi><mi>b</mi><mi>l</mi><mi>e</mi></mrow><mrow><mi>s</mi><mi>p</mi><mi>e</mi><mi>e</mi><mi>d</mi><mtext> </mtext><mi>o</mi><mi>f</mi><mtext> </mtext><mi>s</mi><mi>i</mi><mi>g</mi><mi>n</mi><mi>a</mi><mi>l</mi><mo stretchy="false">(</mo><mn>3</mn><mo>×</mo><mn>1</mn><msup><mn>0</mn><mn>8</mn></msup><mo stretchy="false">)</mo></mrow></mfrac><mspace linebreak="newline"></mspace><mi>T</mi><mi>r</mi><mi>a</mi><mi>n</mi><mi>s</mi><mi>m</mi><mi>i</mi><mi>s</mi><mi>s</mi><mi>i</mi><mi>o</mi><mi>n</mi><mtext> </mtext><mi>d</mi><mi>e</mi><mi>l</mi><mi>a</mi><mi>y</mi><mo>=</mo><mfrac><mrow><mi>s</mi><mi>i</mi><mi>z</mi><mi>e</mi><mtext> </mtext><mi>o</mi><mi>f</mi><mtext> </mtext><mi>s</mi><mi>i</mi><mi>g</mi><mi>n</mi><mi>a</mi><mi>l</mi></mrow><mrow><mi>s</mi><mi>p</mi><mi>e</mi><mi>e</mi><mi>d</mi><mtext> </mtext><mi>o</mi><mi>f</mi><mtext> </mtext><mi>t</mi><mi>r</mi><mi>a</mi><mi>n</mi><mi>s</mi><mi>m</mi><mi>i</mi><mi>s</mi><mi>s</mi><mi>i</mi><mi>o</mi><mi>n</mi></mrow></mfrac><mspace linebreak="newline"></mspace></mrow><annotation encoding="application/x-tex">Propagation\ delay = \frac{length\ of \ cable}{speed\ of \ signal(3\times 10^8)}\\Transmission\ delay= \frac{size\ of \ signal}{speed\ of\ transmission}\\</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">o</span><span class="mord mathdefault">p</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">a</span><span class="mord mathdefault">t</span><span class="mord mathdefault">i</span><span class="mord mathdefault">o</span><span class="mord mathdefault">n</span><span class="mspace"> </span><span class="mord mathdefault">d</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.3074399999999997em;vertical-align:-0.936em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3714399999999998em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">s</span><span class="mord mathdefault">p</span><span class="mord mathdefault">e</span><span class="mord mathdefault">e</span><span class="mord mathdefault">d</span><span class="mspace"> </span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mspace"> </span><span class="mord mathdefault">s</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">n</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mopen">(</span><span class="mord">3</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">8</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">e</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">t</span><span class="mord mathdefault">h</span><span class="mspace"> </span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mspace"> </span><span class="mord mathdefault">c</span><span class="mord mathdefault">a</span><span class="mord mathdefault">b</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">e</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">a</span><span class="mord mathdefault">n</span><span class="mord mathdefault">s</span><span class="mord mathdefault">m</span><span class="mord mathdefault">i</span><span class="mord mathdefault">s</span><span class="mord mathdefault">s</span><span class="mord mathdefault">i</span><span class="mord mathdefault">o</span><span class="mord mathdefault">n</span><span class="mspace"> </span><span class="mord mathdefault">d</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.25188em;vertical-align:-0.8804400000000001em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3714399999999998em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">s</span><span class="mord mathdefault">p</span><span class="mord mathdefault">e</span><span class="mord mathdefault">e</span><span class="mord mathdefault">d</span><span class="mspace"> </span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mspace"> </span><span class="mord mathdefault">t</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">a</span><span class="mord mathdefault">n</span><span class="mord mathdefault">s</span><span class="mord mathdefault">m</span><span class="mord mathdefault">i</span><span class="mord mathdefault">s</span><span class="mord mathdefault">s</span><span class="mord mathdefault">i</span><span class="mord mathdefault">o</span><span class="mord mathdefault">n</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">s</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mord mathdefault">e</span><span class="mspace"> </span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mspace"> </span><span class="mord mathdefault">s</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">n</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8804400000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span><span class="mspace newline"></span></span></span></span></p><p>See more for: <a href="https://www.baeldung.com/cs/propagation-vs-transmission-delay">Propagation Delay vs Transmission Delay | Baeldung on Computer Science</a></p>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> computer network </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络2 - Layer 1,2 Technology, Ethernet</title>
      <link href="/2022/04/08/CN-2/"/>
      <url>/2022/04/08/CN-2/</url>
      
        <content type="html"><![CDATA[<h2 id="layer-1-technologies"><a class="markdownIt-Anchor" href="#layer-1-technologies"></a> Layer 1 Technologies</h2><h3 id="network-media"><a class="markdownIt-Anchor" href="#network-media"></a> Network media</h3><p>Q:  What carrier signals are used in the network media of copper, optical fiber and wireless?</p><p>​Electrical signals are transferring in copper;</p><p>​Light signals are transferring in optical fiber;</p><p>​Electromagnetic waves are transferring in the air to communicate wireless network media(WIFI).</p><p>Q: What is the purpose of encoding and modulation?</p><p>​<strong>Encoding</strong> is the process by which the data is converted into digital format for efficient transmission or storage.</p><p>​<strong>Modulation</strong> is the process of converting information (signals or data) to an electronic or optical carrier, so that it can be transmitted to comparatively large distance without getting affected by noise or unwanted signals.</p><p>​Encoding is about converting digital or analog data to digital signal(<strong>D2A</strong>), whereas modulation is about converting digital or analog data to an analog signal(<strong>A2D</strong>).</p><h3 id="network-cabling"><a class="markdownIt-Anchor" href="#network-cabling"></a> Network cabling</h3><p>Q: What are the differences between LAN cabling and WAN cabling?</p><p>​Nothing different?</p><p>Q:  List some common used types of cables in LAN and WAN cabling.</p><p>​LAN cabling: coaxial cable, UTP cable, single-mode and multimode fiber, etc.</p><p>​WAN cabling: RS-232 cable, V.35 cable, etc.</p><p>Q: In LAN cabling, how to use the UTP cables of straight-through, crossover, rollover to connect devices?</p><p>​See <a href="https://www.computercablestore.com/straight-through-crossover-and-rollover-wiring">Straight-through, Crossover &amp; Rollover Cable Pinouts Explained | Computer Cable Store</a>.</p><p>Q: Which wires of a UTP cable are used to transmit and receive data in Ethernet?</p><p>​Category 6 cable(LAN Cable).</p><p>Q: In WAN cabling, what is the difference between DTE and DCE cabling?</p><p>​DTE: Data Terminal Equipment, e.g. your own PC</p><p>​DCE: Data Circuit Terminating Equipment, e.g. modem.</p><hr><h2 id="layer-2-technologies"><a class="markdownIt-Anchor" href="#layer-2-technologies"></a> Layer 2 Technologies</h2><h3 id="layer-2-functions"><a class="markdownIt-Anchor" href="#layer-2-functions"></a> Layer 2 functions</h3><p>Q:  What is the media access method of CSMA/CD?</p><p>​CSMA is a simple system that allows only one host to transmit at a time. Hosts on the network can access the  media at any time. Before sending data, CSMA hosts isten to the network to determine if it is already in use.<br>​➢ If in use, then the hosts wait.<br>​➢ If not in use, they transmit.</p><p>Q: How does a host use backoff algorithm for transmission attempt when collision occurred in  Ethernet network?</p><blockquote><p>Exponential backoff is an algorithm that uses feedback to multiplicatively decrease the rate of some process, in order to gradually find an acceptable rate.(Wikipedia)</p></blockquote><p>​After a conflict occurred in a computer network, nodes on the network wait for a certain period of time before sending. The waiting time increases exponentially to avoid frequent triggering conflicts.</p><p>​After <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span> conflicts occur, the waiting time is randomly selected between <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0</mn></mrow><annotation encoding="application/x-tex">0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span> ~ <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mi>n</mi></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">2^n-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.747722em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> slot times. Note that <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span> cannot be unlimited growing since the waiting time will not increasing without pause. Usually, we set <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>≤</mo><mn>10</mn></mrow><annotation encoding="application/x-tex">n\leq 10</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">0</span></span></span></span> so that the longest waiting time will not exceed over 1023 slot times.</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>R</mi><mi>a</mi><mi>n</mi><mi>d</mi><mi>o</mi><mi>m</mi><mtext> </mtext><mi>w</mi><mi>a</mi><mi>i</mi><mi>t</mi><mi>i</mi><mi>n</mi><mi>g</mi><mtext> </mtext><mi>p</mi><mi>e</mi><mi>r</mi><mi>i</mi><mi>o</mi><mi>d</mi><mo>=</mo><mo stretchy="false">[</mo><mn>0</mn><mo separator="true">,</mo><mo stretchy="false">(</mo><msup><mn>2</mn><mi>n</mi></msup><mi mathvariant="normal">–</mi><mn>1</mn><mo stretchy="false">)</mo><mo>×</mo><mi>s</mi><mi>l</mi><mi>o</mi><mi>t</mi><mtext> </mtext><mi>t</mi><mi>i</mi><mi>m</mi><mi>e</mi><mo stretchy="false">]</mo><mspace linebreak="newline"></mspace></mrow><annotation encoding="application/x-tex">Random\ waiting\ period = [ 0, (2^n – 1) \times slot\ time ]\\</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mord mathdefault">a</span><span class="mord mathdefault">n</span><span class="mord mathdefault">d</span><span class="mord mathdefault">o</span><span class="mord mathdefault">m</span><span class="mspace"> </span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mord mathdefault">a</span><span class="mord mathdefault">i</span><span class="mord mathdefault">t</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mspace"> </span><span class="mord mathdefault">p</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">i</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mopen">(</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7143919999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span><span class="mord" style="margin-right:0.02778em;">–</span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault">t</span><span class="mspace"> </span><span class="mord mathdefault">t</span><span class="mord mathdefault">i</span><span class="mord mathdefault">m</span><span class="mord mathdefault">e</span><span class="mclose">]</span></span><span class="mspace newline"></span></span></span></span></p><h3 id="ethernet-switching"><a class="markdownIt-Anchor" href="#ethernet-switching"></a> Ethernet switching</h3><p>Q: What is bridging?</p><p>​Bridging refers to a technology in which a device known as a bridge connects two or more LAN segments.</p><p>Q: What addresses in the received frame does a switch use to build the switching table and make  forwarding decision?</p><p>​The switching table is built by using  source address, e.g. <strong>source MAC</strong>.</p><p>​The forward decision is made by using destination address, e.g.  <strong>destination MAC</strong>.</p><p>Q: What are the differences between the switching modes of store-and-forward, fast-forward, and  fragment-free?</p><p>​The entire frame is received before any forwarding takes place for <strong>Store-and-forward</strong>.</p><p>​The switch reads the destination address before receiving the entire frame which then forwarded before the entire frame arrives for fast-forward, and fragment-free. (Both belongs to <strong>Cut-through</strong>)</p><p>Q: What is the definition of broadcast domain and collision domain?</p><p>​A <strong>broadcast domain</strong> includes all of the collision domains that process the same broadcast frame. This includes all the hosts that are part of the network segment bounded by a layer 3 device.</p><p>​A <strong>collision domain</strong> is a connected physical network segment where collisions can occur. Using the layer 1 device likes repeater or hub extends the collision domain.</p><p>Q: How can the layer 1, 2 and 3 network devices be used to segment a network into different domains?</p><p>​Repeater and Hub (layer 1 devices)cannot segment a network into different domain.</p><p>​Bridge and Switch (layer 2 devices) can segment a network into different collision domain.</p><p>​Router (layer 3 devices) can segment a network into different broadcast domain.</p><img src="/2022/04/08/CN-2/image-20211204114107336.png" alt="image-20211204114107336" style="zoom: 50%;" loading="lazy"><p>Q1: All the red cables are WAN cables, and all the black cables are LAN cables.</p><p>Q2: Category 6 Cable</p><p>Q3:</p><p><img src="/2022/04/08/CN-2/image-20211210170210391.png" alt="image-20211210170210391" loading="lazy"></p><img src="/2022/04/08/CN-2/image-20211204114128703.png" alt="image-20211204114128703" style="zoom:50%;" loading="lazy"><p>Q1: Not success, because PC1 and PC3 are in the same collision domain.</p><p>Q2: PC1 and PC3, since the back-off algorithm.</p><p>Q3: PC2 and PC3, since they are in the same collision domain.</p><p>Q4: They will not produce collision, because the four PCs are in the different collision domain.</p><p>We have to simulate the process step by step:</p><p>Firstly, the messages are sent by PC1, and received by Switch1. Switch1 needs to 2 steps, first check the routing table to see whether there is a record about PC3. If there is no record, then Switch1 will broadcast the message through P2 and P3. Therefore, that is the reason why PC2 can receive the message. But PC2 will drop the message since the destination of the message is PC3.</p><p>Then, Switch2 received that message. What Switch2 need to do is also that 2 steps, first check the routing table. Switch2 found the PC3 in the routing table, so it just need to send the message to PC3 directly and PC4 will never receive the message. The second step is to write the PC1 into the routing table of Switch 2, as shown below.</p><img src="/2022/04/08/CN-2/image-20211210171011761.png" alt="image-20211210171011761" style="zoom:50%;" loading="lazy">]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> computer network </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Internet Protocol Security</title>
      <link href="/2022/04/08/IPsec/"/>
      <url>/2022/04/08/IPsec/</url>
      
        <content type="html"><![CDATA[<h1 id="secure-tunnel"><a class="markdownIt-Anchor" href="#secure-tunnel"></a> Secure Tunnel</h1><h2 id="tunneling"><a class="markdownIt-Anchor" href="#tunneling"></a> Tunneling</h2><p>隧道是一种用于将数据安全地从一个网络传输到另一个网络的协议。</p><p>Tunneling is the technology to establish a logical connection between two end-points.</p><p>当数据通过隧道传输时，它在穿过隧道时被分成称为<em>数据包的</em>更小部分。数据包通过隧道加密，并发生另一个称为<em>封装的</em>过程。对于传输，私有网络数据和协议细节被封装在公共网络传输单元中。这些单位具有公共数据的外观，允许它们通过互联网发送。封装使数据包能够到达其预定目的地。解封装和解密发生在最终目的地。</p><p>At the sending site, the original packet is encapsulated with a new outer header, then the tunneled packet is routed to the destination according to the information in the outer header, and finally the outer header is de-encapsulated at the receiving side. The original packet can be continued being routed according to the information in the inner header.</p><p><img src="/2022/04/08/IPsec/image-20220408173945688.png" alt="image-20220408173945688" loading="lazy"></p><h2 id="tunneling-protocols"><a class="markdownIt-Anchor" href="#tunneling-protocols"></a> Tunneling protocols</h2><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>T</mi><mi>u</mi><mi>n</mi><mi>n</mi><mi>e</mi><mi>l</mi><mtext> </mtext><mi>P</mi><mi>r</mi><mi>o</mi><mi>t</mi><mi>o</mi><mi>c</mi><mi>o</mi><mi>l</mi><mi>s</mi><mrow><mo fence="true">{</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>u</mi><mi>n</mi><mi>s</mi><mi>e</mi><mi>c</mi><mi>u</mi><mi>r</mi><mi>e</mi><mrow><mo fence="true">{</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>L</mi><mi>a</mi><mi>y</mi><mi>e</mi><mi>r</mi><mtext> </mtext><mn>2</mn><mtext> </mtext><mi>T</mi><mi>u</mi><mi>n</mi><mi>n</mi><mi>e</mi><mi>l</mi><mi>i</mi><mi>n</mi><mi>g</mi><mtext> </mtext><mi>P</mi><mi>r</mi><mi>o</mi><mi>t</mi><mi>o</mi><mi>c</mi><mi>o</mi><mi>l</mi><mtext> </mtext><mo stretchy="false">(</mo><mi>L</mi><mn>2</mn><mi>T</mi><mi>P</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>G</mi><mi>e</mi><mi>n</mi><mi>e</mi><mi>r</mi><mi>i</mi><mi>c</mi><mtext> </mtext><mi>R</mi><mi>o</mi><mi>u</mi><mi>t</mi><mi>i</mi><mi>n</mi><mi>g</mi><mtext> </mtext><mi>E</mi><mi>n</mi><mi>c</mi><mi>a</mi><mi>p</mi><mi>s</mi><mi>u</mi><mi>l</mi><mi>a</mi><mi>t</mi><mi>i</mi><mi>o</mi><mi>n</mi><mtext> </mtext><mo stretchy="false">(</mo><mi>G</mi><mi>R</mi><mi>E</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr></mtable></mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>s</mi><mi>e</mi><mi>c</mi><mi>u</mi><mi>r</mi><mi>e</mi><mo>→</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>I</mi><mi>n</mi><mi>t</mi><mi>e</mi><mi>r</mi><mi>n</mi><mi>e</mi><mi>t</mi><mtext> </mtext><mi>P</mi><mi>r</mi><mi>o</mi><mi>t</mi><mi>o</mi><mi>c</mi><mi>o</mi><mi>l</mi><mtext> </mtext><mi>S</mi><mi>e</mi><mi>c</mi><mi>u</mi><mi>r</mi><mi>i</mi><mi>t</mi><mi>y</mi><mtext> </mtext><mo stretchy="false">(</mo><mi>I</mi><mi>P</mi><mi>s</mi><mi>e</mi><mi>c</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr></mtable></mrow></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding="application/x-tex">Tunnel\ Protocols \left\{\begin{matrix}unsecure\left\{\begin{matrix}Layer\ 2\ Tunneling\ Protocol\ (L2TP)\\Generic\ Routing\ Encapsulation\ (GRE)\\\end{matrix}\right.\\secure\to\begin{matrix}Internet\ Protocol\ Security\ (IPsec)\end{matrix}\end{matrix}\right.</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.61003em;vertical-align:-1.555015em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mord mathdefault">u</span><span class="mord mathdefault">n</span><span class="mord mathdefault">n</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mspace"> </span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">o</span><span class="mord mathdefault">t</span><span class="mord mathdefault">o</span><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">s</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.49999em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎩</span></span></span><span style="top:-3.15001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎨</span></span></span><span style="top:-4.30002em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎧</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.055015em;"><span style="top:-4.055015em;"><span class="pstrut" style="height:3.45em;"></span><span class="mord"><span class="mord mathdefault">u</span><span class="mord mathdefault">n</span><span class="mord mathdefault">s</span><span class="mord mathdefault">e</span><span class="mord mathdefault">c</span><span class="mord mathdefault">u</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">e</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">{</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">L</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mspace"> </span><span class="mord">2</span><span class="mspace"> </span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mord mathdefault">u</span><span class="mord mathdefault">n</span><span class="mord mathdefault">n</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mspace"> </span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">o</span><span class="mord mathdefault">t</span><span class="mord mathdefault">o</span><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mspace"> </span><span class="mopen">(</span><span class="mord mathdefault">L</span><span class="mord">2</span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mclose">)</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">G</span><span class="mord mathdefault">e</span><span class="mord mathdefault">n</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">i</span><span class="mord mathdefault">c</span><span class="mspace"> </span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mord mathdefault">o</span><span class="mord mathdefault">u</span><span class="mord mathdefault">t</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mspace"> </span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mord mathdefault">n</span><span class="mord mathdefault">c</span><span class="mord mathdefault">a</span><span class="mord mathdefault">p</span><span class="mord mathdefault">s</span><span class="mord mathdefault">u</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">a</span><span class="mord mathdefault">t</span><span class="mord mathdefault">i</span><span class="mord mathdefault">o</span><span class="mord mathdefault">n</span><span class="mspace"> </span><span class="mopen">(</span><span class="mord mathdefault">G</span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-2.254985em;"><span class="pstrut" style="height:3.45em;"></span><span class="mord"><span class="mord mathdefault">s</span><span class="mord mathdefault">e</span><span class="mord mathdefault">c</span><span class="mord mathdefault">u</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">e</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8500000000000001em;"><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="mord mathdefault">n</span><span class="mord mathdefault">t</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">n</span><span class="mord mathdefault">e</span><span class="mord mathdefault">t</span><span class="mspace"> </span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">o</span><span class="mord mathdefault">t</span><span class="mord mathdefault">o</span><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mspace"> </span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault">e</span><span class="mord mathdefault">c</span><span class="mord mathdefault">u</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">i</span><span class="mord mathdefault">t</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace"> </span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mord mathdefault">s</span><span class="mord mathdefault">e</span><span class="mord mathdefault">c</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35000000000000003em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.555015em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>Internet Protocol Security (IPsec) is a framework that can protect IP traffic on the network layer with the following features:</p><ul><li>Confidentiality 机密性</li><li>Integrity 数据完整性</li><li>Authentication 源鉴别</li><li>Anti-reply 重放攻击防护</li></ul><h2 id="ipsec-sub-protocols"><a class="markdownIt-Anchor" href="#ipsec-sub-protocols"></a> IPsec sub-protocols</h2><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>I</mi><mi>P</mi><mi>s</mi><mi>e</mi><mi>c</mi><mrow><mo fence="true">{</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>A</mi><mi>u</mi><mi>t</mi><mi>h</mi><mi>e</mi><mi>n</mi><mi>t</mi><mi>i</mi><mi>c</mi><mi>a</mi><mi>t</mi><mi>i</mi><mi>o</mi><mi>n</mi><mtext> </mtext><mi>H</mi><mi>e</mi><mi>a</mi><mi>d</mi><mi>e</mi><mi>r</mi><mtext> </mtext><mo stretchy="false">(</mo><mi>A</mi><mi>H</mi><mo stretchy="false">)</mo><mrow><mo fence="true">{</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>M</mi><mi>D</mi><mn>5</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>S</mi><mi>H</mi><mi>A</mi></mrow></mstyle></mtd></mtr></mtable></mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>E</mi><mi>n</mi><mi>c</mi><mi>a</mi><mi>p</mi><mi>s</mi><mi>u</mi><mi>l</mi><mi>a</mi><mi>t</mi><mi>e</mi><mi>d</mi><mtext> </mtext><mi>S</mi><mi>e</mi><mi>c</mi><mi>u</mi><mi>r</mi><mi>i</mi><mi>t</mi><mi>y</mi><mtext> </mtext><mi>P</mi><mi>a</mi><mi>y</mi><mi>l</mi><mi>o</mi><mi>a</mi><mi>d</mi><mtext> </mtext><mo stretchy="false">(</mo><mi>E</mi><mi>S</mi><mi>P</mi><mo stretchy="false">)</mo><mrow><mo fence="true">{</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>D</mi><mi>E</mi><mi>S</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>3</mn><mi>D</mi><mi>E</mi><mi>S</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>A</mi><mi>E</mi><mi>S</mi></mrow></mstyle></mtd></mtr></mtable></mrow></mrow></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding="application/x-tex">IPsec\left\{\begin{matrix}Authentication\ Header\ (AH)\left\{\begin{matrix}MD5\\SHA\\\end{matrix}\right.\\Encapsulated\ Security\ Payload\ (ESP)\left\{\begin{matrix}DES\\3DES\\AES\\\end{matrix}\right.\\\end{matrix}\right.</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:6.00007em;vertical-align:-2.750035em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mord mathdefault">s</span><span class="mord mathdefault">e</span><span class="mord mathdefault">c</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.2500199999999997em;"><span style="top:-1.2999899999999998em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎩</span></span></span><span style="top:-1.2999899999999998em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-1.5999899999999998em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-1.8999899999999998em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-2.1999899999999997em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-3.15001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎨</span></span></span><span style="top:-4.30001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-4.60001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-4.90001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-5.20001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-5.500019999999999em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎧</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.75002em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.250035em;"><span style="top:-5.850055em;"><span class="pstrut" style="height:4.05002em;"></span><span class="mord"><span class="mord mathdefault">A</span><span class="mord mathdefault">u</span><span class="mord mathdefault">t</span><span class="mord mathdefault">h</span><span class="mord mathdefault">e</span><span class="mord mathdefault">n</span><span class="mord mathdefault">t</span><span class="mord mathdefault">i</span><span class="mord mathdefault">c</span><span class="mord mathdefault">a</span><span class="mord mathdefault">t</span><span class="mord mathdefault">i</span><span class="mord mathdefault">o</span><span class="mord mathdefault">n</span><span class="mspace"> </span><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="mord mathdefault">e</span><span class="mord mathdefault">a</span><span class="mord mathdefault">d</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mspace"> </span><span class="mopen">(</span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">{</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mord">5</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="mord mathdefault">A</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-2.850005em;"><span class="pstrut" style="height:4.05002em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mord mathdefault">n</span><span class="mord mathdefault">c</span><span class="mord mathdefault">a</span><span class="mord mathdefault">p</span><span class="mord mathdefault">s</span><span class="mord mathdefault">u</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">a</span><span class="mord mathdefault">t</span><span class="mord mathdefault">e</span><span class="mord mathdefault">d</span><span class="mspace"> </span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault">e</span><span class="mord mathdefault">c</span><span class="mord mathdefault">u</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">i</span><span class="mord mathdefault">t</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace"> </span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault">a</span><span class="mord mathdefault">d</span><span class="mspace"> </span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.49999em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎩</span></span></span><span style="top:-3.15001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎨</span></span></span><span style="top:-4.30002em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎧</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">3</span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.750035em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>AH协议提供源鉴别和数据完整性服务，但不提供机密性服务。</p><p>ESP协议提供源鉴别，数据完整性和机密性服务； 因此ESP协议应用更为广泛。</p><p>AH protocol produce Integrity and Authentication services, but do not produce Confidentiality.</p><p>ESP protocol produce Confidentiality, Authentication and Integrity; therefore ESP protocol has a broader application.</p><h2 id="ipsec-datagram"><a class="markdownIt-Anchor" href="#ipsec-datagram"></a> IPsec Datagram</h2><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>I</mi><mi>P</mi><mi>s</mi><mi>e</mi><mi>c</mi><mrow><mo fence="true">{</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>t</mi><mi>u</mi><mi>n</mi><mi>n</mi><mi>e</mi><mi>l</mi><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mi>e</mi><mo>→</mo><mn>2</mn><mtext> </mtext><mi>r</mi><mi>o</mi><mi>u</mi><mi>t</mi><mi>e</mi><mi>r</mi><mi>s</mi><mo separator="true">,</mo><mi>r</mi><mi>o</mi><mi>u</mi><mi>t</mi><mi>e</mi><mi>r</mi><mtext> </mtext><mi>a</mi><mi>n</mi><mi>d</mi><mtext> </mtext><mi>h</mi><mi>o</mi><mi>s</mi><mi>t</mi><mo separator="true">,</mo><mn>2</mn><mtext> </mtext><mi>h</mi><mi>o</mi><mi>s</mi><mi>t</mi><mi>s</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>t</mi><mi>r</mi><mi>a</mi><mi>n</mi><mi>s</mi><mi>p</mi><mi>o</mi><mi>r</mi><mi>t</mi><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mi>e</mi><mo>→</mo><mn>2</mn><mtext> </mtext><mi>h</mi><mi>o</mi><mi>s</mi><mi>t</mi><mi>s</mi><mtext> </mtext><mi>o</mi><mi>n</mi><mi>l</mi><mi>y</mi></mrow></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding="application/x-tex">IPsec\left\{\begin{matrix}tunnel\ mode\to2\ routers, router\ and\ host, 2\ hosts\\transport\ mode\to2\ hosts\ only\\\end{matrix}\right.</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.40003em;vertical-align:-0.95003em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mord mathdefault">s</span><span class="mord mathdefault">e</span><span class="mord mathdefault">c</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">{</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">t</span><span class="mord mathdefault">u</span><span class="mord mathdefault">n</span><span class="mord mathdefault">n</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mspace"> </span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mord mathdefault">e</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">2</span><span class="mspace"> </span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">o</span><span class="mord mathdefault">u</span><span class="mord mathdefault">t</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">s</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">o</span><span class="mord mathdefault">u</span><span class="mord mathdefault">t</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mspace"> </span><span class="mord mathdefault">a</span><span class="mord mathdefault">n</span><span class="mord mathdefault">d</span><span class="mspace"> </span><span class="mord mathdefault">h</span><span class="mord mathdefault">o</span><span class="mord mathdefault">s</span><span class="mord mathdefault">t</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">2</span><span class="mspace"> </span><span class="mord mathdefault">h</span><span class="mord mathdefault">o</span><span class="mord mathdefault">s</span><span class="mord mathdefault">t</span><span class="mord mathdefault">s</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">t</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">a</span><span class="mord mathdefault">n</span><span class="mord mathdefault">s</span><span class="mord mathdefault">p</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">t</span><span class="mspace"> </span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mord mathdefault">e</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">2</span><span class="mspace"> </span><span class="mord mathdefault">h</span><span class="mord mathdefault">o</span><span class="mord mathdefault">s</span><span class="mord mathdefault">t</span><span class="mord mathdefault">s</span><span class="mspace"> </span><span class="mord mathdefault">o</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>IPsec supports two modes of operation:</p><p>The <strong>Transport Mode</strong> is most commonly used to protect the communication between two hosts.</p><p>The <strong>Tunnel Mode</strong> is most commonly used to protect the communication between two routers by building a secure tunnel, commonly known as a <strong>VPN</strong>.</p><h2 id="authentication-header-protocol"><a class="markdownIt-Anchor" href="#authentication-header-protocol"></a> Authentication Header Protocol</h2><p>Layer 3 protocol</p><p><strong>Transport mode</strong>: an AH header after the IP header. The entire IP packet will be authenticated.</p><p><img src="/2022/04/08/IPsec/image-20220408182745880.png" alt="image-20220408182745880" loading="lazy"></p><p><strong>Tunnel mode</strong>: a new IP header is added on top of the original IP packet.</p><p><img src="/2022/04/08/IPsec/image-20220408182806622.png" alt="image-20220408182806622" loading="lazy"></p><h2 id="encapsulating-security-payload-protocol"><a class="markdownIt-Anchor" href="#encapsulating-security-payload-protocol"></a> Encapsulating Security Payload Protocol</h2><p>Layer 3 protocol</p><p><strong>Transport mode</strong>: the original IP header is used, and an ESP header and trailer are added. The transport layer (TCP for example) and payload will be encrypted. It also offers authentication but unlike AH, it’s not for the entire IP packet.</p><p><img src="/2022/04/08/IPsec/image-20220408182852006.png" alt="image-20220408182852006" loading="lazy"></p><p><strong>Tunnel mode</strong>: a new header is added, and the original IP header is now also encrypted.</p><p><img src="/2022/04/08/IPsec/image-20220408182902202.png" alt="image-20220408182902202" loading="lazy"></p><h1 id="virtual-private-network"><a class="markdownIt-Anchor" href="#virtual-private-network"></a> Virtual Private Network</h1><p>A Virtual private network (VPN) is a private network that securely connects two or more remote sites across a public network such as the Internet. Instead of using dedicated physical connections between networks, VPNs use virtual connections (secure tunnel) routed through public networks.</p><p><img src="/2022/04/08/IPsec/image-20220408183423694.png" alt="image-20220408183423694" loading="lazy"></p><h2 id="vpn-security"><a class="markdownIt-Anchor" href="#vpn-security"></a> VPN Security</h2><ul><li>Data confidentiality: DES, 3DES, AES (ESP of IPsec)</li><li>Data integrity: MD5, SHA (AH of IPsec)</li><li>Data origin authentication: PSK, RSA.</li></ul><p><strong>IPsec VPN</strong> consists of set of standards used to establish a VPN connection. Within the VPN implementation, IPsec is applied in tunnel mode, which supports the <strong>Encapsulating Security Payload</strong> <strong>(ESP)</strong> and <strong>Authentication Header (AH)</strong> protocols.</p><h2 id="types-of-vpn"><a class="markdownIt-Anchor" href="#types-of-vpn"></a> Types of VPN</h2><p><img src="/2022/04/08/IPsec/image-20220408183817734.png" alt="image-20220408183817734" loading="lazy"></p><h2 id="security-associations"><a class="markdownIt-Anchor" href="#security-associations"></a> Security Associations</h2><p>IPsec datagram在两个实体之间发送(e.g. router-router, router-host, host-host)，在datagram发送之前，两者创建了一个网络层的逻辑连接，我们将这个逻辑连接称为安全关联( Security Association, SA)。</p><p>一个SA是一个单工逻辑链接，也就是说，如果两个设备之间要互相发送datagram，那么至少要创建2个SA，每个方向至少创建一个。</p><p>A Security Associations (SA) is a unidirectional agreement between the VPN participants that specify the security parameter index (SPI), destination IP address, and security protocol to use in securing a  communication channel.</p><p>Full bidirectional communication requires at least two SAs, one for each direction.</p><h2 id="ipsec-vpn-operations"><a class="markdownIt-Anchor" href="#ipsec-vpn-operations"></a> IPsec VPN operations</h2><ol><li>Interesting traffic initiates the IPsec process</li><li>IKE phase 1 - generate the IKE SA for IKE phase 2.</li><li>IKE phase 2 - generate the IPsec SA for data transfer.</li><li>Data transfer between IPsec peers</li><li>IPsec tunnel termination.</li></ol><p>*more info of IKE: <a href="https://cshihong.github.io/2019/04/03/IPSec-VPN%E4%B9%8BIKE%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3/">IPSec VPN之IKE协议详解 | 曹世宏的博客 (cshihong.github.io)</a></p>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VPN </tag>
            
            <tag> IPsec </tag>
            
            <tag> Computer Network </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>8数码难题</title>
      <link href="/2022/04/01/8-puzzle/"/>
      <url>/2022/04/01/8-puzzle/</url>
      
        <content type="html"><![CDATA[<h2 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述</h2><p>在<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>3</mn><mo>×</mo><mn>3</mn></mrow><annotation encoding="application/x-tex">3×3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">3</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">3</span></span></span></span>的棋盘上，摆有八个棋子，每个棋子上标有<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>至<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>8</mn></mrow><annotation encoding="application/x-tex">8</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">8</span></span></span></span>的某一数字。棋盘中留有一个空格，空格用<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0</mn></mrow><annotation encoding="application/x-tex">0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>来表示。空格周围的棋子可以移到空格中。要求解的问题是：给出一种初始布局（初始状态）和目标布局（为了使题目简单,设目标状态为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>123804765</mn></mrow><annotation encoding="application/x-tex">123804765</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">2</span><span class="mord">3</span><span class="mord">8</span><span class="mord">0</span><span class="mord">4</span><span class="mord">7</span><span class="mord">6</span><span class="mord">5</span></span></span></span>），找到一种最少步骤的移动方法，实现从初始布局到目标布局的转变。</p><img src="/2022/04/01/8-puzzle/R.png" alt="R" style="zoom:50%;" loading="lazy"><h3 id="输入输出样例"><a class="markdownIt-Anchor" href="#输入输出样例"></a> 输入输出样例</h3><p>input1: <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>283104765</mn></mrow><annotation encoding="application/x-tex">283104765</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mord">8</span><span class="mord">3</span><span class="mord">1</span><span class="mord">0</span><span class="mord">4</span><span class="mord">7</span><span class="mord">6</span><span class="mord">5</span></span></span></span></p><p>output1: <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>4</mn></mrow><annotation encoding="application/x-tex">4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">4</span></span></span></span></p><p>input2: <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>603712458</mn></mrow><annotation encoding="application/x-tex">603712458</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">6</span><span class="mord">0</span><span class="mord">3</span><span class="mord">7</span><span class="mord">1</span><span class="mord">2</span><span class="mord">4</span><span class="mord">5</span><span class="mord">8</span></span></span></span></p><p>output2: <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>15</mn></mrow><annotation encoding="application/x-tex">15</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">5</span></span></span></span></p><p>input3: <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>603712458</mn></mrow><annotation encoding="application/x-tex">603712458</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">6</span><span class="mord">0</span><span class="mord">3</span><span class="mord">7</span><span class="mord">1</span><span class="mord">2</span><span class="mord">4</span><span class="mord">5</span><span class="mord">8</span></span></span></span></p><p>output3: <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>23</mn></mrow><annotation encoding="application/x-tex">23</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mord">3</span></span></span></span></p><img src="/2022/04/01/8-puzzle/35482241-1605ae76-046d-11e8-87e5-3d8a0cfa8628.gif" alt="35482241-1605ae76-046d-11e8-87e5-3d8a0cfa8628" style="zoom:33%;" loading="lazy"><h2 id="问题分析"><a class="markdownIt-Anchor" href="#问题分析"></a> 问题分析</h2><h3 id="朴素bfs"><a class="markdownIt-Anchor" href="#朴素bfs"></a> 朴素BFS</h3><p>看完问题我们最先想到的一定是BFS，因为我们知道起始状态和目标状态，且不需要求解过程，只需要知道执行的步骤，那么DFS自然就不需要了。因此最简单的办法就是套用BFS模板，目标状态的深度即为答案。过程很简单，看代码就可以理解的哈，不理解可以温习一下BFS的原理：<a href="https://tonylsx611.github.io/2022/03/10/BFS/">BFS简介</a></p><img src="/2022/04/01/8-puzzle/R1.png" alt="R1" style="zoom:75%;" loading="lazy"><h3 id="朴素bfs代码"><a class="markdownIt-Anchor" href="#朴素bfs代码"></a> 朴素BFS代码</h3><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    string start<span class="token punctuation">;</span>    <span class="token keyword">int</span> depth<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    queue<span class="token operator">&lt;</span>string<span class="token operator">></span> Q<span class="token punctuation">;</span>    Q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>Q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> len<span class="token operator">=</span>Q<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//while循环内的for循环代表树的深度</span>        <span class="token punctuation">&#123;</span>            string node<span class="token operator">=</span>Q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> position<span class="token punctuation">;</span><span class="token comment">//数字0的位置</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">'0'</span><span class="token punctuation">)</span><span class="token comment">//寻找数字0在九宫格的位置</span>                position<span class="token operator">=</span>j<span class="token punctuation">;</span>                        <span class="token keyword">if</span><span class="token punctuation">(</span>position <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token comment">//数字0向左移动</span>            <span class="token punctuation">&#123;</span>                <span class="token function">swap</span><span class="token punctuation">(</span>node<span class="token punctuation">[</span>position<span class="token punctuation">]</span><span class="token punctuation">,</span>node<span class="token punctuation">[</span>position<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//与0交换位置</span>Q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">judge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//判断是否是目标状态</span>                <span class="token function">swap</span><span class="token punctuation">(</span>node<span class="token punctuation">[</span>position<span class="token punctuation">]</span><span class="token punctuation">,</span>node<span class="token punctuation">[</span>position<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//交换回来</span>            <span class="token punctuation">&#125;</span>                        <span class="token keyword">if</span><span class="token punctuation">(</span>position <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token comment">//数字0向上移动</span>            <span class="token punctuation">&#123;</span>                <span class="token function">swap</span><span class="token punctuation">(</span>node<span class="token punctuation">[</span>position<span class="token punctuation">]</span><span class="token punctuation">,</span>node<span class="token punctuation">[</span>position<span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//与0交换位置</span>Q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">judge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//判断是否是目标状态</span>                <span class="token function">swap</span><span class="token punctuation">(</span>node<span class="token punctuation">[</span>position<span class="token punctuation">]</span><span class="token punctuation">,</span>node<span class="token punctuation">[</span>position<span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//交换回来</span><span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>position <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token comment">//数字0向右移动</span>            <span class="token punctuation">&#123;</span>                <span class="token function">swap</span><span class="token punctuation">(</span>node<span class="token punctuation">[</span>position<span class="token punctuation">]</span><span class="token punctuation">,</span>node<span class="token punctuation">[</span>position<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//与0交换位置</span>Q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">judge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//判断是否是目标状态</span>                <span class="token function">swap</span><span class="token punctuation">(</span>node<span class="token punctuation">[</span>position<span class="token punctuation">]</span><span class="token punctuation">,</span>node<span class="token punctuation">[</span>position<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//交换回来</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>position <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token comment">//down</span>            <span class="token punctuation">&#123;</span>                <span class="token function">swap</span><span class="token punctuation">(</span>node<span class="token punctuation">[</span>position<span class="token punctuation">]</span><span class="token punctuation">,</span>node<span class="token punctuation">[</span>position<span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//与0交换位置</span>Q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">judge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//判断是否是目标状态</span>                <span class="token function">swap</span><span class="token punctuation">(</span>node<span class="token punctuation">[</span>position<span class="token punctuation">]</span><span class="token punctuation">,</span>node<span class="token punctuation">[</span>position<span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//交换回来</span>            <span class="token punctuation">&#125;</span>            Q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        depth<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="记忆化bfs搜索"><a class="markdownIt-Anchor" href="#记忆化bfs搜索"></a> 记忆化BFS搜索</h3><p>但是，这样的搜索显然是有很多重复的节点，会出现返祖现象，就是说后面的搜索包含了前面已经搜索过的节点。比如，数字0第一次向右移动，第二次向左移动，就相当没移动，又回到原来的节点了。那么为了避免这个问题，我们使用一个超大的数组来记录每一次遍历过的节点状态，因为BFS是按照层级顺序搜索的，因此每次搜索前查找一下这个超大数组，如果已经遍历过的节点将不会再次遍历。这样的减枝可以极大的提高搜索效率，可以减少大约50%的重复搜索时间。</p><h3 id="记忆化bfs搜索代码"><a class="markdownIt-Anchor" href="#记忆化bfs搜索代码"></a> 记忆化BFS搜索代码</h3><pre class="language-c" data-language="c"><code class="language-c">string disk<span class="token punctuation">[</span><span class="token number">1000001</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//记忆数组</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    string start<span class="token punctuation">;</span>    string final<span class="token operator">=</span><span class="token string">"123804765"</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> depth<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> ptr<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    queue<span class="token operator">&lt;</span>string<span class="token operator">></span> Q<span class="token punctuation">;</span>    disk<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>start<span class="token punctuation">;</span>    Q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>Q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> len<span class="token operator">=</span>Q<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            string node<span class="token operator">=</span>Q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> position<span class="token punctuation">;</span><span class="token comment">//数字0的位置</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">'0'</span><span class="token punctuation">)</span><span class="token comment">//寻找数字0在九宫格的位置</span>                position<span class="token operator">=</span>j<span class="token punctuation">;</span>                        <span class="token keyword">if</span><span class="token punctuation">(</span>position <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token comment">//数字0向左移动</span>            <span class="token punctuation">&#123;</span>                <span class="token function">swap</span><span class="token punctuation">(</span>node<span class="token punctuation">[</span>position<span class="token punctuation">]</span><span class="token punctuation">,</span>node<span class="token punctuation">[</span>position<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//----------------------</span>                bool judge<span class="token operator">=</span>true<span class="token punctuation">;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>ptr<span class="token punctuation">;</span>j<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span><span class="token comment">//从后向前检查该节点是否遍历过</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>disk<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span>node<span class="token punctuation">)</span>                    <span class="token punctuation">&#123;</span>                        judge<span class="token operator">=</span>false<span class="token punctuation">;</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>judge<span class="token punctuation">)</span><span class="token comment">//如果没有遍历过</span>                <span class="token punctuation">&#123;</span>                    Q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>                    ptr<span class="token operator">++</span><span class="token punctuation">;</span>                    disk<span class="token punctuation">[</span>ptr<span class="token punctuation">]</span> <span class="token operator">=</span> node<span class="token punctuation">;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token operator">==</span>final<span class="token punctuation">)</span>                    <span class="token punctuation">&#123;</span>                        cout<span class="token operator">&lt;&lt;</span>depth<span class="token operator">+</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>                        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>                <span class="token comment">//---------------------</span>                <span class="token function">swap</span><span class="token punctuation">(</span>node<span class="token punctuation">[</span>position<span class="token punctuation">]</span><span class="token punctuation">,</span>node<span class="token punctuation">[</span>position<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>                        <span class="token keyword">if</span><span class="token punctuation">(</span>position<span class="token operator">></span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment">//数字0向上移动</span>            <span class="token punctuation">&#123;</span>                <span class="token function">swap</span><span class="token punctuation">(</span>node<span class="token punctuation">[</span>position<span class="token punctuation">]</span><span class="token punctuation">,</span>node<span class="token punctuation">[</span>position<span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//同上</span>                <span class="token function">swap</span><span class="token punctuation">(</span>node<span class="token punctuation">[</span>position<span class="token punctuation">]</span><span class="token punctuation">,</span>node<span class="token punctuation">[</span>position<span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>position <span class="token operator">==</span> <span class="token number">0</span>，<span class="token number">1</span>，<span class="token number">3</span>，<span class="token number">4</span>，<span class="token number">6</span>，<span class="token number">7</span><span class="token punctuation">)</span><span class="token comment">//数字0向右移动</span>            <span class="token punctuation">&#123;</span>                bool judge<span class="token operator">=</span>true<span class="token punctuation">;</span>                <span class="token function">swap</span><span class="token punctuation">(</span>node<span class="token punctuation">[</span>position<span class="token punctuation">]</span><span class="token punctuation">,</span>node<span class="token punctuation">[</span>position<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//同上</span>                <span class="token function">swap</span><span class="token punctuation">(</span>node<span class="token punctuation">[</span>position<span class="token punctuation">]</span><span class="token punctuation">,</span>node<span class="token punctuation">[</span>position<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>position<span class="token operator">&lt;</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token comment">//数字0向下移动</span>            <span class="token punctuation">&#123;</span>                <span class="token function">swap</span><span class="token punctuation">(</span>node<span class="token punctuation">[</span>position<span class="token punctuation">]</span><span class="token punctuation">,</span>node<span class="token punctuation">[</span>position<span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//同上</span>                <span class="token function">swap</span><span class="token punctuation">(</span>node<span class="token punctuation">[</span>position<span class="token punctuation">]</span><span class="token punctuation">,</span>node<span class="token punctuation">[</span>position<span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            Q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        depth<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="双向bfs"><a class="markdownIt-Anchor" href="#双向bfs"></a> 双向BFS</h3><p>虽然上述方法已经很快了，但是执行<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>I</mi><mi>n</mi><mi>p</mi><mi>u</mi><mi>t</mi><mn>3</mn></mrow><annotation encoding="application/x-tex">Input3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="mord mathdefault">n</span><span class="mord mathdefault">p</span><span class="mord mathdefault">u</span><span class="mord mathdefault">t</span><span class="mord">3</span></span></span></span>依旧需要将近20秒的时间，因此当节点很深的时候，我们有没有更快的办法呢？</p><p>对于本题而言，双向BFS就派上用场了，因为本题已知起始状态和目标状态，我们完全可以同时对这两个状态进行BFS，当两面搜索到了同一个节点时，两面的深度之和就是答案。如图所示，同样的，对于一些走迷宫类的问题，给出起始状态和中止状态，我们都可以考虑使用双向BFS来求解。这种方法有多快呢， 对于<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>I</mi><mi>n</mi><mi>p</mi><mi>u</mi><mi>t</mi><mn>3</mn></mrow><annotation encoding="application/x-tex">Input3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="mord mathdefault">n</span><span class="mord mathdefault">p</span><span class="mord mathdefault">u</span><span class="mord mathdefault">t</span><span class="mord">3</span></span></span></span>而言，使用双向BFS求解的时间仅需<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0.3</mn><mi>s</mi></mrow><annotation encoding="application/x-tex">0.3s</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">3</span><span class="mord mathdefault">s</span></span></span></span>，是单向BFS速度的近百倍！</p><img src="/2022/04/01/8-puzzle/R.024c89daf1b60db70d608b4b73215e76" alt="查看源图像" style="zoom:50%;" loading="lazy"><p>这里，我们对代码进行了一些小小的优化，将原本的disk数组更换成了更高效的<strong>哈希映射</strong>，通过<strong>康托展开</strong>将<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0</mn><mo>−</mo><mn>8</mn></mrow><annotation encoding="application/x-tex">0-8</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">8</span></span></span></span>的全排列一一映射到大小仅为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>362880</mn></mrow><annotation encoding="application/x-tex">362880</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">3</span><span class="mord">6</span><span class="mord">2</span><span class="mord">8</span><span class="mord">8</span><span class="mord">0</span></span></span></span>的哈希表中。或许你会疑惑，原本应该至少需要开<code>disk[876543210]</code>这么大的数组，怎么只需要<code>disk[362880]</code>就可以储存的下呢？我们来看一下康托展开的具体实现方式：<a href="https://baike.baidu.com/item/%E5%BA%B7%E6%89%98%E5%B1%95%E5%BC%80/7968428?msclkid=92fc5a9ab32e11ec926143771748963a">康托展开_百度百科 (baidu.com)</a>.</p><p>是不是很神奇呢？</p><h3 id="双向bfs代码"><a class="markdownIt-Anchor" href="#双向bfs代码"></a> 双向BFS代码</h3><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue></span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">ant</span><span class="token punctuation">&#123;</span>    string str<span class="token punctuation">;</span>    <span class="token keyword">int</span> depth<span class="token punctuation">;</span>    <span class="token keyword">short</span> one_two<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> visit<span class="token punctuation">[</span><span class="token number">362880</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> depth<span class="token punctuation">[</span><span class="token number">362880</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">bfs</span><span class="token punctuation">(</span>string begin<span class="token punctuation">,</span> string end<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//双向BFS</span><span class="token keyword">int</span> <span class="token function">hash1</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//康托展开</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    string final <span class="token operator">=</span> <span class="token string">"123804765"</span><span class="token punctuation">;</span>    string start <span class="token operator">=</span><span class="token string">"603712458"</span><span class="token punctuation">;</span>    <span class="token function">bfs</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> final<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">hash1</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span><span class="token comment">//康托展开</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> f<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">,</span><span class="token number">120</span><span class="token punctuation">,</span><span class="token number">720</span><span class="token punctuation">,</span><span class="token number">5040</span><span class="token punctuation">,</span><span class="token number">40320</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> book<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> x<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> num<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        book<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token char">'0'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token char">'0'</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>book<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>                num<span class="token operator">++</span><span class="token punctuation">;</span>        x<span class="token operator">--</span><span class="token punctuation">;</span>        ans<span class="token operator">+=</span>num<span class="token operator">*</span>f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">bfs</span><span class="token punctuation">(</span>string begin<span class="token punctuation">,</span> string end<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    queue<span class="token operator">&lt;</span>ant<span class="token operator">></span> Q<span class="token punctuation">;</span>    ant temp<span class="token punctuation">;</span>    <span class="token keyword">int</span> str_to_int<span class="token punctuation">;</span><span class="token comment">//哈希转换</span>    temp<span class="token punctuation">.</span>str <span class="token operator">=</span> begin<span class="token punctuation">;</span>    temp<span class="token punctuation">.</span>depth <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    temp<span class="token punctuation">.</span>one_two <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//1代表正向BFS</span>    Q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>    str_to_int <span class="token operator">=</span> <span class="token function">hash1</span><span class="token punctuation">(</span>temp<span class="token punctuation">.</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    visit<span class="token punctuation">[</span>str_to_int<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment">//depth[str_to_int] = 0;</span>    temp<span class="token punctuation">.</span>str <span class="token operator">=</span> end<span class="token punctuation">;</span>    temp<span class="token punctuation">.</span>depth <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    temp<span class="token punctuation">.</span>one_two <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    Q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>    str_to_int <span class="token operator">=</span> <span class="token function">hash1</span><span class="token punctuation">(</span>temp<span class="token punctuation">.</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    visit<span class="token punctuation">[</span>str_to_int<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">//2代表反向BFS</span>    <span class="token comment">//depth[str_to_int] = 0;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>Q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        ant node <span class="token operator">=</span> Q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        node<span class="token punctuation">.</span>depth<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> position <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//position是数字0所在的位置</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">9</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'0'</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                position <span class="token operator">=</span> i<span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>position <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token comment">//数字0向左移动</span>        <span class="token punctuation">&#123;</span>            <span class="token function">swap</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>str<span class="token punctuation">[</span>position<span class="token punctuation">]</span><span class="token punctuation">,</span> node<span class="token punctuation">.</span>str<span class="token punctuation">[</span>position <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            str_to_int <span class="token operator">=</span> <span class="token function">hash1</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>visit<span class="token punctuation">[</span>str_to_int<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">//没有访问过</span>            <span class="token punctuation">&#123;</span>                Q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>                visit<span class="token punctuation">[</span>str_to_int<span class="token punctuation">]</span> <span class="token operator">=</span> node<span class="token punctuation">.</span>one_two<span class="token punctuation">;</span>                depth<span class="token punctuation">[</span>str_to_int<span class="token punctuation">]</span> <span class="token operator">=</span> node<span class="token punctuation">.</span>depth<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>visit<span class="token punctuation">[</span>str_to_int<span class="token punctuation">]</span> <span class="token operator">+</span> node<span class="token punctuation">.</span>one_two <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token comment">//一个是1，一个是2，代表相遇</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">int</span> ans <span class="token operator">=</span> depth<span class="token punctuation">[</span>str_to_int<span class="token punctuation">]</span> <span class="token operator">+</span> node<span class="token punctuation">.</span>depth<span class="token punctuation">;</span>                cout <span class="token operator">&lt;&lt;</span> ans <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token function">swap</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>str<span class="token punctuation">[</span>position<span class="token punctuation">]</span><span class="token punctuation">,</span> node<span class="token punctuation">.</span>str<span class="token punctuation">[</span>position <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>position <span class="token operator">>=</span> <span class="token number">3</span> <span class="token operator">&amp;&amp;</span> position <span class="token operator">&lt;=</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token comment">//数字0向上移动</span>        <span class="token punctuation">&#123;</span>            <span class="token function">swap</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>str<span class="token punctuation">[</span>position<span class="token punctuation">]</span><span class="token punctuation">,</span> node<span class="token punctuation">.</span>str<span class="token punctuation">[</span>position <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            str_to_int <span class="token operator">=</span> <span class="token function">hash1</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>visit<span class="token punctuation">[</span>str_to_int<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">//没有访问过</span>            <span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span class="token comment">//同上</span>            <span class="token function">judge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//同上</span>            <span class="token function">swap</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>str<span class="token punctuation">[</span>position<span class="token punctuation">]</span><span class="token punctuation">,</span> node<span class="token punctuation">.</span>str<span class="token punctuation">[</span>position <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>position <span class="token operator">==</span> <span class="token number">0</span>，<span class="token number">1</span>，<span class="token number">3</span>，<span class="token number">4</span>，<span class="token number">6</span>，<span class="token number">7</span><span class="token punctuation">)</span><span class="token comment">//数字0向右移动</span>        <span class="token punctuation">&#123;</span>            <span class="token function">swap</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>str<span class="token punctuation">[</span>position<span class="token punctuation">]</span><span class="token punctuation">,</span> node<span class="token punctuation">.</span>str<span class="token punctuation">[</span>position <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            str_to_int <span class="token operator">=</span> <span class="token function">hash1</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>visit<span class="token punctuation">[</span>str_to_int<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">//没有访问过</span>            <span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span class="token comment">//同上</span>            <span class="token function">judge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//同上</span>            <span class="token function">swap</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>str<span class="token punctuation">[</span>position<span class="token punctuation">]</span><span class="token punctuation">,</span> node<span class="token punctuation">.</span>str<span class="token punctuation">[</span>position <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>position <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> position <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token comment">//数字0向下移动</span>        <span class="token punctuation">&#123;</span>            <span class="token function">swap</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>str<span class="token punctuation">[</span>position<span class="token punctuation">]</span><span class="token punctuation">,</span> node<span class="token punctuation">.</span>str<span class="token punctuation">[</span>position <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            str_to_int <span class="token operator">=</span> <span class="token function">hash1</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>visit<span class="token punctuation">[</span>str_to_int<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">//没有访问过</span>            <span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span class="token comment">//同上</span>            <span class="token function">judge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//同上</span>            <span class="token function">swap</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>str<span class="token punctuation">[</span>position<span class="token punctuation">]</span><span class="token punctuation">,</span> node<span class="token punctuation">.</span>str<span class="token punctuation">[</span>position <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        Q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="a算法"><a class="markdownIt-Anchor" href="#a算法"></a> A*算法</h3><h3 id="a算法代码"><a class="markdownIt-Anchor" href="#a算法代码"></a> A*算法代码</h3><pre class="language-none"><code class="language-none"></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> algorithm </tag>
            
            <tag> BFS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BM字符串匹配算法</title>
      <link href="/2022/03/27/BM-algorithm/"/>
      <url>/2022/03/27/BM-algorithm/</url>
      
        <content type="html"><![CDATA[<h2 id="算法简介"><a class="markdownIt-Anchor" href="#算法简介"></a> 算法简介</h2><p>BM(Boyer-Moore)算法由Bob Boyer和J Strother Moore于1977年设计，目的在于高效的查找字符串中的的子串。该算法的执行时间是线性的<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mi>O</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(O(N))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span>，且往往更优于KMP算法。与KMP算法一样的是，都是需要且只需要对目标字符串进行预处理，而非被搜索的字符串；与KMP有所不同的是，BM算法是从后向前查找匹配，先从关键字的最后一个字符开始向前对应。</p><p>如果想了解KMP算法，请参看我的另一篇文章：</p><h2 id="bm算法原理"><a class="markdownIt-Anchor" href="#bm算法原理"></a> BM算法原理</h2><p>BM算法本质上只说明了两个规则：</p><ol><li>坏字符规则</li><li>好后缀规则</li></ol><p>下面详细讲解一下这两个规则；在此之前我们约定，下文中提到的所有目标字符串（Key）统称为<strong>substr</strong>， 而需要被查找的字符串（较长的那个）统称为<strong>str</strong>。</p><h3 id="坏字符规则"><a class="markdownIt-Anchor" href="#坏字符规则"></a> 坏字符规则</h3><p>当substr中某个字符与str不匹配时，这个(str中的)字符就称为坏字符。找到坏字符后，substr就要向后移动，<strong>移动的位数</strong><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi><mi>o</mi><mi>v</mi><mi>e</mi><mi mathvariant="normal">_</mi><mi>n</mi><mi>u</mi><mi>m</mi><mo>=</mo><msub><mi>λ</mi><mn>1</mn></msub><mo>−</mo><msub><mi>λ</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">move\_num=\lambda_1-\lambda_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.74056em;vertical-align:-0.31em;"></span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord mathdefault">e</span><span class="mord" style="margin-right:0.02778em;">_</span><span class="mord mathdefault">n</span><span class="mord mathdefault">u</span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">λ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">λ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> ，其中<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>λ</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">\lambda_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">λ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>为<strong>坏字符在substr中的位置</strong>，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>λ</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">\lambda_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">λ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>为<strong>坏字符在substr中最后出现的位置</strong>。如果substr中并没有坏字符，那么<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>λ</mi><mn>2</mn></msub><mo>=</mo><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">\lambda_2=-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">λ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">−</span><span class="mord">1</span></span></span></span>，也就是说，整体向右移动一个substr的长度。</p><p>看到这里是不是很懵，没关系，我们来看一个例子：</p><img src="/2022/03/27/BM-algorithm/image-20220328004145309.png" alt="image-20220328004145309" style="zoom:50%;" loading="lazy"><p>首先从右向左查找字符，<code>e</code>和<code>d</code>是匹配的，到第三个元素<code>c</code>不匹配，因此<code>c</code>就是坏字符。找到了坏字符后我们就可以确定<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>λ</mi><mn>1</mn></msub><mo>=</mo><mn>2</mn></mrow><annotation encoding="application/x-tex">\lambda_1=2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">λ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span></span></span></span>(从0开始算起)；然后寻找坏字符<code>c</code>在substr中最后出现的位置，也就是是从右向左的第一个坏字符，我们得到<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>λ</mi><mn>2</mn></msub><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">\lambda_2=0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">λ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>，因此我们应该向右移动两位，也就是将上下的两个<code>c</code>对齐的位置。</p><h3 id="好后缀规则"><a class="markdownIt-Anchor" href="#好后缀规则"></a> 好后缀规则</h3><p>当我们从后向前匹配时出现相同的字符串时（也就是说至少有一个字符是对应的），我们就称这个字符串以及该字符串的子串为好后缀<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mrow></mrow><mrow><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo></mrow></msup></mrow><annotation encoding="application/x-tex">^{[1]}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8879999999999999em;vertical-align:0em;"></span><span class="mord"><span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8879999999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">[</span><span class="mord mtight">1</span><span class="mclose mtight">]</span></span></span></span></span></span></span></span></span></span></span></span>。找到好后缀之后，substr就要向后移动，<strong>移动的位数</strong><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi><mi>o</mi><mi>v</mi><mi>e</mi><mi mathvariant="normal">_</mi><mi>n</mi><mi>u</mi><mi>m</mi><mo>=</mo><msub><mi>λ</mi><mn>3</mn></msub><mo>−</mo><msub><mi>λ</mi><mn>4</mn></msub></mrow><annotation encoding="application/x-tex">move\_num=\lambda_3-\lambda_4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.74056em;vertical-align:-0.31em;"></span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord mathdefault">e</span><span class="mord" style="margin-right:0.02778em;">_</span><span class="mord mathdefault">n</span><span class="mord mathdefault">u</span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">λ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">λ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> ，其中<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>λ</mi><mn>3</mn></msub></mrow><annotation encoding="application/x-tex">\lambda_3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">λ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>为<strong>好后缀在substr中的位置</strong>，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>λ</mi><mn>4</mn></msub></mrow><annotation encoding="application/x-tex">\lambda_4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">λ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>为<strong>好后缀在substr中（上一次）最后出现的位置</strong>。如果substr中再没有好后缀，那么<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>λ</mi><mn>4</mn></msub><mo>=</mo><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">\lambda_4=-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">λ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">−</span><span class="mord">1</span></span></span></span>，也就是说，整体向右移动一个substr的长度。</p><p>我们发现，坏字符规则和好后缀规则的描述十分相似，如果你可以理解坏字符规则，那么好后缀规则也很容易理解，当然，需要注意的是每次判断时坏字符只有一个，好后缀却有很多。（好后缀的个数等于好后缀的长度）</p><p>我们还是用一个例子来说明好字符规则：</p><img src="/2022/03/27/BM-algorithm/image-20220328005451919.png" alt="image-20220328005451919" style="zoom:51%;" loading="lazy"><p>根据好后缀规则，我们首先很容易找到最长的好后缀是<code>de</code>，那么<code>e</code>也是好后缀（因为<code>e</code>是好后缀的后缀子串）。那么下面我们要做的事情就是在substr中查找最长的能跟这些好后缀（<code>e,de</code>)匹配的子串。首先我们查找<code>e</code>这个好后缀，发现<code>substr[2]</code>与之匹配；然后查找好后缀<code>de</code>，发现<code>substr[1]</code>与之匹配。那么我们选择最长的那个子串，也就是<code>substr[1]</code>，因此<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>λ</mi><mn>3</mn></msub><mo>=</mo><mn>3</mn><mo separator="true">,</mo><msub><mi>λ</mi><mn>4</mn></msub><mo>=</mo><mn>1</mn><mi mathvariant="normal">，</mi><mi>m</mi><mi>o</mi><mi>v</mi><mi>e</mi><mi mathvariant="normal">_</mi><mi>n</mi><mi>u</mi><mi>m</mi><mo>=</mo><mn>2</mn></mrow><annotation encoding="application/x-tex">\lambda_3=3,\lambda_4=1，move\_num=2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">λ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord">3</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">λ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.95444em;vertical-align:-0.31em;"></span><span class="mord">1</span><span class="mord cjk_fallback">，</span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord mathdefault">e</span><span class="mord" style="margin-right:0.02778em;">_</span><span class="mord mathdefault">n</span><span class="mord mathdefault">u</span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span></span></span></span>，即向右移动两位。</p><h2 id="bm的实现"><a class="markdownIt-Anchor" href="#bm的实现"></a> BM的实现</h2><h3 id="建立坏字符的hash-table"><a class="markdownIt-Anchor" href="#建立坏字符的hash-table"></a> 建立坏字符的hash table</h3><p>为了节省时间，我们将所有待匹配的字符都建立一个映射，这样在找到坏字符的时候就可以以<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span>的时间知道substr应该向右移动多少。其实就是用一个最简单的hash table来寻找<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>λ</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">\lambda_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">λ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>的值。</p><p>我们这里为了简单起见，只适配了256个ASCII字符，如果想加入中文，那么这个hash table将变得大一些。按照规则，如果substr没有出现的字符一律设置成<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>λ</mi><mn>2</mn></msub><mo>=</mo><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">\lambda_2=-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">λ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">−</span><span class="mord">1</span></span></span></span>，因此我们将hash table初始化成<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">−</span><span class="mord">1</span></span></span></span>。</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">generate_bad_char_table</span><span class="token punctuation">(</span>string str<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    bad_char_table <span class="token operator">=</span> new <span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">256</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        bad_char_table<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> ASCII<span class="token operator">=</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        bad_char_table<span class="token punctuation">[</span>ASCII<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="好后缀的预处理"><a class="markdownIt-Anchor" href="#好后缀的预处理"></a> 好后缀的预处理</h3><p>根据好后缀规则，我们完全可以暴力求解<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>λ</mi><mn>3</mn></msub></mrow><annotation encoding="application/x-tex">\lambda _3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">λ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>和<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>λ</mi><mn>4</mn></msub></mrow><annotation encoding="application/x-tex">\lambda _4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">λ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>的值，但是这样的效率显然不是最佳的，如果substr的长度比较大，那么每次判断好后缀的右移长度将浪费很多不必要的时间。因此我们可以对substr的所有好后缀进行预处理。建立两个长度与substr相等的数组，分别为<code>suffix[]</code>和<code>prefix[]</code><strong>，前者记录了substr中与好后缀匹配的最后一个字串的位置</strong>（即<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>λ</mi><mn>4</mn></msub></mrow><annotation encoding="application/x-tex">\lambda _4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">λ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>)<strong>，后者记录了与好后缀匹配的前缀子串</strong>（不过目前鄙人认为没啥用）。</p><p>听起来很懵，看一个例子：</p><img src="/2022/03/27/BM-algorithm/image-20220328173308025.png" alt="image-20220328173308025" style="zoom:50%;" loading="lazy"><p>这样我们就可以知道所有好后缀的<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>λ</mi><mn>4</mn></msub></mrow><annotation encoding="application/x-tex">\lambda _4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">λ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>的值，当我们找到str中的好后缀（也即<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>λ</mi><mn>3</mn></msub></mrow><annotation encoding="application/x-tex">\lambda_3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">λ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>），就可以用<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span>的时间知道向右移动的长度。</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">generate_suffix_prefix</span><span class="token punctuation">(</span>string str<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> len<span class="token operator">=</span>str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    suffix<span class="token operator">=</span> new <span class="token keyword">int</span> <span class="token punctuation">[</span>len<span class="token punctuation">]</span><span class="token punctuation">;</span>    prefix <span class="token operator">=</span> new bool <span class="token punctuation">[</span>len<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        prefix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span> false<span class="token punctuation">;</span>        suffix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token punctuation">;</span>        <span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>j<span class="token operator">>=</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> str<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span>str<span class="token punctuation">[</span>len<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">//inverse search</span>        <span class="token punctuation">&#123;</span>            j<span class="token operator">--</span><span class="token punctuation">;</span>            k<span class="token operator">++</span><span class="token punctuation">;</span>            suffix<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">//如果找到了开头</span>            prefix<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span>true<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="完整代码"><a class="markdownIt-Anchor" href="#完整代码"></a> 完整代码</h2><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">int</span><span class="token operator">*</span> bad_char_table<span class="token punctuation">;</span><span class="token keyword">int</span><span class="token operator">*</span> suffix<span class="token punctuation">;</span>bool<span class="token operator">*</span> prefix<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">move_by_GS</span><span class="token punctuation">(</span><span class="token keyword">int</span> ptr<span class="token punctuation">,</span><span class="token keyword">int</span> str_len<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//判断好后缀移动距离</span><span class="token keyword">int</span> <span class="token function">BM</span><span class="token punctuation">(</span>string str<span class="token punctuation">,</span> string substr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//BM实现</span><span class="token keyword">void</span> <span class="token function">generate_bad_char_table</span><span class="token punctuation">(</span>string str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//建立坏字符hash table</span><span class="token keyword">void</span> <span class="token function">generate_suffix_prefix</span><span class="token punctuation">(</span>string str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//建立好后缀数组</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    string str<span class="token punctuation">,</span>substr<span class="token punctuation">;</span>    str<span class="token operator">=</span><span class="token string">"abcdefgagabgag"</span><span class="token punctuation">;</span>    substr<span class="token operator">=</span><span class="token string">"abg"</span><span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span><span class="token function">BM</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span>substr<span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">generate_bad_char_table</span><span class="token punctuation">(</span>string str<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    bad_char_table <span class="token operator">=</span> new <span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">256</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        bad_char_table<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> ASCII<span class="token operator">=</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        bad_char_table<span class="token punctuation">[</span>ASCII<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">generate_suffix_prefix</span><span class="token punctuation">(</span>string str<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> len<span class="token operator">=</span>str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    suffix<span class="token operator">=</span> new <span class="token keyword">int</span> <span class="token punctuation">[</span>len<span class="token punctuation">]</span><span class="token punctuation">;</span>    prefix <span class="token operator">=</span> new bool <span class="token punctuation">[</span>len<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        prefix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span> false<span class="token punctuation">;</span>        suffix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token punctuation">;</span>        <span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>j<span class="token operator">>=</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> str<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span>str<span class="token punctuation">[</span>len<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">//inverse search</span>        <span class="token punctuation">&#123;</span>            j<span class="token operator">--</span><span class="token punctuation">;</span>            k<span class="token operator">++</span><span class="token punctuation">;</span>            suffix<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">//如果找到了开头</span>            prefix<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span>true<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">move_by_GS</span><span class="token punctuation">(</span><span class="token keyword">int</span> ptr<span class="token punctuation">,</span> <span class="token keyword">int</span> str_len<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> len<span class="token operator">=</span>str_len<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>ptr<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>suffix<span class="token punctuation">[</span>len<span class="token punctuation">]</span><span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> ptr<span class="token operator">-</span>suffix<span class="token punctuation">[</span>len<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>ptr<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>str_len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>prefix<span class="token punctuation">[</span>str_len<span class="token operator">-</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> i<span class="token punctuation">;</span>    <span class="token keyword">return</span> str_len<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">BM</span><span class="token punctuation">(</span>string str<span class="token punctuation">,</span> string substr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">generate_bad_char_table</span><span class="token punctuation">(</span>substr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">generate_suffix_prefix</span><span class="token punctuation">(</span>substr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> move_step<span class="token punctuation">,</span>bad_char<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>substr<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">+=</span>move_step<span class="token punctuation">)</span><span class="token comment">//从头到尾遍历</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>substr<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span><span class="token comment">//从后网线查找</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token operator">+</span>j<span class="token punctuation">]</span><span class="token operator">!=</span>substr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">//找到坏字符</span>            <span class="token punctuation">&#123;</span>                bad_char<span class="token operator">=</span>str<span class="token punctuation">[</span>i<span class="token operator">+</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                move_step<span class="token operator">=</span>j<span class="token operator">-</span>bad_char_table<span class="token punctuation">[</span>bad_char<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">//找到substr</span>            <span class="token punctuation">&#123;</span>                delete <span class="token punctuation">[</span><span class="token punctuation">]</span> bad_char_table<span class="token punctuation">;</span>                delete <span class="token punctuation">[</span><span class="token punctuation">]</span> suffix<span class="token punctuation">;</span>                delete <span class="token punctuation">[</span><span class="token punctuation">]</span> prefix<span class="token punctuation">;</span>                <span class="token keyword">return</span> i<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">&lt;</span>str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">//找到好后缀</span>                move_step<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>move_step<span class="token punctuation">,</span> <span class="token function">move_by_GS</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span> str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    delete <span class="token punctuation">[</span><span class="token punctuation">]</span> bad_char_table<span class="token punctuation">;</span>    delete <span class="token punctuation">[</span><span class="token punctuation">]</span> suffix<span class="token punctuation">;</span>    delete <span class="token punctuation">[</span><span class="token punctuation">]</span> prefix<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> algorithm </tag>
            
            <tag> BM </tag>
            
            <tag> search </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PERT</title>
      <link href="/2022/03/13/PERT/"/>
      <url>/2022/03/13/PERT/</url>
      
        <content type="html"><![CDATA[<p>PERT: Program Evaluation and Review Technique</p><h2 id="1-tasks"><a class="markdownIt-Anchor" href="#1-tasks"></a> 1. Tasks</h2><p>Try to write source code to implement the REPT process, i.e., identifying critical activities and critical path, and calculating the time to complete this software project. The following requirements should be satisfied:</p><ol><li>Upload all source code files (non including some compiling files, configuration files, etc.).</li><li>Given a example (the example in the slide or your another example) as an input of your source code, show the result of your source code by screenshot.</li><li>You choose use a file folder to include all these files, and the compress it into a compressed file for submission.</li></ol><h2 id="2-basic-algorithms-to-solve-this-issue"><a class="markdownIt-Anchor" href="#2-basic-algorithms-to-solve-this-issue"></a> 2. Basic Algorithms to solve this issue</h2><h3 id="20-variables-and-its-meaning"><a class="markdownIt-Anchor" href="#20-variables-and-its-meaning"></a> 2.0 Variables and its meaning</h3><ul><li>EST: Earliest Start Time</li><li>EFT: Earliest Finish Time</li><li>LST: Latest Start Time</li><li>LFT: Latest Finish Time</li><li>PRT: Project Time Usage (of each activity)</li></ul><h3 id="21-store-data-into-adjacency-matrix"><a class="markdownIt-Anchor" href="#21-store-data-into-adjacency-matrix"></a> 2.1 Store data into adjacency matrix</h3><p>In a PRET example, firstly we need to know how many activities should we solve, namely, input num as the total of PRET activities. Next, we need to build an array to storage the time usage in each of the task, namely, PRT.</p><p>The most difficult task, relatively speaking compared with the following input, is to storage the immediate predecessors of each activities. We can either use adjacency matrix or adjacency linked list to storage the predecessors, in my program, I will use matrix instead of linked list since the value num is not too large.</p><h3 id="22-topological-sort"><a class="markdownIt-Anchor" href="#22-topological-sort"></a> 2.2 Topological sort</h3><p>As we all know, topological sort algorithm is useful and convenient to solve the dependency resolution which is extremely similar to PREP, hence I will use topological sort algorithm to implement the <strong>Earliest Start Time</strong> of each node. And the key formula to get EST is</p><pre class="language-none"><code class="language-none">EST[j] &#x3D; max(EST[i] + PRT[i],EST[j])</code></pre><p><strong>Earliest Finish Time</strong> is simple to achieve when we know the EST since<br><code>EFT = EST+PRT</code></p><p>The rest of two arrays <strong>Latest Start Time</strong> and <strong>Latest Finish Time</strong> is harder to find out. Actually, we can find out either of the two values and the other is easy to know since<br><code>LST=LFT-PRT</code></p><p>What I need to do is reverse all the arrows in PREP, that is, change the last activity to the first activity and change the first activity to the last one, and reverse all the activities and immediate predecessors. Using the same method with solving the EST, we can find out the LFT in the same way. Just Transpose the adjacency matrix, and use the key formula<br><code>LST[j]=min(LFT[i]-PRT[i],LFT[j])</code></p><h3 id="23-solutions"><a class="markdownIt-Anchor" href="#23-solutions"></a> 2.3 Solutions</h3><p>After Getting four arrays EST, EFT, LST, LFT, we can easily find the Critical activities and Critical paths by Slacks, and the formula is<br><code>Slack = LST-EST=LFT-EFT</code></p><p>If Slack is not zero, then this activity is a critical activity and those slacks can contribute to the critical path.</p><h2 id="3-example-and-results"><a class="markdownIt-Anchor" href="#3-example-and-results"></a> 3. Example and Results</h2><p>While using the example given below, we can create a graph and given it into adjacency matrix.</p><table><thead><tr><th style="text-align:left">ACTIVIEY CODE</th><th style="text-align:left">IMMEDIATE PREDCESSORS</th><th style="text-align:left">TIME USAGE</th></tr></thead><tbody><tr><td style="text-align:left">1</td><td style="text-align:left">–</td><td style="text-align:left">2</td></tr><tr><td style="text-align:left">2</td><td style="text-align:left">1</td><td style="text-align:left">4</td></tr><tr><td style="text-align:left">3</td><td style="text-align:left">2</td><td style="text-align:left">10</td></tr><tr><td style="text-align:left">4</td><td style="text-align:left">3</td><td style="text-align:left">6</td></tr><tr><td style="text-align:left">5</td><td style="text-align:left">3</td><td style="text-align:left">4</td></tr><tr><td style="text-align:left">6</td><td style="text-align:left">5</td><td style="text-align:left">5</td></tr><tr><td style="text-align:left">7</td><td style="text-align:left">4</td><td style="text-align:left">7</td></tr><tr><td style="text-align:left">8</td><td style="text-align:left">5 7</td><td style="text-align:left">9</td></tr><tr><td style="text-align:left">9</td><td style="text-align:left">3</td><td style="text-align:left">7</td></tr><tr><td style="text-align:left">10</td><td style="text-align:left">6 9</td><td style="text-align:left">8</td></tr><tr><td style="text-align:left">11</td><td style="text-align:left">10</td><td style="text-align:left">4</td></tr><tr><td style="text-align:left">12</td><td style="text-align:left">10</td><td style="text-align:left">5</td></tr><tr><td style="text-align:left">13</td><td style="text-align:left">8</td><td style="text-align:left">2</td></tr><tr><td style="text-align:left">14</td><td style="text-align:left">11 12</td><td style="text-align:left">6</td></tr></tbody></table><p>The input in the program is shown below:</p><p><img src="/2022/03/13/PERT/image-20210926121305734.png" alt="img" loading="lazy"></p><p>And the graph is shown in the graph into a matrix.</p><p><img src="/2022/03/13/PERT/image-20210926121433312.png" alt="img" loading="lazy"></p><p><img src="/2022/03/13/PERT/image-20210926121452437.png" alt="img" loading="lazy"></p><p>Finally we can get the solutions using topological sort algorithm.</p><p><img src="/2022/03/13/PERT/image-20210926121557824.png" alt="img" loading="lazy"></p><p>And the solution is shown below.</p><p><img src="/2022/03/13/PERT/image-20210926125842698.png" alt="img" loading="lazy"></p><h2 id="4-code"><a class="markdownIt-Anchor" href="#4-code"></a> 4. Code</h2><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;sstream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iomanip></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;fstream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stack></span></span>using namespace std<span class="token punctuation">;</span>ifstream <span class="token function">fin</span><span class="token punctuation">(</span><span class="token string">"data.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> num<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//******************* Read Datas *******************</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Please input the number of total projects:"</span><span class="token punctuation">;</span>fin <span class="token operator">>></span> num<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> num <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">int</span><span class="token operator">*</span> pro_time <span class="token operator">=</span> new <span class="token keyword">int</span><span class="token punctuation">[</span>num <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//Project time usage</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token function">map</span><span class="token punctuation">(</span>num <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span>num <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//adjacency matrix</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> num<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Please input the time that Project "</span> <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">" should be used:"</span><span class="token punctuation">;</span>fin <span class="token operator">>></span> pro_time<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> pro_time<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Please input which project(s) should be done before Project "</span> <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">":"</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> temp<span class="token punctuation">;</span>fin<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>string str<span class="token punctuation">;</span><span class="token function">getline</span><span class="token punctuation">(</span>fin<span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> tt<span class="token punctuation">;</span>stringstream <span class="token function">ss</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>ss <span class="token operator">>></span> tt<span class="token punctuation">)</span>temp<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>tt<span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> str <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>temp<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> tt <span class="token operator">:</span> temp<span class="token punctuation">)</span>map<span class="token punctuation">[</span>tt<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> pro_time<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//******************* EST and EFT *******************</span><span class="token keyword">int</span><span class="token operator">*</span> Earliset_Start <span class="token operator">=</span> new <span class="token keyword">int</span><span class="token punctuation">[</span>num <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>Earliset_Start<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//******************* Topological Sort *******************</span>stack<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> stk<span class="token punctuation">;</span>stk<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>stk<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> i <span class="token operator">=</span> stk<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>stk<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> num<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>stk<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>Earliset_Start<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>Earliset_Start<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> pro_time<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> Earliset_Start<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//Earliset Finish</span><span class="token keyword">int</span><span class="token operator">*</span> Earliset_Finish <span class="token operator">=</span> new <span class="token keyword">int</span><span class="token punctuation">[</span>num <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>Earliset_Finish<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> Earliset_Start<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> pro_time<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//******************* LST and LFT **************************</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> num<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>map<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span><span class="token operator">*</span> Latest_Finish <span class="token operator">=</span> new <span class="token keyword">int</span><span class="token punctuation">[</span>num <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> Finish_time <span class="token operator">=</span> Earliset_Finish<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>Latest_Finish<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> Finish_time<span class="token punctuation">;</span><span class="token comment">//******************* Topological Sort *******************</span>stk<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//need to optimize...</span>stk<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>num <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//need to optimize...</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>stk<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> i <span class="token operator">=</span> stk<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>stk<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>stk<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>Latest_Finish<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>Latest_Finish<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> pro_time<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> Latest_Finish<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span><span class="token operator">*</span> Latest_Start <span class="token operator">=</span> new <span class="token keyword">int</span><span class="token punctuation">[</span>num <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>Latest_Start<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> Latest_Finish<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> pro_time<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//Critical Activities</span>bool<span class="token operator">*</span> Critical_Activities <span class="token operator">=</span> new bool<span class="token punctuation">[</span>num <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token punctuation">(</span>Latest_Start<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> Earliset_Start<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>Critical_Activities<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> false<span class="token punctuation">;</span><span class="token keyword">else</span>Critical_Activities<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> true<span class="token punctuation">;</span><span class="token comment">//******************* Solutions *******************</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"________________________________________________\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> num<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>cout <span class="token operator">&lt;&lt;</span> <span class="token function">setw</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"________________________________________________\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"pro_time:"</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>cout <span class="token operator">&lt;&lt;</span> pro_time<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n________________________________________________\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Earest Start:"</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>cout <span class="token operator">&lt;&lt;</span> Earliset_Start<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n________________________________________________\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Earest Finish:"</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>cout <span class="token operator">&lt;&lt;</span> Earliset_Finish<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n________________________________________________\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Latest Start:"</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>cout <span class="token operator">&lt;&lt;</span> Latest_Start<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n________________________________________________\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Latest Finish:"</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>cout <span class="token operator">&lt;&lt;</span> Latest_Finish<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n________________________________________________\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Critical Activities:"</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>cout <span class="token operator">&lt;&lt;</span> Critical_Activities<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n________________________________________________\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Critical Paths: A"</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token punctuation">(</span>Critical_Activities<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"->"</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">char</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> algorithm </tag>
            
            <tag> PERT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>背包问题</title>
      <link href="/2022/03/10/Backpack/"/>
      <url>/2022/03/10/Backpack/</url>
      
        <content type="html"><![CDATA[<p>背包问题(backpack problem)是最经典也是最简单的一类动态规划(dynamic programming)问题，本篇文章重点讲解背包问题中的0-1背包，完全背包，以及多重背包三大问题，顺带也会说明一下动态规划的基本策略，<strong>适合完全不理解相关算法的初学者</strong>。</p><h2 id="0-1背包0-1-knapsack-problem"><a class="markdownIt-Anchor" href="#0-1背包0-1-knapsack-problem"></a> 0-1背包(0-1 Knapsack Problem)</h2><h3 id="11-问题描述"><a class="markdownIt-Anchor" href="#11-问题描述"></a> 1.1 问题描述</h3><p>一共有<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span></span>件物品，每件物品的价格为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>W</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">W_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，价值为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>V</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">V_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，在总重量不超过背包承载上限<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>W</mi><mrow><mi>m</mi><mi>a</mi><mi>x</mi></mrow></msub></mrow><annotation encoding="application/x-tex">W_{max}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>的情况下，如何分配使得装入背包的价值最高？</p><h3 id="12-问题分析"><a class="markdownIt-Anchor" href="#12-问题分析"></a> 1.2 问题分析</h3><p>最先想到的就是暴力穷举法，把每种可能的情况都装进去然后找到最大的情况，但是这样做显然是极其低效的，总的时间复杂度是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mn>2</mn><mi>n</mi></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(2^n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>.</p><p>因此，这里引用了动态规划的思路。在这里我们以此为例，每一组的价格和价值如图所示，假设这里背包的最大重量为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>10</mn></mrow><annotation encoding="application/x-tex">10</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">0</span></span></span></span>。</p><table><thead><tr><th style="text-align:left">N=5</th><th style="text-align:left">1</th><th style="text-align:left">2</th><th style="text-align:left">3</th><th style="text-align:left">4</th><th style="text-align:left">5</th></tr></thead><tbody><tr><td style="text-align:left">Weight</td><td style="text-align:left">1</td><td style="text-align:left">3</td><td style="text-align:left">4</td><td style="text-align:left">5</td><td style="text-align:left">2</td></tr><tr><td style="text-align:left">Value</td><td style="text-align:left">5</td><td style="text-align:left">10</td><td style="text-align:left">18</td><td style="text-align:left">20</td><td style="text-align:left">7</td></tr></tbody></table><p>那么接下来我们要做的事情是，创建一个二维数组<code>dp[i][j]</code>，这样的数组表示将前<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span></span></span></span>件商品装入重量为j的背包中可以获得的最大价值，其中$$0\leq i\leq N\qquad 0\leq j\leq W_{max}$$</p><p>现在我们来看一下，按照这样的规则得到的二维数组是什么样子：</p><table><thead><tr><th style="text-align:left"></th><th style="text-align:left">1</th><th style="text-align:left">2</th><th style="text-align:left">3</th><th style="text-align:left">4</th><th style="text-align:left">5</th></tr></thead><tbody><tr><td style="text-align:left">1</td><td style="text-align:left">5</td><td style="text-align:left">5</td><td style="text-align:left">5</td><td style="text-align:left">5</td><td style="text-align:left">5</td></tr><tr><td style="text-align:left">2</td><td style="text-align:left">5</td><td style="text-align:left">5</td><td style="text-align:left">5</td><td style="text-align:left">5</td><td style="text-align:left">7</td></tr><tr><td style="text-align:left">3</td><td style="text-align:left">5</td><td style="text-align:left">10</td><td style="text-align:left">10</td><td style="text-align:left">10</td><td style="text-align:left">12</td></tr><tr><td style="text-align:left">4</td><td style="text-align:left">5</td><td style="text-align:left">15</td><td style="text-align:left">18</td><td style="text-align:left">18</td><td style="text-align:left">18</td></tr><tr><td style="text-align:left">5</td><td style="text-align:left">5</td><td style="text-align:left">15</td><td style="text-align:left">23</td><td style="text-align:left">23</td><td style="text-align:left">23</td></tr><tr><td style="text-align:left">6</td><td style="text-align:left">5</td><td style="text-align:left">15</td><td style="text-align:left">23</td><td style="text-align:left">25</td><td style="text-align:left">25</td></tr><tr><td style="text-align:left">7</td><td style="text-align:left">5</td><td style="text-align:left">15</td><td style="text-align:left">28</td><td style="text-align:left">28</td><td style="text-align:left">30</td></tr><tr><td style="text-align:left">8</td><td style="text-align:left">5</td><td style="text-align:left">15</td><td style="text-align:left">33</td><td style="text-align:left">33</td><td style="text-align:left">33</td></tr><tr><td style="text-align:left">9</td><td style="text-align:left">5</td><td style="text-align:left">15</td><td style="text-align:left">33</td><td style="text-align:left">38</td><td style="text-align:left">38</td></tr><tr><td style="text-align:left">10</td><td style="text-align:left">5</td><td style="text-align:left">15</td><td style="text-align:left">33</td><td style="text-align:left">43</td><td style="text-align:left">43</td></tr></tbody></table><p>最后的答案就是数组右下角的结果，那么我们又该如何通过程序得到这样的数组呢？</p><p>当我们只有第一件物品的时候（数组的第一列），无论背包容量有多大都只能装下一个物品，所得到的价值也只有第一个物品的价值，此例中即为5.</p><p>当我们拥有第二件物品的时候，就要做一个选择，<strong>要么装入该物品（前提是能装得下），要么不装入该物品。</strong></p><p>那么有人可能就会问了，既然是可以装得下，那么为什么不装入这个物品呢？如果一个物品很沉很沉价值又非常之低，那么我们转入了这个物品的总价值反而要少于装了其他同等重量物品的价值，这个时候装入该物品就显得很多余了。</p><p>回到重点，对于这个二维数组来说，<strong>不装入第<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span></span></span></span>件物品的意思是<code>dp[i-1][j]</code>，装入第<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span></span></span></span>件物品的意思是<code>dp[i-1][j-w[i]] + v[i]</code>.</strong></p><p>请认真仔细的对照上面的数组，好好理解一下上面的表达式。那么我们得到的状态转移方程即为：$$<br>dp[i][j]=max(dp[i-1][j],\ dp[i-1][j-w[i]] + v[i]) $$</p><h3 id="13-python代码"><a class="markdownIt-Anchor" href="#13-python代码"></a> 1.3 python代码</h3><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> npn <span class="token operator">=</span> <span class="token number">5</span>w_max <span class="token operator">=</span> <span class="token number">10</span>w <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span>v <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">18</span> <span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span>dp <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span>n <span class="token punctuation">,</span>w_max <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>dtype <span class="token operator">=</span> np<span class="token punctuation">.</span><span class="token builtin">int</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>w_max <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> j <span class="token operator">-</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">:</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>w_max<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">#43</span></code></pre><h3 id="14-算法优化"><a class="markdownIt-Anchor" href="#14-算法优化"></a> 1.4 算法优化</h3><p>我们可以看到，这样的0-1背包我们用时间复杂度为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>W</mi><mo separator="true">⋅</mo><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(W·N)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="mpunct">⋅</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span></span>就可以解决，那么当<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>W</mi><mrow><mi>m</mi><mi>a</mi><mi>x</mi></mrow></msub></mrow><annotation encoding="application/x-tex">W_{max}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>很大的时候，虽然时间复杂度是足够的，但是空间复杂度依旧为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>W</mi><mo separator="true">⋅</mo><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(W·N)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="mpunct">⋅</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span></span>，这就导致了二维数组可能会超出内存限制。</p><p>实际上，我们不难发现这样一个二维数组是从上至下一层一层进行的（上面的表格是从左至右），在每次进行下一层计算的时候，只有上一层的数据是有用的，其余的数据就没有任何作用了。即，<code>dp[i][j]</code>的值只与<code>dp[i-1][0]… … dp[i-1][j]</code>是有关系的。</p><p>因此，我们可以利用这个特性，采用滚动数组的方法对空间复杂度进行优化，使其从二维变为长度为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>W</mi><mrow><mi>m</mi><mi>a</mi><mi>x</mi></mrow></msub></mrow><annotation encoding="application/x-tex">W_{max}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>的一维数组。这种方法在动态规划中是一种常见的策略。</p><p>至于为什么是一维数组，而不是两行数组(<code>dp[i][j]</code>与<code>dp[i-1][j]</code>)，我们只需要在循环j的时候做<strong>逆向计算</strong>，从最后一个物品往前推，这样就可以避免上一组数据被覆盖掉。（仔细想一想为什么）</p><p>优化后的部分代码如下：</p><pre class="language-python" data-language="python"><code class="language-python">dp <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>w_max <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>dtype <span class="token operator">=</span> np<span class="token punctuation">.</span><span class="token builtin">int</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>w_max<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> j <span class="token operator">-</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">:</span>            dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>j<span class="token operator">-</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><h2 id="完全背包-unbounded-knapsack-problem"><a class="markdownIt-Anchor" href="#完全背包-unbounded-knapsack-problem"></a> 完全背包 (Unbounded Knapsack Problem)</h2><h3 id="21-问题描述"><a class="markdownIt-Anchor" href="#21-问题描述"></a> 2.1 问题描述</h3><p>完全背包与0-1背包唯一的区别在于完全背包中每种物品可以有无限多个。</p><h3 id="22-问题分析"><a class="markdownIt-Anchor" href="#22-问题分析"></a> 2.2 问题分析</h3><p>对于完全背包问题，我们很自然的就能想到设置一个$$性价比=\frac{V_i}{W_i}$$，这样一来只需要不停的装性价比最高的商品就能获得最优解。</p><p>然而，事实上这样的作法很多时候并不能得到最高的答案，当背包即将装满但还有一定空余时（没办法再装下一个的时候），装性价比最高的商品不见得比装性价比不那么高但是能将背包装满的商品。</p><p>事实上，上面的想法是完全可以进行下去的，只是稍稍麻烦一点。我们依旧围绕0-1背包的角度思考，只需要稍加修改即可。依旧是上一组数据，只不过每个物品可以无限拿取。</p><table><thead><tr><th style="text-align:left">N=5</th><th style="text-align:left">1</th><th style="text-align:left">2</th><th style="text-align:left">3</th><th style="text-align:left">4</th><th style="text-align:left">5</th></tr></thead><tbody><tr><td style="text-align:left">Weight</td><td style="text-align:left">1</td><td style="text-align:left">3</td><td style="text-align:left">4</td><td style="text-align:left">5</td><td style="text-align:left">2</td></tr><tr><td style="text-align:left">Value</td><td style="text-align:left">5</td><td style="text-align:left">10</td><td style="text-align:left">18</td><td style="text-align:left">20</td><td style="text-align:left">7</td></tr></tbody></table><p>对于完全背包问题，我们依旧是做一个选择，装与不装第<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span></span></span></span>件物品：</p><ul><li>不把物品<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span></span></span></span>装入背包：<code>dp[i][j]=dp[i-1][j]</code></li><li>把物品<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span></span></span></span>装入背包：<code>dp[i][j]=dp[i][j-w[i]] + v[i]</code></li></ul><p>(相比于0-1背包，唯一的区别就是<code>dp[i][j]=dp[i-1][j-w[i]] + v[i]</code></p><p>这里肯定有很多小伙伴一脸懵逼，不妨停下来多思考思考。我在写这个文章的时候在这里也停顿了很久，不知道如何言简意赅的来阐述这样的思路。</p><p>0-1背包当取走第<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span></span></span></span>个物品时，需要找到第<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">i-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.74285em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>个物品的最优解中，当取走第<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span></span></span></span>个物品时，它也可以再次取走自己，所以只需要找到第<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span></span></span></span>个物品的最优解即可。</p><p>因此，完全背包的状态转移方程为：$$<br>dp[i][j]=max(dp[i-1][j],\ dp[i][j-w[i]] + v[i])</p><h3 id="23-算法优化"><a class="markdownIt-Anchor" href="#23-算法优化"></a> 2.3 算法优化</h3><p>对于完全背包依旧可以优化空间复杂度，如同0-1背包一样将其压缩到一维数组。唯一的不同点在于完全背包的滚动数组在循环j的时候需要<strong>正向计算</strong>。从第一个物品往后推，这样就可以避免上一组数据被覆盖掉。（仔细想一想为什么）</p><p>优化后的部分代码如下：</p><pre class="language-python" data-language="python"><code class="language-python">dp <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span>w_max <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>dtype <span class="token operator">=</span> np<span class="token punctuation">.</span><span class="token builtin">int</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>w_max <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> j <span class="token operator">-</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">:</span>            dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>j<span class="token operator">-</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>一件很有趣的事情是，我们回过头来看<em>1.4节</em>的0-1背包优化算法，有没有发现他们长得十分相似呢？</p><p>此外，对于物品是无限的情况来说，如果有一个物品重量超过另一个物品然而价值又低于另一个物品，那么这样的物品就可以扔掉了。</p><p>我们只需要花费<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>N</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(N^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>的时间复杂度进行一次搜索，或许可以排除掉大量没有价值的商品，这样可以极大的节约动态规划的时间开销和空间开销。</p><h3 id="24-另一种思路"><a class="markdownIt-Anchor" href="#24-另一种思路"></a> 2.4 另一种思路</h3><p>我们回过头来看2.1节提到的思路，不妨在此基础上想一下，我们完全可以将完全背包转换成0-1背包。</p><p>虽然每件商品的数量是无限的，但是总量<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>W</mi><mrow><mi>m</mi><mi>a</mi><mi>x</mi></mrow></msub></mrow><annotation encoding="application/x-tex">W_{max}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>是有限的。因此我们可以计算出每件商品最多可以装入$$\frac{W_{max}}{W_i}$$个，这样一来，我们就拥有了有限多个商品。</p><p>当然，这种思路根本谈不上优化，因为其完全没有降低时间复杂度和空间复杂度，只是提供了另一种思路罢了。</p><pre class="language-python" data-language="python"><code class="language-python">dp <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span>n <span class="token punctuation">,</span>w_max <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>dtype <span class="token operator">=</span> np<span class="token punctuation">.</span><span class="token builtin">int</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> w_max <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> k <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> w_max<span class="token operator">//</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> j <span class="token operator">-</span> k <span class="token operator">*</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">:</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> k <span class="token operator">*</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> k <span class="token operator">*</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>更高效的做法是使用二进制，即将每种物品的<strong>取的个数</strong>都用$$V_i=\sum2^i\quad 0\leq i\leq\log_2V_i$$来表示（这是一个常识，任何数字都可以分解成以<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn></mrow><annotation encoding="application/x-tex">2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span></span></span></span>为指数的数组），如<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>13</mn></mrow><annotation encoding="application/x-tex">13</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">3</span></span></span></span>，我们可以表示为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>13</mn><mo>=</mo><msup><mn>2</mn><mn>0</mn></msup><mo>+</mo><msup><mn>2</mn><mn>2</mn></msup><mo>+</mo><msup><mn>2</mn><mn>3</mn></msup></mrow><annotation encoding="application/x-tex">13= 2^0 + 2^2 +2^3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">3</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span></span></span></span>.</p><p>我们的目的就是要找出第i件物品要取几个好，那么与其用传统的方法每次取一个，然后询问取好呢还是不取好呢，不如用二进制的方法来代替。</p><p>举例说明，第一件物品最多可以取<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>13</mn></mrow><annotation encoding="application/x-tex">13</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">3</span></span></span></span>个，假设取<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>7</mn></mrow><annotation encoding="application/x-tex">7</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">7</span></span></span></span>个是最优解，那么我们第一次询问取<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mn>0</mn></msup></mrow><annotation encoding="application/x-tex">2^0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span></span></span></span></span></span></span></span>个该物品好不好，然后询问<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mn>1</mn></msup><mo separator="true">,</mo><msup><mn>2</mn><mn>2</mn></msup><mo separator="true">,</mo><msup><mn>2</mn><mn>3</mn></msup><mo>…</mo><mo>…</mo></mrow><annotation encoding="application/x-tex">2^1,2^2,2^3… …</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.008548em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">…</span></span></span></span>，最终得到了 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mn>0</mn></msup><mo>+</mo><msup><mn>2</mn><mn>2</mn></msup><mo>+</mo><msup><mn>2</mn><mn>1</mn></msup><mo>=</mo><mn>7</mn></mrow><annotation encoding="application/x-tex">2^0 +2^2+2^1=7</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">7</span></span></span></span>这样的一个结果，我们只需要询问<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>4</mn></mrow><annotation encoding="application/x-tex">4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">4</span></span></span></span>次而非<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>13</mn></mrow><annotation encoding="application/x-tex">13</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">3</span></span></span></span>次，这是一个从<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>降到<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>log</mi><mo>⁡</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">\log n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span></span></span></span>级别的优化。</p><p>现在，小伙伴们可能已经彻底蒙圈了，或许能稍稍理解这样的思想，但是却怎么也写不出来，没关系，只要稍微理解以上的思路就好，我们先来看下一节。</p><h2 id="多重背包bounded-knapsack-problem"><a class="markdownIt-Anchor" href="#多重背包bounded-knapsack-problem"></a> 多重背包(bounded knapsack problem)</h2><h3 id="31-问题描述"><a class="markdownIt-Anchor" href="#31-问题描述"></a> 3.1 问题描述</h3><p>多重背包与前面的完全背包的不同点在于每种物品是有限多个。</p><h3 id="32-问题分析"><a class="markdownIt-Anchor" href="#32-问题分析"></a> 3.2 问题分析</h3><p>我们在<em>2.4节</em>中提到，完全背包每种物品其实也是有上限的，即加和不应当超过背包的最大承载重量。那么，既然完全背包可以转化成0-1背包问题进行求解，多重背包自然也可以。</p><p>我们依旧是分为两个部分，装与不装。</p><ul><li>不把物品<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span></span></span></span>装入背包：<code>dp[i][j]=dp[i-1][j]</code></li><li>把物品<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span></span></span></span>装入背包：因为每种物品有数量限制，因此我们需要在限制数量中找到最大的价值，此时<code>dp[i][j]=dp[i-1][j-k*w[i]] + k*v[i-1]</code></li></ul><p>因此，状态转移方程为：$$dp[i][j]=max(dp[i-1][j],\ dp[i][j-k<em>w[i]] + k</em>v[i])$$</p><h3 id="33-python代码"><a class="markdownIt-Anchor" href="#33-python代码"></a> 3.3 python代码</h3><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> npn <span class="token operator">=</span> <span class="token number">5</span>w_max <span class="token operator">=</span> <span class="token number">10</span>w <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span>    <span class="token comment">#weight</span>v <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">18</span> <span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span> <span class="token comment">#value</span>maxx <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token comment">#maximum number</span>dp <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span>n <span class="token punctuation">,</span>w_max <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>dtype <span class="token operator">=</span> np<span class="token punctuation">.</span><span class="token builtin">int</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> w_max <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> k <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">min</span><span class="token punctuation">(</span>w_max<span class="token operator">//</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> maxx<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> j <span class="token operator">-</span> k <span class="token operator">*</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">:</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>                dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> k <span class="token operator">*</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> k <span class="token operator">*</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>w_max<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">#42</span></code></pre><h3 id="34-算法优化"><a class="markdownIt-Anchor" href="#34-算法优化"></a> 3.4 算法优化</h3><p>无论是完全背包还是多重背包，都存在着一种优化方式，就是2进制优化。</p>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> algorithm </tag>
            
            <tag> 背包问题 </tag>
            
            <tag> DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BFS简介</title>
      <link href="/2022/03/10/BFS/"/>
      <url>/2022/03/10/BFS/</url>
      
        <content type="html"><![CDATA[<h2 id="bfs基本概念"><a class="markdownIt-Anchor" href="#bfs基本概念"></a> BFS基本概念</h2><p><strong>广度优先算法</strong>（Breadth-First-Search），简称BFS，是一种图形搜索演算法，最糟糕的情况算法时间复杂度为O(V+E)。简单的说，BFS是从根节点开始，沿着树的宽度遍历树的节点，如果发现目标，则演算终止。</p><h2 id="经典例题"><a class="markdownIt-Anchor" href="#经典例题"></a> <strong>经典例题</strong></h2><hr><h3 id="1-填涂颜色"><a class="markdownIt-Anchor" href="#1-填涂颜色"></a> 1. 填涂颜色</h3><h4 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述</h4><p>由数字<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0</mn></mrow><annotation encoding="application/x-tex">0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>组成的方阵中，有一任意形状闭合圈，闭合圈由数字<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>构成，围圈时只走上下左右<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>4</mn></mrow><annotation encoding="application/x-tex">4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">4</span></span></span></span>个方向。现要求把闭合圈内的所有空间都填写成<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn></mrow><annotation encoding="application/x-tex">2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span></span></span></span>。例如：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>6</mn><mo>×</mo><mn>6</mn></mrow><annotation encoding="application/x-tex">6×6</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">6</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">6</span></span></span></span>的方阵<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mi>n</mi><mo>=</mo><mn>6</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(n=6)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">6</span><span class="mclose">)</span></span></span></span>，涂色前和涂色后的方阵如下：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span><span class="token number">0</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span><span class="token number">0</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">1</span><span class="token number">1</span> <span class="token number">1</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">1</span><span class="token number">1</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">1</span><span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span>-----------<span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span><span class="token number">0</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span><span class="token number">0</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">1</span><span class="token number">1</span> <span class="token number">1</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">1</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">1</span><span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span></code></pre><h4 id="输入格式"><a class="markdownIt-Anchor" href="#输入格式"></a> 输入格式</h4><p>每组测试数据第一行一个整数<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo stretchy="false">(</mo><mn>1</mn><mo>≤</mo><mi>n</mi><mo>≤</mo><mn>30</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">n(1≤n≤30)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">n</span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">3</span><span class="mord">0</span><span class="mclose">)</span></span></span></span></p><p>接下来<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>行，由<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0</mn></mrow><annotation encoding="application/x-tex">0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>和<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>组成的<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>×</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">n×n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>的方阵。</p><p>方阵内只有一个闭合圈，圈内至少有一个<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0</mn></mrow><annotation encoding="application/x-tex">0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>。</p><h4 id="输出格式"><a class="markdownIt-Anchor" href="#输出格式"></a> 输出格式</h4><p>已经填好数字<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn></mrow><annotation encoding="application/x-tex">2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span></span></span></span>的完整方阵。</p><h4 id="输入输出样例"><a class="markdownIt-Anchor" href="#输入输出样例"></a> 输入输出样例</h4><p><strong>输入 #1</strong></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token number">6</span><span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span><span class="token number">0</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span><span class="token number">0</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">1</span><span class="token number">1</span> <span class="token number">1</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">1</span><span class="token number">1</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">1</span><span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span></code></pre><p><strong>输出 #1</strong></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span><span class="token number">0</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span><span class="token number">0</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">1</span><span class="token number">1</span> <span class="token number">1</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">1</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">1</span><span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span></code></pre><h4 id="说明提示"><a class="markdownIt-Anchor" href="#说明提示"></a> 说明/提示</h4><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>≤</mo><mi>n</mi><mo>≤</mo><mn>30</mn></mrow><annotation encoding="application/x-tex">1≤n≤30</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">3</span><span class="mord">0</span></span></span></span></p><h4 id="答案解析"><a class="markdownIt-Anchor" href="#答案解析"></a> 答案解析</h4><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">int</span> num<span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> c<span class="token punctuation">,</span>i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>k<span class="token punctuation">;</span>    cin<span class="token operator">>></span>c<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>c<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>c<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        cin<span class="token operator">>></span>num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>        <span class="token comment">//先认为所有的0都应该被修改,并且真的把它修改成了2;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>c<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token comment">//边角上的'2'其实本来不应该被修改的,那我们把他们改回去,改成0</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>num<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span>num<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span>num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>num<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span>num<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span>num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//然后来寻找与这些零相邻的'2',它们其实也是被改错了的</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>k<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>k<span class="token operator">&lt;=</span><span class="token number">100</span><span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//广度优先搜索 阈值=100 (事实上不需要那么多)</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>c<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>c<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">||</span><span class="token operator">!</span>num<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">||</span><span class="token operator">!</span>num<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">||</span><span class="token operator">!</span>num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>     <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>c<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>c<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>        cout<span class="token operator">&lt;&lt;</span>num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>        cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>当然，本题仍可以用DFS来做：</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> x <span class="token operator">&lt;=</span> n <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> y <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> y <span class="token operator">&lt;=</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">||</span> a<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span>         <span class="token keyword">return</span> <span class="token punctuation">;</span>        <span class="token keyword">else</span>        <span class="token punctuation">&#123;</span>        a<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token function">dfs</span><span class="token punctuation">(</span>x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token function">dfs</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span> i<span class="token punctuation">)</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span> j<span class="token punctuation">)</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span> i<span class="token punctuation">)</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span> j<span class="token punctuation">)</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span>     a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>     a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span> i<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span> j<span class="token punctuation">)</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>注意：dfs在先搜索的时候应该搜索到矩阵的外面一圈<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mn>0</mn><mi mathvariant="normal">，</mi><mi>n</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(0， n + 1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">0</span><span class="mord cjk_fallback">，</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span> 否则的话就会出现错误！(边缘处被涂色)</p><hr><h3 id="01迷宫"><a class="markdownIt-Anchor" href="#01迷宫"></a> 01迷宫</h3><h4 id="题目描述-2"><a class="markdownIt-Anchor" href="#题目描述-2"></a> 题目描述</h4><p>有一个仅由数字<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0</mn></mrow><annotation encoding="application/x-tex">0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>与<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>组成的<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>×</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">n×n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>格迷宫。若你位于一格<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0</mn></mrow><annotation encoding="application/x-tex">0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>上，那么你可以移动到相邻<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>4</mn></mrow><annotation encoding="application/x-tex">4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">4</span></span></span></span>格中的某一格<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>上，同样若你位于一格<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>上，那么你可以移动到相邻<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>4</mn></mrow><annotation encoding="application/x-tex">4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">4</span></span></span></span>格中的某一格<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0</mn></mrow><annotation encoding="application/x-tex">0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>上。</p><p>你的任务是：对于给定的迷宫，询问从某一格开始能移动到多少个格子（包含自身）。</p><h4 id="输入格式-2"><a class="markdownIt-Anchor" href="#输入格式-2"></a> 输入格式</h4><p>第<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>行为两个正整数<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo separator="true">,</mo><mi>m</mi></mrow><annotation encoding="application/x-tex">n,m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">n</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">m</span></span></span></span>。</p><p>下面<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>行，每行*<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>*个字符，字符只可能是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0</mn></mrow><annotation encoding="application/x-tex">0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>或者<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>，字符之间没有空格。</p><p>接下来<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">m</span></span></span></span>行，每行<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn></mrow><annotation encoding="application/x-tex">2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span></span></span></span>个用空格分隔的正整数<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi><mo separator="true">,</mo><mi>j</mi></mrow><annotation encoding="application/x-tex">i,j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span></span></span></span>，对应了迷宫中第<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span></span></span></span>行第<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>j</mi></mrow><annotation encoding="application/x-tex">j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span></span></span></span>列的一个格子，询问从这一格开始能移动到多少格。</p><h4 id="输出格式-2"><a class="markdownIt-Anchor" href="#输出格式-2"></a> 输出格式</h4><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">m</span></span></span></span>行，对于每个询问输出相应答案。</p><h4 id="输入输出样例-2"><a class="markdownIt-Anchor" href="#输入输出样例-2"></a> 输入输出样例</h4><p><strong>输入 #1</strong></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token number">2</span> <span class="token number">2</span>01<span class="token number">10</span><span class="token number">1</span> <span class="token number">1</span><span class="token number">2</span> <span class="token number">2</span></code></pre><p><strong>输出 #1</strong></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token number">4</span><span class="token number">4</span></code></pre><h4 id="说明提示-2"><a class="markdownIt-Anchor" href="#说明提示-2"></a> 说明/提示</h4><p>对于20%的数据，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>≤</mo><mn>10</mn></mrow><annotation encoding="application/x-tex">n≤10</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">0</span></span></span></span>；</p><p>对于40%的数据，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>≤</mo><mn>50</mn></mrow><annotation encoding="application/x-tex">n≤50</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">5</span><span class="mord">0</span></span></span></span>；</p><p>对于50%的数据，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi><mo>≤</mo><mn>5</mn></mrow><annotation encoding="application/x-tex">m≤5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">5</span></span></span></span>；</p><p>对于60%的数据，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>∗</mo><mo>≤</mo><mn>100</mn><mo separator="true">,</mo><mo>∗</mo><mi>m</mi><mo>≤</mo><mn>100</mn></mrow><annotation encoding="application/x-tex">n*≤100,*m≤100</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">n</span><span class="mord">∗</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">∗</span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span></span></span></span>；</p><p>对于100%的数据，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>∗</mo><mo>≤</mo><mn>1000</mn><mo separator="true">,</mo><mo>∗</mo><mi>m</mi><mo>≤</mo><mn>100000</mn></mrow><annotation encoding="application/x-tex">n*≤1000,*m≤100000</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">n</span><span class="mord">∗</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">∗</span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span></span></span></span>。</p><h4 id="答案解析-2"><a class="markdownIt-Anchor" href="#答案解析-2"></a> 答案解析</h4><p>BFS，70分代码：</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring></span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">mg</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> x<span class="token punctuation">,</span>y<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>bool map<span class="token punctuation">[</span><span class="token number">1001</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1001</span><span class="token punctuation">]</span><span class="token punctuation">;</span>bool flag<span class="token punctuation">[</span><span class="token number">1001</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1001</span><span class="token punctuation">]</span><span class="token punctuation">;</span>mg q<span class="token punctuation">[</span><span class="token number">1000001</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> m<span class="token punctuation">,</span>n<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">bfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cin<span class="token operator">>></span>n<span class="token operator">>></span>m<span class="token punctuation">;</span><span class="token keyword">char</span> ch<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cin<span class="token operator">>></span>ch<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>ch<span class="token operator">==</span><span class="token char">'1'</span><span class="token punctuation">)</span>map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>true<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> x<span class="token punctuation">,</span>y<span class="token punctuation">;</span>cin<span class="token operator">>></span>x<span class="token operator">>></span>y<span class="token punctuation">;</span><span class="token function">bfs</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">bfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> dx<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> dy<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> ans<span class="token punctuation">,</span>f<span class="token punctuation">,</span>r<span class="token punctuation">,</span>newx<span class="token punctuation">,</span>newy<span class="token punctuation">;</span>    ans<span class="token operator">=</span>f<span class="token operator">=</span>r<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    q<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token operator">=</span>x<span class="token punctuation">;</span>    q<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token operator">=</span>y<span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>flag<span class="token punctuation">,</span>false<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    flag<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span>true<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>f<span class="token operator">&lt;=</span>r<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>    newx<span class="token operator">=</span>q<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token operator">+</span>dx<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    newy<span class="token operator">=</span>q<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token operator">+</span>dy<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>newx<span class="token operator">></span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> newx<span class="token operator">&lt;=</span>n <span class="token operator">&amp;&amp;</span> newy<span class="token operator">></span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> newy<span class="token operator">&lt;=</span>n <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>flag<span class="token punctuation">[</span>newx<span class="token punctuation">]</span><span class="token punctuation">[</span>newy<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>map<span class="token punctuation">[</span>q<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>q<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> map<span class="token punctuation">[</span>newx<span class="token punctuation">]</span><span class="token punctuation">[</span>newy<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>map<span class="token punctuation">[</span>q<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>q<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> map<span class="token punctuation">[</span>newx<span class="token punctuation">]</span><span class="token punctuation">[</span>newy<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>    r<span class="token operator">++</span><span class="token punctuation">;</span>    ans<span class="token operator">++</span><span class="token punctuation">;</span>    flag<span class="token punctuation">[</span>newx<span class="token punctuation">]</span><span class="token punctuation">[</span>newy<span class="token punctuation">]</span><span class="token operator">=</span>true<span class="token punctuation">;</span>    q<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token operator">=</span>newx<span class="token punctuation">;</span>    q<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token operator">=</span>newy<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>f<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>cout<span class="token operator">&lt;&lt;</span>ans<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> </code></pre><p>有三个点TEL，所以对代码进行一定时间优化，学名叫记忆化搜索，以时间换空间，优化如下：</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring></span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">mg</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> x<span class="token punctuation">,</span>y<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>bool map<span class="token punctuation">[</span><span class="token number">1001</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1001</span><span class="token punctuation">]</span><span class="token punctuation">;</span>bool flag<span class="token punctuation">[</span><span class="token number">1001</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1001</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">1001</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1001</span><span class="token punctuation">]</span><span class="token punctuation">;</span>mg q<span class="token punctuation">[</span><span class="token number">5000001</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> m<span class="token punctuation">,</span>n<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">bfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cin<span class="token operator">>></span>n<span class="token operator">>></span>m<span class="token punctuation">;</span><span class="token keyword">char</span> ch<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cin<span class="token operator">>></span>ch<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>ch<span class="token operator">==</span><span class="token char">'1'</span><span class="token punctuation">)</span>map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>true<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> x<span class="token punctuation">,</span>y<span class="token punctuation">;</span>cin<span class="token operator">>></span>x<span class="token operator">>></span>y<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token function">bfs</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span>cout<span class="token operator">&lt;&lt;</span>a<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">bfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> dx<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> dy<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> ans<span class="token punctuation">,</span>f<span class="token punctuation">,</span>r<span class="token punctuation">,</span>newx<span class="token punctuation">,</span>newy<span class="token punctuation">;</span>    ans<span class="token operator">=</span>f<span class="token operator">=</span>r<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    q<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token operator">=</span>x<span class="token punctuation">;</span>    q<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token operator">=</span>y<span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>flag<span class="token punctuation">,</span>false<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    flag<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span>true<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>f<span class="token operator">&lt;=</span>r<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>    newx<span class="token operator">=</span>q<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token operator">+</span>dx<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    newy<span class="token operator">=</span>q<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token operator">+</span>dy<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>newx<span class="token operator">></span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> newx<span class="token operator">&lt;=</span>n <span class="token operator">&amp;&amp;</span> newy<span class="token operator">></span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> newy<span class="token operator">&lt;=</span>n <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>flag<span class="token punctuation">[</span>newx<span class="token punctuation">]</span><span class="token punctuation">[</span>newy<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>map<span class="token punctuation">[</span>q<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>q<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> map<span class="token punctuation">[</span>newx<span class="token punctuation">]</span><span class="token punctuation">[</span>newy<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>map<span class="token punctuation">[</span>q<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>q<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> map<span class="token punctuation">[</span>newx<span class="token punctuation">]</span><span class="token punctuation">[</span>newy<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>    r<span class="token operator">++</span><span class="token punctuation">;</span>    ans<span class="token operator">++</span><span class="token punctuation">;</span>    flag<span class="token punctuation">[</span>newx<span class="token punctuation">]</span><span class="token punctuation">[</span>newy<span class="token punctuation">]</span><span class="token operator">=</span>true<span class="token punctuation">;</span>    q<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token operator">=</span>newx<span class="token punctuation">;</span>    q<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token operator">=</span>newy<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>f<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>ans<span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span>ans<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> </code></pre><p>当然，本题也可以用DFS来做，读者可以先自行写一写，不要看下面的答案：</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring></span></span><span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">;</span><span class="token keyword">int</span> ans<span class="token punctuation">[</span><span class="token number">100002</span><span class="token punctuation">]</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span><span class="token number">1002</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1002</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">char</span> s<span class="token punctuation">[</span><span class="token number">1002</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1002</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> r<span class="token punctuation">,</span><span class="token keyword">int</span> c<span class="token punctuation">,</span><span class="token keyword">int</span> z<span class="token punctuation">,</span><span class="token keyword">int</span> lll<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>r<span class="token operator">&lt;</span><span class="token number">0</span> <span class="token operator">||</span> r<span class="token operator">>=</span>n <span class="token operator">||</span> c<span class="token operator">&lt;</span><span class="token number">0</span> <span class="token operator">||</span> c<span class="token operator">>=</span>n <span class="token operator">||</span> f<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> s<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token operator">-</span><span class="token char">'0'</span><span class="token operator">!=</span>z<span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    f<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token operator">=</span>lll<span class="token punctuation">;</span>    ans<span class="token punctuation">[</span>lll<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token function">dfs</span><span class="token punctuation">(</span>r<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>c<span class="token punctuation">,</span><span class="token operator">!</span>z<span class="token punctuation">,</span>lll<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">dfs</span><span class="token punctuation">(</span>r<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>c<span class="token punctuation">,</span><span class="token operator">!</span>z<span class="token punctuation">,</span>lll<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">dfs</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span>c<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">!</span>z<span class="token punctuation">,</span>lll<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">dfs</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span>c<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">!</span>z<span class="token punctuation">,</span>lll<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">,</span><span class="token operator">&amp;</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>        x<span class="token operator">--</span><span class="token punctuation">;</span>        y<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>s<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">-</span><span class="token char">'0'</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>             ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>ans<span class="token punctuation">[</span>f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>E</mi><mi>N</mi><mi>D</mi></mrow><annotation encoding="application/x-tex">END</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span></span></span></span></span></p>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> algorithm </tag>
            
            <tag> BFS </tag>
            
            <tag> DFS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DFS简介</title>
      <link href="/2022/03/10/DFS/"/>
      <url>/2022/03/10/DFS/</url>
      
        <content type="html"><![CDATA[<h2 id="dfs基本概念"><a class="markdownIt-Anchor" href="#dfs基本概念"></a> DFS基本概念</h2><p><strong>深度优先搜索算法</strong>（Depth First Search）：一种用于遍历或搜索树或图的算法。 沿着树的深度遍历树的节点，尽可能深的搜索树的分支。 属于盲目搜索,最糟糕的情况算法时间复杂度为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>。</p><hr><h2 id="经典例题"><a class="markdownIt-Anchor" href="#经典例题"></a> 经典例题</h2><h3 id="p1706全排列问题"><a class="markdownIt-Anchor" href="#p1706全排列问题"></a> P1706全排列问题</h3><p>注：题目来源自<a href="https://www.luogu.com.cn/problem/P1706">洛谷</a>。</p><h4 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述</h4><p>输出自然数 1 到 n 所有不重复的排列，即 <em>n</em> 的全排列，要求所产生的任一数字序列中不允许出现重复的数字。</p><h4 id="输入格式"><a class="markdownIt-Anchor" href="#输入格式"></a> 输入格式</h4><p>一个整数 n。</p><h4 id="输出格式"><a class="markdownIt-Anchor" href="#输出格式"></a> 输出格式</h4><p>由1∼<em>n</em> 组成的所有不重复的数字序列，每行一个序列。</p><p>每个数字保留 5 个场宽。</p><h4 id="输入输出样例"><a class="markdownIt-Anchor" href="#输入输出样例"></a> 输入输出样例</h4><p><strong>输入 #1</strong></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token number">3</span></code></pre><p><strong>输出 #1</strong></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token number">1</span>    <span class="token number">2</span>    <span class="token number">3</span><span class="token number">1</span>    <span class="token number">3</span>    <span class="token number">2</span><span class="token number">2</span>    <span class="token number">1</span>    <span class="token number">3</span><span class="token number">2</span>    <span class="token number">3</span>    <span class="token number">1</span><span class="token number">3</span>    <span class="token number">1</span>    <span class="token number">2</span><span class="token number">3</span>    <span class="token number">2</span>    <span class="token number">1</span></code></pre><h4 id="说明提示"><a class="markdownIt-Anchor" href="#说明提示"></a> 说明/提示</h4><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>≤</mo><mi>n</mi><mo>≤</mo><mn>9</mn></mrow><annotation encoding="application/x-tex">1≤n≤9</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">9</span></span></span></span></p><h4 id="答案解析"><a class="markdownIt-Anchor" href="#答案解析"></a> 答案解析</h4><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>using namespace std<span class="token punctuation">;</span>bool vis<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//标记数字是否出现</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//全排列数组</span><span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">==</span> n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token function">printf</span> <span class="token punctuation">(</span><span class="token string">"%5d"</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>vis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            vis<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            a<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//递归</span>            vis<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//回溯</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    cin<span class="token operator">>></span>n<span class="token punctuation">;</span>     <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><hr><h3 id="p1238-走迷宫"><a class="markdownIt-Anchor" href="#p1238-走迷宫"></a> P1238 走迷宫</h3><p>注：题目来源<a href="https://www.luogu.com.cn/problem/P1238">洛谷</a>。</p><h4 id="题目描述-2"><a class="markdownIt-Anchor" href="#题目描述-2"></a> 题目描述</h4><p>有一个 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi><mo>×</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">m\times n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span> 格的迷宫(表示有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">m</span></span></span></span> 行、<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>列)，其中有可走的也有不可走的，如果用 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> 表示可以走，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0</mn></mrow><annotation encoding="application/x-tex">0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span> 表示不可以走，文件读入这 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi><mo>×</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">m\times n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span> 个数据和起始点、结束点（起始点和结束点都是用两个数据来描述的，分别表示这个点的行号和列号）。现在要你编程找出所有可行的道路，要求所走的路中没有重复的点，走时只能是上下左右四个方向。如果一条路都不可行，则输出相应信息（用 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">−</span><span class="mord">1</span></span></span></span> 表示无路）。</p><p>优先顺序：左上右下。<strong>数据保证随机生成。</strong></p><h4 id="输入格式-2"><a class="markdownIt-Anchor" href="#输入格式-2"></a> 输入格式</h4><p>第一行是两个数 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi><mo separator="true">,</mo><mi>n</mi><mo stretchy="false">(</mo><mn>1</mn><mo>&lt;</mo><mi>m</mi><mo separator="true">,</mo><mi>n</mi><mo>&lt;</mo><mn>15</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">m,n(1&lt;m,n&lt;15)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">m</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7335400000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">m</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mord">5</span><span class="mclose">)</span></span></span></span>，接下来是 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">m</span></span></span></span>行 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span> 列由<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> 和$ 0$ 组成的数据，最后两行是起始点和结束点。</p><h4 id="输出格式-2"><a class="markdownIt-Anchor" href="#输出格式-2"></a> 输出格式</h4><p>所有可行的路径，描述一个点时用 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(x,y)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span></span></span></span> 的形式，除开始点外，其他的都要用 <code>-&gt;</code> 表示方向。</p><p>如果没有一条可行的路则输出 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">−</span><span class="mord">1</span></span></span></span>。</p><h4 id="输入输出样例-2"><a class="markdownIt-Anchor" href="#输入输出样例-2"></a> 输入输出样例</h4><p><strong>输入 #1</strong></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token number">5</span> <span class="token number">6</span><span class="token number">1</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">0</span> <span class="token number">1</span><span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span><span class="token number">0</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">0</span><span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">0</span><span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">1</span><span class="token number">1</span> <span class="token number">1</span><span class="token number">5</span> <span class="token number">6</span></code></pre><p><strong>输出 #1</strong></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span><span class="token number">1,1</span><span class="token punctuation">)</span>-<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">2,1</span><span class="token punctuation">)</span>-<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">2,2</span><span class="token punctuation">)</span>-<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">2,3</span><span class="token punctuation">)</span>-<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">2,4</span><span class="token punctuation">)</span>-<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">2,5</span><span class="token punctuation">)</span>-<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">3,5</span><span class="token punctuation">)</span>-<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">3,4</span><span class="token punctuation">)</span>-<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">3,3</span><span class="token punctuation">)</span>-<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">4,3</span><span class="token punctuation">)</span>-<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">4,4</span><span class="token punctuation">)</span>-<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">4,5</span><span class="token punctuation">)</span>-<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">5,5</span><span class="token punctuation">)</span>-<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">5,6</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1,1</span><span class="token punctuation">)</span>-<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">2,1</span><span class="token punctuation">)</span>-<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">2,2</span><span class="token punctuation">)</span>-<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">2,3</span><span class="token punctuation">)</span>-<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">2,4</span><span class="token punctuation">)</span>-<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">2,5</span><span class="token punctuation">)</span>-<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">3,5</span><span class="token punctuation">)</span>-<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">3,4</span><span class="token punctuation">)</span>-<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">4,4</span><span class="token punctuation">)</span>-<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">4,5</span><span class="token punctuation">)</span>-<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">5,5</span><span class="token punctuation">)</span>-<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">5,6</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1,1</span><span class="token punctuation">)</span>-<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">2,1</span><span class="token punctuation">)</span>-<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">2,2</span><span class="token punctuation">)</span>-<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">2,3</span><span class="token punctuation">)</span>-<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">2,4</span><span class="token punctuation">)</span>-<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">2,5</span><span class="token punctuation">)</span>-<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">3,5</span><span class="token punctuation">)</span>-<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">4,5</span><span class="token punctuation">)</span>-<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">5,5</span><span class="token punctuation">)</span>-<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">5,6</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1,1</span><span class="token punctuation">)</span>-<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">2,1</span><span class="token punctuation">)</span>-<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">2,2</span><span class="token punctuation">)</span>-<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">2,3</span><span class="token punctuation">)</span>-<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">2,4</span><span class="token punctuation">)</span>-<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">3,4</span><span class="token punctuation">)</span>-<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">3,3</span><span class="token punctuation">)</span>-<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">4,3</span><span class="token punctuation">)</span>-<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">4,4</span><span class="token punctuation">)</span>-<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">4,5</span><span class="token punctuation">)</span>-<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">5,5</span><span class="token punctuation">)</span>-<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">5,6</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1,1</span><span class="token punctuation">)</span>-<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">2,1</span><span class="token punctuation">)</span>-<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">2,2</span><span class="token punctuation">)</span>-<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">2,3</span><span class="token punctuation">)</span>-<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">2,4</span><span class="token punctuation">)</span>-<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">3,4</span><span class="token punctuation">)</span>-<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">3,5</span><span class="token punctuation">)</span>-<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">4,5</span><span class="token punctuation">)</span>-<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">5,5</span><span class="token punctuation">)</span>-<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">5,6</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1,1</span><span class="token punctuation">)</span>-<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">2,1</span><span class="token punctuation">)</span>-<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">2,2</span><span class="token punctuation">)</span>-<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">2,3</span><span class="token punctuation">)</span>-<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">2,4</span><span class="token punctuation">)</span>-<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">3,4</span><span class="token punctuation">)</span>-<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">4,4</span><span class="token punctuation">)</span>-<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">4,5</span><span class="token punctuation">)</span>-<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">5,5</span><span class="token punctuation">)</span>-<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">5,6</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1,1</span><span class="token punctuation">)</span>-<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">2,1</span><span class="token punctuation">)</span>-<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">2,2</span><span class="token punctuation">)</span>-<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">2,3</span><span class="token punctuation">)</span>-<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">3,3</span><span class="token punctuation">)</span>-<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">3,4</span><span class="token punctuation">)</span>-<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">2,4</span><span class="token punctuation">)</span>-<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">2,5</span><span class="token punctuation">)</span>-<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">3,5</span><span class="token punctuation">)</span>-<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">4,5</span><span class="token punctuation">)</span>-<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">5,5</span><span class="token punctuation">)</span>-<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">5,6</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1,1</span><span class="token punctuation">)</span>-<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">2,1</span><span class="token punctuation">)</span>-<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">2,2</span><span class="token punctuation">)</span>-<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">2,3</span><span class="token punctuation">)</span>-<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">3,3</span><span class="token punctuation">)</span>-<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">3,4</span><span class="token punctuation">)</span>-<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">3,5</span><span class="token punctuation">)</span>-<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">4,5</span><span class="token punctuation">)</span>-<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">5,5</span><span class="token punctuation">)</span>-<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">5,6</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1,1</span><span class="token punctuation">)</span>-<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">2,1</span><span class="token punctuation">)</span>-<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">2,2</span><span class="token punctuation">)</span>-<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">2,3</span><span class="token punctuation">)</span>-<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">3,3</span><span class="token punctuation">)</span>-<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">3,4</span><span class="token punctuation">)</span>-<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">4,4</span><span class="token punctuation">)</span>-<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">4,5</span><span class="token punctuation">)</span>-<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">5,5</span><span class="token punctuation">)</span>-<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">5,6</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1,1</span><span class="token punctuation">)</span>-<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">2,1</span><span class="token punctuation">)</span>-<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">2,2</span><span class="token punctuation">)</span>-<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">2,3</span><span class="token punctuation">)</span>-<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">3,3</span><span class="token punctuation">)</span>-<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">4,3</span><span class="token punctuation">)</span>-<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">4,4</span><span class="token punctuation">)</span>-<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">3,4</span><span class="token punctuation">)</span>-<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">2,4</span><span class="token punctuation">)</span>-<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">2,5</span><span class="token punctuation">)</span>-<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">3,5</span><span class="token punctuation">)</span>-<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">4,5</span><span class="token punctuation">)</span>-<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">5,5</span><span class="token punctuation">)</span>-<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">5,6</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1,1</span><span class="token punctuation">)</span>-<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">2,1</span><span class="token punctuation">)</span>-<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">2,2</span><span class="token punctuation">)</span>-<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">2,3</span><span class="token punctuation">)</span>-<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">3,3</span><span class="token punctuation">)</span>-<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">4,3</span><span class="token punctuation">)</span>-<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">4,4</span><span class="token punctuation">)</span>-<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">3,4</span><span class="token punctuation">)</span>-<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">3,5</span><span class="token punctuation">)</span>-<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">4,5</span><span class="token punctuation">)</span>-<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">5,5</span><span class="token punctuation">)</span>-<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">5,6</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1,1</span><span class="token punctuation">)</span>-<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">2,1</span><span class="token punctuation">)</span>-<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">2,2</span><span class="token punctuation">)</span>-<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">2,3</span><span class="token punctuation">)</span>-<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">3,3</span><span class="token punctuation">)</span>-<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">4,3</span><span class="token punctuation">)</span>-<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">4,4</span><span class="token punctuation">)</span>-<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">4,5</span><span class="token punctuation">)</span>-<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">5,5</span><span class="token punctuation">)</span>-<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">5,6</span><span class="token punctuation">)</span></code></pre><h4 id="说明提示-2"><a class="markdownIt-Anchor" href="#说明提示-2"></a> 说明/提示</h4><p>数据保证随机生成。事实上，如果 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>=</mo><mi>m</mi><mo>=</mo><mn>14</mn></mrow><annotation encoding="application/x-tex">n=m=14</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">4</span></span></span></span> 且每个位置都是 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>的话，有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>69450664761521361664274701548907358996488</mn></mrow><annotation encoding="application/x-tex">69450664761521361664274701548907358996488</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">6</span><span class="mord">9</span><span class="mord">4</span><span class="mord">5</span><span class="mord">0</span><span class="mord">6</span><span class="mord">6</span><span class="mord">4</span><span class="mord">7</span><span class="mord">6</span><span class="mord">1</span><span class="mord">5</span><span class="mord">2</span><span class="mord">1</span><span class="mord">3</span><span class="mord">6</span><span class="mord">1</span><span class="mord">6</span><span class="mord">6</span><span class="mord">4</span><span class="mord">2</span><span class="mord">7</span><span class="mord">4</span><span class="mord">7</span><span class="mord">0</span><span class="mord">1</span><span class="mord">5</span><span class="mord">4</span><span class="mord">8</span><span class="mord">9</span><span class="mord">0</span><span class="mord">7</span><span class="mord">3</span><span class="mord">5</span><span class="mord">8</span><span class="mord">9</span><span class="mord">9</span><span class="mord">6</span><span class="mord">4</span><span class="mord">8</span><span class="mord">8</span></span></span></span> 种路径。</p><h4 id="答案解析-2"><a class="markdownIt-Anchor" href="#答案解析-2"></a> 答案解析</h4><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1001</span><span class="token punctuation">;</span>bool map<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>bool visited<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> output<span class="token punctuation">[</span>N <span class="token operator">*</span> N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//stack</span><span class="token keyword">int</span> pointer<span class="token punctuation">;</span>bool solution<span class="token punctuation">;</span><span class="token comment">//for example, m=5,n=6</span><span class="token comment">//(2,3)==>(2-1)*n+3=9</span><span class="token comment">//(5,6)==>(5-1)*n+6=30</span><span class="token comment">//therefore, (x,y)==>(x-1)*n+y</span><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> m<span class="token punctuation">,</span> n<span class="token punctuation">,</span> start_x<span class="token punctuation">,</span> start_y<span class="token punctuation">,</span> end_x<span class="token punctuation">,</span> end_y<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cin <span class="token operator">>></span> m <span class="token operator">>></span> n<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>cin <span class="token operator">>></span> map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>cin <span class="token operator">>></span> start_x <span class="token operator">>></span> start_y<span class="token punctuation">;</span>cin <span class="token operator">>></span> end_x <span class="token operator">>></span> end_y<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">[</span>start_x<span class="token punctuation">]</span><span class="token punctuation">[</span>start_y<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"-1"</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">[</span>end_x<span class="token punctuation">]</span><span class="token punctuation">[</span>end_y<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"-1"</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token function">dfs</span><span class="token punctuation">(</span>start_x<span class="token punctuation">,</span>start_y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>solution<span class="token punctuation">)</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"-1"</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>x<span class="token operator">&lt;</span><span class="token number">1</span> <span class="token operator">||</span> y<span class="token operator">&lt;</span><span class="token number">1</span> <span class="token operator">||</span> x<span class="token operator">></span>m <span class="token operator">||</span> y<span class="token operator">></span> n<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>visited<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token operator">!</span>map<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">==</span> end_x <span class="token operator">&amp;&amp;</span> y <span class="token operator">==</span> end_y<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>solution <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> pointer<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token punctuation">(</span>output<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">%</span> n<span class="token punctuation">)</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"("</span> <span class="token operator">&lt;&lt;</span> output<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">/</span> n <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token string">","</span> <span class="token operator">&lt;&lt;</span> output<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">%</span> n <span class="token operator">&lt;&lt;</span> <span class="token string">")"</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"->"</span><span class="token punctuation">;</span><span class="token keyword">else</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"("</span> <span class="token operator">&lt;&lt;</span> output<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">/</span> n  <span class="token operator">&lt;&lt;</span> <span class="token string">","</span> <span class="token operator">&lt;&lt;</span> n <span class="token operator">&lt;&lt;</span> <span class="token string">")"</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"->"</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"("</span> <span class="token operator">&lt;&lt;</span> end_x <span class="token operator">&lt;&lt;</span> <span class="token string">","</span> <span class="token operator">&lt;&lt;</span> end_y <span class="token operator">&lt;&lt;</span> <span class="token string">")"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//++++++++++</span>visited<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> true<span class="token punctuation">;</span>output<span class="token punctuation">[</span>pointer<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> n <span class="token operator">+</span> y<span class="token punctuation">;</span>pointer<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//++++++++++</span><span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>visited<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token function">dfs</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">[</span>x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>visited<span class="token punctuation">[</span>x<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token function">dfs</span><span class="token punctuation">(</span>x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>visited<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token function">dfs</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">[</span>x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>visited<span class="token punctuation">[</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token function">dfs</span><span class="token punctuation">(</span>x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//----------</span>output<span class="token punctuation">[</span>pointer<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>pointer<span class="token operator">--</span><span class="token punctuation">;</span>visited<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> false<span class="token punctuation">;</span><span class="token comment">//----------</span><span class="token punctuation">&#125;</span></code></pre><hr><h3 id="连通块问题floodfill"><a class="markdownIt-Anchor" href="#连通块问题floodfill"></a> 连通块问题（floodfill）</h3><p>注：我忘了在哪找的题了。。。</p><h4 id="题目描述-3"><a class="markdownIt-Anchor" href="#题目描述-3"></a> 题目描述</h4><p>一个<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>×</mo><mi>m</mi></mrow><annotation encoding="application/x-tex">n \times m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">m</span></span></span></span>的方格图，一些格子被涂成了黑色，在方格图中被标为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>，白色格子标为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0</mn></mrow><annotation encoding="application/x-tex">0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>。问有多少个四连通的黑色格子连通块。四连通的黑色格子连通块指的是一片由黑色格子组成的区域，其中的每个黑色格子能通过四连通的走法（上下左右），只走黑色格子，到达该联通块中的其它黑色格子。</p><h4 id="输入输出样例-3"><a class="markdownIt-Anchor" href="#输入输出样例-3"></a> 输入输出样例</h4><p><strong>输入 #1</strong></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token number">1</span> <span class="token number">1</span>*<span class="token number">3</span> <span class="token number">5</span>*@*@***@***@*@*<span class="token number">1</span> <span class="token number">8</span>@@****@*<span class="token number">5</span> <span class="token number">5</span>****@*@@*@*@**@@@@*@@@**@<span class="token number">0</span> <span class="token number">0</span></code></pre><p><strong>输出 #1</strong></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token number">0</span><span class="token number">1</span><span class="token number">2</span><span class="token number">2</span></code></pre><h4 id="答案解析-3"><a class="markdownIt-Anchor" href="#答案解析-3"></a> 答案解析</h4><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span>using namespace std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">maxn</span> <span class="token expression"><span class="token number">100</span><span class="token operator">+</span><span class="token number">5</span></span></span><span class="token keyword">char</span> pic<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//存图</span><span class="token keyword">int</span> m<span class="token punctuation">,</span>n<span class="token punctuation">,</span>idx<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> r<span class="token punctuation">,</span><span class="token keyword">int</span> c<span class="token punctuation">,</span><span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>r<span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">||</span>r<span class="token operator">>=</span>m<span class="token operator">||</span>c<span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">||</span>c<span class="token operator">>=</span>n<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token comment">//出界的格子</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>idx<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token operator">></span><span class="token number">0</span><span class="token operator">||</span>pic<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token char">'@'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token comment">//不是'@'或已经被访问过</span>    idx<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token operator">=</span>id<span class="token punctuation">;</span><span class="token comment">//将点记录下来</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> dr<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>dr<span class="token operator">&lt;=</span><span class="token number">1</span><span class="token punctuation">;</span>dr<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> dc<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>dc<span class="token operator">&lt;=</span><span class="token number">1</span><span class="token punctuation">;</span>dc<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>dr<span class="token operator">!=</span><span class="token number">0</span><span class="token operator">||</span>dc<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span>                <span class="token function">dfs</span><span class="token punctuation">(</span>r<span class="token operator">+</span>dr<span class="token punctuation">,</span>c<span class="token operator">+</span>dc<span class="token punctuation">,</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//向四个方向搜索·</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">2</span> <span class="token operator">&amp;&amp;</span> m <span class="token operator">&amp;&amp;</span> n<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span>pic<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">memset</span><span class="token punctuation">(</span>idx<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> cnt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//每一次扫描所有为id的方格</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>idx<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>pic<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">'@'</span><span class="token punctuation">)</span>                    <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">,</span><span class="token operator">++</span>cnt<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>cnt<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><hr><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>E</mi><mi>N</mi><mi>D</mi></mrow><annotation encoding="application/x-tex">END</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span></span></span></span></span></p>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> algorithm </tag>
            
            <tag> DFS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图的基础知识</title>
      <link href="/2022/03/09/Graph-search/"/>
      <url>/2022/03/09/Graph-search/</url>
      
        <content type="html"><![CDATA[<h2 id="基础知识"><a class="markdownIt-Anchor" href="#基础知识"></a> 基础知识</h2><h3 id="图的定义和分类"><a class="markdownIt-Anchor" href="#图的定义和分类"></a> 图的定义和分类</h3><ul><li><p><strong>图的定义</strong> 是一个顶点集合V和一个顶点间关系的集合E组成，记G=(V,E) V：顶点的有限非空集合。 E：顶点间关系的有限集合（边集）。</p></li><li><p><strong>无向图</strong> (graph)在G=(V,E)中，如果对于任意的结点a,b∈V，当(a,b)∈E时，必有(b,a)∈E（即关系R对称），如图二。</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>V</mi><mo>=</mo><mrow><mn>1</mn><mo separator="true">,</mo><mn>2</mn><mo separator="true">,</mo><mn>3</mn><mo separator="true">,</mo><mn>4</mn><mo separator="true">,</mo><mn>5</mn></mrow><mspace linebreak="newline"></mspace><mi>E</mi><mo>=</mo><mrow><mo stretchy="false">(</mo><mn>1</mn><mo separator="true">,</mo><mn>2</mn><mo stretchy="false">)</mo><mo separator="true">,</mo><mo stretchy="false">(</mo><mn>1</mn><mo separator="true">,</mo><mn>3</mn><mo stretchy="false">)</mo><mo separator="true">,</mo><mo stretchy="false">(</mo><mn>1</mn><mo separator="true">,</mo><mn>4</mn><mo stretchy="false">)</mo><mo separator="true">,</mo><mo stretchy="false">(</mo><mn>2</mn><mo separator="true">,</mo><mn>3</mn><mo stretchy="false">)</mo><mo separator="true">,</mo><mo stretchy="false">(</mo><mn>2</mn><mo separator="true">,</mo><mn>5</mn><mo stretchy="false">)</mo><mo separator="true">,</mo><mo stretchy="false">(</mo><mn>3</mn><mo separator="true">,</mo><mn>5</mn><mo stretchy="false">)</mo><mo separator="true">,</mo><mo stretchy="false">(</mo><mn>4</mn><mo separator="true">,</mo><mn>5</mn><mo stretchy="false">)</mo></mrow></mrow><annotation encoding="application/x-tex">V={1,2,3,4,5}\\ E={(1,2),(1,3),(1,4),(2,3),(2,5),(3,5),(4,5)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">3</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">4</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">5</span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mopen">(</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">2</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">3</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">4</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mopen">(</span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">3</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mopen">(</span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">5</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mopen">(</span><span class="mord">3</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">5</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mopen">(</span><span class="mord">4</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">5</span><span class="mclose">)</span></span></span></span></span></span></p></li><li><p><strong>有向图</strong> (digraph)在G=(V,E)中，如果对于任意的结点a,b∈V，当(a,b)∈E时，(b,a)∈E未必成立，如图三。</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>V</mi><mo>=</mo><mrow><mn>1</mn><mo separator="true">,</mo><mn>2</mn><mo separator="true">,</mo><mn>3</mn><mo separator="true">,</mo><mn>4</mn><mo separator="true">,</mo><mn>5</mn></mrow><mspace linebreak="newline"></mspace><mi>E</mi><mo>=</mo><mrow><mo>&lt;</mo><mn>1</mn><mo separator="true">,</mo><mn>2</mn><mo>&gt;</mo><mo separator="true">,</mo><mo>&lt;</mo><mn>1</mn><mo separator="true">,</mo><mn>4</mn><mo>&gt;</mo><mo separator="true">,</mo><mo>&lt;</mo><mn>2</mn><mo separator="true">,</mo><mn>3</mn><mo>&gt;</mo><mo separator="true">,</mo><mo>&lt;</mo><mn>2</mn><mo separator="true">,</mo><mn>5</mn><mo>&gt;</mo><mo separator="true">,</mo><mo>&lt;</mo><mn>3</mn><mo separator="true">,</mo><mn>1</mn><mo>&gt;</mo><mo separator="true">,</mo><mo>&lt;</mo><mn>5</mn><mo separator="true">,</mo><mn>3</mn><mo>&gt;</mo><mo separator="true">,</mo><mo>&lt;</mo><mn>5</mn><mo separator="true">,</mo><mn>4</mn><mo>&gt;</mo></mrow></mrow><annotation encoding="application/x-tex">V={1,2,3,4,5}\\E={&lt;1,2&gt;,&lt;1,4&gt;,&lt;2,3&gt;,&lt;2,5&gt;,&lt;3,1&gt;,&lt;5,3&gt;,&lt;5,4&gt;}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">3</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">4</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">5</span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">4</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">3</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">5</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">3</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">5</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">3</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">5</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">4</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span></span></span></span></span></span></p></li></ul><p><img src="/2022/03/09/Graph-search/image-1.png" alt="img" loading="lazy"></p><ul><li><strong>带权图</strong> 一般的图边上没有数字，边仅表示两个顶点间相连接关系 ，如图四。</li><li><strong>连通图</strong>图中任意两个顶点都是连通的，称为连通图；否则为非连通图，如图五。</li></ul><p><img src="/2022/03/09/Graph-search/image-2.png" alt="img" loading="lazy"></p><h3 id="邻接矩阵和邻接表"><a class="markdownIt-Anchor" href="#邻接矩阵和邻接表"></a> 邻接矩阵和邻接表</h3><ul><li><strong>邻接矩阵</strong></li></ul><p>邻接矩阵的优势是方便定义，只需要一个二维矩阵就可以解决；缺点也显而易见，浪费空间。</p><p><img src="/2022/03/09/Graph-search/v2-9e2643ca5d96f86a391c36de4d3bd48d_720w.jpg" alt="img" loading="lazy"></p><ul><li><strong>邻接表</strong></li></ul><p>邻接表的优势自然就是尽可能的节省更多的空间，但是与之相对应的就是定义起来很麻烦，需要用链表或者vector来实现。</p><p><img src="/2022/03/09/Graph-search/v2-4a4d37df348f283649e2aecc74d959b5_720w.jpg" alt="img" loading="lazy"></p><p>*(图是网上抄的，看水印，如有侵权，请联系我)</p><h2 id="图的遍历dfsbfs"><a class="markdownIt-Anchor" href="#图的遍历dfsbfs"></a> 图的遍历(DFS&amp;&amp;BFS)</h2><hr><p>好了，上面我们学习了图的概念以及如何存图，接下来就是重头戏了。</p><p>接下来便是如何实现图的搜索，首先我们来看这样一个有向图， 我们不妨设从1号顶点起始。</p><p><img src="/2022/03/09/Graph-search/image-3.png" alt="img" loading="lazy"></p><p>在搜索过程中，我们维护一个布尔数组bool visited[N+1]，这个数组用来表示每个顶点是不是已经遍历过了。</p><p>接下来，从1号开始进行DFS，遍历过的节点就在<code>visited[]</code>中标注。visited[i] == true表示顶点i已经遍历过了，visited[i] == false表示i还没有遍历过。DFS的具体方法可以用递归实现，直到所有节点都被遍历过结束。如果采用邻接矩阵，伪代码如下：</p><pre class="language-python" data-language="python"><code class="language-python">Visited<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span>DFS<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>Visited<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>true<span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>N<span class="token punctuation">;</span>i<span class="token operator">+</span><span class="token operator">+</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">if</span><span class="token punctuation">(</span>!Visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;</span><span class="token operator">&amp;</span> <span class="token builtin">map</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>DFS<span class="token punctuation">(</span>i<span class="token punctuation">)</span></code></pre><h2 id="代码实现"><a class="markdownIt-Anchor" href="#代码实现"></a> 代码实现</h2><hr><h3 id="dfs递归实现"><a class="markdownIt-Anchor" href="#dfs递归实现"></a> DFS递归实现</h3><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;#define N 5using namespace std;int maze[N][N] &#x3D; &#123;    &#123; 0, 1, 1, 0, 0 &#125;,    &#123; 0, 0, 1, 0, 1 &#125;,    &#123; 0, 0, 1, 0, 0 &#125;,    &#123; 1, 1, 0, 0, 1 &#125;,    &#123; 0, 0, 1, 0, 0 &#125;&#125;;bool visited[N + 1];void DFS(int start)&#123;    visited[start] &#x3D; true;    for (int i &#x3D; 1; i &lt;&#x3D; N; i++)        if (!visited[i] &amp;&amp; maze[start - 1][i - 1] &#x3D;&#x3D; 1)            DFS(i);    cout &lt;&lt; start &lt;&lt; &quot; &quot;;&#125;int main()&#123;    for (int i &#x3D; 1; i &lt;&#x3D; N; i++)    &#123;        if (visited[i])            continue;        DFS(i);    &#125;    return 0;&#125;</code></pre><h3 id="dfs非递归实现"><a class="markdownIt-Anchor" href="#dfs非递归实现"></a> DFS非递归实现</h3><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;#include &lt;stack&gt;#define N 5using namespace std;int maze[N][N] &#x3D; &#123;    &#123; 0, 1, 1, 0, 0 &#125;,    &#123; 0, 0, 1, 0, 1 &#125;,    &#123; 0, 0, 1, 0, 0 &#125;,    &#123; 1, 1, 0, 0, 1 &#125;,    &#123; 0, 0, 1, 0, 0 &#125;&#125;;bool visited[N + 1];void DFS(int start)&#123;    stack&lt;int&gt; s;    s.push(start);    visited[start] &#x3D; true;    bool is_push &#x3D; false;    while (!s.empty())    &#123;        is_push &#x3D; false;        int v &#x3D; s.top();        for (int i &#x3D; 1; i &lt;&#x3D; N; i++)        &#123;            if (maze[v - 1][i - 1] &#x3D;&#x3D; 1 &amp;&amp; !visited[i])            &#123;                visited[i] &#x3D; true;                s.push(i);                is_push &#x3D; true;                break;            &#125;        &#125;        if (!is_push)        &#123;            cout &lt;&lt; v &lt;&lt; &quot; &quot;;            s.pop();        &#125;    &#125;&#125;int main()&#123;    for (int i &#x3D; 1; i &lt;&#x3D; N; i++)    &#123;        if (visited[i])            continue;        DFS(i);    &#125;    return 0;&#125;</code></pre><h3 id="bfs实现"><a class="markdownIt-Anchor" href="#bfs实现"></a> BFS实现</h3><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;#include &lt;queue&gt;#define N 5using namespace std;int maze[N][N] &#x3D; &#123;    &#123; 0, 1, 1, 0, 0 &#125;,    &#123; 0, 0, 1, 1, 0 &#125;,    &#123; 0, 1, 1, 1, 0 &#125;,    &#123; 1, 0, 0, 0, 0 &#125;,    &#123; 0, 0, 1, 1, 0 &#125;&#125;;bool visited[N + 1];void BFS(int start)&#123;    queue&lt;int&gt; Q;    Q.push(start);    visited[start] &#x3D; true;    while (!Q.empty())    &#123;        int front &#x3D; Q.front();        cout &lt;&lt; front &lt;&lt; &quot; &quot;;        Q.pop();        for (int i &#x3D; 1; i &lt;&#x3D; N; i++)            if (!visited[i] &amp;&amp; maze[front - 1][i - 1] &#x3D;&#x3D; 1)            &#123;                visited[i] &#x3D; true;                Q.push(i);            &#125;    &#125;&#125;int main()&#123;    for (int i &#x3D; 1; i &lt;&#x3D; N; i++)    &#123;        if (visited[i])            continue;        BFS(i);    &#125;    return 0;&#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> algorithm </tag>
            
            <tag> BFS </tag>
            
            <tag> DFS </tag>
            
            <tag> Graph </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo多电脑同步指南</title>
      <link href="/2022/03/08/Hexo-synchronization/"/>
      <url>/2022/03/08/Hexo-synchronization/</url>
      
        <content type="html"><![CDATA[<h2 id="如何实现同步"><a class="markdownIt-Anchor" href="#如何实现同步"></a> 如何实现同步</h2><p>Hexo的同步本质上很简单，使用<code>git</code>命令push一下，然后在另一台电脑pull一下就OK。但是我在实际的同步过程中却遇到了各种的报错，这篇文章同样也记录一下我遇到的问题，也为了后期我再次换电脑，或者再次遇到奇奇怪怪的报错做参考。</p><p>我现在在家里使用<strong>台式电脑</strong>，在外使用轻薄的商务本（以下简称<strong>笔记本</strong>），所以就以此为例，介绍如何实现两个设备间的同步问题。</p><p>首先，我的本地blog储存在台式电脑上面，我们需要将这个blog上传到GitHub上，准确的说是你的GitHub的分支上。我们的目的就是在你的GitHub仓库建一个分支，然后把这个分支当作一个中介，存储我们的源文件，当在A电脑上修改过后直接上传（push）到分支上，然后在B电脑上下载（pull）该分支的所有文件，这样就实现了多设备同步。</p><h3 id="上传本地仓库到远程仓库"><a class="markdownIt-Anchor" href="#上传本地仓库到远程仓库"></a> 上传本地仓库到远程仓库</h3><p>*注意所有命令都要在Hexo项目的目录下执行。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> init <span class="token comment"># 首先要在台式电脑上初始化git</span><span class="token function">git</span> remote <span class="token function">add</span> origin https://github.com/username/username.github.io.git <span class="token comment"># 添加Github上的仓库地址</span><span class="token comment"># username是你的GitHub的用户名</span><span class="token function">git</span> checkout -b branch_name <span class="token comment"># 新建分支并切换到新建的分支</span><span class="token comment"># branch_name随便起名字，不过最好简单一点，比如Hexo</span><span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span> <span class="token comment"># 添加所有本地文件到本地的git</span><span class="token function">git</span> commit -m <span class="token string">"This is the first time to syn!"</span> <span class="token comment"># 提交备注</span><span class="token comment"># “这里的内容随便写，不过这句代码一定不要省略，后面会出问题！”</span><span class="token function">git</span> push origin branch_name <span class="token comment"># 本地文件上传到hexo分支</span></code></pre><h3 id="首次从笔记本下载工程文件"><a class="markdownIt-Anchor" href="#首次从笔记本下载工程文件"></a> 首次从笔记本下载工程文件</h3><p>*注意另一台电脑上要部署好所有的环境，如git，Nodejs，SSH等，详情参考：<a href="https://tonylsx611.github.io/2022/02/24/Hexo_creation/">Hexo 网站搭建指南</a></p><p>*注意所有命令都要在Hexo项目的目录下执行，没有目录的话找个地方新建一个。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone -b branch_name https://github.com/username/username.github.io<span class="token comment"># 克隆分支到本地的博客文件夹</span><span class="token function">sudo</span> <span class="token function">npm</span> <span class="token function">install</span> -g hexo-cli <span class="token comment"># install hexo</span><span class="token function">sudo</span> <span class="token function">npm</span> <span class="token function">install</span> <span class="token comment"># 安装依赖库</span><span class="token function">sudo</span> <span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git <span class="token comment"># git部署相关配置</span></code></pre><h3 id="首次用笔记本更新文件"><a class="markdownIt-Anchor" href="#首次用笔记本更新文件"></a> 首次用笔记本更新文件</h3><pre class="language-bash" data-language="bash"><code class="language-bash">hexo clean <span class="token operator">&amp;&amp;</span> hexo d <span class="token operator">&amp;&amp;</span> hexo g <span class="token operator">&amp;&amp;</span> hexo s <span class="token comment">#更新Github中的master文件</span><span class="token comment"># 如果上面这部成功部署，就可以更新分支文件了</span><span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span><span class="token function">git</span> commit -m <span class="token string">"..."</span><span class="token function">git</span> push origin branch_name</code></pre><h3 id="返回台式电脑进行编辑"><a class="markdownIt-Anchor" href="#返回台式电脑进行编辑"></a> 返回台式电脑进行编辑</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> pull origin branch_name <span class="token comment"># 从Github同步数据到台式电脑</span><span class="token comment"># 或者直接git pull也可以</span><span class="token comment"># 修改或者更新文章。。。</span>hexo clean <span class="token operator">&amp;&amp;</span> hexo d <span class="token operator">&amp;&amp;</span> hexo g <span class="token operator">&amp;&amp;</span> hexo s <span class="token comment">#更新Github中的master文件</span><span class="token comment"># 如果上面这部成功部署，就可以更新分支文件了</span><span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span><span class="token function">git</span> commit -m <span class="token string">"..."</span><span class="token function">git</span> push origin branch_name<span class="token comment">#有没有发现，跟上面的代码一样了，没错，这样就形成了循环！</span></code></pre><p>完成首次同步之后的任何设备都可以使用上面的代码进行同步和更新。</p><h2 id="同步过程中遇到的问题"><a class="markdownIt-Anchor" href="#同步过程中遇到的问题"></a> 同步过程中遇到的问题</h2><h3 id="git-pull文件冲突报错"><a class="markdownIt-Anchor" href="#git-pull文件冲突报错"></a> git pull文件冲突报错</h3><p><img src="/2022/03/08/Hexo-synchronization/Screenshot%202022-03-08%20161552.png" alt="Screenshot 2022-03-08 161552" loading="lazy"></p><p>报错信息：</p><p><code>error: Your local changes to the following files would be overwritten by merge</code></p><p>报错原因：</p><p>在同步的时候出现两个相同文件名内容不同的文件，导致冲突；比如笔记本修改了之前的某个文章，在台式机<code>pull</code> 的时候就会产生这样的错误。</p><p>解决方法：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> stash <span class="token comment"># 备份工作区内容</span><span class="token function">git</span> pull origin branch_name <span class="token comment"># 下载分支内容</span><span class="token function">git</span> stash pop <span class="token comment"># 恢复工作区内容</span></code></pre><h3 id="clone后首次部署报错"><a class="markdownIt-Anchor" href="#clone后首次部署报错"></a> Clone后首次部署报错</h3><p><img src="/2022/03/08/Hexo-synchronization/image-20220310172557250.png" alt="image-20220310172557250" loading="lazy"></p><p>报错信息：</p><pre class="language-bash" data-language="bash"><code class="language-bash">fatal: <span class="token keyword">in</span> unpopulated submodule <span class="token string">'.deploy.git'</span>FATAL:<span class="token punctuation">&#123;</span>error: Error: Spawn failed<span class="token punctuation">..</span>.<span class="token punctuation">&#125;</span></code></pre><p>报错原因：</p><p>克隆远程分支到本地电脑的时候，把<code>.deploy.git</code>也一并克隆了过来，这个文件夹是部署到master的临时缓存文件夹，是另一个电脑部署用的，因此会产生冲突。</p><p>解决方法：</p><p>删掉本地的<code>.deploy.git</code>文件夹，重新部署。如果还有问题，可能是你开了多个命令行，多个terminal会产生冲突，全部关掉，重开一个来部署。</p><h3 id="本地未关联远程分支报错"><a class="markdownIt-Anchor" href="#本地未关联远程分支报错"></a> 本地未关联远程分支报错</h3><p>报错信息：</p><pre class="language-bash" data-language="bash"><code class="language-bash">There is no tracking information <span class="token keyword">for</span> the current branch.Please specify <span class="token function">which</span> branch you want to merge with.See git-pull<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">for</span> details.<span class="token function">git</span> pull <span class="token operator">&lt;</span>remote<span class="token operator">></span> <span class="token operator">&lt;</span>branch<span class="token operator">></span>If you wish to <span class="token builtin class-name">set</span> tracking information <span class="token keyword">for</span> this branch you can <span class="token keyword">do</span> so with:<span class="token function">git</span> branch --set-upstream-to<span class="token operator">=</span>origin/<span class="token operator">&lt;</span>branch<span class="token operator">></span> release</code></pre><p>报错原因：</p><p>在建立新的本地分支后，未与GitHub分支关联，通常出现在首次添加新的电脑时报错。</p><p>解决方法：</p><p>他不是说的明明白白的嘛，你就按照他的提示加一行代码，关联上就完了！这里的<code>remote_branch</code>就是GitHub上的远程分支，<code>your branch</code>就是你的本地分支。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> branch --set-upstream-to<span class="token operator">=</span>origin/remote_branch your_branch</code></pre><h3 id="fetch-first-报错"><a class="markdownIt-Anchor" href="#fetch-first-报错"></a> fetch first 报错</h3><p><img src="/2022/03/08/Hexo-synchronization/image-20220315180411753.png" alt="image-20220315180411753" loading="lazy"></p><p>报错原因：</p><p>远程库版本与本地版本不一致导致的报错。</p><p>解决方法：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> pull --rebase origin your_branch</code></pre><h3 id="non-fast-forward-报错"><a class="markdownIt-Anchor" href="#non-fast-forward-报错"></a> Non-fast-forward 报错</h3><p><img src="/2022/03/08/Hexo-synchronization/image-20220516171510709.png" alt="image-20220516171510709" loading="lazy"></p><p>报错原因：</p><p>别人上传到远程仓库后，你没有及时的同步或拉取到本地，但是你同时又添加了一些内容。当你在提交时，它会检测到你之前从远程仓库拉取的时候的仓库状态和现在的不一样。于是，它为了安全起见拒绝了你的提交。</p><p>解决方法（推荐）：先合并之前的历史，再进行提交</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> fetch origin your_branch <span class="token comment"># 先抓取远程仓库的更新到本地</span><span class="token function">git</span> merge origin your_branch <span class="token comment"># 然后与你的本地仓库合并</span><span class="token function">git</span> pull --rebase origin your_branch <span class="token comment"># 然后就可以提交修改了</span></code></pre><p>解决方法（不推荐）：丢弃之前的历史，强行提交</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> push --force <span class="token comment"># 这种方法很不安全</span></code></pre><hr><p>注：本文部分内容参考自<a href="https://cloud.tencent.com/developer/article/1046404">Hexo博客的安装部署及多电脑同步</a>，如有侵权，请联系我。</p>]]></content>
      
      
      <categories>
          
          <category> Hexo搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>R2S家庭组网实操</title>
      <link href="/2022/02/26/R2S_build/"/>
      <url>/2022/02/26/R2S_build/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h2><p>本文授权转载自<a href="https://www.bytedance.fit/?p=1051">R2S家庭组网实操 – Orange Tien</a>，作者：Orange Tien，在此基础上略加修改，<s>并不会定期更新</s>。</p><p>本文主要介绍R2S的基本使用方法，目前本人（Tony）也在原作者（Orange Tien）的怂恿下在两个地方分别搭建了两个R2S，看起来很简单，其实不是一帆风顺；因此也会把实际组网中遇到的问题列到最后供大家参考。</p><h2 id="确定所需物理设备"><a class="markdownIt-Anchor" href="#确定所需物理设备"></a> 确定所需物理设备</h2><ul><li>一台R2S软路由以及它的电源线</li><li>两根用不着太长的网线一张TF卡（作为R2S的系统盘）以及一个读写TF卡的读卡器</li><li>一台可以插网线的电脑</li><li>交换机（可选）</li><li>插排（某些时候插座不够用）</li></ul><h2 id="烧录openwrt系统"><a class="markdownIt-Anchor" href="#烧录openwrt系统"></a> 烧录OpenWrt系统</h2><p>烧录软件：<a href="https://www.balena.io/etcher/">BalenaEtcher</a></p><p>软路由系统：</p><p><a href="https://bigdongdong.cowtransfer.com/s/a3420546d30343">OpenWrt-R2S-dongdong</a></p><p><a href="https://bigdongdong.cowtransfer.com/s/9a349ee597aa4f">OpenWrt-R2S-esir</a></p><p>第一个链接比较新，界面比较好看一些，推荐选择这个下载；第二个系统是eSir大人写的2020版本，已经很旧了；<s>奈何暂时没找到别的系统</s>，如果自行找到更好的系统也可以不用这俩链接。注意系统是要支持Arm架构的，因为Openwrt不是x86架构下的产物。</p><h2 id="开始烧录系统至tf卡"><a class="markdownIt-Anchor" href="#开始烧录系统至tf卡"></a> 开始烧录系统至TF卡</h2><p>打开BalenaEtcher，选择Flash from file，然后将OpenWrt系统烧录到TF卡中即可。</p><p><img src="/2022/02/26/R2S_build/image-1.png" alt="img" loading="lazy"></p><p>注意：选择文件时只选择镜像文件，不要把那些七七八八的文档说明也选进去。选择<code>.gz</code>(<code>.img</code>)文件来烧录即可，烧录完成后直接拔掉读卡器；系统会提示格式化，此时千万<strong>不要</strong>格式化！！！（<s>否则，就重来一遍吧</s>）</p><h2 id="登入r2s后台"><a class="markdownIt-Anchor" href="#登入r2s后台"></a> 登入R2S后台</h2><p>把烧录好固件的TF卡插入R2S，然后给它插上电源，WAN口可以不接，将R2S的LAN口连接电脑的网口，根据所刷入的固件（软路由系统）的不同来决定后台地址，一般来说，软路由后台是<code>192.168.X.1</code> ，本文的系统后台是<code>192.168.22.1</code>，所以说我们在电脑浏览器内输入<code>192.168.5.1</code>(<code>192.168.22.1</code>)以进入后台。后台账号是root，默认密码基本都是password（若下载本文的系统，密码则为空），具体操作链接里面写的很清楚。</p><h2 id="拨号或者dhcp客户端"><a class="markdownIt-Anchor" href="#拨号或者dhcp客户端"></a> 拨号或者DHCP客户端</h2><h3 id="光猫拨号"><a class="markdownIt-Anchor" href="#光猫拨号"></a> 光猫拨号</h3><p>如果你家里的组网方式是通过光猫拨号（通常都是光猫拨号），那么设置方法如下：</p><p>选择 网络-接口， 然后选择 修改WAN口设置</p><p><img src="/2022/02/26/R2S_build/image-2-1024x507.png" alt="img" loading="lazy"></p><p>将WAN口设置成DHCP客户端，然后保存应用即可，此外无须做其他任何设置。</p><p><img src="/2022/02/26/R2S_build/image-3-1024x485.png" alt="img" loading="lazy"></p><h3 id="r2s拨号"><a class="markdownIt-Anchor" href="#r2s拨号"></a> R2S拨号</h3><p>如果你的光猫是桥接，那么就由路由器来拨号（通常来说，哪个网络设备配置更好，就誰来拨号，由于R2S的稳定性远不如光猫，所以这里选择光猫拨号更好），设置方法如下：</p><p><img src="/2022/02/26/R2S_build/image-5.png" alt="img" loading="lazy"></p><p>同样，选择修改WAN口，协议设置成PPPoE, PAP/CHAP，账号密码就是光猫的账号密码。比如电信宽带就是以<code>@163.gd</code>结尾的，密码如果忘记的话直接拨打10000（10086）重置就好，省时省力。</p><p><img src="/2022/02/26/R2S_build/image-2-1024x507.png" alt="img" loading="lazy"></p><p>接下来，需要用超级管理员账号登陆到光猫的IP中（<code>192.168.1.1</code>）,各大运营商的超级管理员账号和密码可以自行搜索。选择 网络-协议，然后设置成DHCP客户端。</p><h3 id="小结"><a class="markdownIt-Anchor" href="#小结"></a> 小结</h3><p>用什么拨号，什么就选择PPPoE，然后其它设备就都设置成DHCP。</p><p>用光猫拨号，光猫的设置里面就选择PPPoE，软路由以及其它路由器就选择DHCP客户端；</p><p>用R2S拨号，光猫和其它路由设备的设置里面就选择DHCP客户端，软路由选择PPPoE。</p><h2 id="各设备接入网络"><a class="markdownIt-Anchor" href="#各设备接入网络"></a> 各设备接入网络</h2><p>将软路由的WAN口与光猫的千兆口相连，然后断开软路由的LAN口与电脑网口的连接，此时软路由的LAN口根据各人组网要求的不同选择接不同的设备，可以接交换机，也可以接一台路由器（路由器设置为有线中继模式，也就是无线AP模式）</p><p>如果家中设备比较多，或者很多屋子都需要连网线的话，可以买一个最便宜的千兆交换机放到弱电箱中，然后吧R2S接到交换机与光猫中间，这样就可以实现整个局域网都接入到软路由中来。（我来草草的画个图）</p><p><img src="/2022/02/26/R2S_build/image-20220305212846426.png" alt="image-20220305212846426" loading="lazy"></p><h2 id="利用插件设置科学上网"><a class="markdownIt-Anchor" href="#利用插件设置科学上网"></a> 利用插件设置科学上网</h2><p>根据前面的步骤，如果你的设备能够正常访问网络了，就可以开始探索OpenWrt的各类插件了。关于科学上网，常见的插件有PassWall, ShadowScoksR++, OpenClash，由于OpenClash具备强大的分流策略机制（根据你访问的域名或者IP的不同决定走不同的节点），我们在此以OpenCalsh为例设置科学上网</p><p><img src="/2022/02/26/R2S_build/image-7.png" alt="img" loading="lazy"></p><p>首先，在服务菜单中找到OpenClash，然后选择配置文件订阅，选择添加配置文件</p><p><img src="/2022/02/26/R2S_build/image-8.png" alt="img" loading="lazy"></p><p>配置文件名随便写，用途是给用户自己区分的，订阅地址填上机场给你的订阅地址，其余地方无需设置，直接应用并保存即可。然后回到OpenClash主页，配置文件区域发送了变化。</p><p><img src="/2022/02/26/R2S_build/image-9-1024x194.png" alt="img" loading="lazy"></p><p>最后点击左下角的启动按钮，等待服务器上线运行即可。</p><p><img src="/2022/02/26/R2S_build/image-10.png" alt="img" loading="lazy"></p><p>如果你设置后无法正常科学上网，原因是有很多的，需要你自己慢慢排查。</p><h2 id="更多原作者的话"><a class="markdownIt-Anchor" href="#更多原作者的话"></a> 更多（原作者的话）</h2><p><a href="https://wiki.friendlyarm.com/wiki/index.php/NanoPi_R2S/zh">NanoPi R2S WIKI</a></p><p>上面的链接是R2S的WIKI书，上面详细记录了R2S的配置以及实际测速情况，也有如何编译系统等教程。</p><p>个人使用R2S两年，从大一到大三都在用这个，感觉就是到千兆不太行，500M是瓶颈了，然后连久了没那么稳定，官网手册上宣传它是又稳定又能达到千兆的，这个听听就好，R2S本来是适合入门的，但是现在价格炒的太高了，没这个必要去买它，目前有很多更具有性价比的软路由可供选择。</p><p>此外向大家推荐软路由界的大佬: <a href="https://youtube.com/c/jackstone">JackStone的Youtube主页</a> ，人称老白，做了很多小主机的视频，如果想选购更具性价比的设备，可以看他的合集，比如2021软路由选购建议这些。</p><h2 id="组网时遇到过的问题我的话"><a class="markdownIt-Anchor" href="#组网时遇到过的问题我的话"></a> 组网时遇到过的问题（我的话）</h2><ol><li>组网的过程中可能出现无法自动分配IP地址的问题，比如说小米的路由器默认会分配<code>192.168.31.XXX</code>；如果你会手动配置的话可以试试，不过最简单的办法就是等，去洗个澡回来就好了。如果还没好，那么可以考虑RESET一下路由器。</li><li>OpenClash插件在首次启动的时候，可能会启动失败，他会提示需要你选择编译架构，按照他的提示，选择Arm-v8架构即可。</li><li>网线通常插上马上就会亮灯，5s左右就能ping通，不过不要太相信科学。~~我有一次ping了10多分钟。~~真的，不通的话不一定是没插紧，也不一定是插错了，<strong>很有可能是因为你没给我微信或者支付宝赞赏</strong>。</li><li>R2S是很基础的一款软路由，稳定性可能不会太好，不过最有可能导致网络不稳定的还是机场的选择，如果选择廉价机场的话，要做好不知道什么时候突然断网10分钟的准备。</li><li>计算机网络这门学科是玄学的一个分支。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Computer Network </tag>
            
            <tag> R2S </tag>
            
            <tag> 软路由 </tag>
            
            <tag> 科学上网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>链式二叉树简介</title>
      <link href="/2022/02/25/binary_tree_1/"/>
      <url>/2022/02/25/binary_tree_1/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h2><blockquote><p>人为什么难做选择？</p></blockquote><p><strong>选择意味着放弃</strong></p><p>你选择一方，也就意味着放弃了另一方。摆在你面前的选择项越接近，你的选择就会越困难，因为放弃其中任何一个选择项都不容易。如果摆在你面前的选择项对比明显，那么选择起来就会轻松许多，大家几乎都会毫不犹豫的选择“好”的选择项，放弃掉“差”的选择项。</p><p><strong>选择永远都不是完美的</strong></p><p>选择永远都不可能十全十美，只可能满足尽量多的侧重点。选择的时候想满足越多的侧重点，可能就会越难做出选择。所以在选择上不要过于追求完美。</p><p>警惕<strong>逃避性选择</strong>——不知道自己要去哪儿，还要选择离开。</p><p>有一种选择是对现状不满，想逃离这种现状，但是却不知道去哪里。举个例子，可能目前的公司有各种问题，比如开发流程不规范等，如果因为这些问题离开，可能就会从一个坑跳到另外一个更大的坑。当决定离开的时候，一定是自己有明确的目标，很清楚自己想要什么。</p><h2 id="二叉树的定义"><a class="markdownIt-Anchor" href="#二叉树的定义"></a> 二叉树的定义</h2><p>二叉树要么为空，要么由根节点（root），左子树（left subtree）和右子树（right subtree）组成，而且左子树和右子树分别是一棵二叉树。说白了就是，二叉树的任何一个节点，<strong>有且只能有0，1，2棵子树</strong>。</p><p><img src="/2022/02/25/binary_tree_1/2-1Q226195I0M1.gif" alt="二叉树示意图" loading="lazy"></p><h2 id="二叉树的实现"><a class="markdownIt-Anchor" href="#二叉树的实现"></a> 二叉树的实现</h2><p>二叉树的实现方式大致分两种，一种是以数组形式储存，另一种是以链表形式储存。以数组形式储存的好处是实现起来极其便捷，但是数组只能储存完全二叉树，就是二叉树的任何一个父节点（除了叶子节点）都要有两颗子树，如图所示：</p><p><img src="/2022/02/25/binary_tree_1/2-1Q226195949495.gif" alt="满二叉树示意图" loading="lazy"></p><p>我们这里使用链表的方法维护一个二叉树，一个是这样能够实现更宽泛的二叉树形式，减少内存开销；另外以链表形式实现二叉树可以让我们更加深入理解二叉树的本质。</p><p><img src="/2022/02/25/binary_tree_1/2-1Q22R035341H.gif" alt="二叉树链式存储结构示意图" loading="lazy"></p><h3 id="头文件"><a class="markdownIt-Anchor" href="#头文件"></a> 头文件</h3><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">once</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">BST_H</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">BST_H</span></span><span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token punctuation">&#123;</span>ElementType Node<span class="token punctuation">;</span>TreeNode<span class="token operator">*</span> L_Child<span class="token punctuation">;</span>TreeNode<span class="token operator">*</span> R_Child<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">int</span> ElementType<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> PtrToNode<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> Position<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> SearchTree<span class="token punctuation">;</span>SearchTree <span class="token function">MakeEmpty</span><span class="token punctuation">(</span>SearchTree T<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//initialize</span>Position <span class="token function">Find</span><span class="token punctuation">(</span>ElementType X<span class="token punctuation">,</span> SearchTree T<span class="token punctuation">)</span><span class="token punctuation">;</span>Position <span class="token function">FindMin</span><span class="token punctuation">(</span>SearchTree T<span class="token punctuation">)</span><span class="token punctuation">;</span>Position <span class="token function">FindMax</span><span class="token punctuation">(</span>SearchTree T<span class="token punctuation">)</span><span class="token punctuation">;</span>SearchTree <span class="token function">Insert</span><span class="token punctuation">(</span>SearchTree T<span class="token punctuation">,</span> ElementType X<span class="token punctuation">)</span><span class="token punctuation">;</span>SearchTree <span class="token function">Delete</span><span class="token punctuation">(</span>SearchTree T<span class="token punctuation">,</span> ElementType X<span class="token punctuation">)</span><span class="token punctuation">;</span>ElementType <span class="token function">Retrieve</span><span class="token punctuation">(</span>Position P<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Output</span><span class="token keyword">void</span> <span class="token function">PreOrderTraverse</span><span class="token punctuation">(</span>SearchTree T<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">InOrderTraverse</span><span class="token punctuation">(</span>SearchTree T<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">PostOrderTraverse</span><span class="token punctuation">(</span>SearchTree T<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span></code></pre><h3 id="创建二叉树"><a class="markdownIt-Anchor" href="#创建二叉树"></a> 创建二叉树</h3><pre class="language-c" data-language="c"><code class="language-c">SearchTree <span class="token function">MakeEmpty</span><span class="token punctuation">(</span>SearchTree T<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>T <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">MakeEmpty</span><span class="token punctuation">(</span>T<span class="token operator">-></span>L_Child<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">MakeEmpty</span><span class="token punctuation">(</span>T<span class="token operator">-></span>R_Child<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">free</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="二叉树查找元素"><a class="markdownIt-Anchor" href="#二叉树查找元素"></a> 二叉树查找元素</h3><pre class="language-c" data-language="c"><code class="language-c">Position <span class="token function">Find</span><span class="token punctuation">(</span>ElementType X<span class="token punctuation">,</span> SearchTree T<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>T <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>X <span class="token operator">&lt;</span> T<span class="token operator">-></span>Node<span class="token punctuation">)</span><span class="token function">Find</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span> T<span class="token operator">-></span>L_Child<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>X <span class="token operator">></span> T<span class="token operator">-></span>Node<span class="token punctuation">)</span><span class="token function">Find</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span> T<span class="token operator">-></span>R_Child<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token keyword">return</span> T<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="查找最大最小值"><a class="markdownIt-Anchor" href="#查找最大最小值"></a> 查找最大最小值</h3><pre class="language-c" data-language="c"><code class="language-c">Position <span class="token function">FindMin</span><span class="token punctuation">(</span>SearchTree T<span class="token punctuation">)</span><span class="token comment">//递归写法</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>T <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>T<span class="token operator">-></span>L_Child <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token keyword">return</span> T<span class="token punctuation">;</span><span class="token keyword">else</span><span class="token keyword">return</span> <span class="token function">FindMin</span><span class="token punctuation">(</span>T<span class="token operator">-></span>L_Child<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>Position <span class="token function">FindMax</span><span class="token punctuation">(</span>SearchTree T<span class="token punctuation">)</span><span class="token comment">//while循环写法</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>T <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token keyword">while</span><span class="token punctuation">(</span>T<span class="token operator">-></span>R_Child <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>T<span class="token operator">=</span>T<span class="token operator">-></span>R_Child<span class="token punctuation">;</span><span class="token keyword">return</span> T<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="二叉树插入元素"><a class="markdownIt-Anchor" href="#二叉树插入元素"></a> 二叉树插入元素</h3><pre class="language-c" data-language="c"><code class="language-c">SearchTree <span class="token function">Insert</span><span class="token punctuation">(</span>SearchTree T<span class="token punctuation">,</span> ElementType X<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>T<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token comment">// the fist element</span><span class="token punctuation">&#123;</span>T <span class="token operator">=</span> new TreeNode<span class="token punctuation">;</span>T<span class="token operator">-></span>L_Child <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>T<span class="token operator">-></span>R_Child <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>T<span class="token operator">-></span>Node <span class="token operator">=</span> X<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>X <span class="token operator">&lt;</span> T<span class="token operator">-></span>Node<span class="token punctuation">)</span><span class="token comment">//put X on the left</span>T<span class="token operator">-></span>L_Child<span class="token operator">=</span><span class="token function">Insert</span><span class="token punctuation">(</span>T<span class="token operator">-></span>L_Child<span class="token punctuation">,</span> X<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span>             <span class="token comment">//put X on the right</span>T<span class="token operator">-></span>R_Child <span class="token operator">=</span> <span class="token function">Insert</span><span class="token punctuation">(</span>T<span class="token operator">-></span>R_Child<span class="token punctuation">,</span> X<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> T<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="二叉树删除元素"><a class="markdownIt-Anchor" href="#二叉树删除元素"></a> 二叉树删除元素</h3><pre class="language-c" data-language="c"><code class="language-c">SearchTree <span class="token function">Delete</span><span class="token punctuation">(</span>SearchTree T<span class="token punctuation">,</span> ElementType X<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>T <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>X <span class="token operator">&lt;</span> T<span class="token operator">-></span>Node<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>T<span class="token operator">-></span>L_Child<span class="token operator">=</span> <span class="token function">Delete</span><span class="token punctuation">(</span>T<span class="token operator">-></span>L_Child<span class="token punctuation">,</span> X<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>X <span class="token operator">></span> T<span class="token operator">-></span>Node<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>T<span class="token operator">-></span>R_Child<span class="token operator">=</span><span class="token function">Delete</span><span class="token punctuation">(</span>T<span class="token operator">-></span>R_Child<span class="token punctuation">,</span> X<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>T<span class="token operator">-></span>L_Child <span class="token operator">&amp;&amp;</span> T<span class="token operator">-></span>R_Child<span class="token punctuation">)</span> <span class="token comment">// 2  children</span><span class="token punctuation">&#123;</span>Position minn <span class="token operator">=</span> <span class="token function">FindMin</span><span class="token punctuation">(</span>T<span class="token operator">-></span>R_Child<span class="token punctuation">)</span><span class="token punctuation">;</span>T<span class="token operator">-></span>Node <span class="token operator">=</span> minn<span class="token operator">-></span>Node<span class="token punctuation">;</span>T<span class="token operator">-></span>R_Child <span class="token operator">=</span> <span class="token function">Delete</span><span class="token punctuation">(</span>T<span class="token operator">-></span>R_Child<span class="token punctuation">,</span> T<span class="token operator">-></span>Node<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span>           <span class="token comment">// 1  or  0 child</span><span class="token punctuation">&#123;</span>Position temp <span class="token operator">=</span> T<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>T<span class="token operator">-></span>L_Child <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>T <span class="token operator">=</span> T<span class="token operator">-></span>R_Child<span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>T<span class="token operator">-></span>R_Child <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>T <span class="token operator">=</span> T<span class="token operator">-></span>L_Child<span class="token punctuation">;</span><span class="token function">free</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> T<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="二叉树的遍历"><a class="markdownIt-Anchor" href="#二叉树的遍历"></a> 二叉树的遍历</h2><ul><li>先序遍历<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mi>r</mi><mi>e</mi><mi>O</mi><mi>r</mi><mi>d</mi><mi>e</mi><mi>r</mi><mo stretchy="false">(</mo><mi>T</mi><mo stretchy="false">)</mo><mo>=</mo><mi>R</mi><mi>o</mi><mi>o</mi><mi>t</mi><mo stretchy="false">(</mo><mi>T</mi><mo stretchy="false">)</mo><mo>+</mo><mi>P</mi><mi>r</mi><mi>e</mi><mi>O</mi><mi>r</mi><mi>d</mi><mi>e</mi><mi>r</mi><mo stretchy="false">(</mo><mi>l</mi><mi>e</mi><mi>f</mi><mi>t</mi><mi>s</mi><mi>u</mi><mi>b</mi><mi>T</mi><mo stretchy="false">)</mo><mo>+</mo><mi>P</mi><mi>r</mi><mi>e</mi><mi>O</mi><mi>r</mi><mi>d</mi><mi>e</mi><mi>r</mi><mo stretchy="false">(</mo><mi>r</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi><mi>s</mi><mi>u</mi><mi>b</mi><mi>T</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">PreOrder(T)=Root(T)+PreOrder(left subT)+PreOrder(right subT)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">d</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mord mathdefault">o</span><span class="mord mathdefault">o</span><span class="mord mathdefault">t</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">d</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault">t</span><span class="mord mathdefault">s</span><span class="mord mathdefault">u</span><span class="mord mathdefault">b</span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">d</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">h</span><span class="mord mathdefault">t</span><span class="mord mathdefault">s</span><span class="mord mathdefault">u</span><span class="mord mathdefault">b</span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mclose">)</span></span></span></span></li><li>中序遍历<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>I</mi><mi>n</mi><mi>O</mi><mi>r</mi><mi>d</mi><mi>e</mi><mi>r</mi><mo stretchy="false">(</mo><mi>T</mi><mo stretchy="false">)</mo><mo>=</mo><mi>I</mi><mi>n</mi><mi>O</mi><mi>r</mi><mi>d</mi><mi>e</mi><mi>r</mi><mo stretchy="false">(</mo><mi>l</mi><mi>e</mi><mi>f</mi><mi>t</mi><mi>s</mi><mi>u</mi><mi>b</mi><mi>T</mi><mo stretchy="false">)</mo><mo>+</mo><mi>R</mi><mi>o</mi><mi>o</mi><mi>t</mi><mo stretchy="false">(</mo><mi>T</mi><mo stretchy="false">)</mo><mo>+</mo><mi>I</mi><mi>n</mi><mi>O</mi><mi>r</mi><mi>d</mi><mi>e</mi><mi>r</mi><mo stretchy="false">(</mo><mi>r</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi><mi>s</mi><mi>u</mi><mi>b</mi><mi>T</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">InOrder(T)=InOrder(left subT)+Root(T)+InOrder(right subT)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">d</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">d</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault">t</span><span class="mord mathdefault">s</span><span class="mord mathdefault">u</span><span class="mord mathdefault">b</span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mord mathdefault">o</span><span class="mord mathdefault">o</span><span class="mord mathdefault">t</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">d</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">h</span><span class="mord mathdefault">t</span><span class="mord mathdefault">s</span><span class="mord mathdefault">u</span><span class="mord mathdefault">b</span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mclose">)</span></span></span></span></li><li>后序遍历<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mi>o</mi><mi>s</mi><mi>t</mi><mi>O</mi><mi>r</mi><mi>d</mi><mi>e</mi><mi>r</mi><mo stretchy="false">(</mo><mi>T</mi><mo stretchy="false">)</mo><mo>=</mo><mi>P</mi><mi>o</mi><mi>s</mi><mi>t</mi><mi>O</mi><mi>r</mi><mi>d</mi><mi>e</mi><mi>r</mi><mo stretchy="false">(</mo><mi>l</mi><mi>e</mi><mi>f</mi><mi>t</mi><mi>s</mi><mi>u</mi><mi>b</mi><mi>T</mi><mo stretchy="false">)</mo><mo>+</mo><mi>P</mi><mi>o</mi><mi>s</mi><mi>t</mi><mi>O</mi><mi>r</mi><mi>d</mi><mi>e</mi><mi>r</mi><mo stretchy="false">(</mo><mi>R</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi><mi>s</mi><mi>u</mi><mi>b</mi><mi>T</mi><mo stretchy="false">)</mo><mo>+</mo><mi>R</mi><mi>o</mi><mi>o</mi><mi>t</mi><mo stretchy="false">(</mo><mi>T</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">PostOrder(T)=PostOrder(left subT)+PostOrder(Right subT)+Root(T)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mord mathdefault">o</span><span class="mord mathdefault">s</span><span class="mord mathdefault">t</span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">d</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mord mathdefault">o</span><span class="mord mathdefault">s</span><span class="mord mathdefault">t</span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">d</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault">t</span><span class="mord mathdefault">s</span><span class="mord mathdefault">u</span><span class="mord mathdefault">b</span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mord mathdefault">o</span><span class="mord mathdefault">s</span><span class="mord mathdefault">t</span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">d</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">h</span><span class="mord mathdefault">t</span><span class="mord mathdefault">s</span><span class="mord mathdefault">u</span><span class="mord mathdefault">b</span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mord mathdefault">o</span><span class="mord mathdefault">o</span><span class="mord mathdefault">t</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mclose">)</span></span></span></span></li></ul><p><img src="/2022/02/25/binary_tree_1/image.png" alt="img" loading="lazy"></p><h3 id="先序遍历"><a class="markdownIt-Anchor" href="#先序遍历"></a> 先序遍历</h3><ol><li>递归实现</li></ol><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">PreOrderTraverse</span><span class="token punctuation">(</span>SearchTree T<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>T <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token function">Retrieve</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span><span class="token function">PreOrderTraverse</span><span class="token punctuation">(</span>T<span class="token operator">-></span>L_Child<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">PreOrderTraverse</span><span class="token punctuation">(</span>T<span class="token operator">-></span>R_Child<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><ol start="2"><li>迭代实现</li></ol><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">PreOrder</span><span class="token punctuation">(</span>BiTree Root<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    stack <span class="token operator">&lt;</span>BiTree<span class="token operator">></span> s<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">)</span> <span class="token comment">//如果根节点不为空</span>        s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//则令根节点入栈</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>s<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//在栈变空之前反复循环</span>    <span class="token punctuation">&#123;</span>         root <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         cout <span class="token operator">&lt;&lt;</span> root<span class="token operator">-></span>data<span class="token punctuation">;</span> <span class="token comment">//弹出并访问当前节点</span>        <span class="token comment">//下面左右孩子的顺序不能颠倒</span>        <span class="token comment">//必须先让右孩子先入栈，再让左孩子入栈。</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token operator">-></span>RChild<span class="token punctuation">)</span>            s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token operator">-></span>RChild<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//右孩子先入后出</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token operator">-></span>LChild<span class="token punctuation">)</span>            s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token operator">-></span>LChild<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//左孩子后入先出</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>我们通过一个实例来了解一下该迭代版本是如何工作的 :</p><p><img src="/2022/02/25/binary_tree_1/v2-0ccba83c7b3dbf7b89964c04021025d9_720w.jpg" alt="img" loading="lazy"></p><h3 id="中序遍历"><a class="markdownIt-Anchor" href="#中序遍历"></a> 中序遍历</h3><ol><li>递归实现</li></ol><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">InOrderTraverse</span><span class="token punctuation">(</span>SearchTree T<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>T <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token function">InOrderTraverse</span><span class="token punctuation">(</span>T<span class="token operator">-></span>L_Child<span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token function">Retrieve</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span><span class="token function">InOrderTraverse</span><span class="token punctuation">(</span>T<span class="token operator">-></span>R_Child<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><ol start="2"><li>迭代实现</li></ol><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">InOrderTraverse</span><span class="token punctuation">(</span>BiTree root<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   Stack<span class="token operator">&lt;</span>BiTree<span class="token operator">></span> S<span class="token punctuation">;</span> <span class="token comment">//辅助栈</span>   <span class="token keyword">while</span> <span class="token punctuation">(</span>true<span class="token punctuation">)</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">)</span>       <span class="token punctuation">&#123;</span>         S<span class="token punctuation">.</span><span class="token function">push</span> <span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//根节点进栈</span>         root <span class="token operator">=</span> root<span class="token operator">-></span>LChild<span class="token punctuation">;</span> <span class="token comment">//深入遍历左子树</span>      <span class="token punctuation">&#125;</span>       <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>S<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>       <span class="token punctuation">&#123;</span>         root <span class="token operator">=</span> S<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//尚未访问的最低祖先节点退栈</span>         cout <span class="token operator">&lt;&lt;</span> root<span class="token operator">-></span>data<span class="token punctuation">;</span> <span class="token comment">//访问该祖先节点</span>         root <span class="token operator">=</span> root<span class="token operator">-></span>RChild<span class="token punctuation">;</span> <span class="token comment">//遍历祖先的右子树</span>      <span class="token punctuation">&#125;</span>       <span class="token keyword">else</span>         <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token comment">//遍历完成</span><span class="token punctuation">&#125;</span></code></pre><h3 id="后序遍历"><a class="markdownIt-Anchor" href="#后序遍历"></a> 后序遍历</h3><ol><li>递归实现</li></ol><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">PostOrderTraverse</span><span class="token punctuation">(</span>SearchTree T<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>T <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token function">PostOrderTraverse</span><span class="token punctuation">(</span>T<span class="token operator">-></span>L_Child<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">PostOrderTraverse</span><span class="token punctuation">(</span>T<span class="token operator">-></span>R_Child<span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> T<span class="token operator">-></span>Node <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><ol start="2"><li>迭代实现</li></ol><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">A</span> <span class="token expression"><span class="token operator">!</span>cur<span class="token operator">-></span>Lchild <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>cur<span class="token operator">-></span>Rchild</span></span><span class="token comment">//如果P不存在左孩子和右孩子，则可以直接访问它；</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">B</span> <span class="token expression">pre<span class="token operator">==</span>cur<span class="token operator">-></span>Lchild <span class="token operator">||</span> pre<span class="token operator">==</span>cur<span class="token operator">-></span>Rchild</span></span><span class="token comment">//P存在左孩子或者右孩子，但是其左孩子和右孩子都已被访问过了;</span><span class="token keyword">void</span> <span class="token function">PostOrder</span><span class="token punctuation">(</span>BiTree Root<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Root<span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    stack <span class="token operator">&lt;</span>BiTree<span class="token operator">></span> s<span class="token punctuation">;</span><span class="token comment">//辅助栈</span>    BiTree cur<span class="token operator">=</span>Root<span class="token punctuation">,</span>pre<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>    s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>Root<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//根节点进栈</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>s<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        cur<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>A <span class="token operator">||</span> B<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            cout <span class="token operator">&lt;&lt;</span> cur<span class="token operator">-></span>data<span class="token punctuation">;</span>            s<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            pre<span class="token operator">=</span>cur<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token operator">-></span>Rchild<span class="token punctuation">)</span>                s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>Rchild<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token operator">-></span>Lchild<span class="token punctuation">)</span>                s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>Lchild<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="main函数"><a class="markdownIt-Anchor" href="#main函数"></a> main()函数</h2><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>SearchTree My_Tree <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>My_Tree <span class="token operator">=</span> <span class="token function">MakeEmpty</span><span class="token punctuation">(</span>My_Tree<span class="token punctuation">)</span><span class="token punctuation">;</span>My_Tree <span class="token operator">=</span> <span class="token function">Insert</span><span class="token punctuation">(</span>My_Tree<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>My_Tree <span class="token operator">=</span> <span class="token function">Insert</span><span class="token punctuation">(</span>My_Tree<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>My_Tree <span class="token operator">=</span> <span class="token function">Insert</span><span class="token punctuation">(</span>My_Tree<span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>My_Tree <span class="token operator">=</span> <span class="token function">Insert</span><span class="token punctuation">(</span>My_Tree<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>My_Tree <span class="token operator">=</span> <span class="token function">Insert</span><span class="token punctuation">(</span>My_Tree<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> My_Tree<span class="token punctuation">)</span><span class="token punctuation">)</span>My_Tree <span class="token operator">=</span> <span class="token function">Insert</span><span class="token punctuation">(</span>My_Tree<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>My_Tree <span class="token operator">=</span> <span class="token function">Delete</span><span class="token punctuation">(</span>My_Tree<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>SearchTree min <span class="token operator">=</span> <span class="token function">FindMin</span><span class="token punctuation">(</span>My_Tree<span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token function">Retrieve</span><span class="token punctuation">(</span>min<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token function">PreOrderTraverse</span><span class="token punctuation">(</span>My_Tree<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">InOrderTraverse</span><span class="token punctuation">(</span>My_Tree<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">PostOrderTraverse</span><span class="token punctuation">(</span>My_Tree<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>下一篇文章：<a href="https://tonylsx611.github.io/2022/02/24/binary_tree_2/">数组与链式二叉树之间的转换 | Tony (tonylsx611.github.io)</a></p><p>注：本文图片部分选自http://data.biancheng.net/；如有侵权，请联系我。</p>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> algorithm </tag>
            
            <tag> Binary-tree </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二叉树进阶与习题</title>
      <link href="/2022/02/24/binary_tree_2/"/>
      <url>/2022/02/24/binary_tree_2/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h2><p>对二叉树不是很了解的同学可以先看一下我之前的文章：<a href="https://tonylsx611.github.io/2022/02/25/binary_tree_1/">链式二叉树简介</a></p><h2 id="数组二叉树转链表"><a class="markdownIt-Anchor" href="#数组二叉树转链表"></a> 数组二叉树转链表</h2><p>将一棵完全二叉树转换成链表形式是比较常见的一种做法，我们首先声明一个int类型的数组，然后把它放入链表二叉树中。这个过程相对来说是很容易实现的。</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> length <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span>length<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">6</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><p><img src="/2022/02/24/binary_tree_2/image.png" alt="img" loading="lazy"></p><p>之后的任务就是将数组转化为链表形式，链表的定义如下：</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">TreeNode</span> <span class="token comment">//二叉树的格式</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> val<span class="token punctuation">;</span>    TreeNode<span class="token operator">*</span> left<span class="token punctuation">;</span>    TreeNode<span class="token operator">*</span> right<span class="token punctuation">;</span>    <span class="token function">TreeNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">val</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">left</span><span class="token punctuation">(</span>nullptr<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">right</span><span class="token punctuation">(</span>nullptr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token function">TreeNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">val</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">left</span><span class="token punctuation">(</span>nullptr<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">right</span><span class="token punctuation">(</span>nullptr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token function">TreeNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> TreeNode<span class="token operator">*</span> left<span class="token punctuation">,</span> TreeNode<span class="token operator">*</span> right<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">val</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">left</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">right</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><p>转化的过程也很容易，其实这是一个数学问题，对于一棵完全二叉树（满二叉树），节点<code>tree[i]</code>的左子树永远是<code>tree[2*i+1]</code>，节点<code>tree[i]</code>的右子树永远是<code>tree[2*i+2]</code>；并且我们只需要递归到倒数第二层的树即可，即<code>if (i &lt; length/2)</code>。</p><pre class="language-c" data-language="c"><code class="language-c">TreeNode<span class="token operator">*</span> <span class="token function">addtree</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> tree<span class="token punctuation">,</span> <span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token comment">//数组转链表</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> length<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment">//arr.length()</span>    <span class="token punctuation">&#123;</span>        TreeNode<span class="token operator">*</span> tree <span class="token operator">=</span> new <span class="token function">TreeNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                tree<span class="token operator">-></span>val <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        tree<span class="token operator">-></span>left <span class="token operator">=</span> <span class="token function">addtree</span><span class="token punctuation">(</span>tree<span class="token punctuation">,</span> arr<span class="token punctuation">,</span> i <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tree<span class="token operator">-></span>right <span class="token operator">=</span> <span class="token function">addtree</span><span class="token punctuation">(</span>tree<span class="token punctuation">,</span> arr<span class="token punctuation">,</span> i <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> tree<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="链表二叉树转数组"><a class="markdownIt-Anchor" href="#链表二叉树转数组"></a> 链表二叉树转数组</h2><p>比较困难的是如何将链表二叉树转换为数组，因为链表形式下并不一定每一个节点都有两个子节点，因此链表二叉树是没有办法直接转化成一棵数组型的完全二叉树（可能也可以，但是我不会，欢迎在评论区讨论）。</p><p>如果可以获得链式二叉树的高度，那么可以通过BFS来遍历整个链表，即使链表的节点没有左枝或右枝，也把一个空节点加进stack中，这样理论上可以实现链表到数组的转换，不过实现起来还是非常麻烦。</p><p>因此，我们绝大多数情况下是不会将链表转化成数组的，因为在链表中操作数据是非常方便的（当然在数组中操作也不麻烦），我们做的最多的事情就是搜索和遍历二叉树，如果不是很理解前一句话，建议再次回顾一下上一篇文章：<a href="https://tonylsx611.github.io/2022/02/25/binary_tree_1/">链式二叉树简介</a></p><h2 id="例题98"><a class="markdownIt-Anchor" href="#例题98"></a> 例题98</h2><h3 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述</h3><p>Leetcode链接: <a href="https://leetcode-cn.com/problems/validate-binary-search-tree/">98. 验证二叉搜索树 - 力扣（LeetCode） (leetcode-cn.com)</a></p><p>给你一个二叉树的根节点 root ，判断其是否是一个有效的二叉搜索树。</p><p>有效 二叉搜索树定义如下：</p><ul><li>节点的左子树只包含 小于 当前节点的数。</li><li>节点的右子树只包含 大于 当前节点的数。</li><li>所有左子树和右子树自身必须也是二叉搜索树。</li></ul><p><strong>输入输出样例：</strong></p><p><img src="/2022/02/24/binary_tree_2/tree1.jpg" alt="img" loading="lazy"></p><pre class="language-bash" data-language="bash"><code class="language-bash">input: <span class="token assign-left variable">root</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">2,1</span>,3<span class="token punctuation">]</span>output: <span class="token boolean">true</span></code></pre><p><img src="/2022/02/24/binary_tree_2/tree2.jpg" alt="img" loading="lazy"></p><pre class="language-bash" data-language="bash"><code class="language-bash">input: root <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5,1</span>,4,null,null,3,6<span class="token punctuation">]</span>output: <span class="token boolean">false</span>explanation: 根节点的值是 <span class="token number">5</span> ，但是右子节点的值是 <span class="token number">4</span> 。</code></pre><p><strong>提示：</strong></p><ul><li>树中节点数目范围在<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">[</mo><mn>1</mn><mo separator="true">,</mo><mn>1</mn><msup><mn>0</mn><mn>4</mn></msup><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[1, 10^4]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span></span></span></span></span><span class="mclose">]</span></span></span></span> 内</li><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>−</mo><msup><mn>2</mn><mn>31</mn></msup><mo>≤</mo><mi>N</mi><mi>o</mi><mi>d</mi><mi>e</mi><mi mathvariant="normal">.</mi><mi>v</mi><mi>a</mi><mi>l</mi><mo>≤</mo><msup><mn>2</mn><mn>31</mn></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">-2^{31} \leq Node.val \leq 2^{31} - 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.950078em;vertical-align:-0.13597em;"></span><span class="mord">−</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83041em;vertical-align:-0.13597em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mord mathdefault">e</span><span class="mord">.</span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span></li></ul><h3 id="例题分析"><a class="markdownIt-Anchor" href="#例题分析"></a> 例题分析</h3><p>我最初的思路是，只要保证<strong>每一个节点大于左枝，小于右枝</strong>即可。</p><p>对于这样的思路，直接对链表进行BFS搜索即可，如果不会BFS算法，可以参考：<a href="https://tonylsx611.github.io/2022/03/10/BFS/">BFS简介</a>。当然，其他的搜索算法也可以考虑，比如DFS，或者前序中序后序遍历每一个节点，然后判断每个节点的两个子节点就可以。我这里就用BFS来实现，代码如下：</p><pre class="language-c" data-language="c"><code class="language-c">class Solution <span class="token punctuation">&#123;</span>public<span class="token operator">:</span>    TreeNode<span class="token operator">*</span> temp<span class="token punctuation">;</span>    bool <span class="token function">isValidBST</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        queue<span class="token operator">&lt;</span>TreeNode<span class="token operator">*</span><span class="token operator">></span> Q<span class="token punctuation">;</span>        TreeNode<span class="token operator">*</span> node<span class="token punctuation">;</span>        Q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>Q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            node <span class="token operator">=</span> Q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            temp <span class="token operator">=</span> node<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token operator">-></span>left <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token operator">-></span>left<span class="token operator">-></span>val <span class="token operator">>=</span> temp<span class="token operator">-></span>val<span class="token punctuation">)</span>                    <span class="token keyword">return</span> false<span class="token punctuation">;</span>                Q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token operator">-></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token operator">-></span>right <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token operator">-></span>right<span class="token operator">-></span>val <span class="token operator">&lt;=</span> temp<span class="token operator">-></span>val<span class="token punctuation">)</span>                    <span class="token keyword">return</span> false<span class="token punctuation">;</span>                Q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token operator">-></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            Q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> true<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><p>但是，我发现我的理解是有问题的，这个题目要求是节点下面的<strong>所有左子树</strong>的值都要小于该节点，节点下面<strong>所有右子树</strong>的值都要大于该节点！</p><p>比如这个例子，对于该题来说，他的答案应该是false。因为根节点的值是5，但是右侧分支中有一个节点的值是3，小于根节点的值。</p><p><img src="/2022/02/24/binary_tree_2/false%20example-16473330373123.png" alt="false example" loading="lazy"></p><p>因此，对于这种情况，我们应该优先考虑对二叉树进行中序遍历，中序遍历的结果如果是升序就返回true，否则返回false。</p><p>比如上面这个错误的样例的中序遍历结果为：<code>root=[4,5,3,6,7];</code>，他不是单调递增的数组。</p><p>再比如，我们来看一个正确的样例，他的中序遍历的结果为：<code>root=[4,5,6,7,9]</code>，他是单调递增的数组。</p><p><img src="/2022/02/24/binary_tree_2/true%20example.png" alt="true example" loading="lazy"></p><p>因此，我们的思路就可以转变为，<strong>判断该二叉树的中序遍历结果是否为单调递增</strong>，来判断其是否是一个有效的二叉搜索树，代码如下：</p><pre class="language-c" data-language="c"><code class="language-c">class Solution <span class="token punctuation">&#123;</span>public<span class="token operator">:</span>    <span class="token keyword">int</span> btree<span class="token punctuation">[</span><span class="token number">10001</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> ptr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">inorder</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token operator">-></span>left<span class="token punctuation">)</span>            <span class="token function">inorder</span><span class="token punctuation">(</span>root<span class="token operator">-></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        btree<span class="token punctuation">[</span>ptr<span class="token punctuation">]</span> <span class="token operator">=</span> root<span class="token operator">-></span>val<span class="token punctuation">;</span>        ptr<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token operator">-></span>right<span class="token punctuation">)</span>            <span class="token function">inorder</span><span class="token punctuation">(</span>root<span class="token operator">-></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    bool <span class="token function">isValidBST</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">inorder</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//for(int i=0;i&lt;ptr;i++)</span>        <span class="token comment">//    cout&lt;&lt;btree[i]&lt;&lt;" ";    </span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> ptr <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>btree<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>=</span> btree<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> false<span class="token punctuation">;</span>        <span class="token keyword">return</span> true<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><h2 id="例题103"><a class="markdownIt-Anchor" href="#例题103"></a> 例题103</h2><h3 id="题目描述-2"><a class="markdownIt-Anchor" href="#题目描述-2"></a> 题目描述</h3><p>Leetcode链接: <a href="https://leetcode-cn.com/problems/binary-tree-zigzag-level-order-traversal/">103. 二叉树的锯齿形层序遍历 - 力扣（LeetCode） (leetcode-cn.com)</a></p><p>给你二叉树的根节点 root ，返回其节点值的 锯齿形层序遍历 。（即先从左往右，再从右往左进行下一层遍历，以此类推，层与层之间交替进行）。</p><p><strong>输入输出样例：</strong></p><p><img src="/2022/02/24/binary_tree_2/tree1.jpg" alt="img" loading="lazy"></p><pre class="language-bash" data-language="bash"><code class="language-bash">输入：root <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3,9</span>,20,null,null,15,7<span class="token punctuation">]</span>输出：<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span>,<span class="token punctuation">[</span><span class="token number">20,9</span><span class="token punctuation">]</span>,<span class="token punctuation">[</span><span class="token number">15,7</span><span class="token punctuation">]</span><span class="token punctuation">]</span></code></pre><pre class="language-none"><code class="language-none">输入：root &#x3D; [1]输出：[[1]]</code></pre><pre class="language-none"><code class="language-none">输入：root &#x3D; []输出：[]</code></pre><p><strong>提示：</strong></p><ul><li>树中节点数目在范围 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">[</mo><mn>0</mn><mo separator="true">,</mo><mn>2000</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[0, 2000]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">2</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mclose">]</span></span></span></span> 内</li><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>−</mo><mn>100</mn><mo>≤</mo><mi>N</mi><mi>o</mi><mi>d</mi><mi>e</mi><mi mathvariant="normal">.</mi><mi>v</mi><mi>a</mi><mi>l</mi><mo>≤</mo><mn>100</mn></mrow><annotation encoding="application/x-tex">-100 \leq Node.val \leq 100</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">−</span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83041em;vertical-align:-0.13597em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mord mathdefault">e</span><span class="mord">.</span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span></span></span></span></li></ul><h3 id="题目分析"><a class="markdownIt-Anchor" href="#题目分析"></a> 题目分析</h3><p>官方的题解以及很多人都很喜欢使用deque(双端队列)来做，这种做法自然很好，但是我们明明用正常的队列就可以搞定的事，干嘛那么复杂呢？</p><p>首先分析题目，既然要求一层层地遍历二叉树，那么自然而然就应该想到用BFS来遍历。然而正常的BFS是没办法分层的，就是说我们BFS仅仅是维护了一个栈，但实际上无法将层与层之间的节点分离开来。我们只需要稍作改动，在while循环中嵌套一个for循环即可实现。想一想为什么？</p><p>回忆一下BFS的原理，每次进栈的节点深度都一样，每次出栈的节点深度也是一样的，利用这个原理，就可以将每一层的节点分开，输出到二维vector数组中。</p><p>至于还要从右向左遍历，我们只需要构建一个reverse函数，将二维数组双数的行不变，单数的行取反reverse，就好啦。</p><p>需要注意的是，我们应该了解如何使用vector创建二维数组，每次for循环都用resize创建一行vector数组。如果不熟悉的话建议百度一下。。。（比如说我就不太会）</p><p>全部代码如下，建议去leetcode自行做一下，不要抄任何现成的代码，这样对能力提升没好处。</p><pre class="language-c" data-language="c"><code class="language-c">class Solution <span class="token punctuation">&#123;</span>public<span class="token operator">:</span>    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token function">zigzagLevelOrder</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span>     <span class="token punctuation">&#123;</span>        vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> ans<span class="token punctuation">;</span>        queue<span class="token operator">&lt;</span>TreeNode<span class="token operator">*</span><span class="token operator">></span> Q<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span>            Q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            <span class="token keyword">return</span> ans<span class="token punctuation">;</span>        <span class="token keyword">int</span> depth<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>Q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            ans<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>depth<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token keyword">int</span> temp<span class="token operator">=</span>Q<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>temp<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//循环每一层</span>            <span class="token punctuation">&#123;</span>                TreeNode<span class="token operator">*</span> node<span class="token punctuation">;</span>                node<span class="token operator">=</span>Q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token operator">-></span>left <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>                    Q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token operator">-></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token operator">-></span>right <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>                    Q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token operator">-></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>                ans<span class="token punctuation">[</span>depth<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>node<span class="token operator">-></span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>                Q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            depth<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>depth<span class="token punctuation">;</span>i<span class="token operator">+=</span><span class="token number">2</span><span class="token punctuation">)</span>            <span class="token function">reverse</span><span class="token punctuation">(</span>ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">reverse</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> arr<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> len<span class="token operator">=</span>arr<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>len<span class="token operator">&lt;=</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> arr<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//reverse</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> temp<span class="token operator">=</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>arr<span class="token punctuation">[</span>len<span class="token operator">-</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            arr<span class="token punctuation">[</span>len<span class="token operator">-</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> arr<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> algorithm </tag>
            
            <tag> Binary-tree </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo 网站搭建指南</title>
      <link href="/2022/02/24/Hexo_creation/"/>
      <url>/2022/02/24/Hexo_creation/</url>
      
        <content type="html"><![CDATA[<h1 id="hexo-网站搭建指南"><a class="markdownIt-Anchor" href="#hexo-网站搭建指南"></a> Hexo 网站搭建指南</h1><p>Welcome to <a href="https://hexo.io/">Hexo</a>!</p><p>This is a Guideline of building your own hexo, which is written in English, but easy to understand!</p><h2 id="preparation-and-installation"><a class="markdownIt-Anchor" href="#preparation-and-installation"></a> Preparation and Installation</h2><h3 id="git-installation"><a class="markdownIt-Anchor" href="#git-installation"></a> Git Installation</h3><ul><li>Linux/Mac:</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> <span class="token function">git</span></code></pre><ul><li>Windows:</li></ul><p>Official link: <a href="https://gitforwindows.org/">Download git</a></p><ul><li>Check whether installed or not:</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> --version</code></pre><h3 id="nodejs-installation"><a class="markdownIt-Anchor" href="#nodejs-installation"></a> Nodejs Installation</h3><ul><li>Linux/Mac:</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> nodejs<span class="token function">sudo</span> aot <span class="token function">install</span> <span class="token function">npm</span></code></pre><ul><li>Windows:</li></ul><p>Official link: <a href="https://nodejs.org/en/download/">nodejs</a> (Suggest you to choose LTS version)</p><ul><li>Check whether installed or not:</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">node</span> -v<span class="token function">npm</span> -v</code></pre><h3 id="hexo-installation"><a class="markdownIt-Anchor" href="#hexo-installation"></a> Hexo Installation</h3><ul><li>Linux/Mac:</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">npm</span> <span class="token function">install</span> -g hexo-cli</code></pre><ul><li>Windows:</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -g hexo-cli</code></pre><ul><li>Check whether installed or not:</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash">hexo -v</code></pre><h2 id="deploy-local-hexo"><a class="markdownIt-Anchor" href="#deploy-local-hexo"></a> Deploy local Hexo</h2><p>​First you need to <strong>choose or create a folder</strong> to storage the local hexo website. For instance, in <code>C:/Software/My_Hexo</code>.</p><p>​Then right click the folder, click <code>open in Windows terminal</code>; or just use command line to get into that folder.</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> hexo init Mybolg<span class="token function">ls</span> Myblog<span class="token function">sudo</span> <span class="token function">npm</span> <span class="token function">install</span></code></pre><p>​*Note that you can replace <code>Mybolg</code> into any word you like.</p><p>​Now you can see some files inside the folder, but only three folders you need to concerntrated.</p><p><img src="/2022/02/24/Hexo_creation/image-20220308165404552.png" alt="image-20220308165404552" loading="lazy"></p><ul><li>node_modules: 依赖包</li><li>public：存放生成的页面</li><li>scaffolds：生成文章的一些模板</li><li><mark>source</mark>：你的文章和素材放在这里</li><li><mark>themes</mark>：字面意思</li><li><mark>_config.yml</mark>: 博客的配置文件</li></ul><h2 id="use-github-to-host"><a class="markdownIt-Anchor" href="#use-github-to-host"></a> Use GitHub to host</h2><h3 id="create-a-new-repository-on-github"><a class="markdownIt-Anchor" href="#create-a-new-repository-on-github"></a> Create a new repository on GitHub</h3><p>​Firstly, you need to have a GitHub account…</p><p>​Then, create a <strong>new repository</strong> on GitHub and named <code>yourusername.github.io</code>, note that you <strong>must</strong> named like this (<code>yourusername</code> is your user name), otherwise the deployment cannot be recognized.</p><p><img src="/2022/02/24/Hexo_creation/image-20220308165502809.png" alt="image-20220308165502809" loading="lazy"></p><h3 id="add-ssh-key-to-github"><a class="markdownIt-Anchor" href="#add-ssh-key-to-github"></a> Add SSH key to GitHub</h3><p>​Back to the terminal, generate the SSH and add it into GitHub so that GitHub can know whether the your computer are visiting the corresponding account.</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> cofig --global user.name <span class="token string">"yourusername"</span><span class="token function">git</span> cofig --global user.email <span class="token string">"youremail"</span>ssh-keygen -t rsa -C <span class="token string">"youremail"</span></code></pre><p>​The computer then will tell you the path of <code>.ssh</code>, find it on your computer, and open it via notepad.</p><p>​To say it simpler, SSH is just the ID of your computer, GitHub recognized your computer via this ID. <code>id_rsa</code> is your private key that you cannot show it to others, while <code>id_rsa.pub</code> is the public key, you can copy the info to GitHub.</p><p>​<code>Github -&gt; settings -&gt; personal settings -&gt; SSH and PGP keys -&gt; New SSH key</code></p><p>​You can verify whether add the SSH key successfully via your terminal:</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">ssh</span> -T git@github.com</code></pre><h3 id="deploy-hexo-to-github"><a class="markdownIt-Anchor" href="#deploy-hexo-to-github"></a> Deploy hexo to GitHub</h3><p>​Open your folder, remember the three folders that I let you to concentrate? Now it turns into <code>_config.yml</code> file, open it and add something in the end:</p><pre class="language-bash" data-language="bash"><code class="language-bash">deploy:  type: <span class="token function">git</span>  repo: https://github.com/yourusername/yourusername.github.io.git  branch: master</code></pre><p>​*Notice the format must be totally same with me, pay attention to the <strong>blanks</strong>.</p><p>​Before deployment, you need to install the <code>deploy-git</code> in your computer so that you can deploy your own hexo into GitHub.</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git --save</code></pre><p>​Finally, deploy your website via the following commands, and you can visit your bolg via <code>http://yourusername.github.io</code>.</p><pre class="language-bash" data-language="bash"><code class="language-bash">hexo cleanhexo deployhexo generate</code></pre><hr><p>注：本文部分内容引用自<a href="https://blog.csdn.net/sinat_37781304/article/details/82729029">hexo史上最全搭建教程_Fangzh的技术博客</a>， 如有侵权，请联系我。</p>]]></content>
      
      
      <categories>
          
          <category> Hexo搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo文章发布指南</title>
      <link href="/2022/02/20/Hexo_article/"/>
      <url>/2022/02/20/Hexo_article/</url>
      
        <content type="html"><![CDATA[<h2 id="upload-your-first-article"><a class="markdownIt-Anchor" href="#upload-your-first-article"></a> Upload your first article</h2><h3 id="create-a-new-post"><a class="markdownIt-Anchor" href="#create-a-new-post"></a> Create a new post</h3><pre class="language-bash" data-language="bash"><code class="language-bash">hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="run-server"><a class="markdownIt-Anchor" href="#run-server"></a> Run server</h3><pre class="language-bash" data-language="bash"><code class="language-bash">hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="generate-static-files"><a class="markdownIt-Anchor" href="#generate-static-files"></a> Generate static files</h3><pre class="language-bash" data-language="bash"><code class="language-bash">hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="deploy-to-remote-sites"><a class="markdownIt-Anchor" href="#deploy-to-remote-sites"></a> Deploy to remote sites</h3><pre class="language-bash" data-language="bash"><code class="language-bash">hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><h3 id="advanced-settings"><a class="markdownIt-Anchor" href="#advanced-settings"></a> Advanced Settings</h3><p>​Create a bat format file (e.g. <code>start.bat</code>) in the root folder of your blog.</p><pre class="language-bash" data-language="bash"><code class="language-bash">hexo clean <span class="token operator">&amp;</span> hexo d <span class="token operator">&amp;</span> hexo g <span class="token operator">&amp;</span> hexo spause</code></pre><p>​Then every time you uploaded a file or change any settings, you can just double click the .bat file to update your blog, which is very convenience.</p><h2 id="hexo发布类型样例"><a class="markdownIt-Anchor" href="#hexo发布类型样例"></a> Hexo发布类型样例</h2><h3 id="title"><a class="markdownIt-Anchor" href="#title"></a> Title</h3><p>在md下直接使用 # 进行新建标题，左侧菜单栏会自动生成H1-H6的标题，very nice!</p><img src="/2022/02/20/Hexo_article/image-20220308162506034.png" alt="image-20220308162506034" style="zoom:50%;" loading="lazy"><h3 id="头部字段"><a class="markdownIt-Anchor" href="#头部字段"></a> 头部字段</h3><p>在文章的第一行使用三个<code>-</code>（就是分割线）来创建头部字段。</p><ul><li>格式如下：</li></ul><pre class="language-none"><code class="language-none">title: Hexo文章发布指南date: 2077-02-20 00:34:49author: Tonycategories:- Hexo搭建tags: - tag1- tag2katex: true</code></pre><p>其中，<code>categories</code>在一篇文章中建议只设置一个，而<code>tags</code>可以设置很多个。这样可以防止文章分类混乱，在左侧菜单栏中可以很方便的访问。</p><p><img src="/2022/02/20/Hexo_article/image-20220308162715529.png" alt="image-20220308162715529" loading="lazy"></p><h3 id="数学公式"><a class="markdownIt-Anchor" href="#数学公式"></a> 数学公式</h3><p>行内公式使用 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">$</mi></mrow><annotation encoding="application/x-tex">\$</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.80556em;vertical-align:-0.05556em;"></span><span class="mord">$</span></span></span></span> 将数学公式括起来就好，行间公式使用两个<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">$</mi><mi mathvariant="normal">$</mi></mrow><annotation encoding="application/x-tex">\$\$</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.80556em;vertical-align:-0.05556em;"></span><span class="mord">$</span><span class="mord">$</span></span></span></span>，这跟md的格式是一样的。</p><p>需要注意的是，如果文章中需要使用数学公式，最好在头部字段前添加<code>katex: true</code>的字样。</p><ul><li>数学公式样例：</li></ul><p>我是行内公式：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mo>=</mo><msup><mi>x</mi><mn>45</mn></msup><mo>+</mo><mn>3</mn></mrow><annotation encoding="application/x-tex">x=x^{45}+3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">4</span><span class="mord mtight">5</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">3</span></span></span></span>，我还可以接着写。。。</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>x</mi><mn>1</mn></msub><mo>=</mo><msub><mi>x</mi><mn>3</mn></msub><mo>+</mo><mn>2</mn><mo>×</mo><msup><mi>x</mi><mn>6</mn></msup><mspace linebreak="newline"></mspace><mi>α</mi><mi mathvariant="normal">：</mi><mi mathvariant="normal">我</mi><mi mathvariant="normal">是</mi><mi mathvariant="normal">行</mi><mi mathvariant="normal">间</mi><mi mathvariant="normal">公</mi><mi mathvariant="normal">式</mi><mspace linebreak="newline"></mspace><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>2</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>3</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>4</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>5</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>6</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>7</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>8</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>9</mn></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow></mrow><annotation encoding="application/x-tex">x_1=x_3+2\times x^6\\\alpha：我是行间公式\\\left[\begin{matrix}1 &amp; 2 &amp; 3\\4 &amp; 5 &amp; 6\\7 &amp; 8 &amp; 9\\\end{matrix}\right]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.73333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8641079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">6</span></span></span></span></span></span></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span><span class="mord cjk_fallback">：</span><span class="mord cjk_fallback">我</span><span class="mord cjk_fallback">是</span><span class="mord cjk_fallback">行</span><span class="mord cjk_fallback">间</span><span class="mord cjk_fallback">公</span><span class="mord cjk_fallback">式</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:3.60004em;vertical-align:-1.55002em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">4</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">7</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">5</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">8</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">3</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">6</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">9</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><h3 id="图片"><a class="markdownIt-Anchor" href="#图片"></a> 图片</h3><p>只需要将图片拖入md文档中即可，md会自动创建一个与文件名相同的文件夹以储存所有的图片素材，并会自动将图片复制到该文件夹中，因此所有的图片只需要输入相对路径即可。</p><p>比如，本文章的名字为test，那么只需要这样写：<code>![IMG_1479](test/IMG_1479.jpg)</code></p><p>注：Hexo支持GIF格式的图片哦！</p><p><img src="/2022/02/20/Hexo_article/IMG_1479.jpg" alt="IMG_1479" loading="lazy"></p><p><img src="/2022/02/20/Hexo_article/2d6f869662e83398f06070e2a14f838.jpg" alt="2d6f869662e83398f06070e2a14f838" loading="lazy"></p><p><img src="/2022/02/20/Hexo_article/traffic-light.gif" alt="traffic-light" loading="lazy"></p><h3 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h3><p>主题中默认代码有些会很丑，建议修改<code>_config.yml</code>中的指令把代码前面的行号取消，这样或许会变得好看一些，个人建议仅供参考。</p><pre class="language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;using namespace std;int main()&#123;int a,b,c;cin&gt;&gt;a&gt;&gt;c;for(int i&#x3D;0;i&lt;a;i++)cout&lt;&lt;c*a&lt;&lt;endl;return 0;&#125;</code></pre><h3 id="文字"><a class="markdownIt-Anchor" href="#文字"></a> 文字</h3><ul><li>高亮语法：<mark>Highlight</mark>ing （==）</li><li>加粗：<strong>Bold</strong> （**）</li><li>斜体：<em>Wall</em>（*）</li><li>删除线：<s>请给我打钱</s>（~~）</li></ul><h3 id="音频及视频"><a class="markdownIt-Anchor" href="#音频及视频"></a> 音频及视频</h3><p>暂不支持。。。</p><p>（正在努力开发中。。。）</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>video</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>test/DSC_7412.MOV<span class="token punctuation">'</span></span>        <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>video/mp4<span class="token punctuation">'</span></span>        <span class="token attr-name">controls</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>controls<span class="token punctuation">'</span></span>         <span class="token attr-name">preload</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>auto<span class="token punctuation">"</span></span>       <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>100%<span class="token punctuation">'</span></span>        <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>100%<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>video</span><span class="token punctuation">></span></span></code></pre><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>E</mi><mi>N</mi><mi>D</mi></mrow><annotation encoding="application/x-tex">END</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span></span></span></span></span></p>]]></content>
      
      
      <categories>
          
          <category> Hexo搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
