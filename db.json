{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-yun/source/yun.png","path":"yun.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-yun/source/yun.svg","path":"yun.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-yun/source/css/README.md","path":"css/README.md","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-yun/source/css/hexo-theme-yun.styl","path":"css/hexo-theme-yun.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-yun/source/js/chunk-TTX6TVTO.js","path":"js/chunk-TTX6TVTO.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-yun/source/js/gallery-decrypt.js","path":"js/gallery-decrypt.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-yun/source/js/hexo-theme-yun.js","path":"js/hexo-theme-yun.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-yun/source/js/say.js","path":"js/say.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-yun/source/js/pjax.js","path":"js/pjax.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-yun/source/js/sidebar.js","path":"js/sidebar.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-yun/source/js/chunk-YZ7E3ATC.js","path":"js/chunk-YZ7E3ATC.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-yun/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-yun/source/js/analytics/leancloud-visitors.js","path":"js/analytics/leancloud-visitors.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-yun/source/js/comments/disqus.js","path":"js/comments/disqus.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-yun/source/js/comments/waline.js","path":"js/comments/waline.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-yun/source/js/search/algolia-search.js","path":"js/search/algolia-search.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-yun/source/js/search/local-search.js","path":"js/search/local-search.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-yun/source/js/ui/banner.js","path":"js/ui/banner.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-yun/source/js/ui/fireworks.js","path":"js/ui/fireworks.js","modified":0,"renderable":1},{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/image/alipay.png","path":"image/alipay.png","modified":0,"renderable":0},{"_id":"source/image/avatar.jpg","path":"image/avatar.jpg","modified":0,"renderable":0},{"_id":"source/image/avatar_backup.jpg","path":"image/avatar_backup.jpg","modified":0,"renderable":0},{"_id":"source/image/head.jpg","path":"image/head.jpg","modified":0,"renderable":0},{"_id":"source/image/icon.png","path":"image/icon.png","modified":0,"renderable":0},{"_id":"source/image/qq.jpg","path":"image/qq.jpg","modified":0,"renderable":0},{"_id":"source/image/seedling-line.svg","path":"image/seedling-line.svg","modified":0,"renderable":0},{"_id":"source/image/wechat.jpg","path":"image/wechat.jpg","modified":0,"renderable":0},{"_id":"source/image/wechat.png","path":"image/wechat.png","modified":0,"renderable":0}],"Cache":[{"_id":"source/CNAME","hash":"5e2329bc423a886fdd08288eadb59845c3da790f","modified":1646568184189},{"_id":"source/_posts/Hexo_creation.md","hash":"38523172b27aa4ce3f47dd57dfbae60bef5077c7","modified":1646637116997},{"_id":"source/_posts/Hexo_article.md","hash":"bf4f807e688f0fe51449a01b13869c7457774bae","modified":1646568184189},{"_id":"source/_posts/binary_tree_1.md","hash":"71bba3511bafab98b45dae17978a1a75071851ce","modified":1646568184299},{"_id":"source/_posts/binary_tree_2.md","hash":"f61bc99a9384046e8ed6477a23a37f50a60008a8","modified":1646568184299},{"_id":"source/_posts/R2S_build.md","hash":"2b296533962e9983a25a2c1feeccb093f98c3365","modified":1646568184288},{"_id":"source/about/index.md","hash":"3c578647ef994683dada780f8266efaea04b9dd7","modified":1646568184299},{"_id":"source/categories/index.md","hash":"c661acf798d58f9cc3a8fed26a451b35a5ae907c","modified":1646568184299},{"_id":"source/tags/index.md","hash":"e630d4f32d533f0e2969bfe2fa5b8b6f2ea0b2eb","modified":1646568184330},{"_id":"source/_posts/test.md","hash":"aafaeab33e49280a0744a7ff03d8d3763b226061","modified":1646570098853},{"_id":"source/image/avatar.jpg","hash":"371df290b2fe0600ba933d48751ac8f2cadc0a18","modified":1646568184299},{"_id":"source/image/seedling-line.svg","hash":"40de46a2c2adab799174cf37cb722244d57430d9","modified":1646568184330},{"_id":"source/image/avatar_backup.jpg","hash":"981b12aaf6e63ae11de7eb10483b2676ea88f990","modified":1646568184299},{"_id":"source/image/icon.png","hash":"980118ed1d6035f8a6173abbf6099c4227c055c1","modified":1646568184315},{"_id":"source/image/wechat.jpg","hash":"c7050b547d10944c3f802771962c11ab390255dc","modified":1646568184330},{"_id":"source/_posts/R2S_build/image-1.png","hash":"4a475083bd251f14329a16715da142571bd86747","modified":1646568184288},{"_id":"source/_posts/R2S_build/image-10.png","hash":"62f3de2b27546aff4cf6a616df3b3239e5d5d589","modified":1646568184288},{"_id":"source/_posts/R2S_build/image-5.png","hash":"56c526c61081288b63adab3db805722adedec86f","modified":1646568184288},{"_id":"source/_posts/R2S_build/image-7.png","hash":"b6b02dcf36560a6055756269e885694045ad33bc","modified":1646568184288},{"_id":"source/_posts/R2S_build/image-8.png","hash":"dedaee8c824811ffa4f3d27516e012a86636726e","modified":1646568184299},{"_id":"source/_posts/binary_tree_1/v2-0ccba83c7b3dbf7b89964c04021025d9_720w.jpg","hash":"f56981756349a08c44d83576af3e63798c87e21f","modified":1646568184299},{"_id":"source/_posts/binary_tree_2/image.png","hash":"779e786c51aefa1b4c15d9945a62b452137e2024","modified":1646568184299},{"_id":"node_modules/hexo-theme-yun/src/dist/global.d.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1646568180393},{"_id":"source/image/alipay.png","hash":"6be1d1ffc3264828ea0a27a4ca30520dfa448bd6","modified":1646568184299},{"_id":"source/image/qq.jpg","hash":"679ce9b7fb0f782ddfb1177689cb0ae09fbded23","modified":1646568184330},{"_id":"source/image/wechat.png","hash":"4660b50917b947a91c35f55b0281c633b9b0addd","modified":1646568184330},{"_id":"source/_posts/Hexo_article/IMG_1479.jpg","hash":"f869ae1d27243b47840d63ffbe1bd136c7c7a503","modified":1646568184283},{"_id":"source/_posts/R2S_build/image-20220305212846426.png","hash":"ea4b0543826c23f95321520feaca18a54e27c00f","modified":1646568184288},{"_id":"source/_posts/R2S_build/image-9-1024x194.png","hash":"00c8bfd48272b1b8487d34e711ac2800569c3230","modified":1646568184299},{"_id":"node_modules/hexo-theme-yun/README.md","hash":"9bdce4f5ad2d809a2b8e378b5473875947805f8c","modified":1646568180346},{"_id":"node_modules/hexo-theme-yun/package.json","hash":"60eb7764668aef7183293ced33a8f7051d168356","modified":1646568180362},{"_id":"node_modules/hexo-theme-yun/_config.yml","hash":"0f8a86ee6db2e80bfbbcb9b47561840a48e644d1","modified":1646568180346},{"_id":"node_modules/hexo-theme-yun/LICENSE","hash":"fa221ceba871b104543fa698b80750fc19552fd2","modified":1646568180346},{"_id":"node_modules/hexo-theme-yun/languages/default.yml","hash":"3866a13fe896b4c5d46541c5cab1f7e61453df19","modified":1646568180346},{"_id":"node_modules/hexo-theme-yun/_vendors.yml","hash":"d6ffaf12dd589c5a247c185187067594d584d778","modified":1646568180346},{"_id":"node_modules/hexo-theme-yun/layout/404.pug","hash":"34b3a5259b3f5b5a6a18059bc8a535e79ea4d03e","modified":1646568180346},{"_id":"node_modules/hexo-theme-yun/languages/en.yml","hash":"73d56d09af0cade0e47ee995f4110d06f831eabe","modified":1646568180346},{"_id":"node_modules/hexo-theme-yun/layout/category.pug","hash":"fc234721ac03d519dbdf39675af5a86e0b6db2e8","modified":1646568180362},{"_id":"node_modules/hexo-theme-yun/layout/archive.pug","hash":"fcbd3bee3e2dc053170888d77de007ec330443be","modified":1646568180362},{"_id":"node_modules/hexo-theme-yun/languages/ja.yml","hash":"18ab694a0c64f4c0e53b570495625901e883df24","modified":1646568180346},{"_id":"node_modules/hexo-theme-yun/languages/zh-CN.yml","hash":"a38b30c9c2fc6c4231ec60ac02538dae2d4e8527","modified":1646568180346},{"_id":"node_modules/hexo-theme-yun/layout/girls.pug","hash":"8fb552ed751c280cd78e87e68e7b8758d0f1360f","modified":1646568180362},{"_id":"node_modules/hexo-theme-yun/layout/gallery.pug","hash":"f06f0f8d9eb9e2c0c89f7017e188d4f6cd2ec9ee","modified":1646568180362},{"_id":"node_modules/hexo-theme-yun/layout/index.pug","hash":"72ce130efc06d107d5244e54d62bd533abe88bff","modified":1646568180362},{"_id":"node_modules/hexo-theme-yun/layout/links.pug","hash":"bb0a3c0b69eb535b7e9b1fbd7831e182f4dbb441","modified":1646568180362},{"_id":"node_modules/hexo-theme-yun/layout/tag.pug","hash":"f1c2ae57b62f6a0c6fcc91a1270b5bf328ca2421","modified":1646568180362},{"_id":"node_modules/hexo-theme-yun/layout/slide.pug","hash":"08a761e1e76e205c7a8cff255844f8fa73d98c8e","modified":1646568180362},{"_id":"node_modules/hexo-theme-yun/layout/page.pug","hash":"3574c9cd0e1039f968e539ef50a586587fdb9234","modified":1646568180362},{"_id":"node_modules/hexo-theme-yun/layout/post.pug","hash":"ee5ec618062e964abbfee35cc45f647a5c9dc99d","modified":1646568180362},{"_id":"node_modules/hexo-theme-yun/src/.eslintrc","hash":"0be644fc1b5e74061960eeea473fc5c1a202850c","modified":1646568180393},{"_id":"node_modules/hexo-theme-yun/src/README.md","hash":"6d24573c91c965704c15f1a66f696ee566366654","modified":1646568180393},{"_id":"node_modules/hexo-theme-yun/src/package.json","hash":"899775e130ddaedca5885ff27fd852536692f41c","modified":1646568180393},{"_id":"node_modules/hexo-theme-yun/source/yun.png","hash":"b8ae426fa5dd7579d23d189c222641d812c51c0a","modified":1646568180393},{"_id":"node_modules/hexo-theme-yun/src/.pnpm-debug.log","hash":"ef32320da5b1ef767a75ddedaffb5ce25bade8d4","modified":1646568180393},{"_id":"node_modules/hexo-theme-yun/src/tsup.config.ts","hash":"13022bfd0c0789181c2b3a859ddbd957966a25df","modified":1646568180393},{"_id":"node_modules/hexo-theme-yun/src/tsconfig.json","hash":"be54132469f2600bbc0dbf1a862a1bd751a8f145","modified":1646568180393},{"_id":"node_modules/hexo-theme-yun/layout/_mixin/index.pug","hash":"e9e30a87904a73f16b26cb697e164d586e170c6f","modified":1646568180346},{"_id":"node_modules/hexo-theme-yun/source/yun.svg","hash":"78218ba93f0150e3613c7d0b60575ebe6131255f","modified":1646568180393},{"_id":"node_modules/hexo-theme-yun/layout/_mixin/page-header.pug","hash":"56771304fc062882fcb83b3a57036cb12a6d2dab","modified":1646568180346},{"_id":"node_modules/hexo-theme-yun/src/global.d.ts","hash":"0477bc506e6d702c58f566520da06b93ce0dd237","modified":1646568180393},{"_id":"node_modules/hexo-theme-yun/layout/_mixin/icon.pug","hash":"18ee2c33b4e6ef71c31d7955f9a20789fe6aa9e4","modified":1646568180346},{"_id":"node_modules/hexo-theme-yun/layout/_mixin/post-tags.pug","hash":"10eec5c3dad74e73a2ee9c05434e4757c080fcb5","modified":1646568180346},{"_id":"node_modules/hexo-theme-yun/layout/_mixin/post-meta.pug","hash":"31b90b74399074814475fdbae2a4666891d452e0","modified":1646568180346},{"_id":"node_modules/hexo-theme-yun/layout/_partial/banner.pug","hash":"ef194187e0c6e3cf56cbbde53d5bec552c02f030","modified":1646568180346},{"_id":"node_modules/hexo-theme-yun/layout/_mixin/post-collapse.pug","hash":"741195a5a29ecb5863b1fd0c3b203d960aae05c1","modified":1646568180346},{"_id":"node_modules/hexo-theme-yun/layout/_partial/extended.pug","hash":"ea46f99febbfc7688b0f7435e3075397a5029859","modified":1646568180346},{"_id":"node_modules/hexo-theme-yun/layout/_partial/background.pug","hash":"a5f5b72932df0b0a78d2732a3b45f5f69ab481fd","modified":1646568180346},{"_id":"node_modules/hexo-theme-yun/layout/_mixin/post-categories.pug","hash":"ee645a5c54c279e2346b7ba9f629efab61314026","modified":1646568180346},{"_id":"node_modules/hexo-theme-yun/layout/_partial/head.pug","hash":"f696f92349df353dc5eabdd92859efa36ae675ca","modified":1646568180346},{"_id":"node_modules/hexo-theme-yun/layout/_partial/pagination.pug","hash":"b55b6a99b105447b4a6c982fa258680a2a9a34a9","modified":1646568180346},{"_id":"node_modules/hexo-theme-yun/layout/_partial/footer.pug","hash":"288d232e66c97dfbf870cb3bd4ffc2c81e387bdc","modified":1646568180346},{"_id":"node_modules/hexo-theme-yun/layout/_partial/layout.pug","hash":"4504bfc22d4003dee177af6b5b1487c2a7c1361e","modified":1646568180346},{"_id":"node_modules/hexo-theme-yun/layout/_partial/recent-posts.pug","hash":"739ef2710f542ca5584286f28e4b69c343b7d2c4","modified":1646568180362},{"_id":"node_modules/hexo-theme-yun/layout/_third-party/aplayer.pug","hash":"93d2be35ae9731056563d3cbdbf7b13b1933c80c","modified":1646568180362},{"_id":"node_modules/hexo-theme-yun/layout/_third-party/google-tagmanager.pug","hash":"4760e37fb37a41ef1417a427c0168c5fc5dd2ee6","modified":1646568180362},{"_id":"node_modules/hexo-theme-yun/layout/_third-party/iconify.pug","hash":"dadf506575d9b62804fbebceea31c9750e8cb06d","modified":1646568180362},{"_id":"node_modules/hexo-theme-yun/layout/_third-party/cdn.pug","hash":"2cb0400295a5a357fb15a5c12ab3caa544c5a71e","modified":1646568180362},{"_id":"node_modules/hexo-theme-yun/layout/_third-party/lightgallery.pug","hash":"63d2d1c4f55ea15fe8399bfe5da953581dd7a4b6","modified":1646568180362},{"_id":"node_modules/hexo-theme-yun/layout/_third-party/index.pug","hash":"f6275c094349839c5af019e8a7f3f394ba0339bd","modified":1646568180362},{"_id":"node_modules/hexo-theme-yun/layout/_partial/sidebar.pug","hash":"b15fa6fc27091b6bd1cf68368879d8d2f5428f55","modified":1646568180362},{"_id":"node_modules/hexo-theme-yun/layout/_third-party/pjax.pug","hash":"bb1801ccef4dc1a37dffdac4726350fc9cd48d67","modified":1646568180362},{"_id":"node_modules/hexo-theme-yun/layout/_widget/index.pug","hash":"6a286ec87146e6796440583c6d9c6549ede03bc0","modified":1646568180362},{"_id":"node_modules/hexo-theme-yun/layout/_widget/cloud.pug","hash":"eb3185db30fef0303b667e50b96a7d85edda8006","modified":1646568180362},{"_id":"node_modules/hexo-theme-yun/layout/_widget/aplayer.pug","hash":"75e6886a70ffc8a26018b70933671e5d599cc8e3","modified":1646568180362},{"_id":"node_modules/hexo-theme-yun/layout/_widget/back-to-top.pug","hash":"4c880afb3213395fb64e8a6a4fc3b653bb82b938","modified":1646568180362},{"_id":"node_modules/hexo-theme-yun/layout/_widget/notice.pug","hash":"346ada39ba6586cb631ac5b1f129683f3ee015f4","modified":1646568180362},{"_id":"node_modules/hexo-theme-yun/layout/_widget/mourn.pug","hash":"03e8bfa95ab5b6d348ac9dd3b613b07e3919ac78","modified":1646568180362},{"_id":"node_modules/hexo-theme-yun/scripts/events/config.js","hash":"0233ac9e17f5173b3ee89d784d711d2857d34086","modified":1646568180377},{"_id":"node_modules/hexo-theme-yun/scripts/events/index.js","hash":"6d842742da0927ae659eaed41510518406295300","modified":1646568180377},{"_id":"node_modules/hexo-theme-yun/scripts/events/data.js","hash":"aa4480dcc89643c83a53002817b85ad7f4c6ac04","modified":1646568180377},{"_id":"node_modules/hexo-theme-yun/layout/_widget/say.pug","hash":"59da54e31aa4e6d4a93d9a0b9292fb632f5112ee","modified":1646568180362},{"_id":"node_modules/hexo-theme-yun/scripts/events/utils.js","hash":"cc00e1d556242ff5f1947a1bd772ec9366dcb921","modified":1646568180377},{"_id":"node_modules/hexo-theme-yun/scripts/filters/index.js","hash":"ca5ef23cec64ac3fc53aae702a8684a53d98f71c","modified":1646568180377},{"_id":"node_modules/hexo-theme-yun/scripts/helpers/encrypt.js","hash":"e3e0cd73a5bf0413a9e8fe96b1622f40c2c1db50","modified":1646568180377},{"_id":"node_modules/hexo-theme-yun/scripts/helpers/engine.js","hash":"9b41629b73dc5bbc18772b292a029531bfd2beca","modified":1646568180377},{"_id":"node_modules/hexo-theme-yun/scripts/helpers/index.js","hash":"1b0d52542255837702cdc41d3885c349c5be5873","modified":1646568180379},{"_id":"node_modules/hexo-theme-yun/scripts/helpers/yun-config.js","hash":"84922c25c87de0b5da5b7b105f825fdfba6b6cd7","modified":1646568180379},{"_id":"node_modules/hexo-theme-yun/scripts/tags/prompt.js","hash":"621d0fa41d15e5617b8a25dd7625c8e5691b35b6","modified":1646568180379},{"_id":"node_modules/hexo-theme-yun/source/css/README.md","hash":"1aa055a1404df2310e675383528d0409821073ba","modified":1646568180379},{"_id":"node_modules/hexo-theme-yun/source/js/chunk-TTX6TVTO.js","hash":"1fa6dd4208272ac21ece94e825a41dee4d2941f8","modified":1646568180393},{"_id":"node_modules/hexo-theme-yun/source/css/hexo-theme-yun.styl","hash":"92a120f2bf01c53f2e3e1c7a7a12455bfc90c446","modified":1646568180393},{"_id":"node_modules/hexo-theme-yun/source/js/gallery-decrypt.js","hash":"a6c6661ff169a4651f09d2d55769f6e525b5bc4e","modified":1646568180393},{"_id":"node_modules/hexo-theme-yun/source/js/hexo-theme-yun.js","hash":"7f6dbea52bba74ebb4aeb8e8029d9794bd600e84","modified":1646568180393},{"_id":"node_modules/hexo-theme-yun/source/js/say.js","hash":"08e0fde224b70bc7f2af46ae2e446e22cf8c0ad4","modified":1646568180393},{"_id":"node_modules/hexo-theme-yun/source/js/pjax.js","hash":"b71d40474f71070e67110002308e7e8ec9ca358e","modified":1646568180393},{"_id":"node_modules/hexo-theme-yun/source/js/utils.js","hash":"019c533f9f72aef21d9412fd4045d1bce91f9d5e","modified":1646568180393},{"_id":"node_modules/hexo-theme-yun/source/js/chunk-YZ7E3ATC.js","hash":"b1f695dc7e85a7c168eaed5d67b736664051f695","modified":1646568180393},{"_id":"node_modules/hexo-theme-yun/source/js/sidebar.js","hash":"f397553493d8f35ce213de88e8dc6eabce2fab36","modified":1646568180393},{"_id":"node_modules/hexo-theme-yun/src/.vscode/settings.json","hash":"64047d34f729a9dc1ab3d9c44169ba58d938e420","modified":1646568180393},{"_id":"node_modules/hexo-theme-yun/src/dist/hexo-theme-yun.js","hash":"4c6c05b42dc4bae0362b7b7db4b9f60a8ca638f0","modified":1646568180393},{"_id":"node_modules/hexo-theme-yun/src/dist/chunk-HJP66R6O.js","hash":"de391ed652409b2f8542c1c437198b0fe65b1904","modified":1646568180393},{"_id":"node_modules/hexo-theme-yun/src/dist/pjax.js","hash":"2aa8e3d383122e26185938f9f2ba45052c1c31cf","modified":1646568180393},{"_id":"node_modules/hexo-theme-yun/src/source/hexo-theme-yun.ts","hash":"e993edea707513d75d3f8d2c9132415965c06767","modified":1646568180393},{"_id":"node_modules/hexo-theme-yun/src/dist/utils.js","hash":"d7dfdd3663f658cdb2f6924383bf3775af04161d","modified":1646568180393},{"_id":"node_modules/hexo-theme-yun/src/source/gallery-decrypt.ts","hash":"994bcaf82aa4cf9e4145de92f4a8694d9c08b5cc","modified":1646568180393},{"_id":"node_modules/hexo-theme-yun/src/source/pjax.ts","hash":"7e010393f0a6d2e9dd8d8e71b9369106d949bf82","modified":1646568180393},{"_id":"node_modules/hexo-theme-yun/src/source/say.ts","hash":"d5e892204649df8248448d71f03599b6eb74e1fe","modified":1646568180393},{"_id":"node_modules/hexo-theme-yun/layout/_partial/post/post-content.pug","hash":"b840c3f544a38c931736163ddecb38f4b150bfa7","modified":1646568180346},{"_id":"node_modules/hexo-theme-yun/layout/_partial/post/post-nav.pug","hash":"ea351236ab82ff43b66272de1baade70d868131f","modified":1646568180362},{"_id":"node_modules/hexo-theme-yun/layout/_partial/post/post-copyright.pug","hash":"a2415fb36a0dffbe57bf32cd2cfeace11cbaed6b","modified":1646568180362},{"_id":"node_modules/hexo-theme-yun/layout/_partial/post/post-schema.pug","hash":"ec85079174da20c9f608b142e7fda2c28a9b1dac","modified":1646568180362},{"_id":"node_modules/hexo-theme-yun/src/source/sidebar.ts","hash":"f4c12d7b64031c24f0b59c478c5e856c0c624b27","modified":1646568180393},{"_id":"node_modules/hexo-theme-yun/src/source/utils.ts","hash":"84f06ddeff826ca9e404d4aa524dadec4894a27e","modified":1646568180393},{"_id":"node_modules/hexo-theme-yun/layout/_partial/post/post-edit.pug","hash":"2b7d4c210815ddc63c5b6fc5b5fd6a348e75093f","modified":1646568180362},{"_id":"node_modules/hexo-theme-yun/layout/_partial/sidebar/info.pug","hash":"db26c881a5d8c8e2d96c2e5598e9c3c40d135cdf","modified":1646568180362},{"_id":"node_modules/hexo-theme-yun/layout/_third-party/adsense/google-adsense.pug","hash":"ae63305d776ebec0d88f91197b5c78cdaa401585","modified":1646568180362},{"_id":"node_modules/hexo-theme-yun/layout/_partial/post/reward.pug","hash":"ceccfe15e3be500274fda527a6d6234ffddf93b8","modified":1646568180362},{"_id":"node_modules/hexo-theme-yun/layout/_third-party/analytics/leancloud-visitors.pug","hash":"40a781cd84069802cae2c487efafc8908f414851","modified":1646568180362},{"_id":"node_modules/hexo-theme-yun/layout/_third-party/analytics/busuanzi.pug","hash":"a2503ff7bbaf05e9205fd36177f803cf91021e05","modified":1646568180362},{"_id":"node_modules/hexo-theme-yun/layout/_third-party/analytics/google-analytics.pug","hash":"3533cdc143c0b9b4304e375e0a1d2527050d989a","modified":1646568180362},{"_id":"node_modules/hexo-theme-yun/layout/_third-party/comments/disqusjs.pug","hash":"67f82c85cf0451c4b7e1e8cf985a1e9a92df0ab6","modified":1646568180362},{"_id":"node_modules/hexo-theme-yun/layout/_third-party/comments/giscus.pug","hash":"392429ffdd1cdfda24ede464f8eaf033966ccdde","modified":1646568180362},{"_id":"node_modules/hexo-theme-yun/layout/_third-party/comments/github-discussions.pug","hash":"1b559cbb7bcd1d423eab9d9a2ffdb8b7ebbbcea4","modified":1646568180362},{"_id":"node_modules/hexo-theme-yun/layout/_third-party/comments/github-issues.pug","hash":"11801bd330160555dbaf3ef13955ebd61010c7d6","modified":1646568180362},{"_id":"node_modules/hexo-theme-yun/layout/_third-party/comments/disqus.pug","hash":"80ea8bd1fecfc7317a9e5599c9ab9e69c4b4a6b0","modified":1646568180362},{"_id":"node_modules/hexo-theme-yun/layout/_third-party/comments/livere.pug","hash":"f565efde0ee74d69555e8b5c959c96e0f1ae61fb","modified":1646568180362},{"_id":"node_modules/hexo-theme-yun/layout/_third-party/comments/minivaline.pug","hash":"0548263c9f0460916aaeaf77928d27612c1a2897","modified":1646568180362},{"_id":"node_modules/hexo-theme-yun/layout/_third-party/comments/twikoo.pug","hash":"e892045f20dde4528c34b01a8b6aee1c17c9323f","modified":1646568180362},{"_id":"node_modules/hexo-theme-yun/layout/_third-party/comments/index.pug","hash":"1b0a60862071043fe991f320508f949379ec29d3","modified":1646568180362},{"_id":"node_modules/hexo-theme-yun/layout/_third-party/comments/utterances.pug","hash":"44adb592fa4995ff586b6b4ff16232323473992a","modified":1646568180362},{"_id":"node_modules/hexo-theme-yun/layout/_third-party/comments/valine.pug","hash":"98901bdb9de7318a06a7b293a8dcc4e5b22d0992","modified":1646568180362},{"_id":"node_modules/hexo-theme-yun/layout/_third-party/comments/waline.pug","hash":"569a8a39e77bd7e12cf43c248a260dac7d511b3e","modified":1646568180362},{"_id":"node_modules/hexo-theme-yun/layout/_third-party/math/index.pug","hash":"0365a84a14325a52ee574df3f633f96c7a47d78f","modified":1646568180362},{"_id":"node_modules/hexo-theme-yun/layout/_third-party/math/katex.pug","hash":"94ca4fffb5ca7fda7c3e243ff8597a19d0583372","modified":1646568180362},{"_id":"node_modules/hexo-theme-yun/layout/_third-party/mermaid/index.pug","hash":"cc0641ac4ab4ceb8a68cf8740b39e0e3d00fd260","modified":1646568180362},{"_id":"node_modules/hexo-theme-yun/layout/_third-party/mermaid/mermaid.pug","hash":"59af49a1ac78574a858c7e4783c560ac00cf2351","modified":1646568180362},{"_id":"node_modules/hexo-theme-yun/layout/_third-party/seo/baidu-push.pug","hash":"5b08e856a6c75a9b4a5aafccf52b1b418dac0e38","modified":1646568180362},{"_id":"node_modules/hexo-theme-yun/layout/_widget/search/algolia-search.pug","hash":"247630340c95ebc0cff4f274dba8684154391037","modified":1646568180362},{"_id":"node_modules/hexo-theme-yun/layout/_widget/search/local-search.pug","hash":"79ac9e74e4c725c127457061938bea86cbae41db","modified":1646568180362},{"_id":"node_modules/hexo-theme-yun/layout/_widget/search/index.pug","hash":"a1dd964e05b5412c3fc446d80576e51b37926b87","modified":1646568180362},{"_id":"node_modules/hexo-theme-yun/source/css/_components/card.styl","hash":"6d16aae8534f32a8ce439e648e347c98c1e58af3","modified":1646568180379},{"_id":"node_modules/hexo-theme-yun/source/css/_components/scrollbar.styl","hash":"3e332ae27d3aeab1496079cd509649ceccc0f4b5","modified":1646568180379},{"_id":"node_modules/hexo-theme-yun/source/css/_components/button.styl","hash":"3315fc12b1b7659a06120b042a1a2e87a839ebe1","modified":1646568180379},{"_id":"node_modules/hexo-theme-yun/source/css/_extend/girls.styl","hash":"393166ea98ef4bee611dcf00f5e8e22df60b2af0","modified":1646568180379},{"_id":"node_modules/hexo-theme-yun/source/css/_components/ui.styl","hash":"8ef28ee3363f3676c9327a6d163032a003520f40","modified":1646568180379},{"_id":"node_modules/hexo-theme-yun/source/css/_global/dark.styl","hash":"4cc28dcc37af6cd85439728a8f65e4a87dfa1f8b","modified":1646568180379},{"_id":"node_modules/hexo-theme-yun/source/css/_extend/albums.styl","hash":"b0f703fc6e279844b75797edf714cce2135704ed","modified":1646568180379},{"_id":"node_modules/hexo-theme-yun/source/css/_global/index.styl","hash":"6ee9d2bd59706e79e8932bcfc09d86c124467452","modified":1646568180379},{"_id":"node_modules/hexo-theme-yun/source/css/_global/reset.styl","hash":"d1640eb4f76a3cf792c5149e93c42c85da5a29b2","modified":1646568180379},{"_id":"node_modules/hexo-theme-yun/source/css/_helper/index.styl","hash":"deb685278c7d3b1bd2180337cb8b868f8ff97ac5","modified":1646568180379},{"_id":"node_modules/hexo-theme-yun/source/css/_layout/main.styl","hash":"03669973c1cbb5c93fdba4c011666b921f0587e3","modified":1646568180379},{"_id":"node_modules/hexo-theme-yun/source/css/_layout/banner.styl","hash":"efd219425cb30d18368c5aca701c656fe3a0d458","modified":1646568180379},{"_id":"node_modules/hexo-theme-yun/source/css/_layout/links.styl","hash":"9c060919f57a9928331aec8c7bfaae56a6fa8401","modified":1646568180379},{"_id":"node_modules/hexo-theme-yun/source/css/_layout/page.styl","hash":"6ec814a0fccf73a22ba6b94f6d4bba889cbaf0b5","modified":1646568180379},{"_id":"node_modules/hexo-theme-yun/source/css/_layout/footer.styl","hash":"ed3afcddad7358ebd89f01846157e26a586e7adf","modified":1646568180379},{"_id":"node_modules/hexo-theme-yun/source/css/_layout/pagination.styl","hash":"a4da4433f5c11b4de36782b7dac059bf67dde938","modified":1646568180379},{"_id":"node_modules/hexo-theme-yun/source/css/_layout/post.styl","hash":"2d495981c7456095ae62f97e9c032e1f3fb03cda","modified":1646568180379},{"_id":"node_modules/hexo-theme-yun/source/css/_widget/back-to-top.styl","hash":"d86e0c0c6af9fcb293c1fcef20f4ed68272ccc71","modified":1646568180379},{"_id":"node_modules/hexo-theme-yun/source/css/_mixins/base.styl","hash":"2531c22a33aa929dd6bf6c1b9975efc0a70e4a8d","modified":1646568180379},{"_id":"node_modules/hexo-theme-yun/source/css/_variables/_base.styl","hash":"0288e3196318b116f991b043486fbc0b4b0bc579","modified":1646568180379},{"_id":"node_modules/hexo-theme-yun/source/css/_variables/var.styl","hash":"c22b204db73404f7904f74c2b416c5623b4a0144","modified":1646568180379},{"_id":"node_modules/hexo-theme-yun/source/css/_widget/index.styl","hash":"640fea56a013989f5878334d09f3f9b716865c8c","modified":1646568180379},{"_id":"node_modules/hexo-theme-yun/source/css/_variables/_code.styl","hash":"63d012b501ec13cfbf374defd663fee3abf0b565","modified":1646568180379},{"_id":"node_modules/hexo-theme-yun/source/css/_variables/_colors.styl","hash":"5842436c6b74763866a1bc38d1c7cfed715e9e22","modified":1646568180379},{"_id":"node_modules/hexo-theme-yun/source/css/_widget/notice.styl","hash":"8b1ca54535311f38b91433e5beadbeed02ecd28b","modified":1646568180379},{"_id":"node_modules/hexo-theme-yun/source/css/_widget/say.styl","hash":"01dac9059f96fb085edf230e63f3f5e351358fde","modified":1646568180379},{"_id":"node_modules/hexo-theme-yun/source/js/comments/disqus.js","hash":"b3bd520a06de628bd844f811fc1bd07970db786e","modified":1646568180393},{"_id":"node_modules/hexo-theme-yun/source/css/_widget/comment.styl","hash":"02e90ba274312eec5f0eeb3e651750c178d03988","modified":1646568180379},{"_id":"node_modules/hexo-theme-yun/source/js/comments/waline.js","hash":"e3487719adbc045be6c85c24a0b3522f688dcb65","modified":1646568180393},{"_id":"node_modules/hexo-theme-yun/source/js/analytics/leancloud-visitors.js","hash":"b47a3b4432e0c34362f162a17f9a9494fa08e85e","modified":1646568180393},{"_id":"node_modules/hexo-theme-yun/source/js/search/algolia-search.js","hash":"0cb0730a3d178eb39d6418280e03ce459116190b","modified":1646568180393},{"_id":"node_modules/hexo-theme-yun/source/js/ui/banner.js","hash":"2ae3473300d16f50d4ea72f6d1d638006e361074","modified":1646568180393},{"_id":"node_modules/hexo-theme-yun/source/js/search/local-search.js","hash":"8fdeaa352a0f079e822d8adfa720a89f45ad60f6","modified":1646568180393},{"_id":"node_modules/hexo-theme-yun/src/source/comments/waline.ts","hash":"f3d1b9c9eb95b169bb778c2bb45dc4d93623041d","modified":1646568180393},{"_id":"node_modules/hexo-theme-yun/src/source/analytics/leancloud-visitors.ts","hash":"27bfa0f7a3cd5b3c9cc308365b917a2d90e0e3b5","modified":1646568180393},{"_id":"node_modules/hexo-theme-yun/src/source/comments/disqus.ts","hash":"7d1ee111cbde2b94472e23f620fa845f3607adab","modified":1646568180393},{"_id":"node_modules/hexo-theme-yun/source/js/ui/fireworks.js","hash":"517c20d1dc6d52aafc48148410c3bcf0557c24cd","modified":1646568180393},{"_id":"node_modules/hexo-theme-yun/src/source/search/algolia-search.ts","hash":"a63762d43c60a4d313bf87e65a6d2f1327c89303","modified":1646568180393},{"_id":"node_modules/hexo-theme-yun/src/source/search/local-search.ts","hash":"3e137cc24da00630ef2fbfe44e56656948c930b7","modified":1646568180393},{"_id":"node_modules/hexo-theme-yun/src/source/ui/banner.ts","hash":"2fa7b78769dd9ab2d693ec433856b8c5ba8f7b74","modified":1646568180393},{"_id":"node_modules/hexo-theme-yun/src/source/ui/fireworks.ts","hash":"14d005d02ea47f6c4dcf12701c9fc201cef9e867","modified":1646568180393},{"_id":"node_modules/hexo-theme-yun/source/css/_components/sidebar/sidebar-nav.styl","hash":"a8c2eb2d01a02855ff074e2765c5275f839c7315","modified":1646568180379},{"_id":"node_modules/hexo-theme-yun/source/css/_components/sidebar/sidebar.styl","hash":"c1266c1039f6ac26884f4619265b29bdb1a9e31c","modified":1646568180379},{"_id":"node_modules/hexo-theme-yun/source/css/_components/sidebar/sidebar-toc.styl","hash":"fe429fb5aa85739c23a052737aba12418149b182","modified":1646568180379},{"_id":"node_modules/hexo-theme-yun/source/css/_components/sidebar/site-overview.styl","hash":"1a34782575569c8fec4489716a3dae13a88c8170","modified":1646568180379},{"_id":"node_modules/hexo-theme-yun/source/css/_components/post/post-codebloack.styl","hash":"ca312b2acfee5f8019e39937500a7ed17762f72a","modified":1646568180379},{"_id":"node_modules/hexo-theme-yun/source/css/_components/sidebar/hamburger.styl","hash":"0fa240e8a71fdad14d3fd6b3fd49cf697d4c8153","modified":1646568180379},{"_id":"node_modules/hexo-theme-yun/source/css/_components/post/post-card.styl","hash":"e771203f820dc170f749b89115455a929cea51a5","modified":1646568180379},{"_id":"node_modules/hexo-theme-yun/source/css/_components/post/post-nav.styl","hash":"cec22a5a36eda86b1ee8038e1fa24d9a6c9a0f7f","modified":1646568180379},{"_id":"node_modules/hexo-theme-yun/source/css/_components/post/post-header.styl","hash":"3be5d23cda0020365dbfb39ca35eb00aef65e7cd","modified":1646568180379},{"_id":"node_modules/hexo-theme-yun/source/css/_extend/tags/index.styl","hash":"84112e467510c4d78dc8d9e6cbe1a5012e4d20d8","modified":1646568180379},{"_id":"node_modules/hexo-theme-yun/source/css/_components/post/post-collapse.styl","hash":"6741c225a37e7e121d4159f129b7024402a8eeec","modified":1646568180379},{"_id":"node_modules/hexo-theme-yun/source/css/_components/post/post-markdown.styl","hash":"aa95737537b8c178010c99b3301af6f86f097904","modified":1646568180379},{"_id":"node_modules/hexo-theme-yun/source/css/_extend/tags/prompt.styl","hash":"4294c5e7f3aef84d369a8ac71f8340e39a681c59","modified":1646568180379},{"_id":"node_modules/hexo-theme-yun/source/css/_components/post/post-reward.styl","hash":"f69f5770e0908a8e8a0931f67e2417b0e1692613","modified":1646568180379},{"_id":"node_modules/hexo-theme-yun/source/css/_widget/search/algolia-search.styl","hash":"d008422dfd104304f50e472a431afa16cad0e15a","modified":1646568180379},{"_id":"node_modules/hexo-theme-yun/source/css/_widget/search/local-search.styl","hash":"06468fd1f85390134d4cf034dc5abcc114018257","modified":1646568180393},{"_id":"node_modules/hexo-theme-yun/source/css/_widget/search/index.styl","hash":"7f03d791c7bc384672e11960af79676ba8b3cb68","modified":1646568180379},{"_id":"source/_posts/R2S_build/image-2-1024x507.png","hash":"3f2c9846cdfeed98cf3b5bf94cb0a5d41de40705","modified":1646568184288},{"_id":"source/_posts/R2S_build/image-3-1024x485.png","hash":"72f68e697d9656bc5dfdf05584660bee9d89e29a","modified":1646568184288},{"_id":"source/_posts/binary_tree_1/image.png","hash":"486e325512c567f522e925b9fe9d58c24789176b","modified":1646568184299},{"_id":"source/_posts/Hexo_article/traffic-light.gif","hash":"0c18d7a2a137b37b0af5b1c647aa12a3393dec64","modified":1646568184288},{"_id":"source/_posts/Hexo_article/2d6f869662e83398f06070e2a14f838.jpg","hash":"e891f3a3b28cbefa79db0d9fd17939f3df865836","modified":1646568184205},{"_id":"source/image/head.jpg","hash":"91d9c38a4f5864f68119064c8e61227e6b7719aa","modified":1646568184315},{"_id":"source/_posts/Hexo_article/884019afce82603bd8bc8fd4e531839.jpg","hash":"464c9842be81f3cc1cb18df887b8f497216e1d80","modified":1646568184283},{"_id":"public/search.xml","hash":"d424ff77e93fdf7003d4cbb794e5c92f76579516","modified":1646667900007},{"_id":"public/about/index.html","hash":"ed30241bde02dafb572728953d781a955858d89d","modified":1646667900007},{"_id":"public/tags/index.html","hash":"4eb7ff039b3cad92ad07306616e4ca85fb49f3f1","modified":1646667900007},{"_id":"public/categories/index.html","hash":"d76bed264d36a3d02a07706170a8796ac4215be1","modified":1646667900007},{"_id":"public/2022/03/06/test/index.html","hash":"d4c191bfc162884ca89813b9e84ff9161c892ec5","modified":1646667900007},{"_id":"public/archives/index.html","hash":"673f701f738a6a94daec2d7ec71d1bd0f687ea85","modified":1646667900007},{"_id":"public/archives/2022/index.html","hash":"8f08acba7c0c52ecac1ebcb2fe35c974a649baf6","modified":1646667900007},{"_id":"public/archives/2022/02/index.html","hash":"6992745fdf05bab96170c7756920cf6d61056472","modified":1646667900007},{"_id":"public/archives/2022/03/index.html","hash":"799ab82254bb160293b8d3a5b46bcefab8b09507","modified":1646667900007},{"_id":"public/categories/Hexo搭建/index.html","hash":"37ea5e98b69fc8873c80d56e6da69336fae9cd98","modified":1646667900007},{"_id":"public/categories/计算机网络/index.html","hash":"e9ceea75e9c28380a897e942506a600e59e96876","modified":1646667900007},{"_id":"public/categories/algorithm/index.html","hash":"44663887ba092af8189500184c8f84a6d1b01da3","modified":1646667900007},{"_id":"public/tags/Hexo/index.html","hash":"f64c5d1873c767f7f19a634ee19ede4229a88e1f","modified":1646667900007},{"_id":"public/tags/R2S/index.html","hash":"41e8e94e3516742c19ce258d0bad8641f74bc163","modified":1646667900007},{"_id":"public/tags/Computer-Network/index.html","hash":"813b052b295dbf1f8d6d13ad5ee30b4b985535f0","modified":1646667900007},{"_id":"public/tags/软路由/index.html","hash":"98a61def0537ab8761c60f1f8fc4fa896cdcb24f","modified":1646667900007},{"_id":"public/tags/科学上网/index.html","hash":"845a601dddf333bb8965b0d7b18aa0c93bbea562","modified":1646667900007},{"_id":"public/tags/Binary-tree/index.html","hash":"40c103a9161d5e153c2f2e1bdff1af31317a1eae","modified":1646667900007},{"_id":"public/tags/algorithm/index.html","hash":"453c28ba9f337b458fad953b345a8f19a7fbb482","modified":1646667900007},{"_id":"public/2022/02/26/R2S_build/index.html","hash":"ff186b7c372ba0551b9fba930053bbf37fb04ea4","modified":1646667900007},{"_id":"public/2022/02/25/binary_tree_1/index.html","hash":"cbbcd553dcc2e65b40dc29bc01a5f5fc26e19742","modified":1646667900007},{"_id":"public/2022/02/24/binary_tree_2/index.html","hash":"30152ba9242b227ca7b3e710286472e6ef22a3a1","modified":1646667900007},{"_id":"public/2022/02/24/Hexo_creation/index.html","hash":"d7563f1b22cbc2f18d0cb9674e6a5fe5097c5159","modified":1646667900007},{"_id":"public/2022/02/20/Hexo_article/index.html","hash":"a4a57bfd186e7d9891759ba7da517e3c8e58890f","modified":1646667900007},{"_id":"public/index.html","hash":"310e47c11b1c7ea0b317eef48808def7308f80e2","modified":1646667900007},{"_id":"public/yun.png","hash":"b8ae426fa5dd7579d23d189c222641d812c51c0a","modified":1646667900007},{"_id":"public/CNAME","hash":"5e2329bc423a886fdd08288eadb59845c3da790f","modified":1646667900007},{"_id":"public/yun.svg","hash":"78218ba93f0150e3613c7d0b60575ebe6131255f","modified":1646667900007},{"_id":"public/image/avatar.jpg","hash":"371df290b2fe0600ba933d48751ac8f2cadc0a18","modified":1646667900007},{"_id":"public/image/icon.png","hash":"980118ed1d6035f8a6173abbf6099c4227c055c1","modified":1646667900007},{"_id":"public/image/avatar_backup.jpg","hash":"981b12aaf6e63ae11de7eb10483b2676ea88f990","modified":1646667900007},{"_id":"public/image/seedling-line.svg","hash":"40de46a2c2adab799174cf37cb722244d57430d9","modified":1646667900007},{"_id":"public/image/wechat.jpg","hash":"c7050b547d10944c3f802771962c11ab390255dc","modified":1646667900007},{"_id":"public/2022/02/26/R2S_build/image-1.png","hash":"4a475083bd251f14329a16715da142571bd86747","modified":1646667900007},{"_id":"public/2022/02/26/R2S_build/image-10.png","hash":"62f3de2b27546aff4cf6a616df3b3239e5d5d589","modified":1646667900007},{"_id":"public/2022/02/26/R2S_build/image-5.png","hash":"56c526c61081288b63adab3db805722adedec86f","modified":1646667900007},{"_id":"public/2022/02/26/R2S_build/image-7.png","hash":"b6b02dcf36560a6055756269e885694045ad33bc","modified":1646667900007},{"_id":"public/2022/02/26/R2S_build/image-8.png","hash":"dedaee8c824811ffa4f3d27516e012a86636726e","modified":1646667900007},{"_id":"public/2022/02/25/binary_tree_1/v2-0ccba83c7b3dbf7b89964c04021025d9_720w.jpg","hash":"f56981756349a08c44d83576af3e63798c87e21f","modified":1646667900007},{"_id":"public/2022/02/24/binary_tree_2/image.png","hash":"779e786c51aefa1b4c15d9945a62b452137e2024","modified":1646667900007},{"_id":"public/image/alipay.png","hash":"6be1d1ffc3264828ea0a27a4ca30520dfa448bd6","modified":1646667900007},{"_id":"public/image/qq.jpg","hash":"679ce9b7fb0f782ddfb1177689cb0ae09fbded23","modified":1646667900007},{"_id":"public/image/wechat.png","hash":"4660b50917b947a91c35f55b0281c633b9b0addd","modified":1646667900007},{"_id":"public/2022/02/20/Hexo_article/IMG_1479.jpg","hash":"f869ae1d27243b47840d63ffbe1bd136c7c7a503","modified":1646667900007},{"_id":"public/2022/02/26/R2S_build/image-20220305212846426.png","hash":"ea4b0543826c23f95321520feaca18a54e27c00f","modified":1646667900007},{"_id":"public/2022/02/26/R2S_build/image-9-1024x194.png","hash":"00c8bfd48272b1b8487d34e711ac2800569c3230","modified":1646667900007},{"_id":"public/js/chunk-TTX6TVTO.js","hash":"bdf31df5623cdbe4d6629c1d602cad7a15e5cf78","modified":1646667900007},{"_id":"public/css/README.html","hash":"3c68b48595e975dd7614b64f71ffa1113d784228","modified":1646667900007},{"_id":"public/js/gallery-decrypt.js","hash":"ce7bf147867972a0f9e903eebf66b7e0f0145f61","modified":1646667900007},{"_id":"public/js/hexo-theme-yun.js","hash":"94d9c460fc7e8658f21fcc7f9af346fc5e9d4a63","modified":1646667900007},{"_id":"public/js/say.js","hash":"59c8436cecab357b196c37fe0345e932e7f74dbe","modified":1646667900007},{"_id":"public/js/pjax.js","hash":"4d59377e0b830db741c2786d4ccbb2f5498ee13e","modified":1646667900007},{"_id":"public/js/sidebar.js","hash":"ee176346d586bebbd146f157c23f9d367d5499a4","modified":1646667900007},{"_id":"public/js/chunk-YZ7E3ATC.js","hash":"5bb1683531dd823bb4de8b6541f0290d46006320","modified":1646667900007},{"_id":"public/js/analytics/leancloud-visitors.js","hash":"89952ef9eb5fe84c856068a6e6c274e396f74dd5","modified":1646667900007},{"_id":"public/js/utils.js","hash":"36ec1d14c7537ad402e577d5deea7c09160197f8","modified":1646667900007},{"_id":"public/js/comments/disqus.js","hash":"4073464ce42643d9571211b1443af61fc78ec0d1","modified":1646667900007},{"_id":"public/js/comments/waline.js","hash":"090fc554d82400dca9ae6a2806be48c111b90b3e","modified":1646667900007},{"_id":"public/js/search/algolia-search.js","hash":"aa26c979800de87ecfd9d0ba2ae7e238da2389ba","modified":1646667900007},{"_id":"public/js/search/local-search.js","hash":"db5cbac019bd86c47cac02e6dba1dfb1861ef31f","modified":1646667900007},{"_id":"public/js/ui/banner.js","hash":"c73ce4b3021bebf1a264e481dbe9a8a1ccd87d3b","modified":1646667900007},{"_id":"public/js/ui/fireworks.js","hash":"859b09a6065ea1b4f02f2974e590e44cc13fccc9","modified":1646667900007},{"_id":"public/css/hexo-theme-yun.css","hash":"74b33bb12d72932d4e507614ac42d1f4ba7307c8","modified":1646667900007},{"_id":"public/assets/js/DPlayer.min.js","hash":"104613de917a8576ff26aaa36d1c0c7bb4730f4e","modified":1646667900007},{"_id":"public/2022/02/26/R2S_build/image-2-1024x507.png","hash":"3f2c9846cdfeed98cf3b5bf94cb0a5d41de40705","modified":1646667900007},{"_id":"public/2022/02/26/R2S_build/image-3-1024x485.png","hash":"72f68e697d9656bc5dfdf05584660bee9d89e29a","modified":1646667900007},{"_id":"public/2022/02/25/binary_tree_1/image.png","hash":"486e325512c567f522e925b9fe9d58c24789176b","modified":1646667900007},{"_id":"public/2022/02/20/Hexo_article/traffic-light.gif","hash":"0c18d7a2a137b37b0af5b1c647aa12a3393dec64","modified":1646667900007},{"_id":"public/2022/02/20/Hexo_article/2d6f869662e83398f06070e2a14f838.jpg","hash":"e891f3a3b28cbefa79db0d9fd17939f3df865836","modified":1646667900007},{"_id":"public/image/head.jpg","hash":"91d9c38a4f5864f68119064c8e61227e6b7719aa","modified":1646667900007},{"_id":"public/2022/02/20/Hexo_article/884019afce82603bd8bc8fd4e531839.jpg","hash":"464c9842be81f3cc1cb18df887b8f497216e1d80","modified":1646667900007}],"Category":[{"name":"Hexo搭建","_id":"cl0gvjylo0004p8zu2gqp8xll"},{"name":"计算机网络","_id":"cl0gvjylt000bp8zuhpxv9xkn"},{"name":"algorithm","_id":"cl0gvjylz000qp8zuevwlemed"}],"Data":[],"Page":[{"title":"about","date":"2022-02-21T14:50:30.000Z","_content":"\n# About me\n\n> ## WHO AM I\n>\n> ~~20岁，是学生。​~~\n>\n> 希望与你相遇。\n\n见字如面，很高兴认识你。\n\n目前我是一名澳科大在读本科生，IT专业。\n\n我喜欢交朋友，然而我是一个社恐人士。\n\n我喜欢拍照片，然而没有拿得出手的美图。\n\n我喜欢打游戏，然而这个赛季王者还是钻石。\n\n。。。 。。。\n\n如果，你喜欢我（和我的网页）的话\n\n~~欢迎给我打钱💰~~\n\n# Contact\n\nEmail: tonylsx611@gmail.com\n\nWechat: tony83607693\n\nQQ: 2858075831","source":"about/index.md","raw":"---\ntitle: about\ndate: 2022-02-21 22:50:30\n---\n\n# About me\n\n> ## WHO AM I\n>\n> ~~20岁，是学生。​~~\n>\n> 希望与你相遇。\n\n见字如面，很高兴认识你。\n\n目前我是一名澳科大在读本科生，IT专业。\n\n我喜欢交朋友，然而我是一个社恐人士。\n\n我喜欢拍照片，然而没有拿得出手的美图。\n\n我喜欢打游戏，然而这个赛季王者还是钻石。\n\n。。。 。。。\n\n如果，你喜欢我（和我的网页）的话\n\n~~欢迎给我打钱💰~~\n\n# Contact\n\nEmail: tonylsx611@gmail.com\n\nWechat: tony83607693\n\nQQ: 2858075831","updated":"2022-03-06T12:03:04.299Z","path":"about/index.html","comments":1,"layout":"page","_id":"cl0gvjylh0000p8zu2n2i22me","content":"<h1 id=\"About-me\"><a href=\"#About-me\" class=\"headerlink\" title=\"About me\"></a>About me</h1><blockquote>\n<h2 id=\"WHO-AM-I\"><a href=\"#WHO-AM-I\" class=\"headerlink\" title=\"WHO AM I\"></a>WHO AM I</h2><p><del>20岁，是学生。​</del></p>\n<p>希望与你相遇。</p>\n</blockquote>\n<p>见字如面，很高兴认识你。</p>\n<p>目前我是一名澳科大在读本科生，IT专业。</p>\n<p>我喜欢交朋友，然而我是一个社恐人士。</p>\n<p>我喜欢拍照片，然而没有拿得出手的美图。</p>\n<p>我喜欢打游戏，然而这个赛季王者还是钻石。</p>\n<p>。。。 。。。</p>\n<p>如果，你喜欢我（和我的网页）的话</p>\n<p><del>欢迎给我打钱💰</del></p>\n<h1 id=\"Contact\"><a href=\"#Contact\" class=\"headerlink\" title=\"Contact\"></a>Contact</h1><p>Email: tonylsx611@gmail.com</p>\n<p>Wechat: tony83607693</p>\n<p>QQ: 2858075831</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"About-me\"><a href=\"#About-me\" class=\"headerlink\" title=\"About me\"></a>About me</h1><blockquote>\n<h2 id=\"WHO-AM-I\"><a href=\"#WHO-AM-I\" class=\"headerlink\" title=\"WHO AM I\"></a>WHO AM I</h2><p><del>20岁，是学生。​</del></p>\n<p>希望与你相遇。</p>\n</blockquote>\n<p>见字如面，很高兴认识你。</p>\n<p>目前我是一名澳科大在读本科生，IT专业。</p>\n<p>我喜欢交朋友，然而我是一个社恐人士。</p>\n<p>我喜欢拍照片，然而没有拿得出手的美图。</p>\n<p>我喜欢打游戏，然而这个赛季王者还是钻石。</p>\n<p>。。。 。。。</p>\n<p>如果，你喜欢我（和我的网页）的话</p>\n<p><del>欢迎给我打钱💰</del></p>\n<h1 id=\"Contact\"><a href=\"#Contact\" class=\"headerlink\" title=\"Contact\"></a>Contact</h1><p>Email: tonylsx611@gmail.com</p>\n<p>Wechat: tony83607693</p>\n<p>QQ: 2858075831</p>\n"},{"title":"tags","date":"2022-02-23T06:03:55.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2022-02-23 14:03:55\ntype: tags\n---\n","updated":"2022-03-06T12:03:04.330Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cl0gvjylm0002p8zucs1g61em","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"categories","date":"2022-02-23T09:10:40.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2022-02-23 17:10:40\ntype: categories\n---\n","updated":"2022-03-06T12:03:04.299Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cl0gvjylq0006p8zuaa42g4yv","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Hexo 网站搭建指南","date":"2022-02-23T19:14:29.000Z","author":"Hexo offical","_content":"# Hexo 网站搭建指南\n\nWelcome to [Hexo](https://hexo.io/)! \n\nThis is a Guideline of building your own hexo, which is written in English, but easy to understand!\n\n## 搭建前的准备\n\n### Git Installation\n\n- Linux/Mac:\n\n```bash\nsudo apt install git\n```\n\n- Windows:\n\nOfficial link: [Download git](https://gitforwindows.org/)\n\n- Check whether installed or not:\n\n```bash\ngit --version\n```\n\n### Nodejs Installation\n\n- Linux/Mac:\n\n```bash\nsudo apt install nodejs\nsudo aot install npm\n```\n\n- Windows:\n\nOfficial link: [nodejs](https://nodejs.org/en/download/) (Suggest you to choose LTS version)\n\n- Check whether installed or not:\n\n```bash\nnode -v\nnpm -v\n```\n\n### Hexo Installation\n\n- Linux/Mac:\n\n```bash\nsudo npm install -g hexo-cli\n```\n\n- Windows:\n\n```bash\nnpm install -g hexo-cli\n```\n\n- Check whether installed or not:\n\n```bash\nhexo -v\n```\n\n## 部署本地Hexo网站\n\n​\t\tFirst you need to **choose or create a folder** to storage the local hexo website. For instance, in `C:/Software/My_Hexo`.\n\n​\t\tThen right click the folder, click `open in Windows terminal`; or just use command line to get into that folder.\n\n```bash\nsudo hexo init Mybolg\nls Myblog\nsudo npm install\n```\n\n​\t\t*Note that you can replace `Mybolg` into any word you like.\n\n​\t\tNow you can see some files inside the folder, but only three folders you need to concerntrated.\n\n- node_modules: 依赖包\n- public：存放生成的页面\n- scaffolds：生成文章的一些模板\n- ==source==：你的文章和素材放在这里\n- ==themes==：字面意思\n- ==_config.yml==: 博客的配置文件\n\n## 使用Github托管网页\n\n### Create a new repository on Github\n\n​\t\tFirstly, you need to have a github account…\n\n​\t\tThen, create a **new repository** on github and named `yourusername.github.io`, note that you **must** named like this (`yourusername` is your user name), otherwise the deployment cannot be reconigzed. \n\n### Add SSH key to Github\n\n​\t\tBack to the terminal, generate the SSH and add it into github so that github can know whether the your computer are visiting the corresponding account.\n\n```bash\ngit cofig --global user.name \"yourusername\"\ngit cofig --global user.email \"youremail\"\nssh-keygen -t rsa -C \"youremail\"\n```\n\n​\t\tThe computer then will tell you the path of `.ssh`, find it on your computer, and open it via notepad.\n\n​\t\tTo say it simpler, ssh is just the ID of your computer, github recogized your computer via this ID. `id_rsa` is your private key that you cannot show it to others, while `id_rsa.pub` is the public key, you can copy the info to github.\n\n​\t\t`Github -> settings -> personal settings -> SSH and PGP keys -> New SSH key`\n\n​\t\tYou can verify whether add the SSH key successfully via your terminal:\n\n```bash\nssh -T git@github.com\n```\n\n   ### Deploy hexo to Github\n\n​\t\tOpen your folder, remember the three folders that I let you to conceretrate? Now it truns into `_config.yml` file, open it and add something in the end:\n\n```bash\ndeploy:\n  type: git\n  repo: https://github.com/yourusername/yourusername.github.io.git\n  branch: master\n```\n\n​\t\t*Notice the format must be totally same with me, pay attention to the **blanks**.\n\n​\t\tBefore deployment, you need to install the `deploy-git` in your computer so that you can deploy your own hexo into github.\n\n```bash\nsudo npm install hexo-deployer-git --save\n```\n\n​\t\tFinally, deploy your website via the following commands, and you can visit your bolg via `http://yourusername.github.io`.\n\n```bash\nhexo clean\nhexo deploy\nhexo generate\n```\n\n## 上传你的第一个文章\n\n### Create a new post\n\n``` bash\nhexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\nhexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\nhexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\nhexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n\n### Advanced Settings\n\nCreate a bat format file (e.g. `start.bat`) in the root folder of your blog.\n\n```bash\nhexo clean & hexo d & hexo g & hexo s\npause\n```\n\nThen every time you uploaded a file or change any settings, you can just double click the .bat file to update your blog, which is very convenience.\n\n---\n\n注：本文部分内容引用自[hexo史上最全搭建教程_Fangzh的技术博客](https://blog.csdn.net/sinat_37781304/article/details/82729029)， 如有侵权，请联系我。","source":"_posts/Hexo_creation.md","raw":"---\ntitle: Hexo 网站搭建指南\ndate: 2022-02-24 03:14:29\nauthor: Hexo offical\ntags: \n\t- Hexo\ncategories:\n\t- Hexo搭建\n---\n# Hexo 网站搭建指南\n\nWelcome to [Hexo](https://hexo.io/)! \n\nThis is a Guideline of building your own hexo, which is written in English, but easy to understand!\n\n## 搭建前的准备\n\n### Git Installation\n\n- Linux/Mac:\n\n```bash\nsudo apt install git\n```\n\n- Windows:\n\nOfficial link: [Download git](https://gitforwindows.org/)\n\n- Check whether installed or not:\n\n```bash\ngit --version\n```\n\n### Nodejs Installation\n\n- Linux/Mac:\n\n```bash\nsudo apt install nodejs\nsudo aot install npm\n```\n\n- Windows:\n\nOfficial link: [nodejs](https://nodejs.org/en/download/) (Suggest you to choose LTS version)\n\n- Check whether installed or not:\n\n```bash\nnode -v\nnpm -v\n```\n\n### Hexo Installation\n\n- Linux/Mac:\n\n```bash\nsudo npm install -g hexo-cli\n```\n\n- Windows:\n\n```bash\nnpm install -g hexo-cli\n```\n\n- Check whether installed or not:\n\n```bash\nhexo -v\n```\n\n## 部署本地Hexo网站\n\n​\t\tFirst you need to **choose or create a folder** to storage the local hexo website. For instance, in `C:/Software/My_Hexo`.\n\n​\t\tThen right click the folder, click `open in Windows terminal`; or just use command line to get into that folder.\n\n```bash\nsudo hexo init Mybolg\nls Myblog\nsudo npm install\n```\n\n​\t\t*Note that you can replace `Mybolg` into any word you like.\n\n​\t\tNow you can see some files inside the folder, but only three folders you need to concerntrated.\n\n- node_modules: 依赖包\n- public：存放生成的页面\n- scaffolds：生成文章的一些模板\n- ==source==：你的文章和素材放在这里\n- ==themes==：字面意思\n- ==_config.yml==: 博客的配置文件\n\n## 使用Github托管网页\n\n### Create a new repository on Github\n\n​\t\tFirstly, you need to have a github account…\n\n​\t\tThen, create a **new repository** on github and named `yourusername.github.io`, note that you **must** named like this (`yourusername` is your user name), otherwise the deployment cannot be reconigzed. \n\n### Add SSH key to Github\n\n​\t\tBack to the terminal, generate the SSH and add it into github so that github can know whether the your computer are visiting the corresponding account.\n\n```bash\ngit cofig --global user.name \"yourusername\"\ngit cofig --global user.email \"youremail\"\nssh-keygen -t rsa -C \"youremail\"\n```\n\n​\t\tThe computer then will tell you the path of `.ssh`, find it on your computer, and open it via notepad.\n\n​\t\tTo say it simpler, ssh is just the ID of your computer, github recogized your computer via this ID. `id_rsa` is your private key that you cannot show it to others, while `id_rsa.pub` is the public key, you can copy the info to github.\n\n​\t\t`Github -> settings -> personal settings -> SSH and PGP keys -> New SSH key`\n\n​\t\tYou can verify whether add the SSH key successfully via your terminal:\n\n```bash\nssh -T git@github.com\n```\n\n   ### Deploy hexo to Github\n\n​\t\tOpen your folder, remember the three folders that I let you to conceretrate? Now it truns into `_config.yml` file, open it and add something in the end:\n\n```bash\ndeploy:\n  type: git\n  repo: https://github.com/yourusername/yourusername.github.io.git\n  branch: master\n```\n\n​\t\t*Notice the format must be totally same with me, pay attention to the **blanks**.\n\n​\t\tBefore deployment, you need to install the `deploy-git` in your computer so that you can deploy your own hexo into github.\n\n```bash\nsudo npm install hexo-deployer-git --save\n```\n\n​\t\tFinally, deploy your website via the following commands, and you can visit your bolg via `http://yourusername.github.io`.\n\n```bash\nhexo clean\nhexo deploy\nhexo generate\n```\n\n## 上传你的第一个文章\n\n### Create a new post\n\n``` bash\nhexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\nhexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\nhexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\nhexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n\n### Advanced Settings\n\nCreate a bat format file (e.g. `start.bat`) in the root folder of your blog.\n\n```bash\nhexo clean & hexo d & hexo g & hexo s\npause\n```\n\nThen every time you uploaded a file or change any settings, you can just double click the .bat file to update your blog, which is very convenience.\n\n---\n\n注：本文部分内容引用自[hexo史上最全搭建教程_Fangzh的技术博客](https://blog.csdn.net/sinat_37781304/article/details/82729029)， 如有侵权，请联系我。","slug":"Hexo_creation","published":1,"updated":"2022-03-07T07:11:56.997Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0gvjylk0001p8zua9gf5nby","content":"<h1 id=\"Hexo-网站搭建指南\"><a href=\"#Hexo-网站搭建指南\" class=\"headerlink\" title=\"Hexo 网站搭建指南\"></a>Hexo 网站搭建指南</h1><p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! </p>\n<p>This is a Guideline of building your own hexo, which is written in English, but easy to understand!</p>\n<h2 id=\"搭建前的准备\"><a href=\"#搭建前的准备\" class=\"headerlink\" title=\"搭建前的准备\"></a>搭建前的准备</h2><h3 id=\"Git-Installation\"><a href=\"#Git-Installation\" class=\"headerlink\" title=\"Git Installation\"></a>Git Installation</h3><ul>\n<li>Linux/Mac:</li>\n</ul>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> <span class=\"token function\">git</span></code></pre>\n<ul>\n<li>Windows:</li>\n</ul>\n<p>Official link: <a href=\"https://gitforwindows.org/\">Download git</a></p>\n<ul>\n<li>Check whether installed or not:</li>\n</ul>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> --version</code></pre>\n<h3 id=\"Nodejs-Installation\"><a href=\"#Nodejs-Installation\" class=\"headerlink\" title=\"Nodejs Installation\"></a>Nodejs Installation</h3><ul>\n<li>Linux/Mac:</li>\n</ul>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> nodejs\n<span class=\"token function\">sudo</span> aot <span class=\"token function\">install</span> <span class=\"token function\">npm</span></code></pre>\n<ul>\n<li>Windows:</li>\n</ul>\n<p>Official link: <a href=\"https://nodejs.org/en/download/\">nodejs</a> (Suggest you to choose LTS version)</p>\n<ul>\n<li>Check whether installed or not:</li>\n</ul>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">node</span> -v\n<span class=\"token function\">npm</span> -v</code></pre>\n<h3 id=\"Hexo-Installation\"><a href=\"#Hexo-Installation\" class=\"headerlink\" title=\"Hexo Installation\"></a>Hexo Installation</h3><ul>\n<li>Linux/Mac:</li>\n</ul>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">npm</span> <span class=\"token function\">install</span> -g hexo-cli</code></pre>\n<ul>\n<li>Windows:</li>\n</ul>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> -g hexo-cli</code></pre>\n<ul>\n<li>Check whether installed or not:</li>\n</ul>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">hexo -v</code></pre>\n<h2 id=\"部署本地Hexo网站\"><a href=\"#部署本地Hexo网站\" class=\"headerlink\" title=\"部署本地Hexo网站\"></a>部署本地Hexo网站</h2><p>​        First you need to <strong>choose or create a folder</strong> to storage the local hexo website. For instance, in <code>C:/Software/My_Hexo</code>.</p>\n<p>​        Then right click the folder, click <code>open in Windows terminal</code>; or just use command line to get into that folder.</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> hexo init Mybolg\n<span class=\"token function\">ls</span> Myblog\n<span class=\"token function\">sudo</span> <span class=\"token function\">npm</span> <span class=\"token function\">install</span></code></pre>\n<p>​        *Note that you can replace <code>Mybolg</code> into any word you like.</p>\n<p>​        Now you can see some files inside the folder, but only three folders you need to concerntrated.</p>\n<ul>\n<li>node_modules: 依赖包</li>\n<li>public：存放生成的页面</li>\n<li>scaffolds：生成文章的一些模板</li>\n<li>==source==：你的文章和素材放在这里</li>\n<li>==themes==：字面意思</li>\n<li>==_config.yml==: 博客的配置文件</li>\n</ul>\n<h2 id=\"使用Github托管网页\"><a href=\"#使用Github托管网页\" class=\"headerlink\" title=\"使用Github托管网页\"></a>使用Github托管网页</h2><h3 id=\"Create-a-new-repository-on-Github\"><a href=\"#Create-a-new-repository-on-Github\" class=\"headerlink\" title=\"Create a new repository on Github\"></a>Create a new repository on Github</h3><p>​        Firstly, you need to have a github account…</p>\n<p>​        Then, create a <strong>new repository</strong> on github and named <code>yourusername.github.io</code>, note that you <strong>must</strong> named like this (<code>yourusername</code> is your user name), otherwise the deployment cannot be reconigzed. </p>\n<h3 id=\"Add-SSH-key-to-Github\"><a href=\"#Add-SSH-key-to-Github\" class=\"headerlink\" title=\"Add SSH key to Github\"></a>Add SSH key to Github</h3><p>​        Back to the terminal, generate the SSH and add it into github so that github can know whether the your computer are visiting the corresponding account.</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> cofig --global user.name <span class=\"token string\">\"yourusername\"</span>\n<span class=\"token function\">git</span> cofig --global user.email <span class=\"token string\">\"youremail\"</span>\nssh-keygen -t rsa -C <span class=\"token string\">\"youremail\"</span></code></pre>\n<p>​        The computer then will tell you the path of <code>.ssh</code>, find it on your computer, and open it via notepad.</p>\n<p>​        To say it simpler, ssh is just the ID of your computer, github recogized your computer via this ID. <code>id_rsa</code> is your private key that you cannot show it to others, while <code>id_rsa.pub</code> is the public key, you can copy the info to github.</p>\n<p>​        <code>Github -&gt; settings -&gt; personal settings -&gt; SSH and PGP keys -&gt; New SSH key</code></p>\n<p>​        You can verify whether add the SSH key successfully via your terminal:</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">ssh</span> -T git@github.com</code></pre>\n<h3 id=\"Deploy-hexo-to-Github\"><a href=\"#Deploy-hexo-to-Github\" class=\"headerlink\" title=\"Deploy hexo to Github\"></a>Deploy hexo to Github</h3><p>​        Open your folder, remember the three folders that I let you to conceretrate? Now it truns into <code>_config.yml</code> file, open it and add something in the end:</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">deploy:\n  type: <span class=\"token function\">git</span>\n  repo: https://github.com/yourusername/yourusername.github.io.git\n  branch: master</code></pre>\n<p>​        <em>Notice the format must be totally same with me, pay attention to the <em>*blanks</em></em>.</p>\n<p>​        Before deployment, you need to install the <code>deploy-git</code> in your computer so that you can deploy your own hexo into github.</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">npm</span> <span class=\"token function\">install</span> hexo-deployer-git --save</code></pre>\n<p>​        Finally, deploy your website via the following commands, and you can visit your bolg via <code>http://yourusername.github.io</code>.</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">hexo clean\nhexo deploy\nhexo generate</code></pre>\n<h2 id=\"上传你的第一个文章\"><a href=\"#上传你的第一个文章\" class=\"headerlink\" title=\"上传你的第一个文章\"></a>上传你的第一个文章</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">hexo new <span class=\"token string\">\"My New Post\"</span></code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">hexo server</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">hexo generate</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">hexo deploy</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n<h3 id=\"Advanced-Settings\"><a href=\"#Advanced-Settings\" class=\"headerlink\" title=\"Advanced Settings\"></a>Advanced Settings</h3><p>Create a bat format file (e.g. <code>start.bat</code>) in the root folder of your blog.</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">hexo clean <span class=\"token operator\">&amp;</span> hexo d <span class=\"token operator\">&amp;</span> hexo g <span class=\"token operator\">&amp;</span> hexo s\npause</code></pre>\n<p>Then every time you uploaded a file or change any settings, you can just double click the .bat file to update your blog, which is very convenience.</p>\n<hr>\n<p>注：本文部分内容引用自<a href=\"https://blog.csdn.net/sinat_37781304/article/details/82729029\">hexo史上最全搭建教程_Fangzh的技术博客</a>， 如有侵权，请联系我。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Hexo-网站搭建指南\"><a href=\"#Hexo-网站搭建指南\" class=\"headerlink\" title=\"Hexo 网站搭建指南\"></a>Hexo 网站搭建指南</h1><p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! </p>\n<p>This is a Guideline of building your own hexo, which is written in English, but easy to understand!</p>\n<h2 id=\"搭建前的准备\"><a href=\"#搭建前的准备\" class=\"headerlink\" title=\"搭建前的准备\"></a>搭建前的准备</h2><h3 id=\"Git-Installation\"><a href=\"#Git-Installation\" class=\"headerlink\" title=\"Git Installation\"></a>Git Installation</h3><ul>\n<li>Linux/Mac:</li>\n</ul>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> <span class=\"token function\">git</span></code></pre>\n<ul>\n<li>Windows:</li>\n</ul>\n<p>Official link: <a href=\"https://gitforwindows.org/\">Download git</a></p>\n<ul>\n<li>Check whether installed or not:</li>\n</ul>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> --version</code></pre>\n<h3 id=\"Nodejs-Installation\"><a href=\"#Nodejs-Installation\" class=\"headerlink\" title=\"Nodejs Installation\"></a>Nodejs Installation</h3><ul>\n<li>Linux/Mac:</li>\n</ul>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> nodejs\n<span class=\"token function\">sudo</span> aot <span class=\"token function\">install</span> <span class=\"token function\">npm</span></code></pre>\n<ul>\n<li>Windows:</li>\n</ul>\n<p>Official link: <a href=\"https://nodejs.org/en/download/\">nodejs</a> (Suggest you to choose LTS version)</p>\n<ul>\n<li>Check whether installed or not:</li>\n</ul>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">node</span> -v\n<span class=\"token function\">npm</span> -v</code></pre>\n<h3 id=\"Hexo-Installation\"><a href=\"#Hexo-Installation\" class=\"headerlink\" title=\"Hexo Installation\"></a>Hexo Installation</h3><ul>\n<li>Linux/Mac:</li>\n</ul>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">npm</span> <span class=\"token function\">install</span> -g hexo-cli</code></pre>\n<ul>\n<li>Windows:</li>\n</ul>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> -g hexo-cli</code></pre>\n<ul>\n<li>Check whether installed or not:</li>\n</ul>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">hexo -v</code></pre>\n<h2 id=\"部署本地Hexo网站\"><a href=\"#部署本地Hexo网站\" class=\"headerlink\" title=\"部署本地Hexo网站\"></a>部署本地Hexo网站</h2><p>​        First you need to <strong>choose or create a folder</strong> to storage the local hexo website. For instance, in <code>C:/Software/My_Hexo</code>.</p>\n<p>​        Then right click the folder, click <code>open in Windows terminal</code>; or just use command line to get into that folder.</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> hexo init Mybolg\n<span class=\"token function\">ls</span> Myblog\n<span class=\"token function\">sudo</span> <span class=\"token function\">npm</span> <span class=\"token function\">install</span></code></pre>\n<p>​        *Note that you can replace <code>Mybolg</code> into any word you like.</p>\n<p>​        Now you can see some files inside the folder, but only three folders you need to concerntrated.</p>\n<ul>\n<li>node_modules: 依赖包</li>\n<li>public：存放生成的页面</li>\n<li>scaffolds：生成文章的一些模板</li>\n<li>==source==：你的文章和素材放在这里</li>\n<li>==themes==：字面意思</li>\n<li>==_config.yml==: 博客的配置文件</li>\n</ul>\n<h2 id=\"使用Github托管网页\"><a href=\"#使用Github托管网页\" class=\"headerlink\" title=\"使用Github托管网页\"></a>使用Github托管网页</h2><h3 id=\"Create-a-new-repository-on-Github\"><a href=\"#Create-a-new-repository-on-Github\" class=\"headerlink\" title=\"Create a new repository on Github\"></a>Create a new repository on Github</h3><p>​        Firstly, you need to have a github account…</p>\n<p>​        Then, create a <strong>new repository</strong> on github and named <code>yourusername.github.io</code>, note that you <strong>must</strong> named like this (<code>yourusername</code> is your user name), otherwise the deployment cannot be reconigzed. </p>\n<h3 id=\"Add-SSH-key-to-Github\"><a href=\"#Add-SSH-key-to-Github\" class=\"headerlink\" title=\"Add SSH key to Github\"></a>Add SSH key to Github</h3><p>​        Back to the terminal, generate the SSH and add it into github so that github can know whether the your computer are visiting the corresponding account.</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> cofig --global user.name <span class=\"token string\">\"yourusername\"</span>\n<span class=\"token function\">git</span> cofig --global user.email <span class=\"token string\">\"youremail\"</span>\nssh-keygen -t rsa -C <span class=\"token string\">\"youremail\"</span></code></pre>\n<p>​        The computer then will tell you the path of <code>.ssh</code>, find it on your computer, and open it via notepad.</p>\n<p>​        To say it simpler, ssh is just the ID of your computer, github recogized your computer via this ID. <code>id_rsa</code> is your private key that you cannot show it to others, while <code>id_rsa.pub</code> is the public key, you can copy the info to github.</p>\n<p>​        <code>Github -&gt; settings -&gt; personal settings -&gt; SSH and PGP keys -&gt; New SSH key</code></p>\n<p>​        You can verify whether add the SSH key successfully via your terminal:</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">ssh</span> -T git@github.com</code></pre>\n<h3 id=\"Deploy-hexo-to-Github\"><a href=\"#Deploy-hexo-to-Github\" class=\"headerlink\" title=\"Deploy hexo to Github\"></a>Deploy hexo to Github</h3><p>​        Open your folder, remember the three folders that I let you to conceretrate? Now it truns into <code>_config.yml</code> file, open it and add something in the end:</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">deploy:\n  type: <span class=\"token function\">git</span>\n  repo: https://github.com/yourusername/yourusername.github.io.git\n  branch: master</code></pre>\n<p>​        <em>Notice the format must be totally same with me, pay attention to the <em>*blanks</em></em>.</p>\n<p>​        Before deployment, you need to install the <code>deploy-git</code> in your computer so that you can deploy your own hexo into github.</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">npm</span> <span class=\"token function\">install</span> hexo-deployer-git --save</code></pre>\n<p>​        Finally, deploy your website via the following commands, and you can visit your bolg via <code>http://yourusername.github.io</code>.</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">hexo clean\nhexo deploy\nhexo generate</code></pre>\n<h2 id=\"上传你的第一个文章\"><a href=\"#上传你的第一个文章\" class=\"headerlink\" title=\"上传你的第一个文章\"></a>上传你的第一个文章</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">hexo new <span class=\"token string\">\"My New Post\"</span></code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">hexo server</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">hexo generate</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">hexo deploy</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n<h3 id=\"Advanced-Settings\"><a href=\"#Advanced-Settings\" class=\"headerlink\" title=\"Advanced Settings\"></a>Advanced Settings</h3><p>Create a bat format file (e.g. <code>start.bat</code>) in the root folder of your blog.</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">hexo clean <span class=\"token operator\">&amp;</span> hexo d <span class=\"token operator\">&amp;</span> hexo g <span class=\"token operator\">&amp;</span> hexo s\npause</code></pre>\n<p>Then every time you uploaded a file or change any settings, you can just double click the .bat file to update your blog, which is very convenience.</p>\n<hr>\n<p>注：本文部分内容引用自<a href=\"https://blog.csdn.net/sinat_37781304/article/details/82729029\">hexo史上最全搭建教程_Fangzh的技术博客</a>， 如有侵权，请联系我。</p>\n"},{"title":"Hexo文章发布指南","date":"2022-02-19T16:34:49.000Z","author":"Tony","katex":true,"icon":"icon-women-line","_content":"\n# 文章标题H1\n\n\n\n在md下直接使用 # 进行新建标题，左侧菜单栏会自动生成H1-H6的标题，very nice!\n\n- 标题样式：\n\n## H2\n\n### H3\n\n#### H4 \n\n##### H5\n\n###### H6\n\n# 头部字段\n\n在文章的第一行使用三个`-`（就是分割线）来创建头部字段。\n\n- 格式如下：\n\n```\ntitle: Hexo文章发布指南\ndate: 2077-02-20 00:34:49\nauthor: Tony\ncategories:\n\t- Hexo搭建\ntags: \n\t- tag1\n\t- tag2\nkatex: true\n```\n\n# 数学公式\n\n行内公式使用\\$将数学公式括起来就好，行间公式使用两个\\$\\$，这跟md的格式是一样的。\n\n需要注意的是，如果文章中需要使用数学公式，最好在头部字段前添加`katex: true`的字样。\n\n- 数学公式样例：\n\n我是行内公式：$x=x^{45}+3$，我还可以接着写。。。\n$$\nx_1=x_3+2\\times x^6\\\\\n\\alpha：我是行间公式\\\\\n\\left[\n\\begin{matrix}\n1 & 2 & 3\\\\\n4 & 5 & 6\\\\\n7 & 8 & 9\\\\\n\\end{matrix}\n\\right]\n$$\n\n# 图片\n\n只需要将图片拖入md文档中即可，md会自动创建一个与文件名相同的文件夹以储存所有的图片素材，并会自动将图片复制到该文件夹中，因此所有的图片只需要输入相对路径即可。\n\n比如，本文章的名字为test，那么只需要这样写：`![IMG_1479](test/IMG_1479.jpg)`\n\n注：Hexo支持GIF格式的图片哦！\n\n![IMG_1479](Hexo_article/IMG_1479.jpg)\n\n![2d6f869662e83398f06070e2a14f838](Hexo_article/2d6f869662e83398f06070e2a14f838.jpg)\n\n![traffic-light](Hexo_article/traffic-light.gif)\n\n# 代码\n\n没啥可说的。。。\n\n```c++\n#include<iostream>\nusing namespace std;\nint main()\n{\n\tint a,b,c;\n\tcin>>a>>c;\n\tfor(int i=0;i<a;i++)\n\t\tcout<<c*a<<endl;\n\treturn 0;\n}\n```\n\n# 文字\n\n- 高亮语法：==Highlight==ing （==）\n- 加粗：**Bold** （\\*\\*）\n- 斜体：*Wall*（\\*）\n- 删除线：~~请给我打钱~~（~~）\n\n# 音频及视频\n\n暂不支持。。。\n\n（正在努力开发中。。。）\n\n\n```html\n<video src='test/DSC_7412.MOV' \n       type='video/mp4' \n       controls='controls'  \n       preload=\"auto\"\n       width='100%' \n       height='100%'>\n</video>\n```\n\n$$\nEND\n$$\n","source":"_posts/Hexo_article.md","raw":"---\n\ntitle: Hexo文章发布指南\ndate: 2022-02-20 00:34:49\nauthor: Tony\ncategories:\n\t- Hexo搭建\ntags: \n\t- Hexo\nkatex: true\nicon: icon-women-line\n---\n\n# 文章标题H1\n\n\n\n在md下直接使用 # 进行新建标题，左侧菜单栏会自动生成H1-H6的标题，very nice!\n\n- 标题样式：\n\n## H2\n\n### H3\n\n#### H4 \n\n##### H5\n\n###### H6\n\n# 头部字段\n\n在文章的第一行使用三个`-`（就是分割线）来创建头部字段。\n\n- 格式如下：\n\n```\ntitle: Hexo文章发布指南\ndate: 2077-02-20 00:34:49\nauthor: Tony\ncategories:\n\t- Hexo搭建\ntags: \n\t- tag1\n\t- tag2\nkatex: true\n```\n\n# 数学公式\n\n行内公式使用\\$将数学公式括起来就好，行间公式使用两个\\$\\$，这跟md的格式是一样的。\n\n需要注意的是，如果文章中需要使用数学公式，最好在头部字段前添加`katex: true`的字样。\n\n- 数学公式样例：\n\n我是行内公式：$x=x^{45}+3$，我还可以接着写。。。\n$$\nx_1=x_3+2\\times x^6\\\\\n\\alpha：我是行间公式\\\\\n\\left[\n\\begin{matrix}\n1 & 2 & 3\\\\\n4 & 5 & 6\\\\\n7 & 8 & 9\\\\\n\\end{matrix}\n\\right]\n$$\n\n# 图片\n\n只需要将图片拖入md文档中即可，md会自动创建一个与文件名相同的文件夹以储存所有的图片素材，并会自动将图片复制到该文件夹中，因此所有的图片只需要输入相对路径即可。\n\n比如，本文章的名字为test，那么只需要这样写：`![IMG_1479](test/IMG_1479.jpg)`\n\n注：Hexo支持GIF格式的图片哦！\n\n![IMG_1479](Hexo_article/IMG_1479.jpg)\n\n![2d6f869662e83398f06070e2a14f838](Hexo_article/2d6f869662e83398f06070e2a14f838.jpg)\n\n![traffic-light](Hexo_article/traffic-light.gif)\n\n# 代码\n\n没啥可说的。。。\n\n```c++\n#include<iostream>\nusing namespace std;\nint main()\n{\n\tint a,b,c;\n\tcin>>a>>c;\n\tfor(int i=0;i<a;i++)\n\t\tcout<<c*a<<endl;\n\treturn 0;\n}\n```\n\n# 文字\n\n- 高亮语法：==Highlight==ing （==）\n- 加粗：**Bold** （\\*\\*）\n- 斜体：*Wall*（\\*）\n- 删除线：~~请给我打钱~~（~~）\n\n# 音频及视频\n\n暂不支持。。。\n\n（正在努力开发中。。。）\n\n\n```html\n<video src='test/DSC_7412.MOV' \n       type='video/mp4' \n       controls='controls'  \n       preload=\"auto\"\n       width='100%' \n       height='100%'>\n</video>\n```\n\n$$\nEND\n$$\n","slug":"Hexo_article","published":1,"updated":"2022-03-06T12:03:04.189Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0gvjyln0003p8zu1sz1epyj","content":"<h1 id=\"文章标题H1\"><a href=\"#文章标题H1\" class=\"headerlink\" title=\"文章标题H1\"></a>文章标题H1</h1><p>在md下直接使用 # 进行新建标题，左侧菜单栏会自动生成H1-H6的标题，very nice!</p>\n<ul>\n<li>标题样式：</li>\n</ul>\n<h2 id=\"H2\"><a href=\"#H2\" class=\"headerlink\" title=\"H2\"></a>H2</h2><h3 id=\"H3\"><a href=\"#H3\" class=\"headerlink\" title=\"H3\"></a>H3</h3><h4 id=\"H4\"><a href=\"#H4\" class=\"headerlink\" title=\"H4\"></a>H4</h4><h5 id=\"H5\"><a href=\"#H5\" class=\"headerlink\" title=\"H5\"></a>H5</h5><h6 id=\"H6\"><a href=\"#H6\" class=\"headerlink\" title=\"H6\"></a>H6</h6><h1 id=\"头部字段\"><a href=\"#头部字段\" class=\"headerlink\" title=\"头部字段\"></a>头部字段</h1><p>在文章的第一行使用三个<code>-</code>（就是分割线）来创建头部字段。</p>\n<ul>\n<li>格式如下：</li>\n</ul>\n<pre class=\"language-none\"><code class=\"language-none\">title: Hexo文章发布指南\ndate: 2077-02-20 00:34:49\nauthor: Tony\ncategories:\n\t- Hexo搭建\ntags: \n\t- tag1\n\t- tag2\nkatex: true</code></pre>\n<h1 id=\"数学公式\"><a href=\"#数学公式\" class=\"headerlink\" title=\"数学公式\"></a>数学公式</h1><p>行内公式使用$将数学公式括起来就好，行间公式使用两个$$，这跟md的格式是一样的。</p>\n<p>需要注意的是，如果文章中需要使用数学公式，最好在头部字段前添加<code>katex: true</code>的字样。</p>\n<ul>\n<li>数学公式样例：</li>\n</ul>\n<p>我是行内公式：$x=x^{45}+3$，我还可以接着写。。。</p>\n<script type=\"math/tex; mode=display\">\nx_1=x_3+2\\times x^6\\\\\n\\alpha：我是行间公式\\\\\n\\left[\n\\begin{matrix}\n1 & 2 & 3\\\\\n4 & 5 & 6\\\\\n7 & 8 & 9\\\\\n\\end{matrix}\n\\right]</script><h1 id=\"图片\"><a href=\"#图片\" class=\"headerlink\" title=\"图片\"></a>图片</h1><p>只需要将图片拖入md文档中即可，md会自动创建一个与文件名相同的文件夹以储存所有的图片素材，并会自动将图片复制到该文件夹中，因此所有的图片只需要输入相对路径即可。</p>\n<p>比如，本文章的名字为test，那么只需要这样写：<code>![IMG_1479](test/IMG_1479.jpg)</code></p>\n<p>注：Hexo支持GIF格式的图片哦！</p>\n<p><img src=\"/2022/02/20/Hexo_article/IMG_1479.jpg\" alt=\"IMG_1479\" loading=\"lazy\"></p>\n<p><img src=\"/2022/02/20/Hexo_article/2d6f869662e83398f06070e2a14f838.jpg\" alt=\"2d6f869662e83398f06070e2a14f838\" loading=\"lazy\"></p>\n<p><img src=\"/2022/02/20/Hexo_article/traffic-light.gif\" alt=\"traffic-light\" loading=\"lazy\"></p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><p>没啥可说的。。。</p>\n<pre class=\"language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include&lt;iostream&gt;\nusing namespace std;\nint main()\n&#123;\n\tint a,b,c;\n\tcin&gt;&gt;a&gt;&gt;c;\n\tfor(int i&#x3D;0;i&lt;a;i++)\n\t\tcout&lt;&lt;c*a&lt;&lt;endl;\n\treturn 0;\n&#125;</code></pre>\n<h1 id=\"文字\"><a href=\"#文字\" class=\"headerlink\" title=\"文字\"></a>文字</h1><ul>\n<li>高亮语法：==Highlight==ing （==）</li>\n<li>加粗：<strong>Bold</strong> （**）</li>\n<li>斜体：<em>Wall</em>（*）</li>\n<li>删除线：<del>请给我打钱</del>（~~）</li>\n</ul>\n<h1 id=\"音频及视频\"><a href=\"#音频及视频\" class=\"headerlink\" title=\"音频及视频\"></a>音频及视频</h1><p>暂不支持。。。</p>\n<p>（正在努力开发中。。。）</p>\n<pre class=\"language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>video</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>test/DSC_7412.MOV<span class=\"token punctuation\">'</span></span> \n       <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>video/mp4<span class=\"token punctuation\">'</span></span> \n       <span class=\"token attr-name\">controls</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>controls<span class=\"token punctuation\">'</span></span>  \n       <span class=\"token attr-name\">preload</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>auto<span class=\"token punctuation\">\"</span></span>\n       <span class=\"token attr-name\">width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>100%<span class=\"token punctuation\">'</span></span> \n       <span class=\"token attr-name\">height</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>100%<span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>video</span><span class=\"token punctuation\">></span></span></code></pre>\n<script type=\"math/tex; mode=display\">\nEND</script>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"文章标题H1\"><a href=\"#文章标题H1\" class=\"headerlink\" title=\"文章标题H1\"></a>文章标题H1</h1><p>在md下直接使用 # 进行新建标题，左侧菜单栏会自动生成H1-H6的标题，very nice!</p>\n<ul>\n<li>标题样式：</li>\n</ul>\n<h2 id=\"H2\"><a href=\"#H2\" class=\"headerlink\" title=\"H2\"></a>H2</h2><h3 id=\"H3\"><a href=\"#H3\" class=\"headerlink\" title=\"H3\"></a>H3</h3><h4 id=\"H4\"><a href=\"#H4\" class=\"headerlink\" title=\"H4\"></a>H4</h4><h5 id=\"H5\"><a href=\"#H5\" class=\"headerlink\" title=\"H5\"></a>H5</h5><h6 id=\"H6\"><a href=\"#H6\" class=\"headerlink\" title=\"H6\"></a>H6</h6><h1 id=\"头部字段\"><a href=\"#头部字段\" class=\"headerlink\" title=\"头部字段\"></a>头部字段</h1><p>在文章的第一行使用三个<code>-</code>（就是分割线）来创建头部字段。</p>\n<ul>\n<li>格式如下：</li>\n</ul>\n<pre class=\"language-none\"><code class=\"language-none\">title: Hexo文章发布指南\ndate: 2077-02-20 00:34:49\nauthor: Tony\ncategories:\n\t- Hexo搭建\ntags: \n\t- tag1\n\t- tag2\nkatex: true</code></pre>\n<h1 id=\"数学公式\"><a href=\"#数学公式\" class=\"headerlink\" title=\"数学公式\"></a>数学公式</h1><p>行内公式使用$将数学公式括起来就好，行间公式使用两个$$，这跟md的格式是一样的。</p>\n<p>需要注意的是，如果文章中需要使用数学公式，最好在头部字段前添加<code>katex: true</code>的字样。</p>\n<ul>\n<li>数学公式样例：</li>\n</ul>\n<p>我是行内公式：$x=x^{45}+3$，我还可以接着写。。。</p>\n<script type=\"math/tex; mode=display\">\nx_1=x_3+2\\times x^6\\\\\n\\alpha：我是行间公式\\\\\n\\left[\n\\begin{matrix}\n1 & 2 & 3\\\\\n4 & 5 & 6\\\\\n7 & 8 & 9\\\\\n\\end{matrix}\n\\right]</script><h1 id=\"图片\"><a href=\"#图片\" class=\"headerlink\" title=\"图片\"></a>图片</h1><p>只需要将图片拖入md文档中即可，md会自动创建一个与文件名相同的文件夹以储存所有的图片素材，并会自动将图片复制到该文件夹中，因此所有的图片只需要输入相对路径即可。</p>\n<p>比如，本文章的名字为test，那么只需要这样写：<code>![IMG_1479](test/IMG_1479.jpg)</code></p>\n<p>注：Hexo支持GIF格式的图片哦！</p>\n<p><img src=\"/2022/02/20/Hexo_article/IMG_1479.jpg\" alt=\"IMG_1479\"></p>\n<p><img src=\"/2022/02/20/Hexo_article/2d6f869662e83398f06070e2a14f838.jpg\" alt=\"2d6f869662e83398f06070e2a14f838\"></p>\n<p><img src=\"/2022/02/20/Hexo_article/traffic-light.gif\" alt=\"traffic-light\"></p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><p>没啥可说的。。。</p>\n<pre class=\"language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include&lt;iostream&gt;\nusing namespace std;\nint main()\n&#123;\n\tint a,b,c;\n\tcin&gt;&gt;a&gt;&gt;c;\n\tfor(int i&#x3D;0;i&lt;a;i++)\n\t\tcout&lt;&lt;c*a&lt;&lt;endl;\n\treturn 0;\n&#125;</code></pre>\n<h1 id=\"文字\"><a href=\"#文字\" class=\"headerlink\" title=\"文字\"></a>文字</h1><ul>\n<li>高亮语法：==Highlight==ing （==）</li>\n<li>加粗：<strong>Bold</strong> （**）</li>\n<li>斜体：<em>Wall</em>（*）</li>\n<li>删除线：<del>请给我打钱</del>（~~）</li>\n</ul>\n<h1 id=\"音频及视频\"><a href=\"#音频及视频\" class=\"headerlink\" title=\"音频及视频\"></a>音频及视频</h1><p>暂不支持。。。</p>\n<p>（正在努力开发中。。。）</p>\n<pre class=\"language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>video</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>test/DSC_7412.MOV<span class=\"token punctuation\">'</span></span> \n       <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>video/mp4<span class=\"token punctuation\">'</span></span> \n       <span class=\"token attr-name\">controls</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>controls<span class=\"token punctuation\">'</span></span>  \n       <span class=\"token attr-name\">preload</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>auto<span class=\"token punctuation\">\"</span></span>\n       <span class=\"token attr-name\">width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>100%<span class=\"token punctuation\">'</span></span> \n       <span class=\"token attr-name\">height</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>100%<span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>video</span><span class=\"token punctuation\">></span></span></code></pre>\n<script type=\"math/tex; mode=display\">\nEND</script>"},{"title":"R2S家庭组网实操","date":"2022-02-26T12:16:48.000Z","author":"Tony","_content":"\n## 前言\n\n本文授权转载自[R2S家庭组网实操 – Orange Tien](https://www.bytedance.fit/?p=1051)，作者：Orange Tien，在此基础上略加修改，~~并不会定期更新~~。\n\n本文主要介绍R2S的基本使用方法，目前本人（Tony）也在原作者（Orange Tien）的怂恿下在两个地方分别搭建了两个R2S，看起来很简单，其实不是一帆风顺；因此也会把实际组网中遇到的问题列到最后供大家参考。\n\n## 确定所需物理设备\n\n- 一台R2S软路由以及它的电源线\n- 两根用不着太长的网线一张TF卡（作为R2S的系统盘）以及一个读写TF卡的读卡器\n- 一台可以插网线的电脑\n- 交换机（可选）\n- 插排（某些时候插座不够用）\n\n## 烧录OpenWrt系统\n\n烧录软件：[BalenaEtcher](https://www.balena.io/etcher/)\n\n软路由系统：\n\n[OpenWrt-R2S-dongdong](https://bigdongdong.cowtransfer.com/s/a3420546d30343)\n\n[OpenWrt-R2S-esir](https://bigdongdong.cowtransfer.com/s/9a349ee597aa4f)\n\n第一个链接比较新，界面比较好看一些，推荐选择这个下载；第二个系统是eSir大人写的2020版本，已经很旧了；~~奈何暂时没找到别的系统~~，如果自行找到更好的系统也可以不用这俩链接。注意系统是要支持Arm架构的，因为Openwrt不是x86架构下的产物。\n\n##  开始烧录系统至TF卡\n\n打开BalenaEtcher，选择Flash from file，然后将OpenWrt系统烧录到TF卡中即可。\n\n![img](R2S_build/image-1.png)\n\n注意：选择文件时只选择镜像文件，不要把那些七七八八的文档说明也选进去。选择`.gz`(`.img`)文件来烧录即可，烧录完成后直接拔掉读卡器；系统会提示格式化，此时千万**不要**格式化！！！（~~否则，就重来一遍吧~~）\n\n##  登入R2S后台\n\n把烧录好固件的TF卡插入R2S，然后给它插上电源，WAN口可以不接，将R2S的LAN口连接电脑的网口，根据所刷入的固件（软路由系统）的不同来决定后台地址，一般来说，软路由后台是`192.168.X.1` ，本文的系统后台是`192.168.22.1`，所以说我们在电脑浏览器内输入`192.168.5.1`(`192.168.22.1`)以进入后台。后台账号是root，默认密码基本都是password（若下载本文的系统，密码则为空），具体操作链接里面写的很清楚。\n\n## 拨号或者DHCP客户端\n\n### 光猫拨号\n\n如果你家里的组网方式是通过光猫拨号（通常都是光猫拨号），那么设置方法如下：\n\n选择 网络-接口， 然后选择 修改WAN口设置\n\n![img](R2S_build/image-2-1024x507.png)\n\n将WAN口设置成DHCP客户端，然后保存应用即可，此外无须做其他任何设置。\n\n![img](R2S_build/image-3-1024x485.png)\n\n### R2S拨号\n\n如果你的光猫是桥接，那么就由路由器来拨号（通常来说，哪个网络设备配置更好，就誰来拨号，由于R2S的稳定性远不如光猫，所以这里选择光猫拨号更好），设置方法如下：\n\n![img](R2S_build/image-5.png)\n\n同样，选择修改WAN口，协议设置成PPPoE, PAP/CHAP，账号密码就是光猫的账号密码。比如电信宽带就是以`@163.gd`结尾的，密码如果忘记的话直接拨打10000（10086）重置就好，省时省力。\n\n![img](R2S_build/image-2-1024x507.png)\n\n接下来，需要用超级管理员账号登陆到光猫的IP中（`192.168.1.1`）,各大运营商的超级管理员账号和密码可以自行搜索。选择 网络-协议，然后设置成DHCP客户端。\n\n### 小结\n\n用什么拨号，什么就选择PPPoE，然后其它设备就都设置成DHCP。\n\n用光猫拨号，光猫的设置里面就选择PPPoE，软路由以及其它路由器就选择DHCP客户端；\n\n用R2S拨号，光猫和其它路由设备的设置里面就选择DHCP客户端，软路由选择PPPoE。\n\n## 各设备接入网络\n\n将软路由的WAN口与光猫的千兆口相连，然后断开软路由的LAN口与电脑网口的连接，此时软路由的LAN口根据各人组网要求的不同选择接不同的设备，可以接交换机，也可以接一台路由器（路由器设置为有线中继模式，也就是无线AP模式）\n\n如果家中设备比较多，或者很多屋子都需要连网线的话，可以买一个最便宜的千兆交换机放到弱电箱中，然后吧R2S接到交换机与光猫中间，这样就可以实现整个局域网都接入到软路由中来。（我来草草的画个图）\n\n![image-20220305212846426](R2S_build/image-20220305212846426.png)\n\n## 利用插件设置科学上网\n\n根据前面的步骤，如果你的设备能够正常访问网络了，就可以开始探索OpenWrt的各类插件了。关于科学上网，常见的插件有PassWall, ShadowScoksR++, OpenClash，由于OpenClash具备强大的分流策略机制（根据你访问的域名或者IP的不同决定走不同的节点），我们在此以OpenCalsh为例设置科学上网\n\n![img](R2S_build/image-7.png)\n\n首先，在服务菜单中找到OpenClash，然后选择配置文件订阅，选择添加配置文件\n\n![img](R2S_build/image-8.png)\n\n配置文件名随便写，用途是给用户自己区分的，订阅地址填上机场给你的订阅地址，其余地方无需设置，直接应用并保存即可。然后回到OpenClash主页，配置文件区域发送了变化。\n\n![img](R2S_build/image-9-1024x194.png)\n\n最后点击左下角的启动按钮，等待服务器上线运行即可。\n\n![img](R2S_build/image-10.png)\n\n如果你设置后无法正常科学上网，原因是有很多的，需要你自己慢慢排查。\n\n## 更多（原作者的话）\n\n[NanoPi R2S WIKI](https://wiki.friendlyarm.com/wiki/index.php/NanoPi_R2S/zh)\n\n上面的链接是R2S的WIKI书，上面详细记录了R2S的配置以及实际测速情况，也有如何编译系统等教程。\n\n个人使用R2S两年，从大一到大三都在用这个，感觉就是到千兆不太行，500M是瓶颈了，然后连久了没那么稳定，官网手册上宣传它是又稳定又能达到千兆的，这个听听就好，R2S本来是适合入门的，但是现在价格炒的太高了，没这个必要去买它，目前有很多更具有性价比的软路由可供选择。\n\n此外向大家推荐软路由界的大佬: [JackStone的Youtube主页](https://youtube.com/c/jackstone) ，人称老白，做了很多小主机的视频，如果想选购更具性价比的设备，可以看他的合集，比如2021软路由选购建议这些。\n\n## 组网时遇到过的问题（我的话）\n\n1. 组网的过程中可能出现无法自动分配IP地址的问题，比如说小米的路由器默认会分配`192.168.31.XXX`；如果你会手动配置的话可以试试，不过最简单的办法就是等，去洗个澡回来就好了。如果还没好，那么可以考虑RESET一下路由器。\n2. OpenClash插件在首次启动的时候，可能会启动失败，他会提示需要你选择编译架构，按照他的提示，选择Arm-v8架构即可。\n3. 网线通常插上马上就会亮灯，5s左右就能ping通，不过不要太相信科学。~~我有一次ping了10多分钟。~~真的，不通的话不一定是没插紧，也不一定是插错了，**很有可能是因为你没给我微信或者支付宝赞赏**。\n4. R2S是很基础的一款软路由，稳定性可能不会太好，不过最有可能导致网络不稳定的还是机场的选择，如果选择廉价机场的话，要做好不知道什么时候突然断网10分钟的准备。\n5. 计算机网络这门学科是玄学的一个分支。\n\n","source":"_posts/R2S_build.md","raw":"---\ntitle: R2S家庭组网实操\ndate: 2022-02-26 20:16:48\nauthor: Tony\ncategories:\n\t- 计算机网络\ntags:\n\t- R2S\n\t- Computer Network\n\t- 软路由\n\t- 科学上网\n---\n\n## 前言\n\n本文授权转载自[R2S家庭组网实操 – Orange Tien](https://www.bytedance.fit/?p=1051)，作者：Orange Tien，在此基础上略加修改，~~并不会定期更新~~。\n\n本文主要介绍R2S的基本使用方法，目前本人（Tony）也在原作者（Orange Tien）的怂恿下在两个地方分别搭建了两个R2S，看起来很简单，其实不是一帆风顺；因此也会把实际组网中遇到的问题列到最后供大家参考。\n\n## 确定所需物理设备\n\n- 一台R2S软路由以及它的电源线\n- 两根用不着太长的网线一张TF卡（作为R2S的系统盘）以及一个读写TF卡的读卡器\n- 一台可以插网线的电脑\n- 交换机（可选）\n- 插排（某些时候插座不够用）\n\n## 烧录OpenWrt系统\n\n烧录软件：[BalenaEtcher](https://www.balena.io/etcher/)\n\n软路由系统：\n\n[OpenWrt-R2S-dongdong](https://bigdongdong.cowtransfer.com/s/a3420546d30343)\n\n[OpenWrt-R2S-esir](https://bigdongdong.cowtransfer.com/s/9a349ee597aa4f)\n\n第一个链接比较新，界面比较好看一些，推荐选择这个下载；第二个系统是eSir大人写的2020版本，已经很旧了；~~奈何暂时没找到别的系统~~，如果自行找到更好的系统也可以不用这俩链接。注意系统是要支持Arm架构的，因为Openwrt不是x86架构下的产物。\n\n##  开始烧录系统至TF卡\n\n打开BalenaEtcher，选择Flash from file，然后将OpenWrt系统烧录到TF卡中即可。\n\n![img](R2S_build/image-1.png)\n\n注意：选择文件时只选择镜像文件，不要把那些七七八八的文档说明也选进去。选择`.gz`(`.img`)文件来烧录即可，烧录完成后直接拔掉读卡器；系统会提示格式化，此时千万**不要**格式化！！！（~~否则，就重来一遍吧~~）\n\n##  登入R2S后台\n\n把烧录好固件的TF卡插入R2S，然后给它插上电源，WAN口可以不接，将R2S的LAN口连接电脑的网口，根据所刷入的固件（软路由系统）的不同来决定后台地址，一般来说，软路由后台是`192.168.X.1` ，本文的系统后台是`192.168.22.1`，所以说我们在电脑浏览器内输入`192.168.5.1`(`192.168.22.1`)以进入后台。后台账号是root，默认密码基本都是password（若下载本文的系统，密码则为空），具体操作链接里面写的很清楚。\n\n## 拨号或者DHCP客户端\n\n### 光猫拨号\n\n如果你家里的组网方式是通过光猫拨号（通常都是光猫拨号），那么设置方法如下：\n\n选择 网络-接口， 然后选择 修改WAN口设置\n\n![img](R2S_build/image-2-1024x507.png)\n\n将WAN口设置成DHCP客户端，然后保存应用即可，此外无须做其他任何设置。\n\n![img](R2S_build/image-3-1024x485.png)\n\n### R2S拨号\n\n如果你的光猫是桥接，那么就由路由器来拨号（通常来说，哪个网络设备配置更好，就誰来拨号，由于R2S的稳定性远不如光猫，所以这里选择光猫拨号更好），设置方法如下：\n\n![img](R2S_build/image-5.png)\n\n同样，选择修改WAN口，协议设置成PPPoE, PAP/CHAP，账号密码就是光猫的账号密码。比如电信宽带就是以`@163.gd`结尾的，密码如果忘记的话直接拨打10000（10086）重置就好，省时省力。\n\n![img](R2S_build/image-2-1024x507.png)\n\n接下来，需要用超级管理员账号登陆到光猫的IP中（`192.168.1.1`）,各大运营商的超级管理员账号和密码可以自行搜索。选择 网络-协议，然后设置成DHCP客户端。\n\n### 小结\n\n用什么拨号，什么就选择PPPoE，然后其它设备就都设置成DHCP。\n\n用光猫拨号，光猫的设置里面就选择PPPoE，软路由以及其它路由器就选择DHCP客户端；\n\n用R2S拨号，光猫和其它路由设备的设置里面就选择DHCP客户端，软路由选择PPPoE。\n\n## 各设备接入网络\n\n将软路由的WAN口与光猫的千兆口相连，然后断开软路由的LAN口与电脑网口的连接，此时软路由的LAN口根据各人组网要求的不同选择接不同的设备，可以接交换机，也可以接一台路由器（路由器设置为有线中继模式，也就是无线AP模式）\n\n如果家中设备比较多，或者很多屋子都需要连网线的话，可以买一个最便宜的千兆交换机放到弱电箱中，然后吧R2S接到交换机与光猫中间，这样就可以实现整个局域网都接入到软路由中来。（我来草草的画个图）\n\n![image-20220305212846426](R2S_build/image-20220305212846426.png)\n\n## 利用插件设置科学上网\n\n根据前面的步骤，如果你的设备能够正常访问网络了，就可以开始探索OpenWrt的各类插件了。关于科学上网，常见的插件有PassWall, ShadowScoksR++, OpenClash，由于OpenClash具备强大的分流策略机制（根据你访问的域名或者IP的不同决定走不同的节点），我们在此以OpenCalsh为例设置科学上网\n\n![img](R2S_build/image-7.png)\n\n首先，在服务菜单中找到OpenClash，然后选择配置文件订阅，选择添加配置文件\n\n![img](R2S_build/image-8.png)\n\n配置文件名随便写，用途是给用户自己区分的，订阅地址填上机场给你的订阅地址，其余地方无需设置，直接应用并保存即可。然后回到OpenClash主页，配置文件区域发送了变化。\n\n![img](R2S_build/image-9-1024x194.png)\n\n最后点击左下角的启动按钮，等待服务器上线运行即可。\n\n![img](R2S_build/image-10.png)\n\n如果你设置后无法正常科学上网，原因是有很多的，需要你自己慢慢排查。\n\n## 更多（原作者的话）\n\n[NanoPi R2S WIKI](https://wiki.friendlyarm.com/wiki/index.php/NanoPi_R2S/zh)\n\n上面的链接是R2S的WIKI书，上面详细记录了R2S的配置以及实际测速情况，也有如何编译系统等教程。\n\n个人使用R2S两年，从大一到大三都在用这个，感觉就是到千兆不太行，500M是瓶颈了，然后连久了没那么稳定，官网手册上宣传它是又稳定又能达到千兆的，这个听听就好，R2S本来是适合入门的，但是现在价格炒的太高了，没这个必要去买它，目前有很多更具有性价比的软路由可供选择。\n\n此外向大家推荐软路由界的大佬: [JackStone的Youtube主页](https://youtube.com/c/jackstone) ，人称老白，做了很多小主机的视频，如果想选购更具性价比的设备，可以看他的合集，比如2021软路由选购建议这些。\n\n## 组网时遇到过的问题（我的话）\n\n1. 组网的过程中可能出现无法自动分配IP地址的问题，比如说小米的路由器默认会分配`192.168.31.XXX`；如果你会手动配置的话可以试试，不过最简单的办法就是等，去洗个澡回来就好了。如果还没好，那么可以考虑RESET一下路由器。\n2. OpenClash插件在首次启动的时候，可能会启动失败，他会提示需要你选择编译架构，按照他的提示，选择Arm-v8架构即可。\n3. 网线通常插上马上就会亮灯，5s左右就能ping通，不过不要太相信科学。~~我有一次ping了10多分钟。~~真的，不通的话不一定是没插紧，也不一定是插错了，**很有可能是因为你没给我微信或者支付宝赞赏**。\n4. R2S是很基础的一款软路由，稳定性可能不会太好，不过最有可能导致网络不稳定的还是机场的选择，如果选择廉价机场的话，要做好不知道什么时候突然断网10分钟的准备。\n5. 计算机网络这门学科是玄学的一个分支。\n\n","slug":"R2S_build","published":1,"updated":"2022-03-06T12:03:04.288Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0gvjylq0007p8zuhpxv4zl4","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>本文授权转载自<a href=\"https://www.bytedance.fit/?p=1051\">R2S家庭组网实操 – Orange Tien</a>，作者：Orange Tien，在此基础上略加修改，<del>并不会定期更新</del>。</p>\n<p>本文主要介绍R2S的基本使用方法，目前本人（Tony）也在原作者（Orange Tien）的怂恿下在两个地方分别搭建了两个R2S，看起来很简单，其实不是一帆风顺；因此也会把实际组网中遇到的问题列到最后供大家参考。</p>\n<h2 id=\"确定所需物理设备\"><a href=\"#确定所需物理设备\" class=\"headerlink\" title=\"确定所需物理设备\"></a>确定所需物理设备</h2><ul>\n<li>一台R2S软路由以及它的电源线</li>\n<li>两根用不着太长的网线一张TF卡（作为R2S的系统盘）以及一个读写TF卡的读卡器</li>\n<li>一台可以插网线的电脑</li>\n<li>交换机（可选）</li>\n<li>插排（某些时候插座不够用）</li>\n</ul>\n<h2 id=\"烧录OpenWrt系统\"><a href=\"#烧录OpenWrt系统\" class=\"headerlink\" title=\"烧录OpenWrt系统\"></a>烧录OpenWrt系统</h2><p>烧录软件：<a href=\"https://www.balena.io/etcher/\">BalenaEtcher</a></p>\n<p>软路由系统：</p>\n<p><a href=\"https://bigdongdong.cowtransfer.com/s/a3420546d30343\">OpenWrt-R2S-dongdong</a></p>\n<p><a href=\"https://bigdongdong.cowtransfer.com/s/9a349ee597aa4f\">OpenWrt-R2S-esir</a></p>\n<p>第一个链接比较新，界面比较好看一些，推荐选择这个下载；第二个系统是eSir大人写的2020版本，已经很旧了；<del>奈何暂时没找到别的系统</del>，如果自行找到更好的系统也可以不用这俩链接。注意系统是要支持Arm架构的，因为Openwrt不是x86架构下的产物。</p>\n<h2 id=\"开始烧录系统至TF卡\"><a href=\"#开始烧录系统至TF卡\" class=\"headerlink\" title=\"开始烧录系统至TF卡\"></a>开始烧录系统至TF卡</h2><p>打开BalenaEtcher，选择Flash from file，然后将OpenWrt系统烧录到TF卡中即可。</p>\n<p><img src=\"/2022/02/26/R2S_build/image-1.png\" alt=\"img\" loading=\"lazy\"></p>\n<p>注意：选择文件时只选择镜像文件，不要把那些七七八八的文档说明也选进去。选择<code>.gz</code>(<code>.img</code>)文件来烧录即可，烧录完成后直接拔掉读卡器；系统会提示格式化，此时千万<strong>不要</strong>格式化！！！（<del>否则，就重来一遍吧</del>）</p>\n<h2 id=\"登入R2S后台\"><a href=\"#登入R2S后台\" class=\"headerlink\" title=\"登入R2S后台\"></a>登入R2S后台</h2><p>把烧录好固件的TF卡插入R2S，然后给它插上电源，WAN口可以不接，将R2S的LAN口连接电脑的网口，根据所刷入的固件（软路由系统）的不同来决定后台地址，一般来说，软路由后台是<code>192.168.X.1</code> ，本文的系统后台是<code>192.168.22.1</code>，所以说我们在电脑浏览器内输入<code>192.168.5.1</code>(<code>192.168.22.1</code>)以进入后台。后台账号是root，默认密码基本都是password（若下载本文的系统，密码则为空），具体操作链接里面写的很清楚。</p>\n<h2 id=\"拨号或者DHCP客户端\"><a href=\"#拨号或者DHCP客户端\" class=\"headerlink\" title=\"拨号或者DHCP客户端\"></a>拨号或者DHCP客户端</h2><h3 id=\"光猫拨号\"><a href=\"#光猫拨号\" class=\"headerlink\" title=\"光猫拨号\"></a>光猫拨号</h3><p>如果你家里的组网方式是通过光猫拨号（通常都是光猫拨号），那么设置方法如下：</p>\n<p>选择 网络-接口， 然后选择 修改WAN口设置</p>\n<p><img src=\"/2022/02/26/R2S_build/image-2-1024x507.png\" alt=\"img\" loading=\"lazy\"></p>\n<p>将WAN口设置成DHCP客户端，然后保存应用即可，此外无须做其他任何设置。</p>\n<p><img src=\"/2022/02/26/R2S_build/image-3-1024x485.png\" alt=\"img\" loading=\"lazy\"></p>\n<h3 id=\"R2S拨号\"><a href=\"#R2S拨号\" class=\"headerlink\" title=\"R2S拨号\"></a>R2S拨号</h3><p>如果你的光猫是桥接，那么就由路由器来拨号（通常来说，哪个网络设备配置更好，就誰来拨号，由于R2S的稳定性远不如光猫，所以这里选择光猫拨号更好），设置方法如下：</p>\n<p><img src=\"/2022/02/26/R2S_build/image-5.png\" alt=\"img\" loading=\"lazy\"></p>\n<p>同样，选择修改WAN口，协议设置成PPPoE, PAP/CHAP，账号密码就是光猫的账号密码。比如电信宽带就是以<code>@163.gd</code>结尾的，密码如果忘记的话直接拨打10000（10086）重置就好，省时省力。</p>\n<p><img src=\"/2022/02/26/R2S_build/image-2-1024x507.png\" alt=\"img\" loading=\"lazy\"></p>\n<p>接下来，需要用超级管理员账号登陆到光猫的IP中（<code>192.168.1.1</code>）,各大运营商的超级管理员账号和密码可以自行搜索。选择 网络-协议，然后设置成DHCP客户端。</p>\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>用什么拨号，什么就选择PPPoE，然后其它设备就都设置成DHCP。</p>\n<p>用光猫拨号，光猫的设置里面就选择PPPoE，软路由以及其它路由器就选择DHCP客户端；</p>\n<p>用R2S拨号，光猫和其它路由设备的设置里面就选择DHCP客户端，软路由选择PPPoE。</p>\n<h2 id=\"各设备接入网络\"><a href=\"#各设备接入网络\" class=\"headerlink\" title=\"各设备接入网络\"></a>各设备接入网络</h2><p>将软路由的WAN口与光猫的千兆口相连，然后断开软路由的LAN口与电脑网口的连接，此时软路由的LAN口根据各人组网要求的不同选择接不同的设备，可以接交换机，也可以接一台路由器（路由器设置为有线中继模式，也就是无线AP模式）</p>\n<p>如果家中设备比较多，或者很多屋子都需要连网线的话，可以买一个最便宜的千兆交换机放到弱电箱中，然后吧R2S接到交换机与光猫中间，这样就可以实现整个局域网都接入到软路由中来。（我来草草的画个图）</p>\n<p><img src=\"/2022/02/26/R2S_build/image-20220305212846426.png\" alt=\"image-20220305212846426\" loading=\"lazy\"></p>\n<h2 id=\"利用插件设置科学上网\"><a href=\"#利用插件设置科学上网\" class=\"headerlink\" title=\"利用插件设置科学上网\"></a>利用插件设置科学上网</h2><p>根据前面的步骤，如果你的设备能够正常访问网络了，就可以开始探索OpenWrt的各类插件了。关于科学上网，常见的插件有PassWall, ShadowScoksR++, OpenClash，由于OpenClash具备强大的分流策略机制（根据你访问的域名或者IP的不同决定走不同的节点），我们在此以OpenCalsh为例设置科学上网</p>\n<p><img src=\"/2022/02/26/R2S_build/image-7.png\" alt=\"img\" loading=\"lazy\"></p>\n<p>首先，在服务菜单中找到OpenClash，然后选择配置文件订阅，选择添加配置文件</p>\n<p><img src=\"/2022/02/26/R2S_build/image-8.png\" alt=\"img\" loading=\"lazy\"></p>\n<p>配置文件名随便写，用途是给用户自己区分的，订阅地址填上机场给你的订阅地址，其余地方无需设置，直接应用并保存即可。然后回到OpenClash主页，配置文件区域发送了变化。</p>\n<p><img src=\"/2022/02/26/R2S_build/image-9-1024x194.png\" alt=\"img\" loading=\"lazy\"></p>\n<p>最后点击左下角的启动按钮，等待服务器上线运行即可。</p>\n<p><img src=\"/2022/02/26/R2S_build/image-10.png\" alt=\"img\" loading=\"lazy\"></p>\n<p>如果你设置后无法正常科学上网，原因是有很多的，需要你自己慢慢排查。</p>\n<h2 id=\"更多（原作者的话）\"><a href=\"#更多（原作者的话）\" class=\"headerlink\" title=\"更多（原作者的话）\"></a>更多（原作者的话）</h2><p><a href=\"https://wiki.friendlyarm.com/wiki/index.php/NanoPi_R2S/zh\">NanoPi R2S WIKI</a></p>\n<p>上面的链接是R2S的WIKI书，上面详细记录了R2S的配置以及实际测速情况，也有如何编译系统等教程。</p>\n<p>个人使用R2S两年，从大一到大三都在用这个，感觉就是到千兆不太行，500M是瓶颈了，然后连久了没那么稳定，官网手册上宣传它是又稳定又能达到千兆的，这个听听就好，R2S本来是适合入门的，但是现在价格炒的太高了，没这个必要去买它，目前有很多更具有性价比的软路由可供选择。</p>\n<p>此外向大家推荐软路由界的大佬: <a href=\"https://youtube.com/c/jackstone\">JackStone的Youtube主页</a> ，人称老白，做了很多小主机的视频，如果想选购更具性价比的设备，可以看他的合集，比如2021软路由选购建议这些。</p>\n<h2 id=\"组网时遇到过的问题（我的话）\"><a href=\"#组网时遇到过的问题（我的话）\" class=\"headerlink\" title=\"组网时遇到过的问题（我的话）\"></a>组网时遇到过的问题（我的话）</h2><ol>\n<li>组网的过程中可能出现无法自动分配IP地址的问题，比如说小米的路由器默认会分配<code>192.168.31.XXX</code>；如果你会手动配置的话可以试试，不过最简单的办法就是等，去洗个澡回来就好了。如果还没好，那么可以考虑RESET一下路由器。</li>\n<li>OpenClash插件在首次启动的时候，可能会启动失败，他会提示需要你选择编译架构，按照他的提示，选择Arm-v8架构即可。</li>\n<li>网线通常插上马上就会亮灯，5s左右就能ping通，不过不要太相信科学。<del>我有一次ping了10多分钟。</del>真的，不通的话不一定是没插紧，也不一定是插错了，<strong>很有可能是因为你没给我微信或者支付宝赞赏</strong>。</li>\n<li>R2S是很基础的一款软路由，稳定性可能不会太好，不过最有可能导致网络不稳定的还是机场的选择，如果选择廉价机场的话，要做好不知道什么时候突然断网10分钟的准备。</li>\n<li>计算机网络这门学科是玄学的一个分支。</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>本文授权转载自<a href=\"https://www.bytedance.fit/?p=1051\">R2S家庭组网实操 – Orange Tien</a>，作者：Orange Tien，在此基础上略加修改，<del>并不会定期更新</del>。</p>\n<p>本文主要介绍R2S的基本使用方法，目前本人（Tony）也在原作者（Orange Tien）的怂恿下在两个地方分别搭建了两个R2S，看起来很简单，其实不是一帆风顺；因此也会把实际组网中遇到的问题列到最后供大家参考。</p>\n<h2 id=\"确定所需物理设备\"><a href=\"#确定所需物理设备\" class=\"headerlink\" title=\"确定所需物理设备\"></a>确定所需物理设备</h2><ul>\n<li>一台R2S软路由以及它的电源线</li>\n<li>两根用不着太长的网线一张TF卡（作为R2S的系统盘）以及一个读写TF卡的读卡器</li>\n<li>一台可以插网线的电脑</li>\n<li>交换机（可选）</li>\n<li>插排（某些时候插座不够用）</li>\n</ul>\n<h2 id=\"烧录OpenWrt系统\"><a href=\"#烧录OpenWrt系统\" class=\"headerlink\" title=\"烧录OpenWrt系统\"></a>烧录OpenWrt系统</h2><p>烧录软件：<a href=\"https://www.balena.io/etcher/\">BalenaEtcher</a></p>\n<p>软路由系统：</p>\n<p><a href=\"https://bigdongdong.cowtransfer.com/s/a3420546d30343\">OpenWrt-R2S-dongdong</a></p>\n<p><a href=\"https://bigdongdong.cowtransfer.com/s/9a349ee597aa4f\">OpenWrt-R2S-esir</a></p>\n<p>第一个链接比较新，界面比较好看一些，推荐选择这个下载；第二个系统是eSir大人写的2020版本，已经很旧了；<del>奈何暂时没找到别的系统</del>，如果自行找到更好的系统也可以不用这俩链接。注意系统是要支持Arm架构的，因为Openwrt不是x86架构下的产物。</p>\n<h2 id=\"开始烧录系统至TF卡\"><a href=\"#开始烧录系统至TF卡\" class=\"headerlink\" title=\"开始烧录系统至TF卡\"></a>开始烧录系统至TF卡</h2><p>打开BalenaEtcher，选择Flash from file，然后将OpenWrt系统烧录到TF卡中即可。</p>\n<p><img src=\"/2022/02/26/R2S_build/image-1.png\" alt=\"img\"></p>\n<p>注意：选择文件时只选择镜像文件，不要把那些七七八八的文档说明也选进去。选择<code>.gz</code>(<code>.img</code>)文件来烧录即可，烧录完成后直接拔掉读卡器；系统会提示格式化，此时千万<strong>不要</strong>格式化！！！（<del>否则，就重来一遍吧</del>）</p>\n<h2 id=\"登入R2S后台\"><a href=\"#登入R2S后台\" class=\"headerlink\" title=\"登入R2S后台\"></a>登入R2S后台</h2><p>把烧录好固件的TF卡插入R2S，然后给它插上电源，WAN口可以不接，将R2S的LAN口连接电脑的网口，根据所刷入的固件（软路由系统）的不同来决定后台地址，一般来说，软路由后台是<code>192.168.X.1</code> ，本文的系统后台是<code>192.168.22.1</code>，所以说我们在电脑浏览器内输入<code>192.168.5.1</code>(<code>192.168.22.1</code>)以进入后台。后台账号是root，默认密码基本都是password（若下载本文的系统，密码则为空），具体操作链接里面写的很清楚。</p>\n<h2 id=\"拨号或者DHCP客户端\"><a href=\"#拨号或者DHCP客户端\" class=\"headerlink\" title=\"拨号或者DHCP客户端\"></a>拨号或者DHCP客户端</h2><h3 id=\"光猫拨号\"><a href=\"#光猫拨号\" class=\"headerlink\" title=\"光猫拨号\"></a>光猫拨号</h3><p>如果你家里的组网方式是通过光猫拨号（通常都是光猫拨号），那么设置方法如下：</p>\n<p>选择 网络-接口， 然后选择 修改WAN口设置</p>\n<p><img src=\"/2022/02/26/R2S_build/image-2-1024x507.png\" alt=\"img\"></p>\n<p>将WAN口设置成DHCP客户端，然后保存应用即可，此外无须做其他任何设置。</p>\n<p><img src=\"/2022/02/26/R2S_build/image-3-1024x485.png\" alt=\"img\"></p>\n<h3 id=\"R2S拨号\"><a href=\"#R2S拨号\" class=\"headerlink\" title=\"R2S拨号\"></a>R2S拨号</h3><p>如果你的光猫是桥接，那么就由路由器来拨号（通常来说，哪个网络设备配置更好，就誰来拨号，由于R2S的稳定性远不如光猫，所以这里选择光猫拨号更好），设置方法如下：</p>\n<p><img src=\"/2022/02/26/R2S_build/image-5.png\" alt=\"img\"></p>\n<p>同样，选择修改WAN口，协议设置成PPPoE, PAP/CHAP，账号密码就是光猫的账号密码。比如电信宽带就是以<code>@163.gd</code>结尾的，密码如果忘记的话直接拨打10000（10086）重置就好，省时省力。</p>\n<p><img src=\"/2022/02/26/R2S_build/image-2-1024x507.png\" alt=\"img\"></p>\n<p>接下来，需要用超级管理员账号登陆到光猫的IP中（<code>192.168.1.1</code>）,各大运营商的超级管理员账号和密码可以自行搜索。选择 网络-协议，然后设置成DHCP客户端。</p>\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>用什么拨号，什么就选择PPPoE，然后其它设备就都设置成DHCP。</p>\n<p>用光猫拨号，光猫的设置里面就选择PPPoE，软路由以及其它路由器就选择DHCP客户端；</p>\n<p>用R2S拨号，光猫和其它路由设备的设置里面就选择DHCP客户端，软路由选择PPPoE。</p>\n<h2 id=\"各设备接入网络\"><a href=\"#各设备接入网络\" class=\"headerlink\" title=\"各设备接入网络\"></a>各设备接入网络</h2><p>将软路由的WAN口与光猫的千兆口相连，然后断开软路由的LAN口与电脑网口的连接，此时软路由的LAN口根据各人组网要求的不同选择接不同的设备，可以接交换机，也可以接一台路由器（路由器设置为有线中继模式，也就是无线AP模式）</p>\n<p>如果家中设备比较多，或者很多屋子都需要连网线的话，可以买一个最便宜的千兆交换机放到弱电箱中，然后吧R2S接到交换机与光猫中间，这样就可以实现整个局域网都接入到软路由中来。（我来草草的画个图）</p>\n<p><img src=\"/2022/02/26/R2S_build/image-20220305212846426.png\" alt=\"image-20220305212846426\"></p>\n<h2 id=\"利用插件设置科学上网\"><a href=\"#利用插件设置科学上网\" class=\"headerlink\" title=\"利用插件设置科学上网\"></a>利用插件设置科学上网</h2><p>根据前面的步骤，如果你的设备能够正常访问网络了，就可以开始探索OpenWrt的各类插件了。关于科学上网，常见的插件有PassWall, ShadowScoksR++, OpenClash，由于OpenClash具备强大的分流策略机制（根据你访问的域名或者IP的不同决定走不同的节点），我们在此以OpenCalsh为例设置科学上网</p>\n<p><img src=\"/2022/02/26/R2S_build/image-7.png\" alt=\"img\"></p>\n<p>首先，在服务菜单中找到OpenClash，然后选择配置文件订阅，选择添加配置文件</p>\n<p><img src=\"/2022/02/26/R2S_build/image-8.png\" alt=\"img\"></p>\n<p>配置文件名随便写，用途是给用户自己区分的，订阅地址填上机场给你的订阅地址，其余地方无需设置，直接应用并保存即可。然后回到OpenClash主页，配置文件区域发送了变化。</p>\n<p><img src=\"/2022/02/26/R2S_build/image-9-1024x194.png\" alt=\"img\"></p>\n<p>最后点击左下角的启动按钮，等待服务器上线运行即可。</p>\n<p><img src=\"/2022/02/26/R2S_build/image-10.png\" alt=\"img\"></p>\n<p>如果你设置后无法正常科学上网，原因是有很多的，需要你自己慢慢排查。</p>\n<h2 id=\"更多（原作者的话）\"><a href=\"#更多（原作者的话）\" class=\"headerlink\" title=\"更多（原作者的话）\"></a>更多（原作者的话）</h2><p><a href=\"https://wiki.friendlyarm.com/wiki/index.php/NanoPi_R2S/zh\">NanoPi R2S WIKI</a></p>\n<p>上面的链接是R2S的WIKI书，上面详细记录了R2S的配置以及实际测速情况，也有如何编译系统等教程。</p>\n<p>个人使用R2S两年，从大一到大三都在用这个，感觉就是到千兆不太行，500M是瓶颈了，然后连久了没那么稳定，官网手册上宣传它是又稳定又能达到千兆的，这个听听就好，R2S本来是适合入门的，但是现在价格炒的太高了，没这个必要去买它，目前有很多更具有性价比的软路由可供选择。</p>\n<p>此外向大家推荐软路由界的大佬: <a href=\"https://youtube.com/c/jackstone\">JackStone的Youtube主页</a> ，人称老白，做了很多小主机的视频，如果想选购更具性价比的设备，可以看他的合集，比如2021软路由选购建议这些。</p>\n<h2 id=\"组网时遇到过的问题（我的话）\"><a href=\"#组网时遇到过的问题（我的话）\" class=\"headerlink\" title=\"组网时遇到过的问题（我的话）\"></a>组网时遇到过的问题（我的话）</h2><ol>\n<li>组网的过程中可能出现无法自动分配IP地址的问题，比如说小米的路由器默认会分配<code>192.168.31.XXX</code>；如果你会手动配置的话可以试试，不过最简单的办法就是等，去洗个澡回来就好了。如果还没好，那么可以考虑RESET一下路由器。</li>\n<li>OpenClash插件在首次启动的时候，可能会启动失败，他会提示需要你选择编译架构，按照他的提示，选择Arm-v8架构即可。</li>\n<li>网线通常插上马上就会亮灯，5s左右就能ping通，不过不要太相信科学。<del>我有一次ping了10多分钟。</del>真的，不通的话不一定是没插紧，也不一定是插错了，<strong>很有可能是因为你没给我微信或者支付宝赞赏</strong>。</li>\n<li>R2S是很基础的一款软路由，稳定性可能不会太好，不过最有可能导致网络不稳定的还是机场的选择，如果选择廉价机场的话，要做好不知道什么时候突然断网10分钟的准备。</li>\n<li>计算机网络这门学科是玄学的一个分支。</li>\n</ol>\n"},{"title":"链式二叉树简介","date":"2022-02-25T08:01:11.000Z","author":"Tony","katex":true,"_content":"\n\n\n## 前言\n\n> 人为什么难做选择？\n\n**选择意味着放弃**\n\n你选择一方，也就意味着放弃了另一方。摆在你面前的选择项越接近，你的选择就会越困难，因为放弃其中任何一个选择项都不容易。如果摆在你面前的选择项对比明显，那么选择起来就会轻松许多，大家几乎都会毫不犹豫的选择“好”的选择项，放弃掉“差”的选择项。\n\n**选择永远都不是完美的**\n\n选择永远都不可能十全十美，只可能满足尽量多的侧重点。选择的时候想满足越多的侧重点，可能就会越难做出选择。所以在选择上不要过于追求完美。\n\n警惕**逃避性选择**——不知道自己要去哪儿，还要选择离开。\n\n有一种选择是对现状不满，想逃离这种现状，但是却不知道去哪里。举个例子，可能目前的公司有各种问题，比如开发流程不规范等，如果因为这些问题离开，可能就会从一个坑跳到另外一个更大的坑。当决定离开的时候，一定是自己有明确的目标，很清楚自己想要什么。\n\n------\n\n## 二叉树的定义\n\n二叉树要么为空，要么由根节点（root），左子树（left subtree）和右子树（right subtree）组成，而且左子树和右子树分别是一棵二叉树。\n\n------\n\n## 二叉树的遍历\n\n- 先序遍历$PreOrder(T)=Root(T)+PreOrder(left subT)+PreOrder(right subT)$\n- 中序遍历$InOrder(T)=InOrder(left subT)+Root(T)+InOrder(right subT)$\n- 后序遍历$PostOrder(T)=PostOrder(left subT)+PostOrder(Right subT)+Root(T)$\n\n![img](binary_tree_1/image.png)\n\n------\n\n\n\n```\nstruct Bitree //definition\n{\n    int data;\n    Bitree Lchild;\n    Bitree Rchild;\n};\n```\n\n## 先序遍历\n\n1. 递归实现\n\n```\nvoid PreOrderTraverse(BiTree tree)\n{\n    if (tree == NULL)\n        return;\n    cout << tree->data;\n    PreOrderTraverse(tree->lchild);\n    PreOrderTraverse(tree->rchild);\n}\n```\n\n2. 迭代实现\n\n```\nvoid PreOrder(BiTree Root)\n{\n    stack <BiTree> s;\n    if (root) //如果根节点不为空\n        s.push(root); //则令根节点入栈\n    while (!s.empty()) //在栈变空之前反复循环\n    { \n        root = s.pop(); \n        cout << root->data; //弹出并访问当前节点\n        //下面左右孩子的顺序不能颠倒\n        //必须先让右孩子先入栈，再让左孩子入栈。\n        if (root->RChild)\n            s.push(root->RChild); //右孩子先入后出\n        if (root->LChild)\n            s.push(root->LChild); //左孩子后入先出\n    }\n}\n```\n\n我们通过一个实例来了解一下该迭代版本是如何工作的 :\n\n![img](binary_tree_1/v2-0ccba83c7b3dbf7b89964c04021025d9_720w.jpg)\n\n## 中序遍历\n\n1. 递归实现\n\n```\nvoid InOrderTraverse(BiTree tree)\n{\n    if (!tree)\n        return;\n    InOrderTraverse(tree->lchild);\n    cout << tree->data;\n    IndOrderTraverse(tree->rchild);\n}\n```\n\n2. 迭代实现\n\n```\nvoid InOrderTraverse(BiTree root)\n{\n   Stack<BiTree> S; //辅助栈\n   while (true)\n      if (root) \n      {\n         S.push (root); //根节点进栈\n         root = root->LChild; //深入遍历左子树\n      } \n      else if (!S.empty()) \n      {\n         root = S.pop(); //尚未访问的最低祖先节点退栈\n         cout << root->data; //访问该祖先节点\n         root = root->RChild; //遍历祖先的右子树\n      } \n      else\n         break; //遍历完成\n}\n```\n\n## 后序遍历\n\n1. 递归实现\n\n```\nvoid PostOrderTraverse(BiTree tree)\n{\n    if (!tree)\n        return;\n    InOrderTraverse(tree->Lchild);\n    IndOrderTraverse(tree->Rchild);\n    cout << tree->data;\n}\n```\n\n2. 迭代实现\n\n```\n#define A !cur->Lchild && !cur->Rchild\n//如果P不存在左孩子和右孩子，则可以直接访问它；\n#define B pre==cur->Lchild || pre==cur->Rchild\n//P存在左孩子或者右孩子，但是其左孩子和右孩子都已被访问过了;\nvoid PostOrder(BiTree Root)\n{\n    if (!Root)\n        return;\n    stack <BiTree> s;//辅助栈\n    BiTree cur=Root,pre=NULL;\n    s.push(Root);//根节点进栈\n    while (!s.empty())\n    {\n        cur=s.top();\n        if (A || B)\n        {\n            cout << cur->data;\n            s.pop();\n            pre=cur;\n        }\n        else\n        {\n            if (cur->Rchild)\n                s.push(cur->Rchild);\n            if (cur->Lchild)\n                s.push(cur->Lchild);\n        }\n    }\n}\n\n```\n\n------\n\n下一篇文章：[数组与链式二叉树之间的转换 | Tony (tonylsx611.github.io)](https://tonylsx611.github.io/2022/02/24/binary_tree_2/)\n$$\nEND\n$$","source":"_posts/binary_tree_1.md","raw":"---\ntitle: 链式二叉树简介\ndate: 2022-02-25 16:01:11\nauthor: Tony\ncategories:\n\t- algorithm\ntags: \n\t- Binary-tree\n\t- algorithm\nkatex: true\n---\n\n\n\n## 前言\n\n> 人为什么难做选择？\n\n**选择意味着放弃**\n\n你选择一方，也就意味着放弃了另一方。摆在你面前的选择项越接近，你的选择就会越困难，因为放弃其中任何一个选择项都不容易。如果摆在你面前的选择项对比明显，那么选择起来就会轻松许多，大家几乎都会毫不犹豫的选择“好”的选择项，放弃掉“差”的选择项。\n\n**选择永远都不是完美的**\n\n选择永远都不可能十全十美，只可能满足尽量多的侧重点。选择的时候想满足越多的侧重点，可能就会越难做出选择。所以在选择上不要过于追求完美。\n\n警惕**逃避性选择**——不知道自己要去哪儿，还要选择离开。\n\n有一种选择是对现状不满，想逃离这种现状，但是却不知道去哪里。举个例子，可能目前的公司有各种问题，比如开发流程不规范等，如果因为这些问题离开，可能就会从一个坑跳到另外一个更大的坑。当决定离开的时候，一定是自己有明确的目标，很清楚自己想要什么。\n\n------\n\n## 二叉树的定义\n\n二叉树要么为空，要么由根节点（root），左子树（left subtree）和右子树（right subtree）组成，而且左子树和右子树分别是一棵二叉树。\n\n------\n\n## 二叉树的遍历\n\n- 先序遍历$PreOrder(T)=Root(T)+PreOrder(left subT)+PreOrder(right subT)$\n- 中序遍历$InOrder(T)=InOrder(left subT)+Root(T)+InOrder(right subT)$\n- 后序遍历$PostOrder(T)=PostOrder(left subT)+PostOrder(Right subT)+Root(T)$\n\n![img](binary_tree_1/image.png)\n\n------\n\n\n\n```\nstruct Bitree //definition\n{\n    int data;\n    Bitree Lchild;\n    Bitree Rchild;\n};\n```\n\n## 先序遍历\n\n1. 递归实现\n\n```\nvoid PreOrderTraverse(BiTree tree)\n{\n    if (tree == NULL)\n        return;\n    cout << tree->data;\n    PreOrderTraverse(tree->lchild);\n    PreOrderTraverse(tree->rchild);\n}\n```\n\n2. 迭代实现\n\n```\nvoid PreOrder(BiTree Root)\n{\n    stack <BiTree> s;\n    if (root) //如果根节点不为空\n        s.push(root); //则令根节点入栈\n    while (!s.empty()) //在栈变空之前反复循环\n    { \n        root = s.pop(); \n        cout << root->data; //弹出并访问当前节点\n        //下面左右孩子的顺序不能颠倒\n        //必须先让右孩子先入栈，再让左孩子入栈。\n        if (root->RChild)\n            s.push(root->RChild); //右孩子先入后出\n        if (root->LChild)\n            s.push(root->LChild); //左孩子后入先出\n    }\n}\n```\n\n我们通过一个实例来了解一下该迭代版本是如何工作的 :\n\n![img](binary_tree_1/v2-0ccba83c7b3dbf7b89964c04021025d9_720w.jpg)\n\n## 中序遍历\n\n1. 递归实现\n\n```\nvoid InOrderTraverse(BiTree tree)\n{\n    if (!tree)\n        return;\n    InOrderTraverse(tree->lchild);\n    cout << tree->data;\n    IndOrderTraverse(tree->rchild);\n}\n```\n\n2. 迭代实现\n\n```\nvoid InOrderTraverse(BiTree root)\n{\n   Stack<BiTree> S; //辅助栈\n   while (true)\n      if (root) \n      {\n         S.push (root); //根节点进栈\n         root = root->LChild; //深入遍历左子树\n      } \n      else if (!S.empty()) \n      {\n         root = S.pop(); //尚未访问的最低祖先节点退栈\n         cout << root->data; //访问该祖先节点\n         root = root->RChild; //遍历祖先的右子树\n      } \n      else\n         break; //遍历完成\n}\n```\n\n## 后序遍历\n\n1. 递归实现\n\n```\nvoid PostOrderTraverse(BiTree tree)\n{\n    if (!tree)\n        return;\n    InOrderTraverse(tree->Lchild);\n    IndOrderTraverse(tree->Rchild);\n    cout << tree->data;\n}\n```\n\n2. 迭代实现\n\n```\n#define A !cur->Lchild && !cur->Rchild\n//如果P不存在左孩子和右孩子，则可以直接访问它；\n#define B pre==cur->Lchild || pre==cur->Rchild\n//P存在左孩子或者右孩子，但是其左孩子和右孩子都已被访问过了;\nvoid PostOrder(BiTree Root)\n{\n    if (!Root)\n        return;\n    stack <BiTree> s;//辅助栈\n    BiTree cur=Root,pre=NULL;\n    s.push(Root);//根节点进栈\n    while (!s.empty())\n    {\n        cur=s.top();\n        if (A || B)\n        {\n            cout << cur->data;\n            s.pop();\n            pre=cur;\n        }\n        else\n        {\n            if (cur->Rchild)\n                s.push(cur->Rchild);\n            if (cur->Lchild)\n                s.push(cur->Lchild);\n        }\n    }\n}\n\n```\n\n------\n\n下一篇文章：[数组与链式二叉树之间的转换 | Tony (tonylsx611.github.io)](https://tonylsx611.github.io/2022/02/24/binary_tree_2/)\n$$\nEND\n$$","slug":"binary_tree_1","published":1,"updated":"2022-03-06T12:03:04.299Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0gvjylx000op8zu4rg4htmj","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><blockquote>\n<p>人为什么难做选择？</p>\n</blockquote>\n<p><strong>选择意味着放弃</strong></p>\n<p>你选择一方，也就意味着放弃了另一方。摆在你面前的选择项越接近，你的选择就会越困难，因为放弃其中任何一个选择项都不容易。如果摆在你面前的选择项对比明显，那么选择起来就会轻松许多，大家几乎都会毫不犹豫的选择“好”的选择项，放弃掉“差”的选择项。</p>\n<p><strong>选择永远都不是完美的</strong></p>\n<p>选择永远都不可能十全十美，只可能满足尽量多的侧重点。选择的时候想满足越多的侧重点，可能就会越难做出选择。所以在选择上不要过于追求完美。</p>\n<p>警惕<strong>逃避性选择</strong>——不知道自己要去哪儿，还要选择离开。</p>\n<p>有一种选择是对现状不满，想逃离这种现状，但是却不知道去哪里。举个例子，可能目前的公司有各种问题，比如开发流程不规范等，如果因为这些问题离开，可能就会从一个坑跳到另外一个更大的坑。当决定离开的时候，一定是自己有明确的目标，很清楚自己想要什么。</p>\n<hr>\n<h2 id=\"二叉树的定义\"><a href=\"#二叉树的定义\" class=\"headerlink\" title=\"二叉树的定义\"></a>二叉树的定义</h2><p>二叉树要么为空，要么由根节点（root），左子树（left subtree）和右子树（right subtree）组成，而且左子树和右子树分别是一棵二叉树。</p>\n<hr>\n<h2 id=\"二叉树的遍历\"><a href=\"#二叉树的遍历\" class=\"headerlink\" title=\"二叉树的遍历\"></a>二叉树的遍历</h2><ul>\n<li>先序遍历$PreOrder(T)=Root(T)+PreOrder(left subT)+PreOrder(right subT)$</li>\n<li>中序遍历$InOrder(T)=InOrder(left subT)+Root(T)+InOrder(right subT)$</li>\n<li>后序遍历$PostOrder(T)=PostOrder(left subT)+PostOrder(Right subT)+Root(T)$</li>\n</ul>\n<p><img src=\"/2022/02/25/binary_tree_1/image.png\" alt=\"img\" loading=\"lazy\"></p>\n<hr>\n<pre class=\"language-none\"><code class=\"language-none\">struct Bitree &#x2F;&#x2F;definition\n&#123;\n    int data;\n    Bitree Lchild;\n    Bitree Rchild;\n&#125;;</code></pre>\n<h2 id=\"先序遍历\"><a href=\"#先序遍历\" class=\"headerlink\" title=\"先序遍历\"></a>先序遍历</h2><ol>\n<li>递归实现</li>\n</ol>\n<pre class=\"language-none\"><code class=\"language-none\">void PreOrderTraverse(BiTree tree)\n&#123;\n    if (tree &#x3D;&#x3D; NULL)\n        return;\n    cout &lt;&lt; tree-&gt;data;\n    PreOrderTraverse(tree-&gt;lchild);\n    PreOrderTraverse(tree-&gt;rchild);\n&#125;</code></pre>\n<ol>\n<li>迭代实现</li>\n</ol>\n<pre class=\"language-none\"><code class=\"language-none\">void PreOrder(BiTree Root)\n&#123;\n    stack &lt;BiTree&gt; s;\n    if (root) &#x2F;&#x2F;如果根节点不为空\n        s.push(root); &#x2F;&#x2F;则令根节点入栈\n    while (!s.empty()) &#x2F;&#x2F;在栈变空之前反复循环\n    &#123; \n        root &#x3D; s.pop(); \n        cout &lt;&lt; root-&gt;data; &#x2F;&#x2F;弹出并访问当前节点\n        &#x2F;&#x2F;下面左右孩子的顺序不能颠倒\n        &#x2F;&#x2F;必须先让右孩子先入栈，再让左孩子入栈。\n        if (root-&gt;RChild)\n            s.push(root-&gt;RChild); &#x2F;&#x2F;右孩子先入后出\n        if (root-&gt;LChild)\n            s.push(root-&gt;LChild); &#x2F;&#x2F;左孩子后入先出\n    &#125;\n&#125;</code></pre>\n<p>我们通过一个实例来了解一下该迭代版本是如何工作的 :</p>\n<p><img src=\"/2022/02/25/binary_tree_1/v2-0ccba83c7b3dbf7b89964c04021025d9_720w.jpg\" alt=\"img\" loading=\"lazy\"></p>\n<h2 id=\"中序遍历\"><a href=\"#中序遍历\" class=\"headerlink\" title=\"中序遍历\"></a>中序遍历</h2><ol>\n<li>递归实现</li>\n</ol>\n<pre class=\"language-none\"><code class=\"language-none\">void InOrderTraverse(BiTree tree)\n&#123;\n    if (!tree)\n        return;\n    InOrderTraverse(tree-&gt;lchild);\n    cout &lt;&lt; tree-&gt;data;\n    IndOrderTraverse(tree-&gt;rchild);\n&#125;</code></pre>\n<ol>\n<li>迭代实现</li>\n</ol>\n<pre class=\"language-none\"><code class=\"language-none\">void InOrderTraverse(BiTree root)\n&#123;\n   Stack&lt;BiTree&gt; S; &#x2F;&#x2F;辅助栈\n   while (true)\n      if (root) \n      &#123;\n         S.push (root); &#x2F;&#x2F;根节点进栈\n         root &#x3D; root-&gt;LChild; &#x2F;&#x2F;深入遍历左子树\n      &#125; \n      else if (!S.empty()) \n      &#123;\n         root &#x3D; S.pop(); &#x2F;&#x2F;尚未访问的最低祖先节点退栈\n         cout &lt;&lt; root-&gt;data; &#x2F;&#x2F;访问该祖先节点\n         root &#x3D; root-&gt;RChild; &#x2F;&#x2F;遍历祖先的右子树\n      &#125; \n      else\n         break; &#x2F;&#x2F;遍历完成\n&#125;</code></pre>\n<h2 id=\"后序遍历\"><a href=\"#后序遍历\" class=\"headerlink\" title=\"后序遍历\"></a>后序遍历</h2><ol>\n<li>递归实现</li>\n</ol>\n<pre class=\"language-none\"><code class=\"language-none\">void PostOrderTraverse(BiTree tree)\n&#123;\n    if (!tree)\n        return;\n    InOrderTraverse(tree-&gt;Lchild);\n    IndOrderTraverse(tree-&gt;Rchild);\n    cout &lt;&lt; tree-&gt;data;\n&#125;</code></pre>\n<ol>\n<li>迭代实现</li>\n</ol>\n<pre class=\"language-none\"><code class=\"language-none\">#define A !cur-&gt;Lchild &amp;&amp; !cur-&gt;Rchild\n&#x2F;&#x2F;如果P不存在左孩子和右孩子，则可以直接访问它；\n#define B pre&#x3D;&#x3D;cur-&gt;Lchild || pre&#x3D;&#x3D;cur-&gt;Rchild\n&#x2F;&#x2F;P存在左孩子或者右孩子，但是其左孩子和右孩子都已被访问过了;\nvoid PostOrder(BiTree Root)\n&#123;\n    if (!Root)\n        return;\n    stack &lt;BiTree&gt; s;&#x2F;&#x2F;辅助栈\n    BiTree cur&#x3D;Root,pre&#x3D;NULL;\n    s.push(Root);&#x2F;&#x2F;根节点进栈\n    while (!s.empty())\n    &#123;\n        cur&#x3D;s.top();\n        if (A || B)\n        &#123;\n            cout &lt;&lt; cur-&gt;data;\n            s.pop();\n            pre&#x3D;cur;\n        &#125;\n        else\n        &#123;\n            if (cur-&gt;Rchild)\n                s.push(cur-&gt;Rchild);\n            if (cur-&gt;Lchild)\n                s.push(cur-&gt;Lchild);\n        &#125;\n    &#125;\n&#125;\n</code></pre>\n<hr>\n<p>下一篇文章：<a href=\"https://tonylsx611.github.io/2022/02/24/binary_tree_2/\">数组与链式二叉树之间的转换 | Tony (tonylsx611.github.io)</a></p>\n<script type=\"math/tex; mode=display\">\nEND</script>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><blockquote>\n<p>人为什么难做选择？</p>\n</blockquote>\n<p><strong>选择意味着放弃</strong></p>\n<p>你选择一方，也就意味着放弃了另一方。摆在你面前的选择项越接近，你的选择就会越困难，因为放弃其中任何一个选择项都不容易。如果摆在你面前的选择项对比明显，那么选择起来就会轻松许多，大家几乎都会毫不犹豫的选择“好”的选择项，放弃掉“差”的选择项。</p>\n<p><strong>选择永远都不是完美的</strong></p>\n<p>选择永远都不可能十全十美，只可能满足尽量多的侧重点。选择的时候想满足越多的侧重点，可能就会越难做出选择。所以在选择上不要过于追求完美。</p>\n<p>警惕<strong>逃避性选择</strong>——不知道自己要去哪儿，还要选择离开。</p>\n<p>有一种选择是对现状不满，想逃离这种现状，但是却不知道去哪里。举个例子，可能目前的公司有各种问题，比如开发流程不规范等，如果因为这些问题离开，可能就会从一个坑跳到另外一个更大的坑。当决定离开的时候，一定是自己有明确的目标，很清楚自己想要什么。</p>\n<hr>\n<h2 id=\"二叉树的定义\"><a href=\"#二叉树的定义\" class=\"headerlink\" title=\"二叉树的定义\"></a>二叉树的定义</h2><p>二叉树要么为空，要么由根节点（root），左子树（left subtree）和右子树（right subtree）组成，而且左子树和右子树分别是一棵二叉树。</p>\n<hr>\n<h2 id=\"二叉树的遍历\"><a href=\"#二叉树的遍历\" class=\"headerlink\" title=\"二叉树的遍历\"></a>二叉树的遍历</h2><ul>\n<li>先序遍历$PreOrder(T)=Root(T)+PreOrder(left subT)+PreOrder(right subT)$</li>\n<li>中序遍历$InOrder(T)=InOrder(left subT)+Root(T)+InOrder(right subT)$</li>\n<li>后序遍历$PostOrder(T)=PostOrder(left subT)+PostOrder(Right subT)+Root(T)$</li>\n</ul>\n<p><img src=\"/2022/02/25/binary_tree_1/image.png\" alt=\"img\"></p>\n<hr>\n<pre class=\"language-none\"><code class=\"language-none\">struct Bitree &#x2F;&#x2F;definition\n&#123;\n    int data;\n    Bitree Lchild;\n    Bitree Rchild;\n&#125;;</code></pre>\n<h2 id=\"先序遍历\"><a href=\"#先序遍历\" class=\"headerlink\" title=\"先序遍历\"></a>先序遍历</h2><ol>\n<li>递归实现</li>\n</ol>\n<pre class=\"language-none\"><code class=\"language-none\">void PreOrderTraverse(BiTree tree)\n&#123;\n    if (tree &#x3D;&#x3D; NULL)\n        return;\n    cout &lt;&lt; tree-&gt;data;\n    PreOrderTraverse(tree-&gt;lchild);\n    PreOrderTraverse(tree-&gt;rchild);\n&#125;</code></pre>\n<ol>\n<li>迭代实现</li>\n</ol>\n<pre class=\"language-none\"><code class=\"language-none\">void PreOrder(BiTree Root)\n&#123;\n    stack &lt;BiTree&gt; s;\n    if (root) &#x2F;&#x2F;如果根节点不为空\n        s.push(root); &#x2F;&#x2F;则令根节点入栈\n    while (!s.empty()) &#x2F;&#x2F;在栈变空之前反复循环\n    &#123; \n        root &#x3D; s.pop(); \n        cout &lt;&lt; root-&gt;data; &#x2F;&#x2F;弹出并访问当前节点\n        &#x2F;&#x2F;下面左右孩子的顺序不能颠倒\n        &#x2F;&#x2F;必须先让右孩子先入栈，再让左孩子入栈。\n        if (root-&gt;RChild)\n            s.push(root-&gt;RChild); &#x2F;&#x2F;右孩子先入后出\n        if (root-&gt;LChild)\n            s.push(root-&gt;LChild); &#x2F;&#x2F;左孩子后入先出\n    &#125;\n&#125;</code></pre>\n<p>我们通过一个实例来了解一下该迭代版本是如何工作的 :</p>\n<p><img src=\"/2022/02/25/binary_tree_1/v2-0ccba83c7b3dbf7b89964c04021025d9_720w.jpg\" alt=\"img\"></p>\n<h2 id=\"中序遍历\"><a href=\"#中序遍历\" class=\"headerlink\" title=\"中序遍历\"></a>中序遍历</h2><ol>\n<li>递归实现</li>\n</ol>\n<pre class=\"language-none\"><code class=\"language-none\">void InOrderTraverse(BiTree tree)\n&#123;\n    if (!tree)\n        return;\n    InOrderTraverse(tree-&gt;lchild);\n    cout &lt;&lt; tree-&gt;data;\n    IndOrderTraverse(tree-&gt;rchild);\n&#125;</code></pre>\n<ol>\n<li>迭代实现</li>\n</ol>\n<pre class=\"language-none\"><code class=\"language-none\">void InOrderTraverse(BiTree root)\n&#123;\n   Stack&lt;BiTree&gt; S; &#x2F;&#x2F;辅助栈\n   while (true)\n      if (root) \n      &#123;\n         S.push (root); &#x2F;&#x2F;根节点进栈\n         root &#x3D; root-&gt;LChild; &#x2F;&#x2F;深入遍历左子树\n      &#125; \n      else if (!S.empty()) \n      &#123;\n         root &#x3D; S.pop(); &#x2F;&#x2F;尚未访问的最低祖先节点退栈\n         cout &lt;&lt; root-&gt;data; &#x2F;&#x2F;访问该祖先节点\n         root &#x3D; root-&gt;RChild; &#x2F;&#x2F;遍历祖先的右子树\n      &#125; \n      else\n         break; &#x2F;&#x2F;遍历完成\n&#125;</code></pre>\n<h2 id=\"后序遍历\"><a href=\"#后序遍历\" class=\"headerlink\" title=\"后序遍历\"></a>后序遍历</h2><ol>\n<li>递归实现</li>\n</ol>\n<pre class=\"language-none\"><code class=\"language-none\">void PostOrderTraverse(BiTree tree)\n&#123;\n    if (!tree)\n        return;\n    InOrderTraverse(tree-&gt;Lchild);\n    IndOrderTraverse(tree-&gt;Rchild);\n    cout &lt;&lt; tree-&gt;data;\n&#125;</code></pre>\n<ol>\n<li>迭代实现</li>\n</ol>\n<pre class=\"language-none\"><code class=\"language-none\">#define A !cur-&gt;Lchild &amp;&amp; !cur-&gt;Rchild\n&#x2F;&#x2F;如果P不存在左孩子和右孩子，则可以直接访问它；\n#define B pre&#x3D;&#x3D;cur-&gt;Lchild || pre&#x3D;&#x3D;cur-&gt;Rchild\n&#x2F;&#x2F;P存在左孩子或者右孩子，但是其左孩子和右孩子都已被访问过了;\nvoid PostOrder(BiTree Root)\n&#123;\n    if (!Root)\n        return;\n    stack &lt;BiTree&gt; s;&#x2F;&#x2F;辅助栈\n    BiTree cur&#x3D;Root,pre&#x3D;NULL;\n    s.push(Root);&#x2F;&#x2F;根节点进栈\n    while (!s.empty())\n    &#123;\n        cur&#x3D;s.top();\n        if (A || B)\n        &#123;\n            cout &lt;&lt; cur-&gt;data;\n            s.pop();\n            pre&#x3D;cur;\n        &#125;\n        else\n        &#123;\n            if (cur-&gt;Rchild)\n                s.push(cur-&gt;Rchild);\n            if (cur-&gt;Lchild)\n                s.push(cur-&gt;Lchild);\n        &#125;\n    &#125;\n&#125;\n</code></pre>\n<hr>\n<p>下一篇文章：<a href=\"https://tonylsx611.github.io/2022/02/24/binary_tree_2/\">数组与链式二叉树之间的转换 | Tony (tonylsx611.github.io)</a></p>\n<script type=\"math/tex; mode=display\">\nEND</script>"},{"title":"数组与链式二叉树的转换","date":"2022-02-24T14:20:55.000Z","author":"Tony","katex":false,"_content":"\n## 前言\n\n对二叉树不是很了解的同学可以先看一下我之前的文章：\n\n[链式二叉树简介](https://tonylsx611.github.io/2022/02/25/binary_tree_1/)\n\n## 正文\n\n在了解二叉树的基本原理后，我们尝试将一个数组转化成链表形式的二叉树，之后将二叉树以中序遍历打印出来。整个的过程即==数组——链表——数组==。\n\n幸运的是，正好在leetcode中有着一道非常相似的题，所以我就直接拿来使用了，链接如下：\n\n[94. 二叉树的中序遍历 – 力扣（LeetCode） (leetcode-cn.com)](https://leetcode-cn.com/problems/binary-tree-inorder-traversal/)\n\n我们稍加修改，首先声明一个int类型的数组，然后把它放入链表二叉树中，如图所示：\n\n![img](binary_tree_2/image.png)\n\n```\nint arr[7] = { 1, 2, 3, 4, 5, NULL, 6 };\n```\n\n之后的任务就是将数组转化为链表形式，链表的定义如下：\n\n```\nstruct TreeNode \n{\n    int val;\n    TreeNode* left;\n    TreeNode* right;\n    TreeNode() : val(0), left(nullptr), right(nullptr) {}\n    TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n    TreeNode(int x, TreeNode* left, TreeNode* right) : val(x), left(left), right(right) {}\n};\n```\n\n转化为链表过后，剩下的事情就很容易了，无非就是前中后序的遍历，我们在[上一个blog](https://tonylsx611.github.io/2022/02/25/binary_tree_1/)中已经有详细的介绍，这里更希望大家掌握迭代的算法，而非递归；因为递归在电脑的底层逻辑中，依然是维护一个栈。\n\n## 代码\n\n那么全部的代码如下，不做过多解释，有疑问可以在留言板留言。\n\n```\n#include<iostream>\n#include<vector>\nusing namespace std;\nstruct TreeNode {\n...};\nclass Solution {\npublic:\n    int arr[7] = { 1, 2, 3, 4, 5, NULL, 6 };\n    void inorder(TreeNode* root, vector<int>& res)//中序遍历\n    {\n        if (root == nullptr)\n            return;\n\n        inorder(root->left, res);\n        res.push_back(root->val);\n        inorder(root->right, res);\n    }\n    vector<int> inorderTraversal(TreeNode* root)//递归法\n    {\n        vector<int> ans;\n        inorder(root, ans);\n        return ans;\n    }\n    vector<int> inorderTraversal(TreeNode* root)//迭代法\n    {\n        vector<int> ans;\n        stack<TreeNode*> stk;\n           \n        while (1)\n        {\n            if (root != nullptr)\n            {\n                stk.push(root);\n                root = root->left;\n            }\n            else if (!stk.empty())\n            {\n                root = stk.top();\n                stk.pop();\n                ans.push_back(root->val);\n                root = root->right;\n            }\n            else\n                return ans;\n        }\n        \n    }\n    TreeNode* addtree(TreeNode* tree, int arr[], int i)//数组转链表\n    {\n        if (arr[i] == 0)\n            return NULL;\n        if (i < 7)//arr.length()\n        {\n            TreeNode* tree = new TreeNode();\n            \n            tree->val = arr[i];\n            tree->left = addtree(tree, arr, i + i + 1);\n            tree->right = addtree(tree, arr, i + i + 2);\n            return tree;\n        }\n        return NULL;\n    }\n};\n\nint main()\n{\n    Solution sol;\n    TreeNode* tree = NULL;\n    tree= sol.addtree(tree, sol.arr, 0);\n    sol.inorderTraversal(tree);\n    for(int i= 0; i< sol.inorderTraversal(tree).size(); i++)\n        cout << sol.inorderTraversal(tree)[i]<<\" \";\n    return 0;\n}\n```","source":"_posts/binary_tree_2.md","raw":"---\ntitle: 数组与链式二叉树的转换\ndate: 2022-02-24 22:20:55\nauthor: Tony\ncategories:\n\t- algorithm\ntags: \n\t- Binary-tree\n\t- algorithm\nkatex: false\n---\n\n## 前言\n\n对二叉树不是很了解的同学可以先看一下我之前的文章：\n\n[链式二叉树简介](https://tonylsx611.github.io/2022/02/25/binary_tree_1/)\n\n## 正文\n\n在了解二叉树的基本原理后，我们尝试将一个数组转化成链表形式的二叉树，之后将二叉树以中序遍历打印出来。整个的过程即==数组——链表——数组==。\n\n幸运的是，正好在leetcode中有着一道非常相似的题，所以我就直接拿来使用了，链接如下：\n\n[94. 二叉树的中序遍历 – 力扣（LeetCode） (leetcode-cn.com)](https://leetcode-cn.com/problems/binary-tree-inorder-traversal/)\n\n我们稍加修改，首先声明一个int类型的数组，然后把它放入链表二叉树中，如图所示：\n\n![img](binary_tree_2/image.png)\n\n```\nint arr[7] = { 1, 2, 3, 4, 5, NULL, 6 };\n```\n\n之后的任务就是将数组转化为链表形式，链表的定义如下：\n\n```\nstruct TreeNode \n{\n    int val;\n    TreeNode* left;\n    TreeNode* right;\n    TreeNode() : val(0), left(nullptr), right(nullptr) {}\n    TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n    TreeNode(int x, TreeNode* left, TreeNode* right) : val(x), left(left), right(right) {}\n};\n```\n\n转化为链表过后，剩下的事情就很容易了，无非就是前中后序的遍历，我们在[上一个blog](https://tonylsx611.github.io/2022/02/25/binary_tree_1/)中已经有详细的介绍，这里更希望大家掌握迭代的算法，而非递归；因为递归在电脑的底层逻辑中，依然是维护一个栈。\n\n## 代码\n\n那么全部的代码如下，不做过多解释，有疑问可以在留言板留言。\n\n```\n#include<iostream>\n#include<vector>\nusing namespace std;\nstruct TreeNode {\n...};\nclass Solution {\npublic:\n    int arr[7] = { 1, 2, 3, 4, 5, NULL, 6 };\n    void inorder(TreeNode* root, vector<int>& res)//中序遍历\n    {\n        if (root == nullptr)\n            return;\n\n        inorder(root->left, res);\n        res.push_back(root->val);\n        inorder(root->right, res);\n    }\n    vector<int> inorderTraversal(TreeNode* root)//递归法\n    {\n        vector<int> ans;\n        inorder(root, ans);\n        return ans;\n    }\n    vector<int> inorderTraversal(TreeNode* root)//迭代法\n    {\n        vector<int> ans;\n        stack<TreeNode*> stk;\n           \n        while (1)\n        {\n            if (root != nullptr)\n            {\n                stk.push(root);\n                root = root->left;\n            }\n            else if (!stk.empty())\n            {\n                root = stk.top();\n                stk.pop();\n                ans.push_back(root->val);\n                root = root->right;\n            }\n            else\n                return ans;\n        }\n        \n    }\n    TreeNode* addtree(TreeNode* tree, int arr[], int i)//数组转链表\n    {\n        if (arr[i] == 0)\n            return NULL;\n        if (i < 7)//arr.length()\n        {\n            TreeNode* tree = new TreeNode();\n            \n            tree->val = arr[i];\n            tree->left = addtree(tree, arr, i + i + 1);\n            tree->right = addtree(tree, arr, i + i + 2);\n            return tree;\n        }\n        return NULL;\n    }\n};\n\nint main()\n{\n    Solution sol;\n    TreeNode* tree = NULL;\n    tree= sol.addtree(tree, sol.arr, 0);\n    sol.inorderTraversal(tree);\n    for(int i= 0; i< sol.inorderTraversal(tree).size(); i++)\n        cout << sol.inorderTraversal(tree)[i]<<\" \";\n    return 0;\n}\n```","slug":"binary_tree_2","published":1,"updated":"2022-03-06T12:03:04.299Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0gvjyly000pp8zu4l1ge8o3","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>对二叉树不是很了解的同学可以先看一下我之前的文章：</p>\n<p><a href=\"https://tonylsx611.github.io/2022/02/25/binary_tree_1/\">链式二叉树简介</a></p>\n<h2 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h2><p>在了解二叉树的基本原理后，我们尝试将一个数组转化成链表形式的二叉树，之后将二叉树以中序遍历打印出来。整个的过程即==数组——链表——数组==。</p>\n<p>幸运的是，正好在leetcode中有着一道非常相似的题，所以我就直接拿来使用了，链接如下：</p>\n<p><a href=\"https://leetcode-cn.com/problems/binary-tree-inorder-traversal/\">94. 二叉树的中序遍历 – 力扣（LeetCode） (leetcode-cn.com)</a></p>\n<p>我们稍加修改，首先声明一个int类型的数组，然后把它放入链表二叉树中，如图所示：</p>\n<p><img src=\"/2022/02/24/binary_tree_2/image.png\" alt=\"img\" loading=\"lazy\"></p>\n<pre class=\"language-none\"><code class=\"language-none\">int arr[7] &#x3D; &#123; 1, 2, 3, 4, 5, NULL, 6 &#125;;</code></pre>\n<p>之后的任务就是将数组转化为链表形式，链表的定义如下：</p>\n<pre class=\"language-none\"><code class=\"language-none\">struct TreeNode \n&#123;\n    int val;\n    TreeNode* left;\n    TreeNode* right;\n    TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;\n    TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;\n    TreeNode(int x, TreeNode* left, TreeNode* right) : val(x), left(left), right(right) &#123;&#125;\n&#125;;</code></pre>\n<p>转化为链表过后，剩下的事情就很容易了，无非就是前中后序的遍历，我们在<a href=\"https://tonylsx611.github.io/2022/02/25/binary_tree_1/\">上一个blog</a>中已经有详细的介绍，这里更希望大家掌握迭代的算法，而非递归；因为递归在电脑的底层逻辑中，依然是维护一个栈。</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><p>那么全部的代码如下，不做过多解释，有疑问可以在留言板留言。</p>\n<pre class=\"language-none\"><code class=\"language-none\">#include&lt;iostream&gt;\n#include&lt;vector&gt;\nusing namespace std;\nstruct TreeNode &#123;\n...&#125;;\nclass Solution &#123;\npublic:\n    int arr[7] &#x3D; &#123; 1, 2, 3, 4, 5, NULL, 6 &#125;;\n    void inorder(TreeNode* root, vector&lt;int&gt;&amp; res)&#x2F;&#x2F;中序遍历\n    &#123;\n        if (root &#x3D;&#x3D; nullptr)\n            return;\n\n        inorder(root-&gt;left, res);\n        res.push_back(root-&gt;val);\n        inorder(root-&gt;right, res);\n    &#125;\n    vector&lt;int&gt; inorderTraversal(TreeNode* root)&#x2F;&#x2F;递归法\n    &#123;\n        vector&lt;int&gt; ans;\n        inorder(root, ans);\n        return ans;\n    &#125;\n    vector&lt;int&gt; inorderTraversal(TreeNode* root)&#x2F;&#x2F;迭代法\n    &#123;\n        vector&lt;int&gt; ans;\n        stack&lt;TreeNode*&gt; stk;\n           \n        while (1)\n        &#123;\n            if (root !&#x3D; nullptr)\n            &#123;\n                stk.push(root);\n                root &#x3D; root-&gt;left;\n            &#125;\n            else if (!stk.empty())\n            &#123;\n                root &#x3D; stk.top();\n                stk.pop();\n                ans.push_back(root-&gt;val);\n                root &#x3D; root-&gt;right;\n            &#125;\n            else\n                return ans;\n        &#125;\n        \n    &#125;\n    TreeNode* addtree(TreeNode* tree, int arr[], int i)&#x2F;&#x2F;数组转链表\n    &#123;\n        if (arr[i] &#x3D;&#x3D; 0)\n            return NULL;\n        if (i &lt; 7)&#x2F;&#x2F;arr.length()\n        &#123;\n            TreeNode* tree &#x3D; new TreeNode();\n            \n            tree-&gt;val &#x3D; arr[i];\n            tree-&gt;left &#x3D; addtree(tree, arr, i + i + 1);\n            tree-&gt;right &#x3D; addtree(tree, arr, i + i + 2);\n            return tree;\n        &#125;\n        return NULL;\n    &#125;\n&#125;;\n\nint main()\n&#123;\n    Solution sol;\n    TreeNode* tree &#x3D; NULL;\n    tree&#x3D; sol.addtree(tree, sol.arr, 0);\n    sol.inorderTraversal(tree);\n    for(int i&#x3D; 0; i&lt; sol.inorderTraversal(tree).size(); i++)\n        cout &lt;&lt; sol.inorderTraversal(tree)[i]&lt;&lt;&quot; &quot;;\n    return 0;\n&#125;</code></pre>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>对二叉树不是很了解的同学可以先看一下我之前的文章：</p>\n<p><a href=\"https://tonylsx611.github.io/2022/02/25/binary_tree_1/\">链式二叉树简介</a></p>\n<h2 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h2><p>在了解二叉树的基本原理后，我们尝试将一个数组转化成链表形式的二叉树，之后将二叉树以中序遍历打印出来。整个的过程即==数组——链表——数组==。</p>\n<p>幸运的是，正好在leetcode中有着一道非常相似的题，所以我就直接拿来使用了，链接如下：</p>\n<p><a href=\"https://leetcode-cn.com/problems/binary-tree-inorder-traversal/\">94. 二叉树的中序遍历 – 力扣（LeetCode） (leetcode-cn.com)</a></p>\n<p>我们稍加修改，首先声明一个int类型的数组，然后把它放入链表二叉树中，如图所示：</p>\n<p><img src=\"/2022/02/24/binary_tree_2/image.png\" alt=\"img\"></p>\n<pre class=\"language-none\"><code class=\"language-none\">int arr[7] &#x3D; &#123; 1, 2, 3, 4, 5, NULL, 6 &#125;;</code></pre>\n<p>之后的任务就是将数组转化为链表形式，链表的定义如下：</p>\n<pre class=\"language-none\"><code class=\"language-none\">struct TreeNode \n&#123;\n    int val;\n    TreeNode* left;\n    TreeNode* right;\n    TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;\n    TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;\n    TreeNode(int x, TreeNode* left, TreeNode* right) : val(x), left(left), right(right) &#123;&#125;\n&#125;;</code></pre>\n<p>转化为链表过后，剩下的事情就很容易了，无非就是前中后序的遍历，我们在<a href=\"https://tonylsx611.github.io/2022/02/25/binary_tree_1/\">上一个blog</a>中已经有详细的介绍，这里更希望大家掌握迭代的算法，而非递归；因为递归在电脑的底层逻辑中，依然是维护一个栈。</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><p>那么全部的代码如下，不做过多解释，有疑问可以在留言板留言。</p>\n<pre class=\"language-none\"><code class=\"language-none\">#include&lt;iostream&gt;\n#include&lt;vector&gt;\nusing namespace std;\nstruct TreeNode &#123;\n...&#125;;\nclass Solution &#123;\npublic:\n    int arr[7] &#x3D; &#123; 1, 2, 3, 4, 5, NULL, 6 &#125;;\n    void inorder(TreeNode* root, vector&lt;int&gt;&amp; res)&#x2F;&#x2F;中序遍历\n    &#123;\n        if (root &#x3D;&#x3D; nullptr)\n            return;\n\n        inorder(root-&gt;left, res);\n        res.push_back(root-&gt;val);\n        inorder(root-&gt;right, res);\n    &#125;\n    vector&lt;int&gt; inorderTraversal(TreeNode* root)&#x2F;&#x2F;递归法\n    &#123;\n        vector&lt;int&gt; ans;\n        inorder(root, ans);\n        return ans;\n    &#125;\n    vector&lt;int&gt; inorderTraversal(TreeNode* root)&#x2F;&#x2F;迭代法\n    &#123;\n        vector&lt;int&gt; ans;\n        stack&lt;TreeNode*&gt; stk;\n           \n        while (1)\n        &#123;\n            if (root !&#x3D; nullptr)\n            &#123;\n                stk.push(root);\n                root &#x3D; root-&gt;left;\n            &#125;\n            else if (!stk.empty())\n            &#123;\n                root &#x3D; stk.top();\n                stk.pop();\n                ans.push_back(root-&gt;val);\n                root &#x3D; root-&gt;right;\n            &#125;\n            else\n                return ans;\n        &#125;\n        \n    &#125;\n    TreeNode* addtree(TreeNode* tree, int arr[], int i)&#x2F;&#x2F;数组转链表\n    &#123;\n        if (arr[i] &#x3D;&#x3D; 0)\n            return NULL;\n        if (i &lt; 7)&#x2F;&#x2F;arr.length()\n        &#123;\n            TreeNode* tree &#x3D; new TreeNode();\n            \n            tree-&gt;val &#x3D; arr[i];\n            tree-&gt;left &#x3D; addtree(tree, arr, i + i + 1);\n            tree-&gt;right &#x3D; addtree(tree, arr, i + i + 2);\n            return tree;\n        &#125;\n        return NULL;\n    &#125;\n&#125;;\n\nint main()\n&#123;\n    Solution sol;\n    TreeNode* tree &#x3D; NULL;\n    tree&#x3D; sol.addtree(tree, sol.arr, 0);\n    sol.inorderTraversal(tree);\n    for(int i&#x3D; 0; i&lt; sol.inorderTraversal(tree).size(); i++)\n        cout &lt;&lt; sol.inorderTraversal(tree)[i]&lt;&lt;&quot; &quot;;\n    return 0;\n&#125;</code></pre>"},{"title":"test","date":"2022-03-06T12:33:53.000Z","_content":"\nThis is the passage written by my laptop.\n\nThis is just a test.\n\n","source":"_posts/test.md","raw":"---\ntitle: test\ndate: 2022-03-06 20:33:53\ntags:\n\n---\n\nThis is the passage written by my laptop.\n\nThis is just a test.\n\n","slug":"test","published":1,"updated":"2022-03-06T12:34:58.853Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0gvjylz000sp8zu9kffhx8k","content":"<p>This is the passage written by my laptop.</p>\n<p>This is just a test.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>This is the passage written by my laptop.</p>\n<p>This is just a test.</p>\n"}],"PostAsset":[{"_id":"source/_posts/Hexo_article/2d6f869662e83398f06070e2a14f838.jpg","slug":"2d6f869662e83398f06070e2a14f838.jpg","post":"cl0gvjyln0003p8zu1sz1epyj","modified":0,"renderable":0},{"_id":"source/_posts/Hexo_article/884019afce82603bd8bc8fd4e531839.jpg","slug":"884019afce82603bd8bc8fd4e531839.jpg","post":"cl0gvjyln0003p8zu1sz1epyj","modified":0,"renderable":0},{"_id":"source/_posts/Hexo_article/IMG_1479.jpg","slug":"IMG_1479.jpg","post":"cl0gvjyln0003p8zu1sz1epyj","modified":0,"renderable":0},{"_id":"source/_posts/Hexo_article/traffic-light.gif","slug":"traffic-light.gif","post":"cl0gvjyln0003p8zu1sz1epyj","modified":0,"renderable":0},{"_id":"source/_posts/R2S_build/image-1.png","slug":"image-1.png","post":"cl0gvjylq0007p8zuhpxv4zl4","modified":0,"renderable":0},{"_id":"source/_posts/R2S_build/image-10.png","slug":"image-10.png","post":"cl0gvjylq0007p8zuhpxv4zl4","modified":0,"renderable":0},{"_id":"source/_posts/R2S_build/image-2-1024x507.png","slug":"image-2-1024x507.png","post":"cl0gvjylq0007p8zuhpxv4zl4","modified":0,"renderable":0},{"_id":"source/_posts/R2S_build/image-20220305212846426.png","slug":"image-20220305212846426.png","post":"cl0gvjylq0007p8zuhpxv4zl4","modified":0,"renderable":0},{"_id":"source/_posts/R2S_build/image-3-1024x485.png","slug":"image-3-1024x485.png","post":"cl0gvjylq0007p8zuhpxv4zl4","modified":0,"renderable":0},{"_id":"source/_posts/R2S_build/image-5.png","slug":"image-5.png","post":"cl0gvjylq0007p8zuhpxv4zl4","modified":0,"renderable":0},{"_id":"source/_posts/R2S_build/image-7.png","slug":"image-7.png","post":"cl0gvjylq0007p8zuhpxv4zl4","modified":0,"renderable":0},{"_id":"source/_posts/R2S_build/image-8.png","slug":"image-8.png","post":"cl0gvjylq0007p8zuhpxv4zl4","modified":0,"renderable":0},{"_id":"source/_posts/R2S_build/image-9-1024x194.png","slug":"image-9-1024x194.png","post":"cl0gvjylq0007p8zuhpxv4zl4","modified":0,"renderable":0},{"_id":"source/_posts/binary_tree_1/image.png","slug":"image.png","post":"cl0gvjylx000op8zu4rg4htmj","modified":0,"renderable":0},{"_id":"source/_posts/binary_tree_1/v2-0ccba83c7b3dbf7b89964c04021025d9_720w.jpg","slug":"v2-0ccba83c7b3dbf7b89964c04021025d9_720w.jpg","post":"cl0gvjylx000op8zu4rg4htmj","modified":0,"renderable":0},{"_id":"source/_posts/binary_tree_2/image.png","slug":"image.png","post":"cl0gvjyly000pp8zu4l1ge8o3","modified":0,"renderable":0}],"PostCategory":[{"post_id":"cl0gvjylk0001p8zua9gf5nby","category_id":"cl0gvjylo0004p8zu2gqp8xll","_id":"cl0gvjylu000cp8zugij7cpur"},{"post_id":"cl0gvjyln0003p8zu1sz1epyj","category_id":"cl0gvjylo0004p8zu2gqp8xll","_id":"cl0gvjylu000fp8zu21npgu0s"},{"post_id":"cl0gvjylq0007p8zuhpxv4zl4","category_id":"cl0gvjylt000bp8zuhpxv9xkn","_id":"cl0gvjylv000hp8zuhxj9e2q2"},{"post_id":"cl0gvjylx000op8zu4rg4htmj","category_id":"cl0gvjylz000qp8zuevwlemed","_id":"cl0gvjym0000vp8zuda3r1pz0"},{"post_id":"cl0gvjyly000pp8zu4l1ge8o3","category_id":"cl0gvjylz000qp8zuevwlemed","_id":"cl0gvjym1000yp8zu2nfget3u"}],"PostTag":[{"post_id":"cl0gvjylk0001p8zua9gf5nby","tag_id":"cl0gvjylp0005p8zue1i8ddo8","_id":"cl0gvjylt000ap8zuf4xvh4dm"},{"post_id":"cl0gvjyln0003p8zu1sz1epyj","tag_id":"cl0gvjylp0005p8zue1i8ddo8","_id":"cl0gvjylu000ep8zubs3e3n97"},{"post_id":"cl0gvjylq0007p8zuhpxv4zl4","tag_id":"cl0gvjylu000dp8zu4ajndo3q","_id":"cl0gvjylv000kp8zu6p5079j2"},{"post_id":"cl0gvjylq0007p8zuhpxv4zl4","tag_id":"cl0gvjylu000gp8zu9oa86dwc","_id":"cl0gvjylv000lp8zu9dbt6z80"},{"post_id":"cl0gvjylq0007p8zuhpxv4zl4","tag_id":"cl0gvjylv000ip8zuad5khrsz","_id":"cl0gvjylv000mp8zu2oyz7pc1"},{"post_id":"cl0gvjylq0007p8zuhpxv4zl4","tag_id":"cl0gvjylv000jp8zuazgf21hr","_id":"cl0gvjylv000np8zu1r4vfd5r"},{"post_id":"cl0gvjylx000op8zu4rg4htmj","tag_id":"cl0gvjylz000rp8zuh611fi6u","_id":"cl0gvjym1000xp8zudus4bzbg"},{"post_id":"cl0gvjylx000op8zu4rg4htmj","tag_id":"cl0gvjym0000up8zufc20esaq","_id":"cl0gvjym1000zp8zu1wolab0o"},{"post_id":"cl0gvjyly000pp8zu4l1ge8o3","tag_id":"cl0gvjylz000rp8zuh611fi6u","_id":"cl0gvjym10011p8zuag3l1rbn"},{"post_id":"cl0gvjyly000pp8zu4l1ge8o3","tag_id":"cl0gvjym0000up8zufc20esaq","_id":"cl0gvjym10012p8zu86gn93tk"}],"Tag":[{"name":"Hexo","_id":"cl0gvjylp0005p8zue1i8ddo8"},{"name":"R2S","_id":"cl0gvjylu000dp8zu4ajndo3q"},{"name":"Computer Network","_id":"cl0gvjylu000gp8zu9oa86dwc"},{"name":"软路由","_id":"cl0gvjylv000ip8zuad5khrsz"},{"name":"科学上网","_id":"cl0gvjylv000jp8zuazgf21hr"},{"name":"Binary-tree","_id":"cl0gvjylz000rp8zuh611fi6u"},{"name":"algorithm","_id":"cl0gvjym0000up8zufc20esaq"}]}}