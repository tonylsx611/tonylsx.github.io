{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-yun/source/yun.png","path":"yun.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-yun/source/yun.svg","path":"yun.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-yun/source/css/README.md","path":"css/README.md","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-yun/source/css/hexo-theme-yun.styl","path":"css/hexo-theme-yun.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-yun/source/js/chunk-TTX6TVTO.js","path":"js/chunk-TTX6TVTO.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-yun/source/js/chunk-YZ7E3ATC.js","path":"js/chunk-YZ7E3ATC.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-yun/source/js/gallery-decrypt.js","path":"js/gallery-decrypt.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-yun/source/js/hexo-theme-yun.js","path":"js/hexo-theme-yun.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-yun/source/js/pjax.js","path":"js/pjax.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-yun/source/js/say.js","path":"js/say.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-yun/source/js/sidebar.js","path":"js/sidebar.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-yun/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-yun/source/js/analytics/leancloud-visitors.js","path":"js/analytics/leancloud-visitors.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-yun/source/js/comments/disqus.js","path":"js/comments/disqus.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-yun/source/js/comments/waline.js","path":"js/comments/waline.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-yun/source/js/search/algolia-search.js","path":"js/search/algolia-search.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-yun/source/js/search/local-search.js","path":"js/search/local-search.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-yun/source/js/ui/banner.js","path":"js/ui/banner.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-yun/source/js/ui/fireworks.js","path":"js/ui/fireworks.js","modified":0,"renderable":1},{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/image/alipay.png","path":"image/alipay.png","modified":0,"renderable":0},{"_id":"source/image/avatar.jpg","path":"image/avatar.jpg","modified":0,"renderable":0},{"_id":"source/image/avatar_backup.jpg","path":"image/avatar_backup.jpg","modified":0,"renderable":0},{"_id":"source/image/head.jpg","path":"image/head.jpg","modified":0,"renderable":0},{"_id":"source/image/icon.png","path":"image/icon.png","modified":0,"renderable":0},{"_id":"source/image/qq.jpg","path":"image/qq.jpg","modified":0,"renderable":0},{"_id":"source/image/seedling-line.svg","path":"image/seedling-line.svg","modified":0,"renderable":0},{"_id":"source/image/wechat.jpg","path":"image/wechat.jpg","modified":0,"renderable":0},{"_id":"source/image/wechat.png","path":"image/wechat.png","modified":0,"renderable":0}],"Cache":[{"_id":"source/CNAME","hash":"5e2329bc423a886fdd08288eadb59845c3da790f","modified":1647181947782},{"_id":"source/_posts/8-puzzle.md","hash":"d55c63c962b911031a4732295eca43436598013f","modified":1648980163749},{"_id":"source/_posts/BFS.md","hash":"035e0478f3fc729ebcb6ec35a96e8551a9c3e242","modified":1647181947783},{"_id":"source/_posts/BM-algorithm.md","hash":"44339003ec401d92d0cf4eab45a19876740dc75c","modified":1648980163760},{"_id":"source/_posts/Backpack.md","hash":"4652e10f4e478efaca8105cf86a4fc93a31fde14","modified":1647181947784},{"_id":"source/_posts/CN-1.md","hash":"bbf70d8dfb320ad7504d3ec51da743f79411c019","modified":1649488830076},{"_id":"source/_posts/CN-2.md","hash":"f7a291de344c8b91cc4d17f8d09b68fc725e23ee","modified":1649432088223},{"_id":"source/_posts/CN-3.md","hash":"0b30a2d112eab332e8b9bf1c77a2a3741eef1849","modified":1649432207258},{"_id":"source/_posts/CN-4.md","hash":"52228d267e6d4f7dc3b0d45b0580044968622986","modified":1649432402677},{"_id":"source/_posts/CN-5.md","hash":"8abf5d41e51c62cdd9007135e848f5bf9647a284","modified":1649432525612},{"_id":"source/_posts/CN-6.md","hash":"ba3080e100bf435faaa93859845b4ad545db29fa","modified":1649432578118},{"_id":"source/_posts/DFS.md","hash":"d960faa99df3603d23bba2da2b5d1c175a116547","modified":1647181947784},{"_id":"source/_posts/Graph-search.md","hash":"a74cf400bb32472d24dcc8a5585024d2d11befb8","modified":1647181947784},{"_id":"source/_posts/Hexo-synchronization.md","hash":"6fb6d610577411433e88dc05275bad20b6efb034","modified":1647441759644},{"_id":"source/_posts/Hexo_article.md","hash":"ce2f26d19d25fd442be4be88450820cf295ad693","modified":1647181947789},{"_id":"source/_posts/Hexo_creation.md","hash":"ddde00e924485120be2947e2bd478174fd3b955c","modified":1647181947863},{"_id":"source/_posts/IPsec.md","hash":"ee30e8bb188ea81e116adb941942c40f76f99a1f","modified":1649488227657},{"_id":"source/_posts/R2S_build.md","hash":"2b296533962e9983a25a2c1feeccb093f98c3365","modified":1647181947867},{"_id":"source/_posts/PERT.md","hash":"05c61eb3cf2534dc55c61d2f3dc4f10556856c9f","modified":1647181947865},{"_id":"source/_posts/binary_tree_1.md","hash":"f85f1b661f767ee706d4bab62fdcfbac002bf174","modified":1647187747491},{"_id":"source/_posts/binary_tree_2.md","hash":"ee98f59a5559baa93b25b97cfdac4ce1b717e746","modified":1647515000714},{"_id":"source/about/index.md","hash":"3c578647ef994683dada780f8266efaea04b9dd7","modified":1647181947876},{"_id":"source/categories/index.md","hash":"c661acf798d58f9cc3a8fed26a451b35a5ae907c","modified":1647181947876},{"_id":"source/image/avatar_backup.jpg","hash":"981b12aaf6e63ae11de7eb10483b2676ea88f990","modified":1647181947878},{"_id":"source/image/avatar.jpg","hash":"371df290b2fe0600ba933d48751ac8f2cadc0a18","modified":1647181947877},{"_id":"source/image/icon.png","hash":"980118ed1d6035f8a6173abbf6099c4227c055c1","modified":1647181947895},{"_id":"source/image/seedling-line.svg","hash":"40de46a2c2adab799174cf37cb722244d57430d9","modified":1647181947896},{"_id":"source/image/wechat.jpg","hash":"c7050b547d10944c3f802771962c11ab390255dc","modified":1647181947897},{"_id":"source/tags/index.md","hash":"e630d4f32d533f0e2969bfe2fa5b8b6f2ea0b2eb","modified":1647181947898},{"_id":"source/_posts/8-puzzle/R1.png","hash":"56fc9948f0a92af1fb0ccd3657d3ebeefbec69ac","modified":1648980163759},{"_id":"source/_posts/BM-algorithm/image-20220328004145309.png","hash":"7f99a2be322cdaabab3d8c8dcdbe71a399a0a98f","modified":1648399305331},{"_id":"source/_posts/CN-3/image-20211205153202429.png","hash":"ef1b3c71950ab13fcfc97218597794cb5635494d","modified":1649432141602},{"_id":"source/_posts/CN-3/image-20211205162300456.png","hash":"9e892eacceba60a36263bd46101f2ea6c5e66543","modified":1649432141601},{"_id":"source/_posts/CN-3/image-20211205165352723.png","hash":"6fa86d1afe6e42d0e2550a9cbba836289a0bff7f","modified":1649432141603},{"_id":"source/_posts/CN-5/image-20211211152352560.png","hash":"1853438a63a17a1589725776ff0c61c5e98cc1ca","modified":1649432448796},{"_id":"source/_posts/CN-5/image-20211211154616223.png","hash":"78616478b7a24266183f085bbbbe0885e1119292","modified":1649432448795},{"_id":"source/_posts/CN-5/image-20211211154625242.png","hash":"78616478b7a24266183f085bbbbe0885e1119292","modified":1649432448795},{"_id":"source/_posts/CN-6/image-20211207025902517.png","hash":"597743e9e973f8b0c8b3021e4a652d2a016e4e21","modified":1649432563371},{"_id":"source/_posts/CN-5/image-20211211154842458.png","hash":"95d22d0ccdd92965dfdf79ab1322aa3854cb7570","modified":1649432522345},{"_id":"source/_posts/Graph-search/image-1.png","hash":"e31a7b655c8b104176311248253c989c0c3590ee","modified":1647181947785},{"_id":"source/_posts/Graph-search/image-2.png","hash":"1ea7ffb5b9854f92cd4092aa456e1d77f28aa9fc","modified":1647181947785},{"_id":"source/_posts/Graph-search/image-3.png","hash":"3b8a85b9b1f6398874d48d71f702c4e53bf83d37","modified":1647181947786},{"_id":"source/_posts/Graph-search/v2-4a4d37df348f283649e2aecc74d959b5_720w.jpg","hash":"60d73acdd30125aa62e7afc3899271677c9c4cd7","modified":1647181947786},{"_id":"source/_posts/Graph-search/v2-9e2643ca5d96f86a391c36de4d3bd48d_720w.jpg","hash":"24061e3e3eba17d3bf0429516a68cf344e680fd4","modified":1647181947787},{"_id":"source/_posts/Hexo_article/image-20220308162506034.png","hash":"cbac8bf927ab02febc2e96125c88df7426dee64c","modified":1647181947859},{"_id":"source/_posts/Hexo_creation/image-20220308165502809.png","hash":"667770d3e29fb219208121ddc70d2ae062563ad1","modified":1647181947865},{"_id":"source/_posts/IPsec/image-20220408173945688.png","hash":"a8b416dc2a59abaa6546921a6774399a09e0564c","modified":1649410785695},{"_id":"source/_posts/IPsec/image-20220408182745880.png","hash":"e6bdcb81f702a997bb5b76563f7e0bf3a7ee0a3a","modified":1649413665888},{"_id":"source/_posts/IPsec/image-20220408182806622.png","hash":"51b06303db8b4d80b03acfc55baf149aeb0b66f8","modified":1649413686630},{"_id":"source/_posts/IPsec/image-20220408182806757.png","hash":"51b06303db8b4d80b03acfc55baf149aeb0b66f8","modified":1649413686764},{"_id":"source/_posts/IPsec/image-20220408182852006.png","hash":"6b746c16873084d748a6fbea2160300950361ba7","modified":1649413732013},{"_id":"source/_posts/IPsec/image-20220408183423694.png","hash":"4bf0e8fdff9e0cbce3f785aa7ff7d8f87ef84c0d","modified":1649414063706},{"_id":"source/_posts/IPsec/image-20220408183817734.png","hash":"25cd176a6f5907bd5f30a3ba8541f162bfde13d7","modified":1649414297747},{"_id":"source/_posts/IPsec/image-20220408182902202.png","hash":"ac93fbaab32af9510faaa6a9b5d1d1d88736ee3e","modified":1649413742210},{"_id":"source/_posts/PERT/image-20210926121305734.png","hash":"5bb37f387e4b008de13619b2bc84bb610cf73ba3","modified":1647181947865},{"_id":"source/_posts/PERT/image-20210926121452437.png","hash":"409b273ed1a5e8c0aa440379af65b4a8b8d3f5fa","modified":1647181947866},{"_id":"source/_posts/PERT/image-20210926121557824.png","hash":"a082383de3b879a035be5bc7866a932737bb2b66","modified":1647181947867},{"_id":"source/_posts/PERT/image-20210926125842698.png","hash":"f648448ff8f6bb0ceb55706597043c277d7bc9a2","modified":1647181947867},{"_id":"source/_posts/R2S_build/image-1.png","hash":"4a475083bd251f14329a16715da142571bd86747","modified":1647181947868},{"_id":"source/_posts/R2S_build/image-10.png","hash":"62f3de2b27546aff4cf6a616df3b3239e5d5d589","modified":1647181947868},{"_id":"source/_posts/R2S_build/image-7.png","hash":"b6b02dcf36560a6055756269e885694045ad33bc","modified":1647181947872},{"_id":"source/_posts/R2S_build/image-5.png","hash":"56c526c61081288b63adab3db805722adedec86f","modified":1647181947871},{"_id":"source/_posts/R2S_build/image-8.png","hash":"dedaee8c824811ffa4f3d27516e012a86636726e","modified":1647181947872},{"_id":"source/_posts/binary_tree_1/2-1Q226195949495.gif","hash":"a107e2dc9f65c7887e76755dc9a78fff17fa0dbe","modified":1647185317226},{"_id":"source/_posts/binary_tree_1/2-1Q226195I0M1.gif","hash":"2f1884245b798d3ec8f8a5cc42572a786a38ae0c","modified":1647184968429},{"_id":"source/_posts/binary_tree_1/2-1Q22R035341H.gif","hash":"1d62249b1271596c0daf868ef2ac4f6c80d93ed8","modified":1647185484182},{"_id":"source/_posts/binary_tree_1/v2-0ccba83c7b3dbf7b89964c04021025d9_720w.jpg","hash":"f56981756349a08c44d83576af3e63798c87e21f","modified":1647181947875},{"_id":"source/_posts/binary_tree_2/false example-16473330373123.png","hash":"374877f834e57be19b531ba2ba225a42b13a5291","modified":1647441759647},{"_id":"source/_posts/binary_tree_2/false example.png","hash":"374877f834e57be19b531ba2ba225a42b13a5291","modified":1647441759648},{"_id":"source/_posts/binary_tree_2/image.png","hash":"779e786c51aefa1b4c15d9945a62b452137e2024","modified":1647181947875},{"_id":"source/_posts/binary_tree_2/tree1.jpg","hash":"f358033460700da1c28e5e3d6770c82857c8ccb3","modified":1647507577522},{"_id":"source/_posts/binary_tree_2/tree2.jpg","hash":"67719c7c6ea0c867d80327220af2eee116533c7f","modified":1647441759649},{"_id":"source/_posts/binary_tree_2/true example.png","hash":"92de0a3ec197a374444f32b81c18fc3fdec0ff7b","modified":1647441759649},{"_id":"source/image/alipay.png","hash":"6be1d1ffc3264828ea0a27a4ca30520dfa448bd6","modified":1647181947877},{"_id":"source/image/qq.jpg","hash":"679ce9b7fb0f782ddfb1177689cb0ae09fbded23","modified":1647181947896},{"_id":"source/image/wechat.png","hash":"4660b50917b947a91c35f55b0281c633b9b0addd","modified":1647181947897},{"_id":"source/_posts/BM-algorithm/image-20220328005451919.png","hash":"340fe25093bbbd654129d3c2d332124998a5d265","modified":1648400091943},{"_id":"source/_posts/BM-algorithm/image-20220328173308025.png","hash":"b687f059996b90a0e7b45b58336d90c68fd7458f","modified":1648980163761},{"_id":"source/_posts/CN-1/image-20211201155917959.png","hash":"be761a097668a5191a80d5940d516f67ebe6d58c","modified":1649431832170},{"_id":"source/_posts/CN-3/image-20211205153141538.png","hash":"e314d01147c11ea864efe60050944cd8c86c896b","modified":1649432141603},{"_id":"source/_posts/CN-3/image-20211205153214433.png","hash":"d350aaa5ae00a2621f84e5149fe0207ee33d1fda","modified":1649432141603},{"_id":"source/_posts/CN-3/image-20211205153227168.png","hash":"273a262dd59bf899cb8b8484c529a6db5a36436d","modified":1649432141604},{"_id":"source/_posts/CN-3/image-20211205174403372.png","hash":"60d7bbe4df45795ec99e916eae9ac78b317dfa7f","modified":1649432141603},{"_id":"source/_posts/CN-3/image-20211205174543073.png","hash":"46fda8d1c1541a353b5e823bc3c9bcf9895e786c","modified":1649432141603},{"_id":"source/_posts/CN-5/image-20211211154556832.png","hash":"147b53ac1661c3508df951c62e4596b52a658227","modified":1649432448796},{"_id":"source/_posts/Hexo-synchronization/image-20220310172557250.png","hash":"6e29f7df5d770ebc97cc9c4061ede24d1505d82d","modified":1647181947789},{"_id":"source/_posts/Hexo_article/IMG_1479.jpg","hash":"f869ae1d27243b47840d63ffbe1bd136c7c7a503","modified":1647181947858},{"_id":"source/_posts/PERT/image-20210926121433312.png","hash":"aeb8258e4e8ae3d05ca75e03dfe93ec239da5baa","modified":1647181947866},{"_id":"source/_posts/R2S_build/image-20220305212846426.png","hash":"ea4b0543826c23f95321520feaca18a54e27c00f","modified":1647181947870},{"_id":"source/_posts/R2S_build/image-9-1024x194.png","hash":"00c8bfd48272b1b8487d34e711ac2800569c3230","modified":1647181947872},{"_id":"source/_posts/8-puzzle/R.024c89daf1b60db70d608b4b73215e76","hash":"55711d8835efb3239e2a47eb10b1d9c562084672","modified":1648980163757},{"_id":"source/_posts/8-puzzle/R.png","hash":"62a8331c6b1dc7814dc5c3d5b82a452d211d1cf5","modified":1648980163758},{"_id":"source/_posts/CN-1/image-20211201155433683.png","hash":"7f64d8c8d414f025c940e249396bfd3fb1090bdb","modified":1649431832170},{"_id":"source/_posts/CN-1/image-20211201165246959.png","hash":"6a6165a044ab22c876a5c9632b951d682b57f121","modified":1649431832171},{"_id":"source/_posts/CN-2/image-20211204114150471.png","hash":"b4f3c0a76b1ab0c87e4d3703bdcbd8dc13c8a2a8","modified":1649432065895},{"_id":"source/_posts/CN-4/image-20211206080908048-1649432396057.png","hash":"9b3fad30e12688a0f2788b3477d678e009160485","modified":1649432396061},{"_id":"source/_posts/CN-4/image-20211206080908048.png","hash":"9b3fad30e12688a0f2788b3477d678e009160485","modified":1649432251885},{"_id":"source/_posts/CN-4/image-20211206080928415-1649432396057.png","hash":"fafa9d4f4df10549c8b683624b210296450309e2","modified":1649432396061},{"_id":"source/_posts/CN-4/image-20211206080942577-1649432396057.png","hash":"54a0c9e2bbb9191f378f8e72b479e3761408187b","modified":1649432396061},{"_id":"source/_posts/CN-4/image-20211206080928415.png","hash":"fafa9d4f4df10549c8b683624b210296450309e2","modified":1649432251898},{"_id":"source/_posts/CN-4/image-20211206080942577.png","hash":"54a0c9e2bbb9191f378f8e72b479e3761408187b","modified":1649432251886},{"_id":"source/_posts/Hexo-synchronization/Screenshot 2022-03-08 161552.png","hash":"5146a45213aa0aaa7ac928f8083fcf56472628a8","modified":1647181947788},{"_id":"source/_posts/Hexo_article/image-20220308162715529.png","hash":"8e3c4674e8deea387717279e8a00923655c7ddf6","modified":1647181947860},{"_id":"source/_posts/Hexo_creation/image-20220308165404552.png","hash":"a268bc4c307433bde753548c2e00b24bc645571e","modified":1647181947864},{"_id":"source/_posts/CN-2/image-20211204114107336.png","hash":"f4d06da5ce4433eab9f0ef41e6fa9593533dae6d","modified":1649432065895},{"_id":"source/_posts/Hexo-synchronization/image-20220315180411753.png","hash":"ccce09bdfce959f4983dc0c12f0fff804ee30dd0","modified":1647441759646},{"_id":"source/_posts/R2S_build/image-2-1024x507.png","hash":"3f2c9846cdfeed98cf3b5bf94cb0a5d41de40705","modified":1647181947869},{"_id":"source/_posts/R2S_build/image-3-1024x485.png","hash":"72f68e697d9656bc5dfdf05584660bee9d89e29a","modified":1647181947871},{"_id":"source/_posts/binary_tree_1/image.png","hash":"486e325512c567f522e925b9fe9d58c24789176b","modified":1647181947874},{"_id":"source/_posts/CN-2/image-20211204114128703.png","hash":"eedec4652f9c7eaab4c4b468f8d0be48d33684ae","modified":1649432065896},{"_id":"source/_posts/CN-2/image-20211210170210391.png","hash":"59b68db970c383077f8cddcc7c29735b37472649","modified":1649432065896},{"_id":"node_modules/hexo-theme-yun/src/dist/global.d.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1647181943457},{"_id":"node_modules/hexo-theme-yun/LICENSE","hash":"fa221ceba871b104543fa698b80750fc19552fd2","modified":1647181943407},{"_id":"node_modules/hexo-theme-yun/README.md","hash":"9bdce4f5ad2d809a2b8e378b5473875947805f8c","modified":1647181943407},{"_id":"node_modules/hexo-theme-yun/_config.yml","hash":"97bff37fe523d9237f38ddb362c14b7b6b704239","modified":1647181943408},{"_id":"node_modules/hexo-theme-yun/_vendors.yml","hash":"d6ffaf12dd589c5a247c185187067594d584d778","modified":1647181943408},{"_id":"node_modules/hexo-theme-yun/package.json","hash":"df5074532913a020d2a1b5da30ae750d53c5def7","modified":1647181943430},{"_id":"node_modules/hexo-theme-yun/languages/default.yml","hash":"3866a13fe896b4c5d46541c5cab1f7e61453df19","modified":1647181943409},{"_id":"node_modules/hexo-theme-yun/languages/ja.yml","hash":"18ab694a0c64f4c0e53b570495625901e883df24","modified":1647181943409},{"_id":"node_modules/hexo-theme-yun/languages/en.yml","hash":"73d56d09af0cade0e47ee995f4110d06f831eabe","modified":1647181943409},{"_id":"node_modules/hexo-theme-yun/languages/zh-CN.yml","hash":"a38b30c9c2fc6c4231ec60ac02538dae2d4e8527","modified":1647181943409},{"_id":"node_modules/hexo-theme-yun/layout/404.pug","hash":"34b3a5259b3f5b5a6a18059bc8a535e79ea4d03e","modified":1647181943410},{"_id":"node_modules/hexo-theme-yun/layout/archive.pug","hash":"fcbd3bee3e2dc053170888d77de007ec330443be","modified":1647181943428},{"_id":"node_modules/hexo-theme-yun/layout/category.pug","hash":"fc234721ac03d519dbdf39675af5a86e0b6db2e8","modified":1647181943428},{"_id":"node_modules/hexo-theme-yun/layout/gallery.pug","hash":"9c65f5b157f4bc0b49e677ae310b7739aad85be2","modified":1647181943428},{"_id":"node_modules/hexo-theme-yun/layout/girls.pug","hash":"8fb552ed751c280cd78e87e68e7b8758d0f1360f","modified":1647181943429},{"_id":"node_modules/hexo-theme-yun/layout/index.pug","hash":"72ce130efc06d107d5244e54d62bd533abe88bff","modified":1647181943429},{"_id":"node_modules/hexo-theme-yun/layout/links.pug","hash":"bb0a3c0b69eb535b7e9b1fbd7831e182f4dbb441","modified":1647181943429},{"_id":"node_modules/hexo-theme-yun/layout/page.pug","hash":"3574c9cd0e1039f968e539ef50a586587fdb9234","modified":1647181943429},{"_id":"node_modules/hexo-theme-yun/layout/post.pug","hash":"ee5ec618062e964abbfee35cc45f647a5c9dc99d","modified":1647181943430},{"_id":"node_modules/hexo-theme-yun/layout/tag.pug","hash":"f1c2ae57b62f6a0c6fcc91a1270b5bf328ca2421","modified":1647181943430},{"_id":"node_modules/hexo-theme-yun/layout/slide.pug","hash":"08a761e1e76e205c7a8cff255844f8fa73d98c8e","modified":1647181943430},{"_id":"node_modules/hexo-theme-yun/source/yun.png","hash":"b8ae426fa5dd7579d23d189c222641d812c51c0a","modified":1647181943454},{"_id":"node_modules/hexo-theme-yun/source/yun.svg","hash":"78218ba93f0150e3613c7d0b60575ebe6131255f","modified":1647181943454},{"_id":"node_modules/hexo-theme-yun/src/.eslintrc","hash":"0be644fc1b5e74061960eeea473fc5c1a202850c","modified":1647181943455},{"_id":"node_modules/hexo-theme-yun/src/.pnpm-debug.log","hash":"ef32320da5b1ef767a75ddedaffb5ce25bade8d4","modified":1647181943455},{"_id":"node_modules/hexo-theme-yun/src/README.md","hash":"6d24573c91c965704c15f1a66f696ee566366654","modified":1647181943456},{"_id":"node_modules/hexo-theme-yun/src/global.d.ts","hash":"0477bc506e6d702c58f566520da06b93ce0dd237","modified":1647181943458},{"_id":"node_modules/hexo-theme-yun/src/package.json","hash":"7dfd3a780cead8d245442844c2c8c763709be6c7","modified":1647181943458},{"_id":"node_modules/hexo-theme-yun/src/tsconfig.json","hash":"be54132469f2600bbc0dbf1a862a1bd751a8f145","modified":1647181943463},{"_id":"node_modules/hexo-theme-yun/src/tsup.config.ts","hash":"13022bfd0c0789181c2b3a859ddbd957966a25df","modified":1647181943463},{"_id":"node_modules/hexo-theme-yun/layout/_mixin/icon.pug","hash":"18ee2c33b4e6ef71c31d7955f9a20789fe6aa9e4","modified":1647181943410},{"_id":"node_modules/hexo-theme-yun/layout/_mixin/index.pug","hash":"e9e30a87904a73f16b26cb697e164d586e170c6f","modified":1647181943410},{"_id":"node_modules/hexo-theme-yun/layout/_mixin/page-header.pug","hash":"56771304fc062882fcb83b3a57036cb12a6d2dab","modified":1647181943411},{"_id":"node_modules/hexo-theme-yun/layout/_mixin/post-categories.pug","hash":"ee645a5c54c279e2346b7ba9f629efab61314026","modified":1647181943411},{"_id":"node_modules/hexo-theme-yun/layout/_mixin/post-collapse.pug","hash":"741195a5a29ecb5863b1fd0c3b203d960aae05c1","modified":1647181943411},{"_id":"node_modules/hexo-theme-yun/layout/_mixin/post-meta.pug","hash":"31b90b74399074814475fdbae2a4666891d452e0","modified":1647181943411},{"_id":"node_modules/hexo-theme-yun/layout/_mixin/post-tags.pug","hash":"10eec5c3dad74e73a2ee9c05434e4757c080fcb5","modified":1647181943411},{"_id":"node_modules/hexo-theme-yun/layout/_partial/background.pug","hash":"a5f5b72932df0b0a78d2732a3b45f5f69ab481fd","modified":1647181943412},{"_id":"node_modules/hexo-theme-yun/layout/_partial/banner.pug","hash":"ef194187e0c6e3cf56cbbde53d5bec552c02f030","modified":1647181943412},{"_id":"node_modules/hexo-theme-yun/layout/_partial/extended.pug","hash":"ea46f99febbfc7688b0f7435e3075397a5029859","modified":1647181943412},{"_id":"node_modules/hexo-theme-yun/layout/_partial/footer.pug","hash":"288d232e66c97dfbf870cb3bd4ffc2c81e387bdc","modified":1647181943412},{"_id":"node_modules/hexo-theme-yun/layout/_partial/head.pug","hash":"911d9bf064ba1e9e646fb1d382eae5b30a067115","modified":1647181943413},{"_id":"node_modules/hexo-theme-yun/layout/_partial/layout.pug","hash":"4504bfc22d4003dee177af6b5b1487c2a7c1361e","modified":1647181943413},{"_id":"node_modules/hexo-theme-yun/layout/_partial/pagination.pug","hash":"b55b6a99b105447b4a6c982fa258680a2a9a34a9","modified":1647181943413},{"_id":"node_modules/hexo-theme-yun/layout/_partial/recent-posts.pug","hash":"739ef2710f542ca5584286f28e4b69c343b7d2c4","modified":1647181943415},{"_id":"node_modules/hexo-theme-yun/layout/_partial/sidebar.pug","hash":"b15fa6fc27091b6bd1cf68368879d8d2f5428f55","modified":1647181943416},{"_id":"node_modules/hexo-theme-yun/layout/_third-party/cdn.pug","hash":"2cb0400295a5a357fb15a5c12ab3caa544c5a71e","modified":1647181943418},{"_id":"node_modules/hexo-theme-yun/layout/_third-party/aplayer.pug","hash":"93d2be35ae9731056563d3cbdbf7b13b1933c80c","modified":1647181943418},{"_id":"node_modules/hexo-theme-yun/layout/_third-party/google-tagmanager.pug","hash":"4760e37fb37a41ef1417a427c0168c5fc5dd2ee6","modified":1647181943422},{"_id":"node_modules/hexo-theme-yun/layout/_third-party/iconify.pug","hash":"dadf506575d9b62804fbebceea31c9750e8cb06d","modified":1647181943422},{"_id":"node_modules/hexo-theme-yun/layout/_third-party/index.pug","hash":"f6275c094349839c5af019e8a7f3f394ba0339bd","modified":1647181943423},{"_id":"node_modules/hexo-theme-yun/layout/_third-party/lightgallery.pug","hash":"1fea69cf601db4223a3b176bbf0f9523a6c6a4c4","modified":1647181943423},{"_id":"node_modules/hexo-theme-yun/layout/_third-party/pjax.pug","hash":"bb1801ccef4dc1a37dffdac4726350fc9cd48d67","modified":1647181943424},{"_id":"node_modules/hexo-theme-yun/layout/_widget/aplayer.pug","hash":"75e6886a70ffc8a26018b70933671e5d599cc8e3","modified":1647181943425},{"_id":"node_modules/hexo-theme-yun/layout/_widget/back-to-top.pug","hash":"4c880afb3213395fb64e8a6a4fc3b653bb82b938","modified":1647181943425},{"_id":"node_modules/hexo-theme-yun/layout/_widget/cloud.pug","hash":"eb3185db30fef0303b667e50b96a7d85edda8006","modified":1647181943426},{"_id":"node_modules/hexo-theme-yun/layout/_widget/index.pug","hash":"6a286ec87146e6796440583c6d9c6549ede03bc0","modified":1647181943426},{"_id":"node_modules/hexo-theme-yun/layout/_widget/mourn.pug","hash":"03e8bfa95ab5b6d348ac9dd3b613b07e3919ac78","modified":1647181943426},{"_id":"node_modules/hexo-theme-yun/layout/_widget/notice.pug","hash":"346ada39ba6586cb631ac5b1f129683f3ee015f4","modified":1647181943426},{"_id":"node_modules/hexo-theme-yun/layout/_widget/say.pug","hash":"59da54e31aa4e6d4a93d9a0b9292fb632f5112ee","modified":1647181943427},{"_id":"node_modules/hexo-theme-yun/scripts/events/config.js","hash":"0233ac9e17f5173b3ee89d784d711d2857d34086","modified":1647181943431},{"_id":"node_modules/hexo-theme-yun/scripts/events/data.js","hash":"aa4480dcc89643c83a53002817b85ad7f4c6ac04","modified":1647181943432},{"_id":"node_modules/hexo-theme-yun/scripts/events/index.js","hash":"6d842742da0927ae659eaed41510518406295300","modified":1647181943432},{"_id":"node_modules/hexo-theme-yun/scripts/events/utils.js","hash":"cc00e1d556242ff5f1947a1bd772ec9366dcb921","modified":1647181943432},{"_id":"node_modules/hexo-theme-yun/scripts/filters/index.js","hash":"ca5ef23cec64ac3fc53aae702a8684a53d98f71c","modified":1647181943432},{"_id":"node_modules/hexo-theme-yun/scripts/helpers/encrypt.js","hash":"e3e0cd73a5bf0413a9e8fe96b1622f40c2c1db50","modified":1647181943433},{"_id":"node_modules/hexo-theme-yun/scripts/helpers/engine.js","hash":"9b41629b73dc5bbc18772b292a029531bfd2beca","modified":1647181943433},{"_id":"node_modules/hexo-theme-yun/scripts/helpers/index.js","hash":"1b0d52542255837702cdc41d3885c349c5be5873","modified":1647181943433},{"_id":"node_modules/hexo-theme-yun/scripts/helpers/yun-config.js","hash":"84922c25c87de0b5da5b7b105f825fdfba6b6cd7","modified":1647181943434},{"_id":"node_modules/hexo-theme-yun/scripts/tags/prompt.js","hash":"621d0fa41d15e5617b8a25dd7625c8e5691b35b6","modified":1647181943434},{"_id":"node_modules/hexo-theme-yun/source/css/README.md","hash":"1aa055a1404df2310e675383528d0409821073ba","modified":1647181943434},{"_id":"node_modules/hexo-theme-yun/source/css/hexo-theme-yun.styl","hash":"92a120f2bf01c53f2e3e1c7a7a12455bfc90c446","modified":1647181943449},{"_id":"node_modules/hexo-theme-yun/source/js/chunk-TTX6TVTO.js","hash":"1fa6dd4208272ac21ece94e825a41dee4d2941f8","modified":1647181943450},{"_id":"node_modules/hexo-theme-yun/source/js/chunk-YZ7E3ATC.js","hash":"b1f695dc7e85a7c168eaed5d67b736664051f695","modified":1647181943450},{"_id":"node_modules/hexo-theme-yun/source/js/gallery-decrypt.js","hash":"a6c6661ff169a4651f09d2d55769f6e525b5bc4e","modified":1647181943451},{"_id":"node_modules/hexo-theme-yun/source/js/pjax.js","hash":"b71d40474f71070e67110002308e7e8ec9ca358e","modified":1647181943452},{"_id":"node_modules/hexo-theme-yun/source/js/hexo-theme-yun.js","hash":"a0ee3f2b44679b4dfef9748888cedcba1f84c55b","modified":1647181943451},{"_id":"node_modules/hexo-theme-yun/source/js/say.js","hash":"08e0fde224b70bc7f2af46ae2e446e22cf8c0ad4","modified":1647181943452},{"_id":"node_modules/hexo-theme-yun/source/js/sidebar.js","hash":"f397553493d8f35ce213de88e8dc6eabce2fab36","modified":1647181943453},{"_id":"node_modules/hexo-theme-yun/source/js/utils.js","hash":"019c533f9f72aef21d9412fd4045d1bce91f9d5e","modified":1647181943454},{"_id":"node_modules/hexo-theme-yun/src/.vscode/settings.json","hash":"64047d34f729a9dc1ab3d9c44169ba58d938e420","modified":1647181943455},{"_id":"node_modules/hexo-theme-yun/src/dist/chunk-HJP66R6O.js","hash":"de391ed652409b2f8542c1c437198b0fe65b1904","modified":1647181943456},{"_id":"node_modules/hexo-theme-yun/src/dist/hexo-theme-yun.js","hash":"4c6c05b42dc4bae0362b7b7db4b9f60a8ca638f0","modified":1647181943457},{"_id":"node_modules/hexo-theme-yun/src/dist/pjax.js","hash":"2aa8e3d383122e26185938f9f2ba45052c1c31cf","modified":1647181943457},{"_id":"node_modules/hexo-theme-yun/src/dist/utils.js","hash":"d7dfdd3663f658cdb2f6924383bf3775af04161d","modified":1647181943457},{"_id":"node_modules/hexo-theme-yun/src/source/gallery-decrypt.ts","hash":"994bcaf82aa4cf9e4145de92f4a8694d9c08b5cc","modified":1647181943459},{"_id":"node_modules/hexo-theme-yun/src/source/hexo-theme-yun.ts","hash":"5768ec90cc1acf9076cbb00fb0d93f2749fd74e0","modified":1647181943460},{"_id":"node_modules/hexo-theme-yun/src/source/pjax.ts","hash":"7e010393f0a6d2e9dd8d8e71b9369106d949bf82","modified":1647181943460},{"_id":"node_modules/hexo-theme-yun/src/source/say.ts","hash":"d5e892204649df8248448d71f03599b6eb74e1fe","modified":1647181943460},{"_id":"node_modules/hexo-theme-yun/src/source/sidebar.ts","hash":"f4c12d7b64031c24f0b59c478c5e856c0c624b27","modified":1647181943462},{"_id":"node_modules/hexo-theme-yun/src/source/utils.ts","hash":"84f06ddeff826ca9e404d4aa524dadec4894a27e","modified":1647181943462},{"_id":"node_modules/hexo-theme-yun/layout/_partial/post/post-content.pug","hash":"b840c3f544a38c931736163ddecb38f4b150bfa7","modified":1647181943414},{"_id":"node_modules/hexo-theme-yun/layout/_partial/post/post-copyright.pug","hash":"a2415fb36a0dffbe57bf32cd2cfeace11cbaed6b","modified":1647181943414},{"_id":"node_modules/hexo-theme-yun/layout/_partial/post/post-schema.pug","hash":"ec85079174da20c9f608b142e7fda2c28a9b1dac","modified":1647181943415},{"_id":"node_modules/hexo-theme-yun/layout/_partial/post/post-edit.pug","hash":"2b7d4c210815ddc63c5b6fc5b5fd6a348e75093f","modified":1647181943414},{"_id":"node_modules/hexo-theme-yun/layout/_partial/post/post-nav.pug","hash":"ea351236ab82ff43b66272de1baade70d868131f","modified":1647181943415},{"_id":"node_modules/hexo-theme-yun/layout/_partial/post/reward.pug","hash":"ceccfe15e3be500274fda527a6d6234ffddf93b8","modified":1647181943415},{"_id":"node_modules/hexo-theme-yun/layout/_partial/sidebar/info.pug","hash":"db26c881a5d8c8e2d96c2e5598e9c3c40d135cdf","modified":1647181943416},{"_id":"node_modules/hexo-theme-yun/layout/_third-party/adsense/google-adsense.pug","hash":"ae63305d776ebec0d88f91197b5c78cdaa401585","modified":1647181943417},{"_id":"node_modules/hexo-theme-yun/layout/_third-party/analytics/busuanzi.pug","hash":"a2503ff7bbaf05e9205fd36177f803cf91021e05","modified":1647181943417},{"_id":"node_modules/hexo-theme-yun/layout/_third-party/analytics/google-analytics.pug","hash":"3533cdc143c0b9b4304e375e0a1d2527050d989a","modified":1647181943417},{"_id":"node_modules/hexo-theme-yun/layout/_third-party/analytics/leancloud-visitors.pug","hash":"40a781cd84069802cae2c487efafc8908f414851","modified":1647181943418},{"_id":"node_modules/hexo-theme-yun/layout/_third-party/comments/disqus.pug","hash":"80ea8bd1fecfc7317a9e5599c9ab9e69c4b4a6b0","modified":1647181943419},{"_id":"node_modules/hexo-theme-yun/layout/_third-party/comments/disqusjs.pug","hash":"67f82c85cf0451c4b7e1e8cf985a1e9a92df0ab6","modified":1647181943419},{"_id":"node_modules/hexo-theme-yun/layout/_third-party/comments/giscus.pug","hash":"392429ffdd1cdfda24ede464f8eaf033966ccdde","modified":1647181943419},{"_id":"node_modules/hexo-theme-yun/layout/_third-party/comments/github-discussions.pug","hash":"1b559cbb7bcd1d423eab9d9a2ffdb8b7ebbbcea4","modified":1647181943420},{"_id":"node_modules/hexo-theme-yun/layout/_third-party/comments/github-issues.pug","hash":"11801bd330160555dbaf3ef13955ebd61010c7d6","modified":1647181943420},{"_id":"node_modules/hexo-theme-yun/layout/_third-party/comments/index.pug","hash":"1b0a60862071043fe991f320508f949379ec29d3","modified":1647181943420},{"_id":"node_modules/hexo-theme-yun/layout/_third-party/comments/livere.pug","hash":"f565efde0ee74d69555e8b5c959c96e0f1ae61fb","modified":1647181943420},{"_id":"node_modules/hexo-theme-yun/layout/_third-party/comments/twikoo.pug","hash":"e892045f20dde4528c34b01a8b6aee1c17c9323f","modified":1647181943421},{"_id":"node_modules/hexo-theme-yun/layout/_third-party/comments/minivaline.pug","hash":"0548263c9f0460916aaeaf77928d27612c1a2897","modified":1647181943421},{"_id":"node_modules/hexo-theme-yun/layout/_third-party/comments/utterances.pug","hash":"44adb592fa4995ff586b6b4ff16232323473992a","modified":1647181943421},{"_id":"node_modules/hexo-theme-yun/layout/_third-party/comments/valine.pug","hash":"98901bdb9de7318a06a7b293a8dcc4e5b22d0992","modified":1647181943421},{"_id":"node_modules/hexo-theme-yun/layout/_third-party/comments/waline.pug","hash":"569a8a39e77bd7e12cf43c248a260dac7d511b3e","modified":1647181943422},{"_id":"node_modules/hexo-theme-yun/layout/_third-party/math/index.pug","hash":"0365a84a14325a52ee574df3f633f96c7a47d78f","modified":1647181943423},{"_id":"node_modules/hexo-theme-yun/layout/_third-party/math/katex.pug","hash":"94ca4fffb5ca7fda7c3e243ff8597a19d0583372","modified":1647181943423},{"_id":"node_modules/hexo-theme-yun/layout/_third-party/mermaid/index.pug","hash":"cc0641ac4ab4ceb8a68cf8740b39e0e3d00fd260","modified":1647181943424},{"_id":"node_modules/hexo-theme-yun/layout/_third-party/mermaid/mermaid.pug","hash":"59af49a1ac78574a858c7e4783c560ac00cf2351","modified":1647181943424},{"_id":"node_modules/hexo-theme-yun/layout/_third-party/seo/baidu-push.pug","hash":"5b08e856a6c75a9b4a5aafccf52b1b418dac0e38","modified":1647181943425},{"_id":"node_modules/hexo-theme-yun/layout/_widget/search/algolia-search.pug","hash":"247630340c95ebc0cff4f274dba8684154391037","modified":1647181943427},{"_id":"node_modules/hexo-theme-yun/layout/_widget/search/index.pug","hash":"a1dd964e05b5412c3fc446d80576e51b37926b87","modified":1647181943427},{"_id":"node_modules/hexo-theme-yun/layout/_widget/search/local-search.pug","hash":"79ac9e74e4c725c127457061938bea86cbae41db","modified":1647181943427},{"_id":"node_modules/hexo-theme-yun/source/css/_components/button.styl","hash":"3315fc12b1b7659a06120b042a1a2e87a839ebe1","modified":1647181943435},{"_id":"node_modules/hexo-theme-yun/source/css/_components/card.styl","hash":"6d16aae8534f32a8ce439e648e347c98c1e58af3","modified":1647181943435},{"_id":"node_modules/hexo-theme-yun/source/css/_components/scrollbar.styl","hash":"3e332ae27d3aeab1496079cd509649ceccc0f4b5","modified":1647181943437},{"_id":"node_modules/hexo-theme-yun/source/css/_components/ui.styl","hash":"8ef28ee3363f3676c9327a6d163032a003520f40","modified":1647181943439},{"_id":"node_modules/hexo-theme-yun/source/css/_extend/albums.styl","hash":"b0f703fc6e279844b75797edf714cce2135704ed","modified":1647181943440},{"_id":"node_modules/hexo-theme-yun/source/css/_extend/girls.styl","hash":"393166ea98ef4bee611dcf00f5e8e22df60b2af0","modified":1647181943440},{"_id":"node_modules/hexo-theme-yun/source/css/_global/dark.styl","hash":"4cc28dcc37af6cd85439728a8f65e4a87dfa1f8b","modified":1647181943441},{"_id":"node_modules/hexo-theme-yun/source/css/_global/index.styl","hash":"6ee9d2bd59706e79e8932bcfc09d86c124467452","modified":1647181943441},{"_id":"node_modules/hexo-theme-yun/source/css/_global/reset.styl","hash":"d1640eb4f76a3cf792c5149e93c42c85da5a29b2","modified":1647181943442},{"_id":"node_modules/hexo-theme-yun/source/css/_helper/index.styl","hash":"deb685278c7d3b1bd2180337cb8b868f8ff97ac5","modified":1647181943442},{"_id":"node_modules/hexo-theme-yun/source/css/_layout/banner.styl","hash":"efd219425cb30d18368c5aca701c656fe3a0d458","modified":1647181943443},{"_id":"node_modules/hexo-theme-yun/source/css/_layout/footer.styl","hash":"ed3afcddad7358ebd89f01846157e26a586e7adf","modified":1647181943443},{"_id":"node_modules/hexo-theme-yun/source/css/_layout/links.styl","hash":"9c060919f57a9928331aec8c7bfaae56a6fa8401","modified":1647181943443},{"_id":"node_modules/hexo-theme-yun/source/css/_layout/main.styl","hash":"03669973c1cbb5c93fdba4c011666b921f0587e3","modified":1647181943444},{"_id":"node_modules/hexo-theme-yun/source/css/_layout/page.styl","hash":"6ec814a0fccf73a22ba6b94f6d4bba889cbaf0b5","modified":1647181943444},{"_id":"node_modules/hexo-theme-yun/source/css/_layout/pagination.styl","hash":"a4da4433f5c11b4de36782b7dac059bf67dde938","modified":1647181943444},{"_id":"node_modules/hexo-theme-yun/source/css/_layout/post.styl","hash":"2d495981c7456095ae62f97e9c032e1f3fb03cda","modified":1647181943445},{"_id":"node_modules/hexo-theme-yun/source/css/_mixins/base.styl","hash":"2531c22a33aa929dd6bf6c1b9975efc0a70e4a8d","modified":1647181943445},{"_id":"node_modules/hexo-theme-yun/source/css/_variables/_base.styl","hash":"0288e3196318b116f991b043486fbc0b4b0bc579","modified":1647181943445},{"_id":"node_modules/hexo-theme-yun/source/css/_variables/_code.styl","hash":"63d012b501ec13cfbf374defd663fee3abf0b565","modified":1647181943446},{"_id":"node_modules/hexo-theme-yun/source/css/_variables/_colors.styl","hash":"5842436c6b74763866a1bc38d1c7cfed715e9e22","modified":1647181943446},{"_id":"node_modules/hexo-theme-yun/source/css/_variables/var.styl","hash":"c22b204db73404f7904f74c2b416c5623b4a0144","modified":1647181943446},{"_id":"node_modules/hexo-theme-yun/source/css/_widget/back-to-top.styl","hash":"d86e0c0c6af9fcb293c1fcef20f4ed68272ccc71","modified":1647181943447},{"_id":"node_modules/hexo-theme-yun/source/css/_widget/comment.styl","hash":"02e90ba274312eec5f0eeb3e651750c178d03988","modified":1647181943447},{"_id":"node_modules/hexo-theme-yun/source/css/_widget/index.styl","hash":"640fea56a013989f5878334d09f3f9b716865c8c","modified":1647181943447},{"_id":"node_modules/hexo-theme-yun/source/css/_widget/notice.styl","hash":"8b1ca54535311f38b91433e5beadbeed02ecd28b","modified":1647181943447},{"_id":"node_modules/hexo-theme-yun/source/css/_widget/say.styl","hash":"01dac9059f96fb085edf230e63f3f5e351358fde","modified":1647181943448},{"_id":"node_modules/hexo-theme-yun/source/js/analytics/leancloud-visitors.js","hash":"b47a3b4432e0c34362f162a17f9a9494fa08e85e","modified":1647181943450},{"_id":"node_modules/hexo-theme-yun/source/js/comments/disqus.js","hash":"b3bd520a06de628bd844f811fc1bd07970db786e","modified":1647181943451},{"_id":"node_modules/hexo-theme-yun/source/js/comments/waline.js","hash":"e3487719adbc045be6c85c24a0b3522f688dcb65","modified":1647181943451},{"_id":"node_modules/hexo-theme-yun/source/js/search/algolia-search.js","hash":"0cb0730a3d178eb39d6418280e03ce459116190b","modified":1647181943452},{"_id":"node_modules/hexo-theme-yun/source/js/search/local-search.js","hash":"8fdeaa352a0f079e822d8adfa720a89f45ad60f6","modified":1647181943453},{"_id":"node_modules/hexo-theme-yun/source/js/ui/banner.js","hash":"2ae3473300d16f50d4ea72f6d1d638006e361074","modified":1647181943453},{"_id":"node_modules/hexo-theme-yun/source/js/ui/fireworks.js","hash":"517c20d1dc6d52aafc48148410c3bcf0557c24cd","modified":1647181943454},{"_id":"node_modules/hexo-theme-yun/src/source/analytics/leancloud-visitors.ts","hash":"27bfa0f7a3cd5b3c9cc308365b917a2d90e0e3b5","modified":1647181943458},{"_id":"node_modules/hexo-theme-yun/src/source/comments/disqus.ts","hash":"7d1ee111cbde2b94472e23f620fa845f3607adab","modified":1647181943459},{"_id":"node_modules/hexo-theme-yun/src/source/comments/waline.ts","hash":"f3d1b9c9eb95b169bb778c2bb45dc4d93623041d","modified":1647181943459},{"_id":"node_modules/hexo-theme-yun/src/source/search/algolia-search.ts","hash":"a63762d43c60a4d313bf87e65a6d2f1327c89303","modified":1647181943461},{"_id":"node_modules/hexo-theme-yun/src/source/search/local-search.ts","hash":"3e137cc24da00630ef2fbfe44e56656948c930b7","modified":1647181943461},{"_id":"node_modules/hexo-theme-yun/src/source/ui/banner.ts","hash":"2fa7b78769dd9ab2d693ec433856b8c5ba8f7b74","modified":1647181943462},{"_id":"node_modules/hexo-theme-yun/source/css/_components/post/post-card.styl","hash":"e771203f820dc170f749b89115455a929cea51a5","modified":1647181943436},{"_id":"node_modules/hexo-theme-yun/src/source/ui/fireworks.ts","hash":"14d005d02ea47f6c4dcf12701c9fc201cef9e867","modified":1647181943462},{"_id":"node_modules/hexo-theme-yun/source/css/_components/post/post-codebloack.styl","hash":"ca312b2acfee5f8019e39937500a7ed17762f72a","modified":1647181943436},{"_id":"node_modules/hexo-theme-yun/source/css/_components/post/post-collapse.styl","hash":"6741c225a37e7e121d4159f129b7024402a8eeec","modified":1647181943436},{"_id":"node_modules/hexo-theme-yun/source/css/_components/post/post-header.styl","hash":"3be5d23cda0020365dbfb39ca35eb00aef65e7cd","modified":1647181943436},{"_id":"node_modules/hexo-theme-yun/source/css/_components/post/post-markdown.styl","hash":"aa95737537b8c178010c99b3301af6f86f097904","modified":1647181943437},{"_id":"node_modules/hexo-theme-yun/source/css/_components/post/post-nav.styl","hash":"cec22a5a36eda86b1ee8038e1fa24d9a6c9a0f7f","modified":1647181943437},{"_id":"node_modules/hexo-theme-yun/source/css/_components/post/post-reward.styl","hash":"f69f5770e0908a8e8a0931f67e2417b0e1692613","modified":1647181943437},{"_id":"node_modules/hexo-theme-yun/source/css/_components/sidebar/hamburger.styl","hash":"0fa240e8a71fdad14d3fd6b3fd49cf697d4c8153","modified":1647181943438},{"_id":"node_modules/hexo-theme-yun/source/css/_components/sidebar/sidebar-nav.styl","hash":"a8c2eb2d01a02855ff074e2765c5275f839c7315","modified":1647181943438},{"_id":"node_modules/hexo-theme-yun/source/css/_components/sidebar/sidebar-toc.styl","hash":"fe429fb5aa85739c23a052737aba12418149b182","modified":1647181943439},{"_id":"node_modules/hexo-theme-yun/source/css/_components/sidebar/site-overview.styl","hash":"1a34782575569c8fec4489716a3dae13a88c8170","modified":1647181943439},{"_id":"node_modules/hexo-theme-yun/source/css/_components/sidebar/sidebar.styl","hash":"c1266c1039f6ac26884f4619265b29bdb1a9e31c","modified":1647181943439},{"_id":"node_modules/hexo-theme-yun/source/css/_extend/tags/index.styl","hash":"84112e467510c4d78dc8d9e6cbe1a5012e4d20d8","modified":1647181943440},{"_id":"node_modules/hexo-theme-yun/source/css/_extend/tags/prompt.styl","hash":"4294c5e7f3aef84d369a8ac71f8340e39a681c59","modified":1647181943441},{"_id":"node_modules/hexo-theme-yun/source/css/_widget/search/algolia-search.styl","hash":"d008422dfd104304f50e472a431afa16cad0e15a","modified":1647181943448},{"_id":"node_modules/hexo-theme-yun/source/css/_widget/search/index.styl","hash":"7f03d791c7bc384672e11960af79676ba8b3cb68","modified":1647181943448},{"_id":"node_modules/hexo-theme-yun/source/css/_widget/search/local-search.styl","hash":"06468fd1f85390134d4cf034dc5abcc114018257","modified":1647181943449},{"_id":"source/_posts/Hexo_article/traffic-light.gif","hash":"0c18d7a2a137b37b0af5b1c647aa12a3393dec64","modified":1647181947863},{"_id":"source/_posts/8-puzzle/35482241-1605ae76-046d-11e8-87e5-3d8a0cfa8628.gif","hash":"29e4db82f53e9c0a37101f66056be209d03094a3","modified":1648980163756},{"_id":"source/_posts/Hexo_article/2d6f869662e83398f06070e2a14f838.jpg","hash":"e891f3a3b28cbefa79db0d9fd17939f3df865836","modified":1647181947800},{"_id":"source/image/head.jpg","hash":"91d9c38a4f5864f68119064c8e61227e6b7719aa","modified":1647181947895},{"_id":"source/_posts/Hexo_article/884019afce82603bd8bc8fd4e531839.jpg","hash":"464c9842be81f3cc1cb18df887b8f497216e1d80","modified":1647181947857},{"_id":"public/search.xml","hash":"08471d03689bc5ab18bf4f476c18ef4f3716530d","modified":1649488848194},{"_id":"public/about/index.html","hash":"5954143352e89580320bc320a0b10cc949e1f152","modified":1649488848194},{"_id":"public/categories/index.html","hash":"1ccd647d586f6a2743c9d893ec1671e9581ac3b2","modified":1649488848194},{"_id":"public/tags/index.html","hash":"ef4bcf6710ea54f683fdd5d92d4fce291c664ac6","modified":1649488848194},{"_id":"public/archives/index.html","hash":"254f5d588e951c43c3f919cea346e332001a08e9","modified":1649488848194},{"_id":"public/archives/page/2/index.html","hash":"4555d00171eebb2a6c317bb4cd61eb49fd6e5549","modified":1649488848194},{"_id":"public/archives/2022/index.html","hash":"eeae81aabe8508aa6c724a05647d26cbed829b1a","modified":1649488848194},{"_id":"public/archives/2022/page/2/index.html","hash":"5b3ead8faaa54ade2c4ccb712b90d828fafa9eb2","modified":1649488848194},{"_id":"public/archives/2022/02/index.html","hash":"adf45fe855bc0bfdcc9d044630bb54a4c67d6b2c","modified":1649488848194},{"_id":"public/archives/2022/03/index.html","hash":"817f7dbaf269705856b02e5b58c53c336db76343","modified":1649488848194},{"_id":"public/archives/2022/04/index.html","hash":"2be81b0522851982a78343a19577ee8dd61e37c2","modified":1649488848194},{"_id":"public/categories/algorithm/index.html","hash":"2b12a4233aced367faab645076468363b94469a8","modified":1649488848194},{"_id":"public/categories/计算机网络/index.html","hash":"b469cefd0700e73777c8e60683eb3d6eac190462","modified":1649488848194},{"_id":"public/categories/Hexo搭建/index.html","hash":"a2a65f36ce3819c480abf8353f4c5d50361bd9b3","modified":1649488848194},{"_id":"public/tags/algorithm/index.html","hash":"bee6ff0d07ed75b762575baf2449a986e104cc8c","modified":1649488848194},{"_id":"public/tags/BFS/index.html","hash":"a1011d8e06d520e9662d8feae61857e0489f0f41","modified":1649488848194},{"_id":"public/tags/DFS/index.html","hash":"489706ec413bf8113c6aa2054890784e29746585","modified":1649488848194},{"_id":"public/tags/BM/index.html","hash":"e8b54fd8ead30cf4ad049306f5f80e2c12fba8e7","modified":1649488848194},{"_id":"public/tags/search/index.html","hash":"6d28036b60812d9d87e90bf1e01f8bd58b4eded4","modified":1649488848194},{"_id":"public/tags/背包问题/index.html","hash":"b975719db6f38adf29aae49aaecafdd30fec13da","modified":1649488848194},{"_id":"public/tags/DP/index.html","hash":"439ba18c2c6f3f915709e2ad7bfbafb63925bcb7","modified":1649488848194},{"_id":"public/tags/computer-network/index.html","hash":"f9ad43aebded291e0eb741b20880d8c7e0c2510e","modified":1649488848194},{"_id":"public/tags/Graph/index.html","hash":"f345599c464860b5eb8bb015792371e6ef4bd424","modified":1649488848194},{"_id":"public/tags/Hexo/index.html","hash":"3520f3c13a0500c66c4402d27b7e3a252ff83ffb","modified":1649488848194},{"_id":"public/tags/PERT/index.html","hash":"a77903eb8d690522376e385f090649f91dcde927","modified":1649488848194},{"_id":"public/tags/R2S/index.html","hash":"fa8e114ab78eeced3983d1b5fc12bbfa0778bbd8","modified":1649488848194},{"_id":"public/tags/Computer-Network/index.html","hash":"81c6b552c213ef0ed1941319c7b33f74f92fe570","modified":1649488848194},{"_id":"public/tags/软路由/index.html","hash":"e395b27b4c4524dd9908f517119fe5dfdf9a65c1","modified":1649488848194},{"_id":"public/tags/科学上网/index.html","hash":"0cb73319ddff8d982701c98d5cc3034d9878284a","modified":1649488848194},{"_id":"public/tags/VPN/index.html","hash":"596ecc2585a66b83cfc65b05382deb98306ec2fe","modified":1649488848194},{"_id":"public/tags/IPsec/index.html","hash":"c552904cc95071b2892bd3786b8da2235c0c6671","modified":1649488848194},{"_id":"public/tags/Binary-tree/index.html","hash":"c8fa046e6eb10e787aa57a5b11f3846a7cbd2b63","modified":1649488848194},{"_id":"public/2022/04/08/CN-6/index.html","hash":"54825411c520e4b15e563fefa985aed7b4e4b923","modified":1649488848194},{"_id":"public/2022/04/08/CN-5/index.html","hash":"a8c40746647a15814c6078d9d0a3ae822915d72c","modified":1649488848194},{"_id":"public/2022/04/08/CN-4/index.html","hash":"8b89754c929300e8b4e353b95eaae67eb871e3cb","modified":1649488848194},{"_id":"public/2022/04/08/CN-3/index.html","hash":"5d7fd0d4f48a53e27e54679a257f8384f86190de","modified":1649488848194},{"_id":"public/2022/04/08/CN-1/index.html","hash":"f57c71132df796cba01897919a8c0031c96ad382","modified":1649488848194},{"_id":"public/2022/04/08/CN-2/index.html","hash":"ea66a4200a5a5113a75762cda6855841fb9af55c","modified":1649488848194},{"_id":"public/2022/04/08/IPsec/index.html","hash":"8f006dce53d85e1514a0b9f3bf740774871b78bf","modified":1649488848194},{"_id":"public/2022/04/01/8-puzzle/index.html","hash":"5c57814db42ebf1bfd924952f2a0ccff168763f0","modified":1649488848194},{"_id":"public/2022/03/27/BM-algorithm/index.html","hash":"3d59c66b0f218a4ab084738e7a63f8a4def1cb9d","modified":1649488848194},{"_id":"public/2022/03/13/PERT/index.html","hash":"be11204a5e6e62291fa94462497d7fbe6242ddda","modified":1649488848194},{"_id":"public/2022/03/10/Backpack/index.html","hash":"4f52c0a9c1e394c6817fc4ec63ea2d8ffe17f66d","modified":1649488848194},{"_id":"public/2022/03/10/BFS/index.html","hash":"0caff90afc22d8a24281db0729dc41192b9bcf9d","modified":1649488848194},{"_id":"public/2022/03/10/DFS/index.html","hash":"a6438da1e66cc9f7f3a27203ae70de106e8b087e","modified":1649488848194},{"_id":"public/2022/03/09/Graph-search/index.html","hash":"83954fe4e87552a5abbf1fcd444bbb2834ec27e8","modified":1649488848194},{"_id":"public/2022/03/08/Hexo-synchronization/index.html","hash":"981e83ff774d7e04a3a3a4d8d0e7cb35898a63e4","modified":1649488848194},{"_id":"public/2022/02/26/R2S_build/index.html","hash":"28fef834333c80b8004050ea90551b0ca12e5958","modified":1649488848194},{"_id":"public/2022/02/25/binary_tree_1/index.html","hash":"48306b784784c96cc03d906bde92316f6c2813ca","modified":1649488848194},{"_id":"public/2022/02/24/binary_tree_2/index.html","hash":"6cc59d98450aba107cda5dc1ac0346474a8542c6","modified":1649488848194},{"_id":"public/2022/02/24/Hexo_creation/index.html","hash":"d34ee78b1cf469838f112e83892f06d3fe9fb906","modified":1649488848194},{"_id":"public/2022/02/20/Hexo_article/index.html","hash":"5d277a5d9394db4119014f16569d55dc460dd977","modified":1649488848194},{"_id":"public/index.html","hash":"362e2b31d080f6c8d975bd9829b3a0a3198be666","modified":1649488848194},{"_id":"public/page/2/index.html","hash":"8a8775d47ed1c83ab0da9f0ec6fb6b4a9996a743","modified":1649488848194},{"_id":"public/CNAME","hash":"5e2329bc423a886fdd08288eadb59845c3da790f","modified":1649488848194},{"_id":"public/yun.png","hash":"b8ae426fa5dd7579d23d189c222641d812c51c0a","modified":1649488848194},{"_id":"public/image/avatar.jpg","hash":"371df290b2fe0600ba933d48751ac8f2cadc0a18","modified":1649488848194},{"_id":"public/yun.svg","hash":"78218ba93f0150e3613c7d0b60575ebe6131255f","modified":1649488848194},{"_id":"public/image/avatar_backup.jpg","hash":"981b12aaf6e63ae11de7eb10483b2676ea88f990","modified":1649488848194},{"_id":"public/image/icon.png","hash":"980118ed1d6035f8a6173abbf6099c4227c055c1","modified":1649488848194},{"_id":"public/image/wechat.jpg","hash":"c7050b547d10944c3f802771962c11ab390255dc","modified":1649488848194},{"_id":"public/image/seedling-line.svg","hash":"40de46a2c2adab799174cf37cb722244d57430d9","modified":1649488848194},{"_id":"public/2022/04/01/8-puzzle/R1.png","hash":"56fc9948f0a92af1fb0ccd3657d3ebeefbec69ac","modified":1649488848194},{"_id":"public/2022/03/27/BM-algorithm/image-20220328004145309.png","hash":"7f99a2be322cdaabab3d8c8dcdbe71a399a0a98f","modified":1649488848194},{"_id":"public/2022/04/08/CN-3/image-20211205153202429.png","hash":"ef1b3c71950ab13fcfc97218597794cb5635494d","modified":1649488848194},{"_id":"public/2022/04/08/CN-3/image-20211205162300456.png","hash":"9e892eacceba60a36263bd46101f2ea6c5e66543","modified":1649488848194},{"_id":"public/2022/04/08/CN-3/image-20211205165352723.png","hash":"6fa86d1afe6e42d0e2550a9cbba836289a0bff7f","modified":1649488848194},{"_id":"public/2022/04/08/CN-5/image-20211211152352560.png","hash":"1853438a63a17a1589725776ff0c61c5e98cc1ca","modified":1649488848194},{"_id":"public/2022/04/08/CN-5/image-20211211154625242.png","hash":"78616478b7a24266183f085bbbbe0885e1119292","modified":1649488848194},{"_id":"public/2022/04/08/CN-5/image-20211211154616223.png","hash":"78616478b7a24266183f085bbbbe0885e1119292","modified":1649488848194},{"_id":"public/2022/04/08/CN-5/image-20211211154842458.png","hash":"95d22d0ccdd92965dfdf79ab1322aa3854cb7570","modified":1649488848194},{"_id":"public/2022/03/09/Graph-search/image-1.png","hash":"e31a7b655c8b104176311248253c989c0c3590ee","modified":1649488848194},{"_id":"public/2022/04/08/CN-6/image-20211207025902517.png","hash":"597743e9e973f8b0c8b3021e4a652d2a016e4e21","modified":1649488848194},{"_id":"public/2022/03/09/Graph-search/image-3.png","hash":"3b8a85b9b1f6398874d48d71f702c4e53bf83d37","modified":1649488848194},{"_id":"public/2022/03/09/Graph-search/image-2.png","hash":"1ea7ffb5b9854f92cd4092aa456e1d77f28aa9fc","modified":1649488848194},{"_id":"public/2022/03/09/Graph-search/v2-4a4d37df348f283649e2aecc74d959b5_720w.jpg","hash":"60d73acdd30125aa62e7afc3899271677c9c4cd7","modified":1649488848194},{"_id":"public/2022/03/09/Graph-search/v2-9e2643ca5d96f86a391c36de4d3bd48d_720w.jpg","hash":"24061e3e3eba17d3bf0429516a68cf344e680fd4","modified":1649488848194},{"_id":"public/2022/02/20/Hexo_article/image-20220308162506034.png","hash":"cbac8bf927ab02febc2e96125c88df7426dee64c","modified":1649488848194},{"_id":"public/2022/03/13/PERT/image-20210926121305734.png","hash":"5bb37f387e4b008de13619b2bc84bb610cf73ba3","modified":1649488848194},{"_id":"public/2022/03/13/PERT/image-20210926121452437.png","hash":"409b273ed1a5e8c0aa440379af65b4a8b8d3f5fa","modified":1649488848194},{"_id":"public/2022/03/13/PERT/image-20210926121557824.png","hash":"a082383de3b879a035be5bc7866a932737bb2b66","modified":1649488848194},{"_id":"public/2022/03/13/PERT/image-20210926125842698.png","hash":"f648448ff8f6bb0ceb55706597043c277d7bc9a2","modified":1649488848194},{"_id":"public/2022/02/26/R2S_build/image-10.png","hash":"62f3de2b27546aff4cf6a616df3b3239e5d5d589","modified":1649488848194},{"_id":"public/2022/02/26/R2S_build/image-1.png","hash":"4a475083bd251f14329a16715da142571bd86747","modified":1649488848194},{"_id":"public/2022/02/26/R2S_build/image-5.png","hash":"56c526c61081288b63adab3db805722adedec86f","modified":1649488848194},{"_id":"public/2022/02/26/R2S_build/image-7.png","hash":"b6b02dcf36560a6055756269e885694045ad33bc","modified":1649488848194},{"_id":"public/2022/02/26/R2S_build/image-8.png","hash":"dedaee8c824811ffa4f3d27516e012a86636726e","modified":1649488848194},{"_id":"public/2022/04/08/IPsec/image-20220408173945688.png","hash":"a8b416dc2a59abaa6546921a6774399a09e0564c","modified":1649488848194},{"_id":"public/2022/04/08/IPsec/image-20220408182745880.png","hash":"e6bdcb81f702a997bb5b76563f7e0bf3a7ee0a3a","modified":1649488848194},{"_id":"public/2022/04/08/IPsec/image-20220408182806622.png","hash":"51b06303db8b4d80b03acfc55baf149aeb0b66f8","modified":1649488848194},{"_id":"public/2022/04/08/IPsec/image-20220408182806757.png","hash":"51b06303db8b4d80b03acfc55baf149aeb0b66f8","modified":1649488848194},{"_id":"public/2022/04/08/IPsec/image-20220408182852006.png","hash":"6b746c16873084d748a6fbea2160300950361ba7","modified":1649488848194},{"_id":"public/2022/04/08/IPsec/image-20220408182902202.png","hash":"ac93fbaab32af9510faaa6a9b5d1d1d88736ee3e","modified":1649488848194},{"_id":"public/2022/04/08/IPsec/image-20220408183423694.png","hash":"4bf0e8fdff9e0cbce3f785aa7ff7d8f87ef84c0d","modified":1649488848194},{"_id":"public/2022/04/08/IPsec/image-20220408183817734.png","hash":"25cd176a6f5907bd5f30a3ba8541f162bfde13d7","modified":1649488848194},{"_id":"public/2022/02/24/Hexo_creation/image-20220308165502809.png","hash":"667770d3e29fb219208121ddc70d2ae062563ad1","modified":1649488848194},{"_id":"public/2022/02/24/binary_tree_2/false example-16473330373123.png","hash":"374877f834e57be19b531ba2ba225a42b13a5291","modified":1649488848194},{"_id":"public/2022/02/24/binary_tree_2/false example.png","hash":"374877f834e57be19b531ba2ba225a42b13a5291","modified":1649488848194},{"_id":"public/2022/02/24/binary_tree_2/image.png","hash":"779e786c51aefa1b4c15d9945a62b452137e2024","modified":1649488848194},{"_id":"public/2022/02/24/binary_tree_2/tree1.jpg","hash":"f358033460700da1c28e5e3d6770c82857c8ccb3","modified":1649488848194},{"_id":"public/2022/02/24/binary_tree_2/tree2.jpg","hash":"67719c7c6ea0c867d80327220af2eee116533c7f","modified":1649488848194},{"_id":"public/2022/02/24/binary_tree_2/true example.png","hash":"92de0a3ec197a374444f32b81c18fc3fdec0ff7b","modified":1649488848194},{"_id":"public/2022/02/25/binary_tree_1/2-1Q226195949495.gif","hash":"a107e2dc9f65c7887e76755dc9a78fff17fa0dbe","modified":1649488848194},{"_id":"public/2022/02/25/binary_tree_1/2-1Q226195I0M1.gif","hash":"2f1884245b798d3ec8f8a5cc42572a786a38ae0c","modified":1649488848194},{"_id":"public/2022/02/25/binary_tree_1/2-1Q22R035341H.gif","hash":"1d62249b1271596c0daf868ef2ac4f6c80d93ed8","modified":1649488848194},{"_id":"public/2022/02/25/binary_tree_1/v2-0ccba83c7b3dbf7b89964c04021025d9_720w.jpg","hash":"f56981756349a08c44d83576af3e63798c87e21f","modified":1649488848194},{"_id":"public/image/alipay.png","hash":"6be1d1ffc3264828ea0a27a4ca30520dfa448bd6","modified":1649488848194},{"_id":"public/image/qq.jpg","hash":"679ce9b7fb0f782ddfb1177689cb0ae09fbded23","modified":1649488848194},{"_id":"public/image/wechat.png","hash":"4660b50917b947a91c35f55b0281c633b9b0addd","modified":1649488848194},{"_id":"public/2022/03/27/BM-algorithm/image-20220328173308025.png","hash":"b687f059996b90a0e7b45b58336d90c68fd7458f","modified":1649488848194},{"_id":"public/2022/03/27/BM-algorithm/image-20220328005451919.png","hash":"340fe25093bbbd654129d3c2d332124998a5d265","modified":1649488848194},{"_id":"public/2022/04/08/CN-1/image-20211201155917959.png","hash":"be761a097668a5191a80d5940d516f67ebe6d58c","modified":1649488848194},{"_id":"public/2022/04/08/CN-3/image-20211205153141538.png","hash":"e314d01147c11ea864efe60050944cd8c86c896b","modified":1649488848194},{"_id":"public/2022/04/08/CN-3/image-20211205153214433.png","hash":"d350aaa5ae00a2621f84e5149fe0207ee33d1fda","modified":1649488848194},{"_id":"public/2022/04/08/CN-3/image-20211205153227168.png","hash":"273a262dd59bf899cb8b8484c529a6db5a36436d","modified":1649488848194},{"_id":"public/2022/04/08/CN-3/image-20211205174403372.png","hash":"60d7bbe4df45795ec99e916eae9ac78b317dfa7f","modified":1649488848194},{"_id":"public/2022/04/08/CN-3/image-20211205174543073.png","hash":"46fda8d1c1541a353b5e823bc3c9bcf9895e786c","modified":1649488848194},{"_id":"public/2022/04/08/CN-5/image-20211211154556832.png","hash":"147b53ac1661c3508df951c62e4596b52a658227","modified":1649488848194},{"_id":"public/2022/03/08/Hexo-synchronization/image-20220310172557250.png","hash":"6e29f7df5d770ebc97cc9c4061ede24d1505d82d","modified":1649488848194},{"_id":"public/2022/02/20/Hexo_article/IMG_1479.jpg","hash":"f869ae1d27243b47840d63ffbe1bd136c7c7a503","modified":1649488848194},{"_id":"public/2022/03/13/PERT/image-20210926121433312.png","hash":"aeb8258e4e8ae3d05ca75e03dfe93ec239da5baa","modified":1649488848194},{"_id":"public/2022/02/26/R2S_build/image-20220305212846426.png","hash":"ea4b0543826c23f95321520feaca18a54e27c00f","modified":1649488848194},{"_id":"public/2022/02/26/R2S_build/image-9-1024x194.png","hash":"00c8bfd48272b1b8487d34e711ac2800569c3230","modified":1649488848194},{"_id":"public/css/README.html","hash":"dbe04d4345ad48b3fba4320407bd080a344defc1","modified":1649488848194},{"_id":"public/js/chunk-TTX6TVTO.js","hash":"bdf31df5623cdbe4d6629c1d602cad7a15e5cf78","modified":1649488848194},{"_id":"public/js/gallery-decrypt.js","hash":"ce7bf147867972a0f9e903eebf66b7e0f0145f61","modified":1649488848194},{"_id":"public/js/pjax.js","hash":"4d59377e0b830db741c2786d4ccbb2f5498ee13e","modified":1649488848194},{"_id":"public/js/chunk-YZ7E3ATC.js","hash":"5bb1683531dd823bb4de8b6541f0290d46006320","modified":1649488848194},{"_id":"public/js/say.js","hash":"59c8436cecab357b196c37fe0345e932e7f74dbe","modified":1649488848194},{"_id":"public/js/hexo-theme-yun.js","hash":"b93cfddf54ac5ab542ae7fbb19416a89629be6e0","modified":1649488848194},{"_id":"public/js/sidebar.js","hash":"ee176346d586bebbd146f157c23f9d367d5499a4","modified":1649488848194},{"_id":"public/js/comments/disqus.js","hash":"4073464ce42643d9571211b1443af61fc78ec0d1","modified":1649488848194},{"_id":"public/js/analytics/leancloud-visitors.js","hash":"89952ef9eb5fe84c856068a6e6c274e396f74dd5","modified":1649488848194},{"_id":"public/js/utils.js","hash":"36ec1d14c7537ad402e577d5deea7c09160197f8","modified":1649488848194},{"_id":"public/js/search/algolia-search.js","hash":"aa26c979800de87ecfd9d0ba2ae7e238da2389ba","modified":1649488848194},{"_id":"public/js/ui/fireworks.js","hash":"859b09a6065ea1b4f02f2974e590e44cc13fccc9","modified":1649488848194},{"_id":"public/js/ui/banner.js","hash":"c73ce4b3021bebf1a264e481dbe9a8a1ccd87d3b","modified":1649488848194},{"_id":"public/js/search/local-search.js","hash":"db5cbac019bd86c47cac02e6dba1dfb1861ef31f","modified":1649488848194},{"_id":"public/js/comments/waline.js","hash":"090fc554d82400dca9ae6a2806be48c111b90b3e","modified":1649488848194},{"_id":"public/css/hexo-theme-yun.css","hash":"8522bf234c1a76e0239cc756841b6cf1e85c0b5a","modified":1649488848194},{"_id":"public/2022/04/01/8-puzzle/R.024c89daf1b60db70d608b4b73215e76","hash":"55711d8835efb3239e2a47eb10b1d9c562084672","modified":1649488848194},{"_id":"public/2022/04/01/8-puzzle/R.png","hash":"62a8331c6b1dc7814dc5c3d5b82a452d211d1cf5","modified":1649488848194},{"_id":"public/2022/04/08/CN-2/image-20211204114150471.png","hash":"b4f3c0a76b1ab0c87e4d3703bdcbd8dc13c8a2a8","modified":1649488848194},{"_id":"public/2022/04/08/CN-1/image-20211201155433683.png","hash":"7f64d8c8d414f025c940e249396bfd3fb1090bdb","modified":1649488848194},{"_id":"public/2022/04/08/CN-1/image-20211201165246959.png","hash":"6a6165a044ab22c876a5c9632b951d682b57f121","modified":1649488848194},{"_id":"public/2022/04/08/CN-4/image-20211206080908048-1649432396057.png","hash":"9b3fad30e12688a0f2788b3477d678e009160485","modified":1649488848194},{"_id":"public/2022/04/08/CN-4/image-20211206080908048.png","hash":"9b3fad30e12688a0f2788b3477d678e009160485","modified":1649488848194},{"_id":"public/2022/04/08/CN-4/image-20211206080928415-1649432396057.png","hash":"fafa9d4f4df10549c8b683624b210296450309e2","modified":1649488848194},{"_id":"public/2022/04/08/CN-4/image-20211206080928415.png","hash":"fafa9d4f4df10549c8b683624b210296450309e2","modified":1649488848194},{"_id":"public/2022/04/08/CN-4/image-20211206080942577-1649432396057.png","hash":"54a0c9e2bbb9191f378f8e72b479e3761408187b","modified":1649488848194},{"_id":"public/2022/04/08/CN-4/image-20211206080942577.png","hash":"54a0c9e2bbb9191f378f8e72b479e3761408187b","modified":1649488848194},{"_id":"public/2022/03/08/Hexo-synchronization/Screenshot 2022-03-08 161552.png","hash":"5146a45213aa0aaa7ac928f8083fcf56472628a8","modified":1649488848194},{"_id":"public/2022/02/20/Hexo_article/image-20220308162715529.png","hash":"8e3c4674e8deea387717279e8a00923655c7ddf6","modified":1649488848194},{"_id":"public/2022/02/24/Hexo_creation/image-20220308165404552.png","hash":"a268bc4c307433bde753548c2e00b24bc645571e","modified":1649488848194},{"_id":"public/assets/js/DPlayer.min.js","hash":"104613de917a8576ff26aaa36d1c0c7bb4730f4e","modified":1649488848194},{"_id":"public/2022/04/08/CN-2/image-20211204114107336.png","hash":"f4d06da5ce4433eab9f0ef41e6fa9593533dae6d","modified":1649488848194},{"_id":"public/2022/03/08/Hexo-synchronization/image-20220315180411753.png","hash":"ccce09bdfce959f4983dc0c12f0fff804ee30dd0","modified":1649488848194},{"_id":"public/2022/02/26/R2S_build/image-2-1024x507.png","hash":"3f2c9846cdfeed98cf3b5bf94cb0a5d41de40705","modified":1649488848194},{"_id":"public/2022/02/26/R2S_build/image-3-1024x485.png","hash":"72f68e697d9656bc5dfdf05584660bee9d89e29a","modified":1649488848194},{"_id":"public/2022/02/25/binary_tree_1/image.png","hash":"486e325512c567f522e925b9fe9d58c24789176b","modified":1649488848194},{"_id":"public/2022/04/08/CN-2/image-20211204114128703.png","hash":"eedec4652f9c7eaab4c4b468f8d0be48d33684ae","modified":1649488848194},{"_id":"public/2022/04/08/CN-2/image-20211210170210391.png","hash":"59b68db970c383077f8cddcc7c29735b37472649","modified":1649488848194},{"_id":"public/2022/02/20/Hexo_article/traffic-light.gif","hash":"0c18d7a2a137b37b0af5b1c647aa12a3393dec64","modified":1649488848194},{"_id":"public/2022/04/01/8-puzzle/35482241-1605ae76-046d-11e8-87e5-3d8a0cfa8628.gif","hash":"29e4db82f53e9c0a37101f66056be209d03094a3","modified":1649488848194},{"_id":"public/2022/02/20/Hexo_article/2d6f869662e83398f06070e2a14f838.jpg","hash":"e891f3a3b28cbefa79db0d9fd17939f3df865836","modified":1649488848194},{"_id":"public/image/head.jpg","hash":"91d9c38a4f5864f68119064c8e61227e6b7719aa","modified":1649488848194},{"_id":"public/2022/02/20/Hexo_article/884019afce82603bd8bc8fd4e531839.jpg","hash":"464c9842be81f3cc1cb18df887b8f497216e1d80","modified":1649488848194}],"Category":[{"name":"algorithm","_id":"cl1rj2n4y0007gwcy2alqg4gr"},{"name":"计算机网络","_id":"cl1rj2n55000ngwcy9wwzdrhh"},{"name":"Hexo搭建","_id":"cl1rj2n5e001ogwcyat77hp1q"}],"Data":[],"Page":[{"title":"about","date":"2022-02-21T14:50:30.000Z","_content":"\n# About me\n\n> ## WHO AM I\n>\n> ~~20岁，是学生。​~~\n>\n> 希望与你相遇。\n\n见字如面，很高兴认识你。\n\n目前我是一名澳科大在读本科生，IT专业。\n\n我喜欢交朋友，然而我是一个社恐人士。\n\n我喜欢拍照片，然而没有拿得出手的美图。\n\n我喜欢打游戏，然而这个赛季王者还是钻石。\n\n。。。 。。。\n\n如果，你喜欢我（和我的网页）的话\n\n~~欢迎给我打钱💰~~\n\n# Contact\n\nEmail: tonylsx611@gmail.com\n\nWechat: tony83607693\n\nQQ: 2858075831","source":"about/index.md","raw":"---\ntitle: about\ndate: 2022-02-21 22:50:30\n---\n\n# About me\n\n> ## WHO AM I\n>\n> ~~20岁，是学生。​~~\n>\n> 希望与你相遇。\n\n见字如面，很高兴认识你。\n\n目前我是一名澳科大在读本科生，IT专业。\n\n我喜欢交朋友，然而我是一个社恐人士。\n\n我喜欢拍照片，然而没有拿得出手的美图。\n\n我喜欢打游戏，然而这个赛季王者还是钻石。\n\n。。。 。。。\n\n如果，你喜欢我（和我的网页）的话\n\n~~欢迎给我打钱💰~~\n\n# Contact\n\nEmail: tonylsx611@gmail.com\n\nWechat: tony83607693\n\nQQ: 2858075831","updated":"2022-03-13T14:32:27.876Z","path":"about/index.html","comments":1,"layout":"page","_id":"cl1rj2n4p0000gwcyha5x40ok","content":"<h1 id=\"about-me\"><a class=\"markdownIt-Anchor\" href=\"#about-me\"></a> About me</h1>\n<blockquote>\n<h2 id=\"who-am-i\"><a class=\"markdownIt-Anchor\" href=\"#who-am-i\"></a> WHO AM I</h2>\n<p><s>20岁，是学生。​</s></p>\n<p>希望与你相遇。</p>\n</blockquote>\n<p>见字如面，很高兴认识你。</p>\n<p>目前我是一名澳科大在读本科生，IT专业。</p>\n<p>我喜欢交朋友，然而我是一个社恐人士。</p>\n<p>我喜欢拍照片，然而没有拿得出手的美图。</p>\n<p>我喜欢打游戏，然而这个赛季王者还是钻石。</p>\n<p>。。。 。。。</p>\n<p>如果，你喜欢我（和我的网页）的话</p>\n<p><s>欢迎给我打钱💰</s></p>\n<h1 id=\"contact\"><a class=\"markdownIt-Anchor\" href=\"#contact\"></a> Contact</h1>\n<p>Email: <a href=\"mailto:tonylsx611@gmail.com\">tonylsx611@gmail.com</a></p>\n<p>Wechat: tony83607693</p>\n<p>QQ: 2858075831</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"about-me\"><a class=\"markdownIt-Anchor\" href=\"#about-me\"></a> About me</h1>\n<blockquote>\n<h2 id=\"who-am-i\"><a class=\"markdownIt-Anchor\" href=\"#who-am-i\"></a> WHO AM I</h2>\n<p><s>20岁，是学生。​</s></p>\n<p>希望与你相遇。</p>\n</blockquote>\n<p>见字如面，很高兴认识你。</p>\n<p>目前我是一名澳科大在读本科生，IT专业。</p>\n<p>我喜欢交朋友，然而我是一个社恐人士。</p>\n<p>我喜欢拍照片，然而没有拿得出手的美图。</p>\n<p>我喜欢打游戏，然而这个赛季王者还是钻石。</p>\n<p>。。。 。。。</p>\n<p>如果，你喜欢我（和我的网页）的话</p>\n<p><s>欢迎给我打钱💰</s></p>\n<h1 id=\"contact\"><a class=\"markdownIt-Anchor\" href=\"#contact\"></a> Contact</h1>\n<p>Email: <a href=\"mailto:tonylsx611@gmail.com\">tonylsx611@gmail.com</a></p>\n<p>Wechat: tony83607693</p>\n<p>QQ: 2858075831</p>\n"},{"title":"categories","date":"2022-02-23T09:10:40.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2022-02-23 17:10:40\ntype: categories\n---\n","updated":"2022-03-13T14:32:27.876Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cl1rj2n4u0002gwcycq67cyk1","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2022-02-23T06:03:55.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2022-02-23 14:03:55\ntype: tags\n---\n","updated":"2022-03-13T14:32:27.898Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cl1rj2n4x0005gwcyc463agdn","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"8数码难题","date":"2022-04-01T10:40:52.000Z","catagories":["algorithm"],"author":"Tony","katex":true,"_content":"\n## 题目描述\n\n在$3×3$的棋盘上，摆有八个棋子，每个棋子上标有$1$至$8$的某一数字。棋盘中留有一个空格，空格用$0$来表示。空格周围的棋子可以移到空格中。要求解的问题是：给出一种初始布局（初始状态）和目标布局（为了使题目简单,设目标状态为$123804765$），找到一种最少步骤的移动方法，实现从初始布局到目标布局的转变。\n\n<img src=\"8-puzzle/R.png\" alt=\"R\" style=\"zoom:50%;\" />\n\n### 输入输出样例\n\ninput1: $283104765$\n\noutput1: $4$\n\ninput2: $603712458$\n\noutput2: $15$\n\ninput3: $603712458$\n\noutput3: $23$\n\n<img src=\"8-puzzle/35482241-1605ae76-046d-11e8-87e5-3d8a0cfa8628.gif\" alt=\"35482241-1605ae76-046d-11e8-87e5-3d8a0cfa8628\" style=\"zoom:33%;\" />\n\n## 问题分析\n\n### 朴素BFS\n\n看完问题我们最先想到的一定是BFS，因为我们知道起始状态和目标状态，且不需要求解过程，只需要知道执行的步骤，那么DFS自然就不需要了。因此最简单的办法就是套用BFS模板，目标状态的深度即为答案。过程很简单，看代码就可以理解的哈，不理解可以温习一下BFS的原理：[BFS简介](https://tonylsx611.github.io/2022/03/10/BFS/)\n\n<img src=\"8-puzzle/R1.png\" alt=\"R1\" style=\"zoom:75%;\" />\n\n### 朴素BFS代码\n\n```c\nint main()\n{\n    string start;\n    int depth=0;\n    queue<string> Q;\n    Q.push(start);\n    while(!Q.empty())\n    {\n        int len=Q.size();\n        for(int i=0;i<len;i++)//while循环内的for循环代表树的深度\n        {\n            string node=Q.front();\n\n            int position;//数字0的位置\n            if(node[j]=='0')//寻找数字0在九宫格的位置\n                position=j;\n            \n            if(position == 1,2,4,5,7,8)//数字0向左移动\n            {\n                swap(node[position],node[position-1]);//与0交换位置\n\t\t\t\tQ.push(node);\n                judge();//判断是否是目标状态\n                swap(node[position],node[position-1]);//交换回来\n            }\n            \n            if(position == 3,4,5,6,7,8)//数字0向上移动\n            {\n                swap(node[position],node[position-3]);//与0交换位置\n\t\t\t\tQ.push(node);\n                judge();//判断是否是目标状态\n                swap(node[position],node[position-3]);//交换回来\n\t\t\t}\n\n            if(position == 0,1,3,4,6,7)//数字0向右移动\n            {\n                swap(node[position],node[position+1]);//与0交换位置\n\t\t\t\tQ.push(node);\n                judge();//判断是否是目标状态\n                swap(node[position],node[position+1]);//交换回来\n            }\n\n            if(position == 0,1,2,3,4,5)//down\n            {\n                swap(node[position],node[position+3]);//与0交换位置\n\t\t\t\tQ.push(node);\n                judge();//判断是否是目标状态\n                swap(node[position],node[position+3]);//交换回来\n            }\n            Q.pop();\n        }\n        depth++;\n    }\n}\n```\n\n### 记忆化BFS搜索\n\n但是，这样的搜索显然是有很多重复的节点，会出现返祖现象，就是说后面的搜索包含了前面已经搜索过的节点。比如，数字0第一次向右移动，第二次向左移动，就相当没移动，又回到原来的节点了。那么为了避免这个问题，我们使用一个超大的数组来记录每一次遍历过的节点状态，因为BFS是按照层级顺序搜索的，因此每次搜索前查找一下这个超大数组，如果已经遍历过的节点将不会再次遍历。这样的减枝可以极大的提高搜索效率，可以减少大约50%的重复搜索时间。\n\n### 记忆化BFS搜索代码\n\n```c\nstring disk[1000001];//记忆数组\nint main()\n{\n    string start;\n    string final=\"123804765\";\n    int depth=0;\n    int ptr=0;\n    queue<string> Q;\n    disk[0]=start;\n    Q.push(start);\n    while(!Q.empty())\n    {\n        int len=Q.size();\n        for(int i=0;i<len;i++)\n        {\n            string node=Q.front();\n\n            int position;//数字0的位置\n            if(node[j]=='0')//寻找数字0在九宫格的位置\n                position=j;\n            \n            if(position == 1,2,4,5,7,8)//数字0向左移动\n            {\n                swap(node[position],node[position-1]);\n                //----------------------\n                bool judge=true;\n                for(int j=ptr;j>=0;j--)//从后向前检查该节点是否遍历过\n                    if(disk[j]==node)\n                    {\n                        judge=false;\n                        break;\n                    }\n                if(judge)//如果没有遍历过\n                {\n                    Q.push(node);\n                    ptr++;\n                    disk[ptr] = node;\n                    if(node==final)\n                    {\n                        cout<<depth+1<<endl;\n                        return 0;\n                    }\n                }\n                //---------------------\n                swap(node[position],node[position-1]);\n            }\n            \n            if(position>2)//数字0向上移动\n            {\n                swap(node[position],node[position-3]);\n\t\t\t\t//同上\n                swap(node[position],node[position-3]);\n            }\n\n            if(position == 0，1，3，4，6，7)//数字0向右移动\n            {\n                bool judge=true;\n                swap(node[position],node[position+1]);\n                //同上\n                swap(node[position],node[position+1]);\n            }\n\n            if(position<6)//数字0向下移动\n            {\n                swap(node[position],node[position+3]);\n\t\t\t\t//同上\n                swap(node[position],node[position+3]);\n            }\n            Q.pop();\n        }\n        depth++;\n    }\n}\n```\n\n### 双向BFS\n\n虽然上述方法已经很快了，但是执行$Input3$依旧需要将近20秒的时间，因此当节点很深的时候，我们有没有更快的办法呢？\n\n对于本题而言，双向BFS就派上用场了，因为本题已知起始状态和目标状态，我们完全可以同时对这两个状态进行BFS，当两面搜索到了同一个节点时，两面的深度之和就是答案。如图所示，同样的，对于一些走迷宫类的问题，给出起始状态和中止状态，我们都可以考虑使用双向BFS来求解。这种方法有多快呢， 对于$Input3$而言，使用双向BFS求解的时间仅需$0.3s$，是单向BFS速度的近百倍！\n\n<img src=\"8-puzzle/R.024c89daf1b60db70d608b4b73215e76\" alt=\"查看源图像\" style=\"zoom:50%;\" />\n\n这里，我们对代码进行了一些小小的优化，将原本的disk数组更换成了更高效的**哈希映射**，通过**康托展开**将$0-8$的全排列一一映射到大小仅为$362880$的哈希表中。或许你会疑惑，原本应该至少需要开`disk[876543210]`这么大的数组，怎么只需要`disk[362880]`就可以储存的下呢？我们来看一下康托展开的具体实现方式：[康托展开_百度百科 (baidu.com)](https://baike.baidu.com/item/康托展开/7968428?msclkid=92fc5a9ab32e11ec926143771748963a).\n\n是不是很神奇呢？\n\n### 双向BFS代码\n\n```c\n#include<iostream>\n#include<string>\n#include<queue>\nusing namespace std;\nstruct ant\n{\n    string str;\n    int depth;\n    short one_two;\n};\nint visit[362880];\nint depth[362880];\n\nvoid bfs(string begin, string end);//双向BFS\nint hash1(string s);//康托展开\n\nint main()\n{\n    string final = \"123804765\";\n    string start =\"603712458\";\n    bfs(start, final);\n    return 0;\n}\n\nint hash1(string s)//康托展开\n{\n    int f[9]={0,1,2,6,24,120,720,5040,40320};\n    int book[9]={0};\n    int ans=0;\n    int x=s.length();\n    for(int i=0;i<s.length();i++)\n    {\n        int num=0;\n        book[s[i]-'0']=1;\n        for(int j=0;j<s[i]-'0';j++)\n            if(!book[j])\n                num++;\n        x--;\n        ans+=num*f[x];\n    }\n    return ans;\n}\n\nvoid bfs(string begin, string end)\n{\n    queue<ant> Q;\n    ant temp;\n    int str_to_int;//哈希转换\n\n    temp.str = begin;\n    temp.depth = 0;\n    temp.one_two = 1;//1代表正向BFS\n    Q.push(temp);\n    str_to_int = hash1(temp.str);\n    visit[str_to_int] = 1;\n    //depth[str_to_int] = 0;\n\n    temp.str = end;\n    temp.depth = 0;\n    temp.one_two = 2;\n    Q.push(temp);\n    str_to_int = hash1(temp.str);\n    visit[str_to_int] = 2;//2代表反向BFS\n    //depth[str_to_int] = 0;\n\n    while (!Q.empty())\n    {\n        ant node = Q.front();\n        node.depth++;\n\n        int position = -1;//position是数字0所在的位置\n        for (int i = 0; i < 9; i++)\n            if (node.str[i] == '0')\n            {\n                position = i;\n                break;\n            }\n\n\n        if(position == 1,2,4,5,7,8)//数字0向左移动\n        {\n            swap(node.str[position], node.str[position - 1]);\n            str_to_int = hash1(node.str);\n\n            if (!visit[str_to_int])//没有访问过\n            {\n                Q.push(node);\n                visit[str_to_int] = node.one_two;\n                depth[str_to_int] = node.depth;\n            }\n            if(visit[str_to_int] + node.one_two == 3)//一个是1，一个是2，代表相遇\n            {\n                int ans = depth[str_to_int] + node.depth;\n                cout << ans << endl;\n                return;\n            }\n            swap(node.str[position], node.str[position - 1]);\n        }\n\n        if (position >= 3 && position <= 8)//数字0向上移动\n        {\n            swap(node.str[position], node.str[position - 3]);\n            str_to_int = hash1(node.str);\n\n            if (!visit[str_to_int])//没有访问过\n            {...}//同上\n            judge();//同上\n            swap(node.str[position], node.str[position - 3]);\n        }\n\n        if(position == 0，1，3，4，6，7)//数字0向右移动\n        {\n            swap(node.str[position], node.str[position + 1]);\n            str_to_int = hash1(node.str);\n\n            if (!visit[str_to_int])//没有访问过\n            {...}//同上\n            judge();//同上\n            swap(node.str[position], node.str[position + 1]);\n        }\n\n        if (position >= 0 && position <= 5)//数字0向下移动\n        {\n            swap(node.str[position], node.str[position + 3]);\n            str_to_int = hash1(node.str);\n\n            if (!visit[str_to_int])//没有访问过\n            {...}//同上\n            judge();//同上\n            swap(node.str[position], node.str[position + 3]);\n        }\n        Q.pop();\n    }\n}\n```\n\n### A*算法\n\n\n\n### A*算法代码\n\n```\n```\n\n","source":"_posts/8-puzzle.md","raw":"---\ntitle: 8数码难题\ndate: 2022-04-01 18:40:52\ntags:\n  - algorithm\n  - BFS\ncatagories:\n  - algorithm\nauthor: Tony\nkatex: true\n---\n\n## 题目描述\n\n在$3×3$的棋盘上，摆有八个棋子，每个棋子上标有$1$至$8$的某一数字。棋盘中留有一个空格，空格用$0$来表示。空格周围的棋子可以移到空格中。要求解的问题是：给出一种初始布局（初始状态）和目标布局（为了使题目简单,设目标状态为$123804765$），找到一种最少步骤的移动方法，实现从初始布局到目标布局的转变。\n\n<img src=\"8-puzzle/R.png\" alt=\"R\" style=\"zoom:50%;\" />\n\n### 输入输出样例\n\ninput1: $283104765$\n\noutput1: $4$\n\ninput2: $603712458$\n\noutput2: $15$\n\ninput3: $603712458$\n\noutput3: $23$\n\n<img src=\"8-puzzle/35482241-1605ae76-046d-11e8-87e5-3d8a0cfa8628.gif\" alt=\"35482241-1605ae76-046d-11e8-87e5-3d8a0cfa8628\" style=\"zoom:33%;\" />\n\n## 问题分析\n\n### 朴素BFS\n\n看完问题我们最先想到的一定是BFS，因为我们知道起始状态和目标状态，且不需要求解过程，只需要知道执行的步骤，那么DFS自然就不需要了。因此最简单的办法就是套用BFS模板，目标状态的深度即为答案。过程很简单，看代码就可以理解的哈，不理解可以温习一下BFS的原理：[BFS简介](https://tonylsx611.github.io/2022/03/10/BFS/)\n\n<img src=\"8-puzzle/R1.png\" alt=\"R1\" style=\"zoom:75%;\" />\n\n### 朴素BFS代码\n\n```c\nint main()\n{\n    string start;\n    int depth=0;\n    queue<string> Q;\n    Q.push(start);\n    while(!Q.empty())\n    {\n        int len=Q.size();\n        for(int i=0;i<len;i++)//while循环内的for循环代表树的深度\n        {\n            string node=Q.front();\n\n            int position;//数字0的位置\n            if(node[j]=='0')//寻找数字0在九宫格的位置\n                position=j;\n            \n            if(position == 1,2,4,5,7,8)//数字0向左移动\n            {\n                swap(node[position],node[position-1]);//与0交换位置\n\t\t\t\tQ.push(node);\n                judge();//判断是否是目标状态\n                swap(node[position],node[position-1]);//交换回来\n            }\n            \n            if(position == 3,4,5,6,7,8)//数字0向上移动\n            {\n                swap(node[position],node[position-3]);//与0交换位置\n\t\t\t\tQ.push(node);\n                judge();//判断是否是目标状态\n                swap(node[position],node[position-3]);//交换回来\n\t\t\t}\n\n            if(position == 0,1,3,4,6,7)//数字0向右移动\n            {\n                swap(node[position],node[position+1]);//与0交换位置\n\t\t\t\tQ.push(node);\n                judge();//判断是否是目标状态\n                swap(node[position],node[position+1]);//交换回来\n            }\n\n            if(position == 0,1,2,3,4,5)//down\n            {\n                swap(node[position],node[position+3]);//与0交换位置\n\t\t\t\tQ.push(node);\n                judge();//判断是否是目标状态\n                swap(node[position],node[position+3]);//交换回来\n            }\n            Q.pop();\n        }\n        depth++;\n    }\n}\n```\n\n### 记忆化BFS搜索\n\n但是，这样的搜索显然是有很多重复的节点，会出现返祖现象，就是说后面的搜索包含了前面已经搜索过的节点。比如，数字0第一次向右移动，第二次向左移动，就相当没移动，又回到原来的节点了。那么为了避免这个问题，我们使用一个超大的数组来记录每一次遍历过的节点状态，因为BFS是按照层级顺序搜索的，因此每次搜索前查找一下这个超大数组，如果已经遍历过的节点将不会再次遍历。这样的减枝可以极大的提高搜索效率，可以减少大约50%的重复搜索时间。\n\n### 记忆化BFS搜索代码\n\n```c\nstring disk[1000001];//记忆数组\nint main()\n{\n    string start;\n    string final=\"123804765\";\n    int depth=0;\n    int ptr=0;\n    queue<string> Q;\n    disk[0]=start;\n    Q.push(start);\n    while(!Q.empty())\n    {\n        int len=Q.size();\n        for(int i=0;i<len;i++)\n        {\n            string node=Q.front();\n\n            int position;//数字0的位置\n            if(node[j]=='0')//寻找数字0在九宫格的位置\n                position=j;\n            \n            if(position == 1,2,4,5,7,8)//数字0向左移动\n            {\n                swap(node[position],node[position-1]);\n                //----------------------\n                bool judge=true;\n                for(int j=ptr;j>=0;j--)//从后向前检查该节点是否遍历过\n                    if(disk[j]==node)\n                    {\n                        judge=false;\n                        break;\n                    }\n                if(judge)//如果没有遍历过\n                {\n                    Q.push(node);\n                    ptr++;\n                    disk[ptr] = node;\n                    if(node==final)\n                    {\n                        cout<<depth+1<<endl;\n                        return 0;\n                    }\n                }\n                //---------------------\n                swap(node[position],node[position-1]);\n            }\n            \n            if(position>2)//数字0向上移动\n            {\n                swap(node[position],node[position-3]);\n\t\t\t\t//同上\n                swap(node[position],node[position-3]);\n            }\n\n            if(position == 0，1，3，4，6，7)//数字0向右移动\n            {\n                bool judge=true;\n                swap(node[position],node[position+1]);\n                //同上\n                swap(node[position],node[position+1]);\n            }\n\n            if(position<6)//数字0向下移动\n            {\n                swap(node[position],node[position+3]);\n\t\t\t\t//同上\n                swap(node[position],node[position+3]);\n            }\n            Q.pop();\n        }\n        depth++;\n    }\n}\n```\n\n### 双向BFS\n\n虽然上述方法已经很快了，但是执行$Input3$依旧需要将近20秒的时间，因此当节点很深的时候，我们有没有更快的办法呢？\n\n对于本题而言，双向BFS就派上用场了，因为本题已知起始状态和目标状态，我们完全可以同时对这两个状态进行BFS，当两面搜索到了同一个节点时，两面的深度之和就是答案。如图所示，同样的，对于一些走迷宫类的问题，给出起始状态和中止状态，我们都可以考虑使用双向BFS来求解。这种方法有多快呢， 对于$Input3$而言，使用双向BFS求解的时间仅需$0.3s$，是单向BFS速度的近百倍！\n\n<img src=\"8-puzzle/R.024c89daf1b60db70d608b4b73215e76\" alt=\"查看源图像\" style=\"zoom:50%;\" />\n\n这里，我们对代码进行了一些小小的优化，将原本的disk数组更换成了更高效的**哈希映射**，通过**康托展开**将$0-8$的全排列一一映射到大小仅为$362880$的哈希表中。或许你会疑惑，原本应该至少需要开`disk[876543210]`这么大的数组，怎么只需要`disk[362880]`就可以储存的下呢？我们来看一下康托展开的具体实现方式：[康托展开_百度百科 (baidu.com)](https://baike.baidu.com/item/康托展开/7968428?msclkid=92fc5a9ab32e11ec926143771748963a).\n\n是不是很神奇呢？\n\n### 双向BFS代码\n\n```c\n#include<iostream>\n#include<string>\n#include<queue>\nusing namespace std;\nstruct ant\n{\n    string str;\n    int depth;\n    short one_two;\n};\nint visit[362880];\nint depth[362880];\n\nvoid bfs(string begin, string end);//双向BFS\nint hash1(string s);//康托展开\n\nint main()\n{\n    string final = \"123804765\";\n    string start =\"603712458\";\n    bfs(start, final);\n    return 0;\n}\n\nint hash1(string s)//康托展开\n{\n    int f[9]={0,1,2,6,24,120,720,5040,40320};\n    int book[9]={0};\n    int ans=0;\n    int x=s.length();\n    for(int i=0;i<s.length();i++)\n    {\n        int num=0;\n        book[s[i]-'0']=1;\n        for(int j=0;j<s[i]-'0';j++)\n            if(!book[j])\n                num++;\n        x--;\n        ans+=num*f[x];\n    }\n    return ans;\n}\n\nvoid bfs(string begin, string end)\n{\n    queue<ant> Q;\n    ant temp;\n    int str_to_int;//哈希转换\n\n    temp.str = begin;\n    temp.depth = 0;\n    temp.one_two = 1;//1代表正向BFS\n    Q.push(temp);\n    str_to_int = hash1(temp.str);\n    visit[str_to_int] = 1;\n    //depth[str_to_int] = 0;\n\n    temp.str = end;\n    temp.depth = 0;\n    temp.one_two = 2;\n    Q.push(temp);\n    str_to_int = hash1(temp.str);\n    visit[str_to_int] = 2;//2代表反向BFS\n    //depth[str_to_int] = 0;\n\n    while (!Q.empty())\n    {\n        ant node = Q.front();\n        node.depth++;\n\n        int position = -1;//position是数字0所在的位置\n        for (int i = 0; i < 9; i++)\n            if (node.str[i] == '0')\n            {\n                position = i;\n                break;\n            }\n\n\n        if(position == 1,2,4,5,7,8)//数字0向左移动\n        {\n            swap(node.str[position], node.str[position - 1]);\n            str_to_int = hash1(node.str);\n\n            if (!visit[str_to_int])//没有访问过\n            {\n                Q.push(node);\n                visit[str_to_int] = node.one_two;\n                depth[str_to_int] = node.depth;\n            }\n            if(visit[str_to_int] + node.one_two == 3)//一个是1，一个是2，代表相遇\n            {\n                int ans = depth[str_to_int] + node.depth;\n                cout << ans << endl;\n                return;\n            }\n            swap(node.str[position], node.str[position - 1]);\n        }\n\n        if (position >= 3 && position <= 8)//数字0向上移动\n        {\n            swap(node.str[position], node.str[position - 3]);\n            str_to_int = hash1(node.str);\n\n            if (!visit[str_to_int])//没有访问过\n            {...}//同上\n            judge();//同上\n            swap(node.str[position], node.str[position - 3]);\n        }\n\n        if(position == 0，1，3，4，6，7)//数字0向右移动\n        {\n            swap(node.str[position], node.str[position + 1]);\n            str_to_int = hash1(node.str);\n\n            if (!visit[str_to_int])//没有访问过\n            {...}//同上\n            judge();//同上\n            swap(node.str[position], node.str[position + 1]);\n        }\n\n        if (position >= 0 && position <= 5)//数字0向下移动\n        {\n            swap(node.str[position], node.str[position + 3]);\n            str_to_int = hash1(node.str);\n\n            if (!visit[str_to_int])//没有访问过\n            {...}//同上\n            judge();//同上\n            swap(node.str[position], node.str[position + 3]);\n        }\n        Q.pop();\n    }\n}\n```\n\n### A*算法\n\n\n\n### A*算法代码\n\n```\n```\n\n","slug":"8-puzzle","published":1,"updated":"2022-04-03T10:02:43.749Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1rj2n4s0001gwcy8llpeeqb","content":"<h2 id=\"题目描述\"><a class=\"markdownIt-Anchor\" href=\"#题目描述\"></a> 题目描述</h2>\n<p>在<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>3</mn><mo>×</mo><mn>3</mn></mrow><annotation encoding=\"application/x-tex\">3×3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">3</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">3</span></span></span></span>的棋盘上，摆有八个棋子，每个棋子上标有<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>至<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>8</mn></mrow><annotation encoding=\"application/x-tex\">8</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">8</span></span></span></span>的某一数字。棋盘中留有一个空格，空格用<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span>来表示。空格周围的棋子可以移到空格中。要求解的问题是：给出一种初始布局（初始状态）和目标布局（为了使题目简单,设目标状态为<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>123804765</mn></mrow><annotation encoding=\"application/x-tex\">123804765</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\">2</span><span class=\"mord\">3</span><span class=\"mord\">8</span><span class=\"mord\">0</span><span class=\"mord\">4</span><span class=\"mord\">7</span><span class=\"mord\">6</span><span class=\"mord\">5</span></span></span></span>），找到一种最少步骤的移动方法，实现从初始布局到目标布局的转变。</p>\n<img src=\"/2022/04/01/8-puzzle/R.png\" alt=\"R\" style=\"zoom:50%;\" loading=\"lazy\">\n<h3 id=\"输入输出样例\"><a class=\"markdownIt-Anchor\" href=\"#输入输出样例\"></a> 输入输出样例</h3>\n<p>input1: <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>283104765</mn></mrow><annotation encoding=\"application/x-tex\">283104765</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span><span class=\"mord\">8</span><span class=\"mord\">3</span><span class=\"mord\">1</span><span class=\"mord\">0</span><span class=\"mord\">4</span><span class=\"mord\">7</span><span class=\"mord\">6</span><span class=\"mord\">5</span></span></span></span></p>\n<p>output1: <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>4</mn></mrow><annotation encoding=\"application/x-tex\">4</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">4</span></span></span></span></p>\n<p>input2: <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>603712458</mn></mrow><annotation encoding=\"application/x-tex\">603712458</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">6</span><span class=\"mord\">0</span><span class=\"mord\">3</span><span class=\"mord\">7</span><span class=\"mord\">1</span><span class=\"mord\">2</span><span class=\"mord\">4</span><span class=\"mord\">5</span><span class=\"mord\">8</span></span></span></span></p>\n<p>output2: <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>15</mn></mrow><annotation encoding=\"application/x-tex\">15</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\">5</span></span></span></span></p>\n<p>input3: <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>603712458</mn></mrow><annotation encoding=\"application/x-tex\">603712458</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">6</span><span class=\"mord\">0</span><span class=\"mord\">3</span><span class=\"mord\">7</span><span class=\"mord\">1</span><span class=\"mord\">2</span><span class=\"mord\">4</span><span class=\"mord\">5</span><span class=\"mord\">8</span></span></span></span></p>\n<p>output3: <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>23</mn></mrow><annotation encoding=\"application/x-tex\">23</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span><span class=\"mord\">3</span></span></span></span></p>\n<img src=\"/2022/04/01/8-puzzle/35482241-1605ae76-046d-11e8-87e5-3d8a0cfa8628.gif\" alt=\"35482241-1605ae76-046d-11e8-87e5-3d8a0cfa8628\" style=\"zoom:33%;\" loading=\"lazy\">\n<h2 id=\"问题分析\"><a class=\"markdownIt-Anchor\" href=\"#问题分析\"></a> 问题分析</h2>\n<h3 id=\"朴素bfs\"><a class=\"markdownIt-Anchor\" href=\"#朴素bfs\"></a> 朴素BFS</h3>\n<p>看完问题我们最先想到的一定是BFS，因为我们知道起始状态和目标状态，且不需要求解过程，只需要知道执行的步骤，那么DFS自然就不需要了。因此最简单的办法就是套用BFS模板，目标状态的深度即为答案。过程很简单，看代码就可以理解的哈，不理解可以温习一下BFS的原理：<a href=\"https://tonylsx611.github.io/2022/03/10/BFS/\">BFS简介</a></p>\n<img src=\"/2022/04/01/8-puzzle/R1.png\" alt=\"R1\" style=\"zoom:75%;\" loading=\"lazy\">\n<h3 id=\"朴素bfs代码\"><a class=\"markdownIt-Anchor\" href=\"#朴素bfs代码\"></a> 朴素BFS代码</h3>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    string start<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> depth<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    queue<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span> Q<span class=\"token punctuation\">;</span>\n    Q<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>Q<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> len<span class=\"token operator\">=</span>Q<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>len<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//while循环内的for循环代表树的深度</span>\n        <span class=\"token punctuation\">&#123;</span>\n            string node<span class=\"token operator\">=</span>Q<span class=\"token punctuation\">.</span><span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">int</span> position<span class=\"token punctuation\">;</span><span class=\"token comment\">//数字0的位置</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token char\">'0'</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//寻找数字0在九宫格的位置</span>\n                position<span class=\"token operator\">=</span>j<span class=\"token punctuation\">;</span>\n            \n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>position <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//数字0向左移动</span>\n            <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">[</span>position<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>node<span class=\"token punctuation\">[</span>position<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//与0交换位置</span>\n\t\t\t\tQ<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token function\">judge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//判断是否是目标状态</span>\n                <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">[</span>position<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>node<span class=\"token punctuation\">[</span>position<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//交换回来</span>\n            <span class=\"token punctuation\">&#125;</span>\n            \n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>position <span class=\"token operator\">==</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//数字0向上移动</span>\n            <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">[</span>position<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>node<span class=\"token punctuation\">[</span>position<span class=\"token operator\">-</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//与0交换位置</span>\n\t\t\t\tQ<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token function\">judge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//判断是否是目标状态</span>\n                <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">[</span>position<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>node<span class=\"token punctuation\">[</span>position<span class=\"token operator\">-</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//交换回来</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>position <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//数字0向右移动</span>\n            <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">[</span>position<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>node<span class=\"token punctuation\">[</span>position<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//与0交换位置</span>\n\t\t\t\tQ<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token function\">judge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//判断是否是目标状态</span>\n                <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">[</span>position<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>node<span class=\"token punctuation\">[</span>position<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//交换回来</span>\n            <span class=\"token punctuation\">&#125;</span>\n\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>position <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//down</span>\n            <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">[</span>position<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>node<span class=\"token punctuation\">[</span>position<span class=\"token operator\">+</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//与0交换位置</span>\n\t\t\t\tQ<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token function\">judge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//判断是否是目标状态</span>\n                <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">[</span>position<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>node<span class=\"token punctuation\">[</span>position<span class=\"token operator\">+</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//交换回来</span>\n            <span class=\"token punctuation\">&#125;</span>\n            Q<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        depth<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<h3 id=\"记忆化bfs搜索\"><a class=\"markdownIt-Anchor\" href=\"#记忆化bfs搜索\"></a> 记忆化BFS搜索</h3>\n<p>但是，这样的搜索显然是有很多重复的节点，会出现返祖现象，就是说后面的搜索包含了前面已经搜索过的节点。比如，数字0第一次向右移动，第二次向左移动，就相当没移动，又回到原来的节点了。那么为了避免这个问题，我们使用一个超大的数组来记录每一次遍历过的节点状态，因为BFS是按照层级顺序搜索的，因此每次搜索前查找一下这个超大数组，如果已经遍历过的节点将不会再次遍历。这样的减枝可以极大的提高搜索效率，可以减少大约50%的重复搜索时间。</p>\n<h3 id=\"记忆化bfs搜索代码\"><a class=\"markdownIt-Anchor\" href=\"#记忆化bfs搜索代码\"></a> 记忆化BFS搜索代码</h3>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\">string disk<span class=\"token punctuation\">[</span><span class=\"token number\">1000001</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//记忆数组</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    string start<span class=\"token punctuation\">;</span>\n    string final<span class=\"token operator\">=</span><span class=\"token string\">\"123804765\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> depth<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> ptr<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    queue<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span> Q<span class=\"token punctuation\">;</span>\n    disk<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>start<span class=\"token punctuation\">;</span>\n    Q<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>Q<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> len<span class=\"token operator\">=</span>Q<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>len<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            string node<span class=\"token operator\">=</span>Q<span class=\"token punctuation\">.</span><span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">int</span> position<span class=\"token punctuation\">;</span><span class=\"token comment\">//数字0的位置</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token char\">'0'</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//寻找数字0在九宫格的位置</span>\n                position<span class=\"token operator\">=</span>j<span class=\"token punctuation\">;</span>\n            \n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>position <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//数字0向左移动</span>\n            <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">[</span>position<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>node<span class=\"token punctuation\">[</span>position<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">//----------------------</span>\n                bool judge<span class=\"token operator\">=</span>true<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span>ptr<span class=\"token punctuation\">;</span>j<span class=\"token operator\">>=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//从后向前检查该节点是否遍历过</span>\n                    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>disk<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span>node<span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">&#123;</span>\n                        judge<span class=\"token operator\">=</span>false<span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>judge<span class=\"token punctuation\">)</span><span class=\"token comment\">//如果没有遍历过</span>\n                <span class=\"token punctuation\">&#123;</span>\n                    Q<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    ptr<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                    disk<span class=\"token punctuation\">[</span>ptr<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>node<span class=\"token operator\">==</span>final<span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">&#123;</span>\n                        cout<span class=\"token operator\">&lt;&lt;</span>depth<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token comment\">//---------------------</span>\n                <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">[</span>position<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>node<span class=\"token punctuation\">[</span>position<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            \n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>position<span class=\"token operator\">></span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//数字0向上移动</span>\n            <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">[</span>position<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>node<span class=\"token punctuation\">[</span>position<span class=\"token operator\">-</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token comment\">//同上</span>\n                <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">[</span>position<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>node<span class=\"token punctuation\">[</span>position<span class=\"token operator\">-</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>position <span class=\"token operator\">==</span> <span class=\"token number\">0</span>，<span class=\"token number\">1</span>，<span class=\"token number\">3</span>，<span class=\"token number\">4</span>，<span class=\"token number\">6</span>，<span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//数字0向右移动</span>\n            <span class=\"token punctuation\">&#123;</span>\n                bool judge<span class=\"token operator\">=</span>true<span class=\"token punctuation\">;</span>\n                <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">[</span>position<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>node<span class=\"token punctuation\">[</span>position<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">//同上</span>\n                <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">[</span>position<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>node<span class=\"token punctuation\">[</span>position<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>position<span class=\"token operator\">&lt;</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//数字0向下移动</span>\n            <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">[</span>position<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>node<span class=\"token punctuation\">[</span>position<span class=\"token operator\">+</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token comment\">//同上</span>\n                <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">[</span>position<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>node<span class=\"token punctuation\">[</span>position<span class=\"token operator\">+</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            Q<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        depth<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<h3 id=\"双向bfs\"><a class=\"markdownIt-Anchor\" href=\"#双向bfs\"></a> 双向BFS</h3>\n<p>虽然上述方法已经很快了，但是执行<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>I</mi><mi>n</mi><mi>p</mi><mi>u</mi><mi>t</mi><mn>3</mn></mrow><annotation encoding=\"application/x-tex\">Input3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">I</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\">p</span><span class=\"mord mathdefault\">u</span><span class=\"mord mathdefault\">t</span><span class=\"mord\">3</span></span></span></span>依旧需要将近20秒的时间，因此当节点很深的时候，我们有没有更快的办法呢？</p>\n<p>对于本题而言，双向BFS就派上用场了，因为本题已知起始状态和目标状态，我们完全可以同时对这两个状态进行BFS，当两面搜索到了同一个节点时，两面的深度之和就是答案。如图所示，同样的，对于一些走迷宫类的问题，给出起始状态和中止状态，我们都可以考虑使用双向BFS来求解。这种方法有多快呢， 对于<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>I</mi><mi>n</mi><mi>p</mi><mi>u</mi><mi>t</mi><mn>3</mn></mrow><annotation encoding=\"application/x-tex\">Input3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">I</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\">p</span><span class=\"mord mathdefault\">u</span><span class=\"mord mathdefault\">t</span><span class=\"mord\">3</span></span></span></span>而言，使用双向BFS求解的时间仅需<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>0.3</mn><mi>s</mi></mrow><annotation encoding=\"application/x-tex\">0.3s</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">3</span><span class=\"mord mathdefault\">s</span></span></span></span>，是单向BFS速度的近百倍！</p>\n<img src=\"/2022/04/01/8-puzzle/R.024c89daf1b60db70d608b4b73215e76\" alt=\"查看源图像\" style=\"zoom:50%;\" loading=\"lazy\">\n<p>这里，我们对代码进行了一些小小的优化，将原本的disk数组更换成了更高效的<strong>哈希映射</strong>，通过<strong>康托展开</strong>将<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>0</mn><mo>−</mo><mn>8</mn></mrow><annotation encoding=\"application/x-tex\">0-8</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">8</span></span></span></span>的全排列一一映射到大小仅为<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>362880</mn></mrow><annotation encoding=\"application/x-tex\">362880</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">3</span><span class=\"mord\">6</span><span class=\"mord\">2</span><span class=\"mord\">8</span><span class=\"mord\">8</span><span class=\"mord\">0</span></span></span></span>的哈希表中。或许你会疑惑，原本应该至少需要开<code>disk[876543210]</code>这么大的数组，怎么只需要<code>disk[362880]</code>就可以储存的下呢？我们来看一下康托展开的具体实现方式：<a href=\"https://baike.baidu.com/item/%E5%BA%B7%E6%89%98%E5%B1%95%E5%BC%80/7968428?msclkid=92fc5a9ab32e11ec926143771748963a\">康托展开_百度百科 (baidu.com)</a>.</p>\n<p>是不是很神奇呢？</p>\n<h3 id=\"双向bfs代码\"><a class=\"markdownIt-Anchor\" href=\"#双向bfs代码\"></a> 双向BFS代码</h3>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;string></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;queue></span></span>\nusing namespace std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">ant</span>\n<span class=\"token punctuation\">&#123;</span>\n    string str<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> depth<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">short</span> one_two<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> visit<span class=\"token punctuation\">[</span><span class=\"token number\">362880</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> depth<span class=\"token punctuation\">[</span><span class=\"token number\">362880</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">bfs</span><span class=\"token punctuation\">(</span>string begin<span class=\"token punctuation\">,</span> string end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//双向BFS</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">hash1</span><span class=\"token punctuation\">(</span>string s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//康托展开</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    string final <span class=\"token operator\">=</span> <span class=\"token string\">\"123804765\"</span><span class=\"token punctuation\">;</span>\n    string start <span class=\"token operator\">=</span><span class=\"token string\">\"603712458\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">bfs</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">,</span> final<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">hash1</span><span class=\"token punctuation\">(</span>string s<span class=\"token punctuation\">)</span><span class=\"token comment\">//康托展开</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> f<span class=\"token punctuation\">[</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">24</span><span class=\"token punctuation\">,</span><span class=\"token number\">120</span><span class=\"token punctuation\">,</span><span class=\"token number\">720</span><span class=\"token punctuation\">,</span><span class=\"token number\">5040</span><span class=\"token punctuation\">,</span><span class=\"token number\">40320</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> book<span class=\"token punctuation\">[</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> ans<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> x<span class=\"token operator\">=</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> num<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        book<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token char\">'0'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token char\">'0'</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>book<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n                num<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        x<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n        ans<span class=\"token operator\">+=</span>num<span class=\"token operator\">*</span>f<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> ans<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">bfs</span><span class=\"token punctuation\">(</span>string begin<span class=\"token punctuation\">,</span> string end<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    queue<span class=\"token operator\">&lt;</span>ant<span class=\"token operator\">></span> Q<span class=\"token punctuation\">;</span>\n    ant temp<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> str_to_int<span class=\"token punctuation\">;</span><span class=\"token comment\">//哈希转换</span>\n\n    temp<span class=\"token punctuation\">.</span>str <span class=\"token operator\">=</span> begin<span class=\"token punctuation\">;</span>\n    temp<span class=\"token punctuation\">.</span>depth <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    temp<span class=\"token punctuation\">.</span>one_two <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//1代表正向BFS</span>\n    Q<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    str_to_int <span class=\"token operator\">=</span> <span class=\"token function\">hash1</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">.</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    visit<span class=\"token punctuation\">[</span>str_to_int<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//depth[str_to_int] = 0;</span>\n\n    temp<span class=\"token punctuation\">.</span>str <span class=\"token operator\">=</span> end<span class=\"token punctuation\">;</span>\n    temp<span class=\"token punctuation\">.</span>depth <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    temp<span class=\"token punctuation\">.</span>one_two <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    Q<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    str_to_int <span class=\"token operator\">=</span> <span class=\"token function\">hash1</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">.</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    visit<span class=\"token punctuation\">[</span>str_to_int<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//2代表反向BFS</span>\n    <span class=\"token comment\">//depth[str_to_int] = 0;</span>\n\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>Q<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        ant node <span class=\"token operator\">=</span> Q<span class=\"token punctuation\">.</span><span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        node<span class=\"token punctuation\">.</span>depth<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">int</span> position <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//position是数字0所在的位置</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">9</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>str<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token char\">'0'</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">&#123;</span>\n                position <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n\n\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>position <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//数字0向左移动</span>\n        <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>str<span class=\"token punctuation\">[</span>position<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">.</span>str<span class=\"token punctuation\">[</span>position <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            str_to_int <span class=\"token operator\">=</span> <span class=\"token function\">hash1</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>visit<span class=\"token punctuation\">[</span>str_to_int<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//没有访问过</span>\n            <span class=\"token punctuation\">&#123;</span>\n                Q<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                visit<span class=\"token punctuation\">[</span>str_to_int<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>one_two<span class=\"token punctuation\">;</span>\n                depth<span class=\"token punctuation\">[</span>str_to_int<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>depth<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>visit<span class=\"token punctuation\">[</span>str_to_int<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> node<span class=\"token punctuation\">.</span>one_two <span class=\"token operator\">==</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//一个是1，一个是2，代表相遇</span>\n            <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">int</span> ans <span class=\"token operator\">=</span> depth<span class=\"token punctuation\">[</span>str_to_int<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> node<span class=\"token punctuation\">.</span>depth<span class=\"token punctuation\">;</span>\n                cout <span class=\"token operator\">&lt;&lt;</span> ans <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>str<span class=\"token punctuation\">[</span>position<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">.</span>str<span class=\"token punctuation\">[</span>position <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>position <span class=\"token operator\">>=</span> <span class=\"token number\">3</span> <span class=\"token operator\">&amp;&amp;</span> position <span class=\"token operator\">&lt;=</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//数字0向上移动</span>\n        <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>str<span class=\"token punctuation\">[</span>position<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">.</span>str<span class=\"token punctuation\">[</span>position <span class=\"token operator\">-</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            str_to_int <span class=\"token operator\">=</span> <span class=\"token function\">hash1</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>visit<span class=\"token punctuation\">[</span>str_to_int<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//没有访问过</span>\n            <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">&#125;</span><span class=\"token comment\">//同上</span>\n            <span class=\"token function\">judge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//同上</span>\n            <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>str<span class=\"token punctuation\">[</span>position<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">.</span>str<span class=\"token punctuation\">[</span>position <span class=\"token operator\">-</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>position <span class=\"token operator\">==</span> <span class=\"token number\">0</span>，<span class=\"token number\">1</span>，<span class=\"token number\">3</span>，<span class=\"token number\">4</span>，<span class=\"token number\">6</span>，<span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//数字0向右移动</span>\n        <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>str<span class=\"token punctuation\">[</span>position<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">.</span>str<span class=\"token punctuation\">[</span>position <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            str_to_int <span class=\"token operator\">=</span> <span class=\"token function\">hash1</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>visit<span class=\"token punctuation\">[</span>str_to_int<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//没有访问过</span>\n            <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">&#125;</span><span class=\"token comment\">//同上</span>\n            <span class=\"token function\">judge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//同上</span>\n            <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>str<span class=\"token punctuation\">[</span>position<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">.</span>str<span class=\"token punctuation\">[</span>position <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>position <span class=\"token operator\">>=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> position <span class=\"token operator\">&lt;=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//数字0向下移动</span>\n        <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>str<span class=\"token punctuation\">[</span>position<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">.</span>str<span class=\"token punctuation\">[</span>position <span class=\"token operator\">+</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            str_to_int <span class=\"token operator\">=</span> <span class=\"token function\">hash1</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>visit<span class=\"token punctuation\">[</span>str_to_int<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//没有访问过</span>\n            <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">&#125;</span><span class=\"token comment\">//同上</span>\n            <span class=\"token function\">judge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//同上</span>\n            <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>str<span class=\"token punctuation\">[</span>position<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">.</span>str<span class=\"token punctuation\">[</span>position <span class=\"token operator\">+</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        Q<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<h3 id=\"a算法\"><a class=\"markdownIt-Anchor\" href=\"#a算法\"></a> A*算法</h3>\n<h3 id=\"a算法代码\"><a class=\"markdownIt-Anchor\" href=\"#a算法代码\"></a> A*算法代码</h3>\n<pre class=\"language-none\"><code class=\"language-none\"></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"题目描述\"><a class=\"markdownIt-Anchor\" href=\"#题目描述\"></a> 题目描述</h2>\n<p>在<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>3</mn><mo>×</mo><mn>3</mn></mrow><annotation encoding=\"application/x-tex\">3×3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">3</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">3</span></span></span></span>的棋盘上，摆有八个棋子，每个棋子上标有<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>至<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>8</mn></mrow><annotation encoding=\"application/x-tex\">8</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">8</span></span></span></span>的某一数字。棋盘中留有一个空格，空格用<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span>来表示。空格周围的棋子可以移到空格中。要求解的问题是：给出一种初始布局（初始状态）和目标布局（为了使题目简单,设目标状态为<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>123804765</mn></mrow><annotation encoding=\"application/x-tex\">123804765</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\">2</span><span class=\"mord\">3</span><span class=\"mord\">8</span><span class=\"mord\">0</span><span class=\"mord\">4</span><span class=\"mord\">7</span><span class=\"mord\">6</span><span class=\"mord\">5</span></span></span></span>），找到一种最少步骤的移动方法，实现从初始布局到目标布局的转变。</p>\n<img src=\"/2022/04/01/8-puzzle/R.png\" alt=\"R\" style=\"zoom:50%;\">\n<h3 id=\"输入输出样例\"><a class=\"markdownIt-Anchor\" href=\"#输入输出样例\"></a> 输入输出样例</h3>\n<p>input1: <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>283104765</mn></mrow><annotation encoding=\"application/x-tex\">283104765</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span><span class=\"mord\">8</span><span class=\"mord\">3</span><span class=\"mord\">1</span><span class=\"mord\">0</span><span class=\"mord\">4</span><span class=\"mord\">7</span><span class=\"mord\">6</span><span class=\"mord\">5</span></span></span></span></p>\n<p>output1: <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>4</mn></mrow><annotation encoding=\"application/x-tex\">4</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">4</span></span></span></span></p>\n<p>input2: <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>603712458</mn></mrow><annotation encoding=\"application/x-tex\">603712458</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">6</span><span class=\"mord\">0</span><span class=\"mord\">3</span><span class=\"mord\">7</span><span class=\"mord\">1</span><span class=\"mord\">2</span><span class=\"mord\">4</span><span class=\"mord\">5</span><span class=\"mord\">8</span></span></span></span></p>\n<p>output2: <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>15</mn></mrow><annotation encoding=\"application/x-tex\">15</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\">5</span></span></span></span></p>\n<p>input3: <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>603712458</mn></mrow><annotation encoding=\"application/x-tex\">603712458</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">6</span><span class=\"mord\">0</span><span class=\"mord\">3</span><span class=\"mord\">7</span><span class=\"mord\">1</span><span class=\"mord\">2</span><span class=\"mord\">4</span><span class=\"mord\">5</span><span class=\"mord\">8</span></span></span></span></p>\n<p>output3: <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>23</mn></mrow><annotation encoding=\"application/x-tex\">23</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span><span class=\"mord\">3</span></span></span></span></p>\n<img src=\"/2022/04/01/8-puzzle/35482241-1605ae76-046d-11e8-87e5-3d8a0cfa8628.gif\" alt=\"35482241-1605ae76-046d-11e8-87e5-3d8a0cfa8628\" style=\"zoom:33%;\">\n<h2 id=\"问题分析\"><a class=\"markdownIt-Anchor\" href=\"#问题分析\"></a> 问题分析</h2>\n<h3 id=\"朴素bfs\"><a class=\"markdownIt-Anchor\" href=\"#朴素bfs\"></a> 朴素BFS</h3>\n<p>看完问题我们最先想到的一定是BFS，因为我们知道起始状态和目标状态，且不需要求解过程，只需要知道执行的步骤，那么DFS自然就不需要了。因此最简单的办法就是套用BFS模板，目标状态的深度即为答案。过程很简单，看代码就可以理解的哈，不理解可以温习一下BFS的原理：<a href=\"https://tonylsx611.github.io/2022/03/10/BFS/\">BFS简介</a></p>\n<img src=\"/2022/04/01/8-puzzle/R1.png\" alt=\"R1\" style=\"zoom:75%;\">\n<h3 id=\"朴素bfs代码\"><a class=\"markdownIt-Anchor\" href=\"#朴素bfs代码\"></a> 朴素BFS代码</h3>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    string start<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> depth<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    queue<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span> Q<span class=\"token punctuation\">;</span>\n    Q<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>Q<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> len<span class=\"token operator\">=</span>Q<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>len<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//while循环内的for循环代表树的深度</span>\n        <span class=\"token punctuation\">&#123;</span>\n            string node<span class=\"token operator\">=</span>Q<span class=\"token punctuation\">.</span><span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">int</span> position<span class=\"token punctuation\">;</span><span class=\"token comment\">//数字0的位置</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token char\">'0'</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//寻找数字0在九宫格的位置</span>\n                position<span class=\"token operator\">=</span>j<span class=\"token punctuation\">;</span>\n            \n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>position <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//数字0向左移动</span>\n            <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">[</span>position<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>node<span class=\"token punctuation\">[</span>position<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//与0交换位置</span>\n\t\t\t\tQ<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token function\">judge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//判断是否是目标状态</span>\n                <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">[</span>position<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>node<span class=\"token punctuation\">[</span>position<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//交换回来</span>\n            <span class=\"token punctuation\">&#125;</span>\n            \n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>position <span class=\"token operator\">==</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//数字0向上移动</span>\n            <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">[</span>position<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>node<span class=\"token punctuation\">[</span>position<span class=\"token operator\">-</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//与0交换位置</span>\n\t\t\t\tQ<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token function\">judge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//判断是否是目标状态</span>\n                <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">[</span>position<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>node<span class=\"token punctuation\">[</span>position<span class=\"token operator\">-</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//交换回来</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>position <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//数字0向右移动</span>\n            <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">[</span>position<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>node<span class=\"token punctuation\">[</span>position<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//与0交换位置</span>\n\t\t\t\tQ<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token function\">judge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//判断是否是目标状态</span>\n                <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">[</span>position<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>node<span class=\"token punctuation\">[</span>position<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//交换回来</span>\n            <span class=\"token punctuation\">&#125;</span>\n\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>position <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//down</span>\n            <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">[</span>position<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>node<span class=\"token punctuation\">[</span>position<span class=\"token operator\">+</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//与0交换位置</span>\n\t\t\t\tQ<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token function\">judge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//判断是否是目标状态</span>\n                <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">[</span>position<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>node<span class=\"token punctuation\">[</span>position<span class=\"token operator\">+</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//交换回来</span>\n            <span class=\"token punctuation\">&#125;</span>\n            Q<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        depth<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<h3 id=\"记忆化bfs搜索\"><a class=\"markdownIt-Anchor\" href=\"#记忆化bfs搜索\"></a> 记忆化BFS搜索</h3>\n<p>但是，这样的搜索显然是有很多重复的节点，会出现返祖现象，就是说后面的搜索包含了前面已经搜索过的节点。比如，数字0第一次向右移动，第二次向左移动，就相当没移动，又回到原来的节点了。那么为了避免这个问题，我们使用一个超大的数组来记录每一次遍历过的节点状态，因为BFS是按照层级顺序搜索的，因此每次搜索前查找一下这个超大数组，如果已经遍历过的节点将不会再次遍历。这样的减枝可以极大的提高搜索效率，可以减少大约50%的重复搜索时间。</p>\n<h3 id=\"记忆化bfs搜索代码\"><a class=\"markdownIt-Anchor\" href=\"#记忆化bfs搜索代码\"></a> 记忆化BFS搜索代码</h3>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\">string disk<span class=\"token punctuation\">[</span><span class=\"token number\">1000001</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//记忆数组</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    string start<span class=\"token punctuation\">;</span>\n    string final<span class=\"token operator\">=</span><span class=\"token string\">\"123804765\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> depth<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> ptr<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    queue<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span> Q<span class=\"token punctuation\">;</span>\n    disk<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>start<span class=\"token punctuation\">;</span>\n    Q<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>Q<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> len<span class=\"token operator\">=</span>Q<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>len<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            string node<span class=\"token operator\">=</span>Q<span class=\"token punctuation\">.</span><span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">int</span> position<span class=\"token punctuation\">;</span><span class=\"token comment\">//数字0的位置</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token char\">'0'</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//寻找数字0在九宫格的位置</span>\n                position<span class=\"token operator\">=</span>j<span class=\"token punctuation\">;</span>\n            \n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>position <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//数字0向左移动</span>\n            <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">[</span>position<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>node<span class=\"token punctuation\">[</span>position<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">//----------------------</span>\n                bool judge<span class=\"token operator\">=</span>true<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span>ptr<span class=\"token punctuation\">;</span>j<span class=\"token operator\">>=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//从后向前检查该节点是否遍历过</span>\n                    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>disk<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span>node<span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">&#123;</span>\n                        judge<span class=\"token operator\">=</span>false<span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>judge<span class=\"token punctuation\">)</span><span class=\"token comment\">//如果没有遍历过</span>\n                <span class=\"token punctuation\">&#123;</span>\n                    Q<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    ptr<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                    disk<span class=\"token punctuation\">[</span>ptr<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>node<span class=\"token operator\">==</span>final<span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">&#123;</span>\n                        cout<span class=\"token operator\">&lt;&lt;</span>depth<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token comment\">//---------------------</span>\n                <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">[</span>position<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>node<span class=\"token punctuation\">[</span>position<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            \n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>position<span class=\"token operator\">></span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//数字0向上移动</span>\n            <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">[</span>position<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>node<span class=\"token punctuation\">[</span>position<span class=\"token operator\">-</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token comment\">//同上</span>\n                <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">[</span>position<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>node<span class=\"token punctuation\">[</span>position<span class=\"token operator\">-</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>position <span class=\"token operator\">==</span> <span class=\"token number\">0</span>，<span class=\"token number\">1</span>，<span class=\"token number\">3</span>，<span class=\"token number\">4</span>，<span class=\"token number\">6</span>，<span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//数字0向右移动</span>\n            <span class=\"token punctuation\">&#123;</span>\n                bool judge<span class=\"token operator\">=</span>true<span class=\"token punctuation\">;</span>\n                <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">[</span>position<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>node<span class=\"token punctuation\">[</span>position<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">//同上</span>\n                <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">[</span>position<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>node<span class=\"token punctuation\">[</span>position<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>position<span class=\"token operator\">&lt;</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//数字0向下移动</span>\n            <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">[</span>position<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>node<span class=\"token punctuation\">[</span>position<span class=\"token operator\">+</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token comment\">//同上</span>\n                <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">[</span>position<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>node<span class=\"token punctuation\">[</span>position<span class=\"token operator\">+</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            Q<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        depth<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<h3 id=\"双向bfs\"><a class=\"markdownIt-Anchor\" href=\"#双向bfs\"></a> 双向BFS</h3>\n<p>虽然上述方法已经很快了，但是执行<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>I</mi><mi>n</mi><mi>p</mi><mi>u</mi><mi>t</mi><mn>3</mn></mrow><annotation encoding=\"application/x-tex\">Input3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">I</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\">p</span><span class=\"mord mathdefault\">u</span><span class=\"mord mathdefault\">t</span><span class=\"mord\">3</span></span></span></span>依旧需要将近20秒的时间，因此当节点很深的时候，我们有没有更快的办法呢？</p>\n<p>对于本题而言，双向BFS就派上用场了，因为本题已知起始状态和目标状态，我们完全可以同时对这两个状态进行BFS，当两面搜索到了同一个节点时，两面的深度之和就是答案。如图所示，同样的，对于一些走迷宫类的问题，给出起始状态和中止状态，我们都可以考虑使用双向BFS来求解。这种方法有多快呢， 对于<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>I</mi><mi>n</mi><mi>p</mi><mi>u</mi><mi>t</mi><mn>3</mn></mrow><annotation encoding=\"application/x-tex\">Input3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">I</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\">p</span><span class=\"mord mathdefault\">u</span><span class=\"mord mathdefault\">t</span><span class=\"mord\">3</span></span></span></span>而言，使用双向BFS求解的时间仅需<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>0.3</mn><mi>s</mi></mrow><annotation encoding=\"application/x-tex\">0.3s</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">3</span><span class=\"mord mathdefault\">s</span></span></span></span>，是单向BFS速度的近百倍！</p>\n<img src=\"/2022/04/01/8-puzzle/R.024c89daf1b60db70d608b4b73215e76\" alt=\"查看源图像\" style=\"zoom:50%;\">\n<p>这里，我们对代码进行了一些小小的优化，将原本的disk数组更换成了更高效的<strong>哈希映射</strong>，通过<strong>康托展开</strong>将<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>0</mn><mo>−</mo><mn>8</mn></mrow><annotation encoding=\"application/x-tex\">0-8</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">8</span></span></span></span>的全排列一一映射到大小仅为<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>362880</mn></mrow><annotation encoding=\"application/x-tex\">362880</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">3</span><span class=\"mord\">6</span><span class=\"mord\">2</span><span class=\"mord\">8</span><span class=\"mord\">8</span><span class=\"mord\">0</span></span></span></span>的哈希表中。或许你会疑惑，原本应该至少需要开<code>disk[876543210]</code>这么大的数组，怎么只需要<code>disk[362880]</code>就可以储存的下呢？我们来看一下康托展开的具体实现方式：<a href=\"https://baike.baidu.com/item/%E5%BA%B7%E6%89%98%E5%B1%95%E5%BC%80/7968428?msclkid=92fc5a9ab32e11ec926143771748963a\">康托展开_百度百科 (baidu.com)</a>.</p>\n<p>是不是很神奇呢？</p>\n<h3 id=\"双向bfs代码\"><a class=\"markdownIt-Anchor\" href=\"#双向bfs代码\"></a> 双向BFS代码</h3>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;string></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;queue></span></span>\nusing namespace std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">ant</span>\n<span class=\"token punctuation\">&#123;</span>\n    string str<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> depth<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">short</span> one_two<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> visit<span class=\"token punctuation\">[</span><span class=\"token number\">362880</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> depth<span class=\"token punctuation\">[</span><span class=\"token number\">362880</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">bfs</span><span class=\"token punctuation\">(</span>string begin<span class=\"token punctuation\">,</span> string end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//双向BFS</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">hash1</span><span class=\"token punctuation\">(</span>string s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//康托展开</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    string final <span class=\"token operator\">=</span> <span class=\"token string\">\"123804765\"</span><span class=\"token punctuation\">;</span>\n    string start <span class=\"token operator\">=</span><span class=\"token string\">\"603712458\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">bfs</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">,</span> final<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">hash1</span><span class=\"token punctuation\">(</span>string s<span class=\"token punctuation\">)</span><span class=\"token comment\">//康托展开</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> f<span class=\"token punctuation\">[</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">24</span><span class=\"token punctuation\">,</span><span class=\"token number\">120</span><span class=\"token punctuation\">,</span><span class=\"token number\">720</span><span class=\"token punctuation\">,</span><span class=\"token number\">5040</span><span class=\"token punctuation\">,</span><span class=\"token number\">40320</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> book<span class=\"token punctuation\">[</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> ans<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> x<span class=\"token operator\">=</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> num<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        book<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token char\">'0'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token char\">'0'</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>book<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n                num<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        x<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n        ans<span class=\"token operator\">+=</span>num<span class=\"token operator\">*</span>f<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> ans<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">bfs</span><span class=\"token punctuation\">(</span>string begin<span class=\"token punctuation\">,</span> string end<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    queue<span class=\"token operator\">&lt;</span>ant<span class=\"token operator\">></span> Q<span class=\"token punctuation\">;</span>\n    ant temp<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> str_to_int<span class=\"token punctuation\">;</span><span class=\"token comment\">//哈希转换</span>\n\n    temp<span class=\"token punctuation\">.</span>str <span class=\"token operator\">=</span> begin<span class=\"token punctuation\">;</span>\n    temp<span class=\"token punctuation\">.</span>depth <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    temp<span class=\"token punctuation\">.</span>one_two <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//1代表正向BFS</span>\n    Q<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    str_to_int <span class=\"token operator\">=</span> <span class=\"token function\">hash1</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">.</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    visit<span class=\"token punctuation\">[</span>str_to_int<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//depth[str_to_int] = 0;</span>\n\n    temp<span class=\"token punctuation\">.</span>str <span class=\"token operator\">=</span> end<span class=\"token punctuation\">;</span>\n    temp<span class=\"token punctuation\">.</span>depth <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    temp<span class=\"token punctuation\">.</span>one_two <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    Q<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    str_to_int <span class=\"token operator\">=</span> <span class=\"token function\">hash1</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">.</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    visit<span class=\"token punctuation\">[</span>str_to_int<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//2代表反向BFS</span>\n    <span class=\"token comment\">//depth[str_to_int] = 0;</span>\n\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>Q<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        ant node <span class=\"token operator\">=</span> Q<span class=\"token punctuation\">.</span><span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        node<span class=\"token punctuation\">.</span>depth<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">int</span> position <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//position是数字0所在的位置</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">9</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>str<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token char\">'0'</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">&#123;</span>\n                position <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n\n\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>position <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//数字0向左移动</span>\n        <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>str<span class=\"token punctuation\">[</span>position<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">.</span>str<span class=\"token punctuation\">[</span>position <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            str_to_int <span class=\"token operator\">=</span> <span class=\"token function\">hash1</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>visit<span class=\"token punctuation\">[</span>str_to_int<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//没有访问过</span>\n            <span class=\"token punctuation\">&#123;</span>\n                Q<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                visit<span class=\"token punctuation\">[</span>str_to_int<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>one_two<span class=\"token punctuation\">;</span>\n                depth<span class=\"token punctuation\">[</span>str_to_int<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>depth<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>visit<span class=\"token punctuation\">[</span>str_to_int<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> node<span class=\"token punctuation\">.</span>one_two <span class=\"token operator\">==</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//一个是1，一个是2，代表相遇</span>\n            <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">int</span> ans <span class=\"token operator\">=</span> depth<span class=\"token punctuation\">[</span>str_to_int<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> node<span class=\"token punctuation\">.</span>depth<span class=\"token punctuation\">;</span>\n                cout <span class=\"token operator\">&lt;&lt;</span> ans <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>str<span class=\"token punctuation\">[</span>position<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">.</span>str<span class=\"token punctuation\">[</span>position <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>position <span class=\"token operator\">>=</span> <span class=\"token number\">3</span> <span class=\"token operator\">&amp;&amp;</span> position <span class=\"token operator\">&lt;=</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//数字0向上移动</span>\n        <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>str<span class=\"token punctuation\">[</span>position<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">.</span>str<span class=\"token punctuation\">[</span>position <span class=\"token operator\">-</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            str_to_int <span class=\"token operator\">=</span> <span class=\"token function\">hash1</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>visit<span class=\"token punctuation\">[</span>str_to_int<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//没有访问过</span>\n            <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">&#125;</span><span class=\"token comment\">//同上</span>\n            <span class=\"token function\">judge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//同上</span>\n            <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>str<span class=\"token punctuation\">[</span>position<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">.</span>str<span class=\"token punctuation\">[</span>position <span class=\"token operator\">-</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>position <span class=\"token operator\">==</span> <span class=\"token number\">0</span>，<span class=\"token number\">1</span>，<span class=\"token number\">3</span>，<span class=\"token number\">4</span>，<span class=\"token number\">6</span>，<span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//数字0向右移动</span>\n        <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>str<span class=\"token punctuation\">[</span>position<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">.</span>str<span class=\"token punctuation\">[</span>position <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            str_to_int <span class=\"token operator\">=</span> <span class=\"token function\">hash1</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>visit<span class=\"token punctuation\">[</span>str_to_int<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//没有访问过</span>\n            <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">&#125;</span><span class=\"token comment\">//同上</span>\n            <span class=\"token function\">judge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//同上</span>\n            <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>str<span class=\"token punctuation\">[</span>position<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">.</span>str<span class=\"token punctuation\">[</span>position <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>position <span class=\"token operator\">>=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> position <span class=\"token operator\">&lt;=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//数字0向下移动</span>\n        <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>str<span class=\"token punctuation\">[</span>position<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">.</span>str<span class=\"token punctuation\">[</span>position <span class=\"token operator\">+</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            str_to_int <span class=\"token operator\">=</span> <span class=\"token function\">hash1</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>visit<span class=\"token punctuation\">[</span>str_to_int<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//没有访问过</span>\n            <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">&#125;</span><span class=\"token comment\">//同上</span>\n            <span class=\"token function\">judge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//同上</span>\n            <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>str<span class=\"token punctuation\">[</span>position<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">.</span>str<span class=\"token punctuation\">[</span>position <span class=\"token operator\">+</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        Q<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<h3 id=\"a算法\"><a class=\"markdownIt-Anchor\" href=\"#a算法\"></a> A*算法</h3>\n<h3 id=\"a算法代码\"><a class=\"markdownIt-Anchor\" href=\"#a算法代码\"></a> A*算法代码</h3>\n<pre class=\"language-none\"><code class=\"language-none\"></code></pre>\n"},{"title":"BFS简介","date":"2022-03-10T09:43:09.000Z","katex":true,"_content":"\n## BFS基本概念\n\n**广度优先算法**（Breadth-First-Search），简称BFS，是一种图形搜索演算法，最糟糕的情况算法时间复杂度为O(V+E)。简单的说，BFS是从根节点开始，沿着树的宽度遍历树的节点，如果发现目标，则演算终止。\n\n## **经典例题**\n\n------\n\n### 1. 填涂颜色\n\n#### 题目描述\n\n由数字$0$组成的方阵中，有一任意形状闭合圈，闭合圈由数字$1$构成，围圈时只走上下左右$4$个方向。现要求把闭合圈内的所有空间都填写成$2$。例如：$6×6$的方阵$(n=6)$，涂色前和涂色后的方阵如下：\n\n```bash\n0 0 0 0 0 0\n0 0 1 1 1 1\n0 1 1 0 0 1\n1 1 0 0 0 1\n1 0 0 0 0 1\n1 1 1 1 1 1\n-----------\n0 0 0 0 0 0\n0 0 1 1 1 1\n0 1 1 2 2 1\n1 1 2 2 2 1\n1 2 2 2 2 1\n1 1 1 1 1 1\n```\n\n#### 输入格式\n\n每组测试数据第一行一个整数$n(1≤n≤30)$\n\n接下来$n$行，由$0$和$1$组成的$n×n$的方阵。\n\n方阵内只有一个闭合圈，圈内至少有一个$0$。\n\n#### 输出格式\n\n已经填好数字$2$的完整方阵。\n\n#### 输入输出样例\n\n**输入 #1**\n\n```bash\n6\n0 0 0 0 0 0\n0 0 1 1 1 1\n0 1 1 0 0 1\n1 1 0 0 0 1\n1 0 0 0 0 1\n1 1 1 1 1 1\n```\n\n**输出 #1**\n\n```bash\n0 0 0 0 0 0\n0 0 1 1 1 1\n0 1 1 2 2 1\n1 1 2 2 2 1\n1 2 2 2 2 1\n1 1 1 1 1 1\n```\n\n#### 说明/提示\n\n$1≤n≤30$\n\n#### 答案解析\n\n```c\n#include<iostream>\nusing namespace std;\nint num[40][40];\nint main()\n{\n    int c,i,j,k;\n    cin>>c;\n    for(i=1;i<=c;i++)\n\t\tfor(j=1;j<=c;j++)\n    {\n        cin>>num[i][j];\n        if(num[i][j]==0)\n\t\t\tnum[i][j]=2;\n        //先认为所有的0都应该被修改,并且真的把它修改成了2;\n    }\n    for(i=1;i<=c;i++)\n    {\n        //边角上的'2'其实本来不应该被修改的,那我们把他们改回去,改成0\n        if(num[1][i]==2)\n\t\t\tnum[1][i]=0;\n        if(num[i][1]==2)\t\n\t\t\tnum[i][1]=0;\n        if(num[c][i]==2)\n\t\t\tnum[c][i]=0;\n        if(num[i][c]==2)\n\t\t\tnum[i][c]=0;\n    }\n    //然后来寻找与这些零相邻的'2',它们其实也是被改错了的\n    for(k=1;k<=100;k++)//广度优先搜索 阈值=100 (事实上不需要那么多)\n    \tfor(i=1;i<=c;i++)\n    \t\tfor(j=1;j<=c;j++)\n    \t\t    if(num[i][j]!=1)\n    \t\t\t    if(!num[i][j-1]||!num[i-1][j]||!num[i+1][j]||!num[i][j+1])\n    \t\t\t\t    num[i][j]=0; \n    for(i=1;i<=c;i++)\n    {\n        for(j=1;j<=c;j++)\n        cout<<num[i][j]<<\" \";\n        cout<<endl;\n    }\n    return 0;\n}\n```\n\n当然，本题仍可以用DFS来做：\n\n```c\n#include <cstdio>\nusing namespace std;\nint n;\nint a[32][32];\nvoid dfs(int x, int y)\n{\n    if(x >= 0 && x <= n + 1 && y >= 0 && y <= n + 1)\n    {\n        if(a[x][y] == 1 || a[x][y] == 3) \n        \treturn ;\n        else\n        {\n        \ta[x][y] = 3;\n            dfs(x + 1, y); \n            dfs(x - 1, y);\n            dfs(x, y + 1); \n            dfs(x, y - 1);\n        }\n    }\n}\nint main()\n{\n    scanf(\"%d\", &n);\n    for(int i = 1; i <= n; ++ i)\n    \tfor(int j = 1; j <= n; ++ j)\n    \t\tscanf(\"%d\", &a[i][j]);\n    dfs(0, 0);\n    for(int i = 1; i <= n; ++ i)\n    \tfor(int j = 1; j <= n; ++ j)\n    \t\tif(a[i][j] == 3) \n    \t\t\ta[i][j] = 0;\n    \t\telse \n    \t\t\tif(a[i][j] == 0) \n    \t\t\t\ta[i][j] = 2;\n    for(int i = 1; i <= n; ++ i)\n    {\n    \tfor(int j = 1; j <= n; ++ j) \n    \t\tprintf(\"%d \", a[i][j]);\n    \tprintf(\"\\n\")\n    }\n    return 0;\n}\n```\n\n注意：dfs在先搜索的时候应该搜索到矩阵的外面一圈$(0， n + 1)$ 否则的话就会出现错误！(边缘处被涂色)\n\n------\n\n### 01迷宫\n\n#### 题目描述\n\n有一个仅由数字$0$与$1$组成的$n×n$格迷宫。若你位于一格$0$上，那么你可以移动到相邻$4$格中的某一格$1$上，同样若你位于一格$1$上，那么你可以移动到相邻$4$格中的某一格$0$上。\n\n你的任务是：对于给定的迷宫，询问从某一格开始能移动到多少个格子（包含自身）。\n\n#### 输入格式\n\n第$1$行为两个正整数$n,m$。\n\n下面$n$行，每行*$n$*个字符，字符只可能是$0$或者$1$，字符之间没有空格。\n\n接下来$m$行，每行$2$个用空格分隔的正整数$i,j$，对应了迷宫中第$i$行第$j$列的一个格子，询问从这一格开始能移动到多少格。\n\n#### 输出格式\n\n$m$行，对于每个询问输出相应答案。\n\n#### 输入输出样例\n\n**输入 #1**\n\n```bash\n2 2\n01\n10\n1 1\n2 2\n```\n\n**输出 #1**\n\n```bash\n4\n4\n```\n\n#### 说明/提示\n\n对于20%的数据，$n≤10$；\n\n对于40%的数据，$n≤50$；\n\n对于50%的数据，$m≤5$；\n\n对于60%的数据，$n*≤100,*m≤100$；\n\n对于100%的数据，$n*≤1000,*m≤100000$。\n\n#### 答案解析\n\nBFS，70分代码：\n\n```c\n#include<iostream>\n#include<cstring>\nusing namespace std;\nstruct mg\n{\n    int x,y;\n};\nbool map[1001][1001];\nbool flag[1001][1001];\nmg q[1000001];\nint m,n;\nvoid bfs(int x,int y);\nint main()\n{\n\tcin>>n>>m;\n\tchar ch;\n\tfor(int i=1;i<=n;i++)\n\t\tfor(int j=1;j<=n;j++)\n\t\t{\n\t\t\tcin>>ch;\n\t\t\tif(ch=='1')\n\t\t\t\tmap[i][j]=true;\n\t\t}\n\tfor(int i=0;i<m;i++)\n\t{\n\t\tint x,y;\n\t\tcin>>x>>y;\n\t\tbfs(x,y);\n\t}\n\treturn 0;\n}\nvoid bfs(int x,int y)\n{\n\tint dx[4]={0,0,-1,1};\n    int dy[4]={1,-1,0,0};\n    int ans,f,r,newx,newy;\n    ans=f=r=1;\n    q[f].x=x;\n    q[f].y=y;\n    memset(flag,false,sizeof(flag));\n    flag[x][y]=true;\n    while(f<=r)\n    {\n    \tfor(int i=0;i<4;i++)\n    \t{\n    \t\tnewx=q[f].x+dx[i];\n    \t\tnewy=q[f].y+dy[i];\n    \t\tif(newx>0 && newx<=n && newy>0 && newy<=n && !flag[newx][newy])\n    \t\t\tif((map[q[f].x][q[f].y]==0 && map[newx][newy]==1) || (map[q[f].x][q[f].y]==1 && map[newx][newy]==0))\n    \t\t\t{\n    \t\t\t\tr++;\n    \t\t\t\tans++;\n    \t\t\t\tflag[newx][newy]=true;\n    \t\t\t\tq[r].x=newx;\n    \t\t\t\tq[r].y=newy;\n\t\t\t\t}\n\t\t}\n\t\tf++;\n\t}\n\tcout<<ans<<endl;\n } \n```\n\n有三个点TEL，所以对代码进行一定时间优化，学名叫记忆化搜索，以时间换空间，优化如下：\n\n```c\n#include<iostream>\n#include<cstring>\nusing namespace std;\nstruct mg\n{\n    int x,y;\n};\nbool map[1001][1001];\nbool flag[1001][1001];\nint a[1001][1001];\nmg q[5000001];\nint m,n;\nvoid bfs(int x,int y);\nint main()\n{\n\tcin>>n>>m;\n\tchar ch;\n\tfor(int i=1;i<=n;i++)\n\t\tfor(int j=1;j<=n;j++)\n\t\t{\n\t\t\tcin>>ch;\n\t\t\tif(ch=='1')\n\t\t\t\tmap[i][j]=true;\n\t\t}\n\tfor(int i=0;i<m;i++)\n\t{\n\t\tint x,y;\n\t\tcin>>x>>y;\n\t\tif(a[x][y]==0)\n\t\t\tbfs(x,y);\n\t\telse\n\t\t\tcout<<a[x][y]<<endl;\n\t}\n\treturn 0;\n}\nvoid bfs(int x,int y)\n{\n\tint dx[4]={0,0,-1,1};\n    int dy[4]={1,-1,0,0};\n    int ans,f,r,newx,newy;\n    ans=f=r=1;\n    q[f].x=x;\n    q[f].y=y;\n    memset(flag,false,sizeof(flag));\n    flag[x][y]=true;\n    while(f<=r)\n    {\n    \tfor(int i=0;i<4;i++)\n    \t{\n    \t\tnewx=q[f].x+dx[i];\n    \t\tnewy=q[f].y+dy[i];\n    \t\tif(newx>0 && newx<=n && newy>0 && newy<=n && !flag[newx][newy])\n    \t\t\tif((map[q[f].x][q[f].y]==0 && map[newx][newy]==1) || (map[q[f].x][q[f].y]==1 && map[newx][newy]==0))\n    \t\t\t{\n    \t\t\t\tr++;\n    \t\t\t\tans++;\n    \t\t\t\tflag[newx][newy]=true;\n    \t\t\t\tq[r].x=newx;\n    \t\t\t\tq[r].y=newy;\n\t\t\t\t}\n\t\t}\n\t\tf++;\n\t}\n\tfor(int i=1;i<n;i++)\n\t\tfor(int j=1;j<n;j++)\n\t\t\tif(flag[i][j])\n\t\t\t\ta[i][j]=ans;\n\tcout<<ans<<endl;\n } \n```\n\n当然，本题也可以用DFS来做，读者可以先自行写一写，不要看下面的答案：\n\n```c\n#include<cstdio>\n#include<cstring>\nint n,m,x,y;\nint ans[100002],f[1002][1002];\nchar s[1002][1002];\nvoid dfs(int r,int c,int z,int lll)\n{\n    if (r<0 || r>=n || c<0 || c>=n || f[r][c]!=-1 || s[r][c]-'0'!=z)\n        return;\n    f[r][c]=lll;\n    ans[lll]++;\n    dfs(r-1,c,!z,lll);\n    dfs(r+1,c,!z,lll);\n    dfs(r,c-1,!z,lll);\n    dfs(r,c+1,!z,lll);\n}\nint main()\n{\n    scanf(\"%d%d\",&n,&m);\n    for (int i=0;i<n;i++)\n    \tscanf(\"%s\",s[i]);\n    memset(f,-1,sizeof(f));\n    for (int i=0;i<m;i++)\n    {\n        scanf(\"%d%d\",&x,&y);\n        x--;\n        y--;\n        if (f[x][y]==-1)\n            dfs(x,y,s[x][y]-'0',i);\n        else \n            ans[i]=ans[f[x][y]];\n    }\n    for (int i=0;i<m;i++)\n    \tprintf(\"%d\\n\",ans[i]);\n    return 0;\n}\n```\n\n$$\nEND\n$$\n\n","source":"_posts/BFS.md","raw":"---\ntitle: BFS简介\ndate: 2022-03-10 17:43:09\ntags:\n\t- algorithm\n\t- BFS\n\t- DFS\ncategories:\n\t- algorithm\nkatex: true\n---\n\n## BFS基本概念\n\n**广度优先算法**（Breadth-First-Search），简称BFS，是一种图形搜索演算法，最糟糕的情况算法时间复杂度为O(V+E)。简单的说，BFS是从根节点开始，沿着树的宽度遍历树的节点，如果发现目标，则演算终止。\n\n## **经典例题**\n\n------\n\n### 1. 填涂颜色\n\n#### 题目描述\n\n由数字$0$组成的方阵中，有一任意形状闭合圈，闭合圈由数字$1$构成，围圈时只走上下左右$4$个方向。现要求把闭合圈内的所有空间都填写成$2$。例如：$6×6$的方阵$(n=6)$，涂色前和涂色后的方阵如下：\n\n```bash\n0 0 0 0 0 0\n0 0 1 1 1 1\n0 1 1 0 0 1\n1 1 0 0 0 1\n1 0 0 0 0 1\n1 1 1 1 1 1\n-----------\n0 0 0 0 0 0\n0 0 1 1 1 1\n0 1 1 2 2 1\n1 1 2 2 2 1\n1 2 2 2 2 1\n1 1 1 1 1 1\n```\n\n#### 输入格式\n\n每组测试数据第一行一个整数$n(1≤n≤30)$\n\n接下来$n$行，由$0$和$1$组成的$n×n$的方阵。\n\n方阵内只有一个闭合圈，圈内至少有一个$0$。\n\n#### 输出格式\n\n已经填好数字$2$的完整方阵。\n\n#### 输入输出样例\n\n**输入 #1**\n\n```bash\n6\n0 0 0 0 0 0\n0 0 1 1 1 1\n0 1 1 0 0 1\n1 1 0 0 0 1\n1 0 0 0 0 1\n1 1 1 1 1 1\n```\n\n**输出 #1**\n\n```bash\n0 0 0 0 0 0\n0 0 1 1 1 1\n0 1 1 2 2 1\n1 1 2 2 2 1\n1 2 2 2 2 1\n1 1 1 1 1 1\n```\n\n#### 说明/提示\n\n$1≤n≤30$\n\n#### 答案解析\n\n```c\n#include<iostream>\nusing namespace std;\nint num[40][40];\nint main()\n{\n    int c,i,j,k;\n    cin>>c;\n    for(i=1;i<=c;i++)\n\t\tfor(j=1;j<=c;j++)\n    {\n        cin>>num[i][j];\n        if(num[i][j]==0)\n\t\t\tnum[i][j]=2;\n        //先认为所有的0都应该被修改,并且真的把它修改成了2;\n    }\n    for(i=1;i<=c;i++)\n    {\n        //边角上的'2'其实本来不应该被修改的,那我们把他们改回去,改成0\n        if(num[1][i]==2)\n\t\t\tnum[1][i]=0;\n        if(num[i][1]==2)\t\n\t\t\tnum[i][1]=0;\n        if(num[c][i]==2)\n\t\t\tnum[c][i]=0;\n        if(num[i][c]==2)\n\t\t\tnum[i][c]=0;\n    }\n    //然后来寻找与这些零相邻的'2',它们其实也是被改错了的\n    for(k=1;k<=100;k++)//广度优先搜索 阈值=100 (事实上不需要那么多)\n    \tfor(i=1;i<=c;i++)\n    \t\tfor(j=1;j<=c;j++)\n    \t\t    if(num[i][j]!=1)\n    \t\t\t    if(!num[i][j-1]||!num[i-1][j]||!num[i+1][j]||!num[i][j+1])\n    \t\t\t\t    num[i][j]=0; \n    for(i=1;i<=c;i++)\n    {\n        for(j=1;j<=c;j++)\n        cout<<num[i][j]<<\" \";\n        cout<<endl;\n    }\n    return 0;\n}\n```\n\n当然，本题仍可以用DFS来做：\n\n```c\n#include <cstdio>\nusing namespace std;\nint n;\nint a[32][32];\nvoid dfs(int x, int y)\n{\n    if(x >= 0 && x <= n + 1 && y >= 0 && y <= n + 1)\n    {\n        if(a[x][y] == 1 || a[x][y] == 3) \n        \treturn ;\n        else\n        {\n        \ta[x][y] = 3;\n            dfs(x + 1, y); \n            dfs(x - 1, y);\n            dfs(x, y + 1); \n            dfs(x, y - 1);\n        }\n    }\n}\nint main()\n{\n    scanf(\"%d\", &n);\n    for(int i = 1; i <= n; ++ i)\n    \tfor(int j = 1; j <= n; ++ j)\n    \t\tscanf(\"%d\", &a[i][j]);\n    dfs(0, 0);\n    for(int i = 1; i <= n; ++ i)\n    \tfor(int j = 1; j <= n; ++ j)\n    \t\tif(a[i][j] == 3) \n    \t\t\ta[i][j] = 0;\n    \t\telse \n    \t\t\tif(a[i][j] == 0) \n    \t\t\t\ta[i][j] = 2;\n    for(int i = 1; i <= n; ++ i)\n    {\n    \tfor(int j = 1; j <= n; ++ j) \n    \t\tprintf(\"%d \", a[i][j]);\n    \tprintf(\"\\n\")\n    }\n    return 0;\n}\n```\n\n注意：dfs在先搜索的时候应该搜索到矩阵的外面一圈$(0， n + 1)$ 否则的话就会出现错误！(边缘处被涂色)\n\n------\n\n### 01迷宫\n\n#### 题目描述\n\n有一个仅由数字$0$与$1$组成的$n×n$格迷宫。若你位于一格$0$上，那么你可以移动到相邻$4$格中的某一格$1$上，同样若你位于一格$1$上，那么你可以移动到相邻$4$格中的某一格$0$上。\n\n你的任务是：对于给定的迷宫，询问从某一格开始能移动到多少个格子（包含自身）。\n\n#### 输入格式\n\n第$1$行为两个正整数$n,m$。\n\n下面$n$行，每行*$n$*个字符，字符只可能是$0$或者$1$，字符之间没有空格。\n\n接下来$m$行，每行$2$个用空格分隔的正整数$i,j$，对应了迷宫中第$i$行第$j$列的一个格子，询问从这一格开始能移动到多少格。\n\n#### 输出格式\n\n$m$行，对于每个询问输出相应答案。\n\n#### 输入输出样例\n\n**输入 #1**\n\n```bash\n2 2\n01\n10\n1 1\n2 2\n```\n\n**输出 #1**\n\n```bash\n4\n4\n```\n\n#### 说明/提示\n\n对于20%的数据，$n≤10$；\n\n对于40%的数据，$n≤50$；\n\n对于50%的数据，$m≤5$；\n\n对于60%的数据，$n*≤100,*m≤100$；\n\n对于100%的数据，$n*≤1000,*m≤100000$。\n\n#### 答案解析\n\nBFS，70分代码：\n\n```c\n#include<iostream>\n#include<cstring>\nusing namespace std;\nstruct mg\n{\n    int x,y;\n};\nbool map[1001][1001];\nbool flag[1001][1001];\nmg q[1000001];\nint m,n;\nvoid bfs(int x,int y);\nint main()\n{\n\tcin>>n>>m;\n\tchar ch;\n\tfor(int i=1;i<=n;i++)\n\t\tfor(int j=1;j<=n;j++)\n\t\t{\n\t\t\tcin>>ch;\n\t\t\tif(ch=='1')\n\t\t\t\tmap[i][j]=true;\n\t\t}\n\tfor(int i=0;i<m;i++)\n\t{\n\t\tint x,y;\n\t\tcin>>x>>y;\n\t\tbfs(x,y);\n\t}\n\treturn 0;\n}\nvoid bfs(int x,int y)\n{\n\tint dx[4]={0,0,-1,1};\n    int dy[4]={1,-1,0,0};\n    int ans,f,r,newx,newy;\n    ans=f=r=1;\n    q[f].x=x;\n    q[f].y=y;\n    memset(flag,false,sizeof(flag));\n    flag[x][y]=true;\n    while(f<=r)\n    {\n    \tfor(int i=0;i<4;i++)\n    \t{\n    \t\tnewx=q[f].x+dx[i];\n    \t\tnewy=q[f].y+dy[i];\n    \t\tif(newx>0 && newx<=n && newy>0 && newy<=n && !flag[newx][newy])\n    \t\t\tif((map[q[f].x][q[f].y]==0 && map[newx][newy]==1) || (map[q[f].x][q[f].y]==1 && map[newx][newy]==0))\n    \t\t\t{\n    \t\t\t\tr++;\n    \t\t\t\tans++;\n    \t\t\t\tflag[newx][newy]=true;\n    \t\t\t\tq[r].x=newx;\n    \t\t\t\tq[r].y=newy;\n\t\t\t\t}\n\t\t}\n\t\tf++;\n\t}\n\tcout<<ans<<endl;\n } \n```\n\n有三个点TEL，所以对代码进行一定时间优化，学名叫记忆化搜索，以时间换空间，优化如下：\n\n```c\n#include<iostream>\n#include<cstring>\nusing namespace std;\nstruct mg\n{\n    int x,y;\n};\nbool map[1001][1001];\nbool flag[1001][1001];\nint a[1001][1001];\nmg q[5000001];\nint m,n;\nvoid bfs(int x,int y);\nint main()\n{\n\tcin>>n>>m;\n\tchar ch;\n\tfor(int i=1;i<=n;i++)\n\t\tfor(int j=1;j<=n;j++)\n\t\t{\n\t\t\tcin>>ch;\n\t\t\tif(ch=='1')\n\t\t\t\tmap[i][j]=true;\n\t\t}\n\tfor(int i=0;i<m;i++)\n\t{\n\t\tint x,y;\n\t\tcin>>x>>y;\n\t\tif(a[x][y]==0)\n\t\t\tbfs(x,y);\n\t\telse\n\t\t\tcout<<a[x][y]<<endl;\n\t}\n\treturn 0;\n}\nvoid bfs(int x,int y)\n{\n\tint dx[4]={0,0,-1,1};\n    int dy[4]={1,-1,0,0};\n    int ans,f,r,newx,newy;\n    ans=f=r=1;\n    q[f].x=x;\n    q[f].y=y;\n    memset(flag,false,sizeof(flag));\n    flag[x][y]=true;\n    while(f<=r)\n    {\n    \tfor(int i=0;i<4;i++)\n    \t{\n    \t\tnewx=q[f].x+dx[i];\n    \t\tnewy=q[f].y+dy[i];\n    \t\tif(newx>0 && newx<=n && newy>0 && newy<=n && !flag[newx][newy])\n    \t\t\tif((map[q[f].x][q[f].y]==0 && map[newx][newy]==1) || (map[q[f].x][q[f].y]==1 && map[newx][newy]==0))\n    \t\t\t{\n    \t\t\t\tr++;\n    \t\t\t\tans++;\n    \t\t\t\tflag[newx][newy]=true;\n    \t\t\t\tq[r].x=newx;\n    \t\t\t\tq[r].y=newy;\n\t\t\t\t}\n\t\t}\n\t\tf++;\n\t}\n\tfor(int i=1;i<n;i++)\n\t\tfor(int j=1;j<n;j++)\n\t\t\tif(flag[i][j])\n\t\t\t\ta[i][j]=ans;\n\tcout<<ans<<endl;\n } \n```\n\n当然，本题也可以用DFS来做，读者可以先自行写一写，不要看下面的答案：\n\n```c\n#include<cstdio>\n#include<cstring>\nint n,m,x,y;\nint ans[100002],f[1002][1002];\nchar s[1002][1002];\nvoid dfs(int r,int c,int z,int lll)\n{\n    if (r<0 || r>=n || c<0 || c>=n || f[r][c]!=-1 || s[r][c]-'0'!=z)\n        return;\n    f[r][c]=lll;\n    ans[lll]++;\n    dfs(r-1,c,!z,lll);\n    dfs(r+1,c,!z,lll);\n    dfs(r,c-1,!z,lll);\n    dfs(r,c+1,!z,lll);\n}\nint main()\n{\n    scanf(\"%d%d\",&n,&m);\n    for (int i=0;i<n;i++)\n    \tscanf(\"%s\",s[i]);\n    memset(f,-1,sizeof(f));\n    for (int i=0;i<m;i++)\n    {\n        scanf(\"%d%d\",&x,&y);\n        x--;\n        y--;\n        if (f[x][y]==-1)\n            dfs(x,y,s[x][y]-'0',i);\n        else \n            ans[i]=ans[f[x][y]];\n    }\n    for (int i=0;i<m;i++)\n    \tprintf(\"%d\\n\",ans[i]);\n    return 0;\n}\n```\n\n$$\nEND\n$$\n\n","slug":"BFS","published":1,"updated":"2022-03-13T14:32:27.783Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1rj2n4u0003gwcy9cmlcn69","content":"<h2 id=\"bfs基本概念\"><a class=\"markdownIt-Anchor\" href=\"#bfs基本概念\"></a> BFS基本概念</h2>\n<p><strong>广度优先算法</strong>（Breadth-First-Search），简称BFS，是一种图形搜索演算法，最糟糕的情况算法时间复杂度为O(V+E)。简单的说，BFS是从根节点开始，沿着树的宽度遍历树的节点，如果发现目标，则演算终止。</p>\n<h2 id=\"经典例题\"><a class=\"markdownIt-Anchor\" href=\"#经典例题\"></a> <strong>经典例题</strong></h2>\n<hr>\n<h3 id=\"1-填涂颜色\"><a class=\"markdownIt-Anchor\" href=\"#1-填涂颜色\"></a> 1. 填涂颜色</h3>\n<h4 id=\"题目描述\"><a class=\"markdownIt-Anchor\" href=\"#题目描述\"></a> 题目描述</h4>\n<p>由数字<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span>组成的方阵中，有一任意形状闭合圈，闭合圈由数字<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>构成，围圈时只走上下左右<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>4</mn></mrow><annotation encoding=\"application/x-tex\">4</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">4</span></span></span></span>个方向。现要求把闭合圈内的所有空间都填写成<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span></span></span></span>。例如：<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>6</mn><mo>×</mo><mn>6</mn></mrow><annotation encoding=\"application/x-tex\">6×6</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">6</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">6</span></span></span></span>的方阵<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo stretchy=\"false\">(</mo><mi>n</mi><mo>=</mo><mn>6</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(n=6)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">6</span><span class=\"mclose\">)</span></span></span></span>，涂色前和涂色后的方阵如下：</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span>\n<span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span>\n<span class=\"token number\">0</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">1</span>\n<span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">1</span>\n<span class=\"token number\">1</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">1</span>\n<span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span>\n-----------\n<span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span>\n<span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span>\n<span class=\"token number\">0</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">2</span> <span class=\"token number\">2</span> <span class=\"token number\">1</span>\n<span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">2</span> <span class=\"token number\">2</span> <span class=\"token number\">2</span> <span class=\"token number\">1</span>\n<span class=\"token number\">1</span> <span class=\"token number\">2</span> <span class=\"token number\">2</span> <span class=\"token number\">2</span> <span class=\"token number\">2</span> <span class=\"token number\">1</span>\n<span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span></code></pre>\n<h4 id=\"输入格式\"><a class=\"markdownIt-Anchor\" href=\"#输入格式\"></a> 输入格式</h4>\n<p>每组测试数据第一行一个整数<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>n</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo>≤</mo><mi>n</mi><mo>≤</mo><mn>30</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">n(1≤n≤30)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">n</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mord mathdefault\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">3</span><span class=\"mord\">0</span><span class=\"mclose\">)</span></span></span></span></p>\n<p>接下来<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">n</span></span></span></span>行，由<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span>和<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>组成的<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>n</mi><mo>×</mo><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n×n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">n</span></span></span></span>的方阵。</p>\n<p>方阵内只有一个闭合圈，圈内至少有一个<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span>。</p>\n<h4 id=\"输出格式\"><a class=\"markdownIt-Anchor\" href=\"#输出格式\"></a> 输出格式</h4>\n<p>已经填好数字<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span></span></span></span>的完整方阵。</p>\n<h4 id=\"输入输出样例\"><a class=\"markdownIt-Anchor\" href=\"#输入输出样例\"></a> 输入输出样例</h4>\n<p><strong>输入 #1</strong></p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token number\">6</span>\n<span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span>\n<span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span>\n<span class=\"token number\">0</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">1</span>\n<span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">1</span>\n<span class=\"token number\">1</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">1</span>\n<span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span></code></pre>\n<p><strong>输出 #1</strong></p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span>\n<span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span>\n<span class=\"token number\">0</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">2</span> <span class=\"token number\">2</span> <span class=\"token number\">1</span>\n<span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">2</span> <span class=\"token number\">2</span> <span class=\"token number\">2</span> <span class=\"token number\">1</span>\n<span class=\"token number\">1</span> <span class=\"token number\">2</span> <span class=\"token number\">2</span> <span class=\"token number\">2</span> <span class=\"token number\">2</span> <span class=\"token number\">1</span>\n<span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span></code></pre>\n<h4 id=\"说明提示\"><a class=\"markdownIt-Anchor\" href=\"#说明提示\"></a> 说明/提示</h4>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>1</mn><mo>≤</mo><mi>n</mi><mo>≤</mo><mn>30</mn></mrow><annotation encoding=\"application/x-tex\">1≤n≤30</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.78041em;vertical-align:-0.13597em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mord mathdefault\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">3</span><span class=\"mord\">0</span></span></span></span></p>\n<h4 id=\"答案解析\"><a class=\"markdownIt-Anchor\" href=\"#答案解析\"></a> 答案解析</h4>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream></span></span>\nusing namespace std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> num<span class=\"token punctuation\">[</span><span class=\"token number\">40</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">40</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> c<span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">,</span>k<span class=\"token punctuation\">;</span>\n    cin<span class=\"token operator\">>></span>c<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>c<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;=</span>c<span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        cin<span class=\"token operator\">>></span>num<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t\tnum<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//先认为所有的0都应该被修改,并且真的把它修改成了2;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>c<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//边角上的'2'其实本来不应该被修改的,那我们把他们改回去,改成0</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\t\t\tnum<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\t\n\t\t\tnum<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\t\t\tnum<span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\t\t\tnum<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">//然后来寻找与这些零相邻的'2',它们其实也是被改错了的</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>k<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>k<span class=\"token operator\">&lt;=</span><span class=\"token number\">100</span><span class=\"token punctuation\">;</span>k<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//广度优先搜索 阈值=100 (事实上不需要那么多)</span>\n    \t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>c<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    \t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;=</span>c<span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    \t\t    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">!=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    \t\t\t    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>num<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">||</span><span class=\"token operator\">!</span>num<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">||</span><span class=\"token operator\">!</span>num<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">||</span><span class=\"token operator\">!</span>num<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    \t\t\t\t    num<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> \n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>c<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;=</span>c<span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        cout<span class=\"token operator\">&lt;&lt;</span>num<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n        cout<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<p>当然，本题仍可以用DFS来做：</p>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstdio></span></span>\nusing namespace std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> n<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">32</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">32</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">>=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> x <span class=\"token operator\">&lt;=</span> n <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> y <span class=\"token operator\">>=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> y <span class=\"token operator\">&lt;=</span> n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token operator\">||</span> a<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> \n        \t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">else</span>\n        <span class=\"token punctuation\">&#123;</span>\n        \ta<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n            <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n            <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span> i<span class=\"token punctuation\">)</span>\n    \t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span> j<span class=\"token punctuation\">)</span>\n    \t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span> i<span class=\"token punctuation\">)</span>\n    \t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span> j<span class=\"token punctuation\">)</span>\n    \t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> \n    \t\t\ta<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    \t\t<span class=\"token keyword\">else</span> \n    \t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> \n    \t\t\t\ta<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span> i<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n    \t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span> j<span class=\"token punctuation\">)</span> \n    \t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<p>注意：dfs在先搜索的时候应该搜索到矩阵的外面一圈<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo stretchy=\"false\">(</mo><mn>0</mn><mi mathvariant=\"normal\">，</mi><mi>n</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(0， n + 1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mord cjk_fallback\">，</span><span class=\"mord mathdefault\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span> 否则的话就会出现错误！(边缘处被涂色)</p>\n<hr>\n<h3 id=\"01迷宫\"><a class=\"markdownIt-Anchor\" href=\"#01迷宫\"></a> 01迷宫</h3>\n<h4 id=\"题目描述-2\"><a class=\"markdownIt-Anchor\" href=\"#题目描述-2\"></a> 题目描述</h4>\n<p>有一个仅由数字<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span>与<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>组成的<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>n</mi><mo>×</mo><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n×n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">n</span></span></span></span>格迷宫。若你位于一格<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span>上，那么你可以移动到相邻<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>4</mn></mrow><annotation encoding=\"application/x-tex\">4</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">4</span></span></span></span>格中的某一格<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>上，同样若你位于一格<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>上，那么你可以移动到相邻<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>4</mn></mrow><annotation encoding=\"application/x-tex\">4</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">4</span></span></span></span>格中的某一格<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span>上。</p>\n<p>你的任务是：对于给定的迷宫，询问从某一格开始能移动到多少个格子（包含自身）。</p>\n<h4 id=\"输入格式-2\"><a class=\"markdownIt-Anchor\" href=\"#输入格式-2\"></a> 输入格式</h4>\n<p>第<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>行为两个正整数<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>n</mi><mo separator=\"true\">,</mo><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">n,m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\">n</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\">m</span></span></span></span>。</p>\n<p>下面<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">n</span></span></span></span>行，每行*<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">n</span></span></span></span>*个字符，字符只可能是<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span>或者<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>，字符之间没有空格。</p>\n<p>接下来<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">m</span></span></span></span>行，每行<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span></span></span></span>个用空格分隔的正整数<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>i</mi><mo separator=\"true\">,</mo><mi>j</mi></mrow><annotation encoding=\"application/x-tex\">i,j</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.85396em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\">i</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05724em;\">j</span></span></span></span>，对应了迷宫中第<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">i</span></span></span></span>行第<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>j</mi></mrow><annotation encoding=\"application/x-tex\">j</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.85396em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05724em;\">j</span></span></span></span>列的一个格子，询问从这一格开始能移动到多少格。</p>\n<h4 id=\"输出格式-2\"><a class=\"markdownIt-Anchor\" href=\"#输出格式-2\"></a> 输出格式</h4>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">m</span></span></span></span>行，对于每个询问输出相应答案。</p>\n<h4 id=\"输入输出样例-2\"><a class=\"markdownIt-Anchor\" href=\"#输入输出样例-2\"></a> 输入输出样例</h4>\n<p><strong>输入 #1</strong></p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token number\">2</span> <span class=\"token number\">2</span>\n01\n<span class=\"token number\">10</span>\n<span class=\"token number\">1</span> <span class=\"token number\">1</span>\n<span class=\"token number\">2</span> <span class=\"token number\">2</span></code></pre>\n<p><strong>输出 #1</strong></p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token number\">4</span>\n<span class=\"token number\">4</span></code></pre>\n<h4 id=\"说明提示-2\"><a class=\"markdownIt-Anchor\" href=\"#说明提示-2\"></a> 说明/提示</h4>\n<p>对于20%的数据，<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>n</mi><mo>≤</mo><mn>10</mn></mrow><annotation encoding=\"application/x-tex\">n≤10</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mord mathdefault\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\">0</span></span></span></span>；</p>\n<p>对于40%的数据，<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>n</mi><mo>≤</mo><mn>50</mn></mrow><annotation encoding=\"application/x-tex\">n≤50</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mord mathdefault\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">5</span><span class=\"mord\">0</span></span></span></span>；</p>\n<p>对于50%的数据，<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>m</mi><mo>≤</mo><mn>5</mn></mrow><annotation encoding=\"application/x-tex\">m≤5</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mord mathdefault\">m</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">5</span></span></span></span>；</p>\n<p>对于60%的数据，<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>n</mi><mo>∗</mo><mo>≤</mo><mn>100</mn><mo separator=\"true\">,</mo><mo>∗</mo><mi>m</mi><mo>≤</mo><mn>100</mn></mrow><annotation encoding=\"application/x-tex\">n*≤100,*m≤100</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mord mathdefault\">n</span><span class=\"mord\">∗</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8388800000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord\">1</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">∗</span><span class=\"mord mathdefault\">m</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\">0</span><span class=\"mord\">0</span></span></span></span>；</p>\n<p>对于100%的数据，<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>n</mi><mo>∗</mo><mo>≤</mo><mn>1000</mn><mo separator=\"true\">,</mo><mo>∗</mo><mi>m</mi><mo>≤</mo><mn>100000</mn></mrow><annotation encoding=\"application/x-tex\">n*≤1000,*m≤100000</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mord mathdefault\">n</span><span class=\"mord\">∗</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8388800000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord\">1</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">∗</span><span class=\"mord mathdefault\">m</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">0</span></span></span></span>。</p>\n<h4 id=\"答案解析-2\"><a class=\"markdownIt-Anchor\" href=\"#答案解析-2\"></a> 答案解析</h4>\n<p>BFS，70分代码：</p>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;cstring></span></span>\nusing namespace std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">mg</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\nbool map<span class=\"token punctuation\">[</span><span class=\"token number\">1001</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1001</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nbool flag<span class=\"token punctuation\">[</span><span class=\"token number\">1001</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1001</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nmg q<span class=\"token punctuation\">[</span><span class=\"token number\">1000001</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> m<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">bfs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\tcin<span class=\"token operator\">>></span>n<span class=\"token operator\">>></span>m<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">char</span> ch<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\tcin<span class=\"token operator\">>></span>ch<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ch<span class=\"token operator\">==</span><span class=\"token char\">'1'</span><span class=\"token punctuation\">)</span>\n\t\t\t\tmap<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>true<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>m<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">;</span>\n\t\tcin<span class=\"token operator\">>></span>x<span class=\"token operator\">>></span>y<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">bfs</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">bfs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> dx<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> dy<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> ans<span class=\"token punctuation\">,</span>f<span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">,</span>newx<span class=\"token punctuation\">,</span>newy<span class=\"token punctuation\">;</span>\n    ans<span class=\"token operator\">=</span>f<span class=\"token operator\">=</span>r<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    q<span class=\"token punctuation\">[</span>f<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>x<span class=\"token operator\">=</span>x<span class=\"token punctuation\">;</span>\n    q<span class=\"token punctuation\">[</span>f<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>y<span class=\"token operator\">=</span>y<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">,</span>false<span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    flag<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>true<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>f<span class=\"token operator\">&lt;=</span>r<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n    \t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">4</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    \t<span class=\"token punctuation\">&#123;</span>\n    \t\tnewx<span class=\"token operator\">=</span>q<span class=\"token punctuation\">[</span>f<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>x<span class=\"token operator\">+</span>dx<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    \t\tnewy<span class=\"token operator\">=</span>q<span class=\"token punctuation\">[</span>f<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>y<span class=\"token operator\">+</span>dy<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    \t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>newx<span class=\"token operator\">></span><span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> newx<span class=\"token operator\">&lt;=</span>n <span class=\"token operator\">&amp;&amp;</span> newy<span class=\"token operator\">></span><span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> newy<span class=\"token operator\">&lt;=</span>n <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>flag<span class=\"token punctuation\">[</span>newx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>newy<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    \t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">[</span>q<span class=\"token punctuation\">[</span>f<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>q<span class=\"token punctuation\">[</span>f<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> map<span class=\"token punctuation\">[</span>newx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>newy<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">[</span>q<span class=\"token punctuation\">[</span>f<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>q<span class=\"token punctuation\">[</span>f<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> map<span class=\"token punctuation\">[</span>newx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>newy<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    \t\t\t<span class=\"token punctuation\">&#123;</span>\n    \t\t\t\tr<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    \t\t\t\tans<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    \t\t\t\tflag<span class=\"token punctuation\">[</span>newx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>newy<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>true<span class=\"token punctuation\">;</span>\n    \t\t\t\tq<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>x<span class=\"token operator\">=</span>newx<span class=\"token punctuation\">;</span>\n    \t\t\t\tq<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>y<span class=\"token operator\">=</span>newy<span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\tf<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tcout<span class=\"token operator\">&lt;&lt;</span>ans<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">&#125;</span> </code></pre>\n<p>有三个点TEL，所以对代码进行一定时间优化，学名叫记忆化搜索，以时间换空间，优化如下：</p>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;cstring></span></span>\nusing namespace std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">mg</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\nbool map<span class=\"token punctuation\">[</span><span class=\"token number\">1001</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1001</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nbool flag<span class=\"token punctuation\">[</span><span class=\"token number\">1001</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1001</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">1001</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1001</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nmg q<span class=\"token punctuation\">[</span><span class=\"token number\">5000001</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> m<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">bfs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\tcin<span class=\"token operator\">>></span>n<span class=\"token operator\">>></span>m<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">char</span> ch<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\tcin<span class=\"token operator\">>></span>ch<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ch<span class=\"token operator\">==</span><span class=\"token char\">'1'</span><span class=\"token punctuation\">)</span>\n\t\t\t\tmap<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>true<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>m<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">;</span>\n\t\tcin<span class=\"token operator\">>></span>x<span class=\"token operator\">>></span>y<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token function\">bfs</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">else</span>\n\t\t\tcout<span class=\"token operator\">&lt;&lt;</span>a<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">bfs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> dx<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> dy<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> ans<span class=\"token punctuation\">,</span>f<span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">,</span>newx<span class=\"token punctuation\">,</span>newy<span class=\"token punctuation\">;</span>\n    ans<span class=\"token operator\">=</span>f<span class=\"token operator\">=</span>r<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    q<span class=\"token punctuation\">[</span>f<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>x<span class=\"token operator\">=</span>x<span class=\"token punctuation\">;</span>\n    q<span class=\"token punctuation\">[</span>f<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>y<span class=\"token operator\">=</span>y<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">,</span>false<span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    flag<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>true<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>f<span class=\"token operator\">&lt;=</span>r<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n    \t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">4</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    \t<span class=\"token punctuation\">&#123;</span>\n    \t\tnewx<span class=\"token operator\">=</span>q<span class=\"token punctuation\">[</span>f<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>x<span class=\"token operator\">+</span>dx<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    \t\tnewy<span class=\"token operator\">=</span>q<span class=\"token punctuation\">[</span>f<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>y<span class=\"token operator\">+</span>dy<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    \t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>newx<span class=\"token operator\">></span><span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> newx<span class=\"token operator\">&lt;=</span>n <span class=\"token operator\">&amp;&amp;</span> newy<span class=\"token operator\">></span><span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> newy<span class=\"token operator\">&lt;=</span>n <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>flag<span class=\"token punctuation\">[</span>newx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>newy<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    \t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">[</span>q<span class=\"token punctuation\">[</span>f<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>q<span class=\"token punctuation\">[</span>f<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> map<span class=\"token punctuation\">[</span>newx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>newy<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">[</span>q<span class=\"token punctuation\">[</span>f<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>q<span class=\"token punctuation\">[</span>f<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> map<span class=\"token punctuation\">[</span>newx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>newy<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    \t\t\t<span class=\"token punctuation\">&#123;</span>\n    \t\t\t\tr<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    \t\t\t\tans<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    \t\t\t\tflag<span class=\"token punctuation\">[</span>newx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>newy<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>true<span class=\"token punctuation\">;</span>\n    \t\t\t\tq<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>x<span class=\"token operator\">=</span>newx<span class=\"token punctuation\">;</span>\n    \t\t\t\tq<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>y<span class=\"token operator\">=</span>newy<span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\tf<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\t\t\t\ta<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>ans<span class=\"token punctuation\">;</span>\n\tcout<span class=\"token operator\">&lt;&lt;</span>ans<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">&#125;</span> </code></pre>\n<p>当然，本题也可以用DFS来做，读者可以先自行写一写，不要看下面的答案：</p>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;cstdio></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;cstring></span></span>\n<span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span>m<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> ans<span class=\"token punctuation\">[</span><span class=\"token number\">100002</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>f<span class=\"token punctuation\">[</span><span class=\"token number\">1002</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1002</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">char</span> s<span class=\"token punctuation\">[</span><span class=\"token number\">1002</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1002</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> r<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> c<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> z<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> lll<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>r<span class=\"token operator\">&lt;</span><span class=\"token number\">0</span> <span class=\"token operator\">||</span> r<span class=\"token operator\">>=</span>n <span class=\"token operator\">||</span> c<span class=\"token operator\">&lt;</span><span class=\"token number\">0</span> <span class=\"token operator\">||</span> c<span class=\"token operator\">>=</span>n <span class=\"token operator\">||</span> f<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">]</span><span class=\"token operator\">!=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">||</span> s<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token char\">'0'</span><span class=\"token operator\">!=</span>z<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    f<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>lll<span class=\"token punctuation\">;</span>\n    ans<span class=\"token punctuation\">[</span>lll<span class=\"token punctuation\">]</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>r<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">,</span><span class=\"token operator\">!</span>z<span class=\"token punctuation\">,</span>lll<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>r<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">,</span><span class=\"token operator\">!</span>z<span class=\"token punctuation\">,</span>lll<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">,</span>c<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token operator\">!</span>z<span class=\"token punctuation\">,</span>lll<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">,</span>c<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token operator\">!</span>z<span class=\"token punctuation\">,</span>lll<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    \t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\"</span><span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>m<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        x<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n        y<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n            <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token char\">'0'</span><span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">else</span> \n            ans<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>ans<span class=\"token punctuation\">[</span>f<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>m<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    \t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span>ans<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>E</mi><mi>N</mi><mi>D</mi></mrow><annotation encoding=\"application/x-tex\">END\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">N</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">D</span></span></span></span></span></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"bfs基本概念\"><a class=\"markdownIt-Anchor\" href=\"#bfs基本概念\"></a> BFS基本概念</h2>\n<p><strong>广度优先算法</strong>（Breadth-First-Search），简称BFS，是一种图形搜索演算法，最糟糕的情况算法时间复杂度为O(V+E)。简单的说，BFS是从根节点开始，沿着树的宽度遍历树的节点，如果发现目标，则演算终止。</p>\n<h2 id=\"经典例题\"><a class=\"markdownIt-Anchor\" href=\"#经典例题\"></a> <strong>经典例题</strong></h2>\n<hr>\n<h3 id=\"1-填涂颜色\"><a class=\"markdownIt-Anchor\" href=\"#1-填涂颜色\"></a> 1. 填涂颜色</h3>\n<h4 id=\"题目描述\"><a class=\"markdownIt-Anchor\" href=\"#题目描述\"></a> 题目描述</h4>\n<p>由数字<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span>组成的方阵中，有一任意形状闭合圈，闭合圈由数字<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>构成，围圈时只走上下左右<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>4</mn></mrow><annotation encoding=\"application/x-tex\">4</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">4</span></span></span></span>个方向。现要求把闭合圈内的所有空间都填写成<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span></span></span></span>。例如：<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>6</mn><mo>×</mo><mn>6</mn></mrow><annotation encoding=\"application/x-tex\">6×6</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">6</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">6</span></span></span></span>的方阵<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo stretchy=\"false\">(</mo><mi>n</mi><mo>=</mo><mn>6</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(n=6)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">6</span><span class=\"mclose\">)</span></span></span></span>，涂色前和涂色后的方阵如下：</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span>\n<span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span>\n<span class=\"token number\">0</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">1</span>\n<span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">1</span>\n<span class=\"token number\">1</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">1</span>\n<span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span>\n-----------\n<span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span>\n<span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span>\n<span class=\"token number\">0</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">2</span> <span class=\"token number\">2</span> <span class=\"token number\">1</span>\n<span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">2</span> <span class=\"token number\">2</span> <span class=\"token number\">2</span> <span class=\"token number\">1</span>\n<span class=\"token number\">1</span> <span class=\"token number\">2</span> <span class=\"token number\">2</span> <span class=\"token number\">2</span> <span class=\"token number\">2</span> <span class=\"token number\">1</span>\n<span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span></code></pre>\n<h4 id=\"输入格式\"><a class=\"markdownIt-Anchor\" href=\"#输入格式\"></a> 输入格式</h4>\n<p>每组测试数据第一行一个整数<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>n</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo>≤</mo><mi>n</mi><mo>≤</mo><mn>30</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">n(1≤n≤30)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">n</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mord mathdefault\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">3</span><span class=\"mord\">0</span><span class=\"mclose\">)</span></span></span></span></p>\n<p>接下来<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">n</span></span></span></span>行，由<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span>和<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>组成的<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>n</mi><mo>×</mo><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n×n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">n</span></span></span></span>的方阵。</p>\n<p>方阵内只有一个闭合圈，圈内至少有一个<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span>。</p>\n<h4 id=\"输出格式\"><a class=\"markdownIt-Anchor\" href=\"#输出格式\"></a> 输出格式</h4>\n<p>已经填好数字<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span></span></span></span>的完整方阵。</p>\n<h4 id=\"输入输出样例\"><a class=\"markdownIt-Anchor\" href=\"#输入输出样例\"></a> 输入输出样例</h4>\n<p><strong>输入 #1</strong></p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token number\">6</span>\n<span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span>\n<span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span>\n<span class=\"token number\">0</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">1</span>\n<span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">1</span>\n<span class=\"token number\">1</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">1</span>\n<span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span></code></pre>\n<p><strong>输出 #1</strong></p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span>\n<span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span>\n<span class=\"token number\">0</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">2</span> <span class=\"token number\">2</span> <span class=\"token number\">1</span>\n<span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">2</span> <span class=\"token number\">2</span> <span class=\"token number\">2</span> <span class=\"token number\">1</span>\n<span class=\"token number\">1</span> <span class=\"token number\">2</span> <span class=\"token number\">2</span> <span class=\"token number\">2</span> <span class=\"token number\">2</span> <span class=\"token number\">1</span>\n<span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span></code></pre>\n<h4 id=\"说明提示\"><a class=\"markdownIt-Anchor\" href=\"#说明提示\"></a> 说明/提示</h4>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>1</mn><mo>≤</mo><mi>n</mi><mo>≤</mo><mn>30</mn></mrow><annotation encoding=\"application/x-tex\">1≤n≤30</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.78041em;vertical-align:-0.13597em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mord mathdefault\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">3</span><span class=\"mord\">0</span></span></span></span></p>\n<h4 id=\"答案解析\"><a class=\"markdownIt-Anchor\" href=\"#答案解析\"></a> 答案解析</h4>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream></span></span>\nusing namespace std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> num<span class=\"token punctuation\">[</span><span class=\"token number\">40</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">40</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> c<span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">,</span>k<span class=\"token punctuation\">;</span>\n    cin<span class=\"token operator\">>></span>c<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>c<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;=</span>c<span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        cin<span class=\"token operator\">>></span>num<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t\tnum<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//先认为所有的0都应该被修改,并且真的把它修改成了2;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>c<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//边角上的'2'其实本来不应该被修改的,那我们把他们改回去,改成0</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\t\t\tnum<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\t\n\t\t\tnum<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\t\t\tnum<span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\t\t\tnum<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">//然后来寻找与这些零相邻的'2',它们其实也是被改错了的</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>k<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>k<span class=\"token operator\">&lt;=</span><span class=\"token number\">100</span><span class=\"token punctuation\">;</span>k<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//广度优先搜索 阈值=100 (事实上不需要那么多)</span>\n    \t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>c<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    \t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;=</span>c<span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    \t\t    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">!=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    \t\t\t    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>num<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">||</span><span class=\"token operator\">!</span>num<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">||</span><span class=\"token operator\">!</span>num<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">||</span><span class=\"token operator\">!</span>num<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    \t\t\t\t    num<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> \n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>c<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;=</span>c<span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        cout<span class=\"token operator\">&lt;&lt;</span>num<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n        cout<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<p>当然，本题仍可以用DFS来做：</p>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstdio></span></span>\nusing namespace std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> n<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">32</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">32</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">>=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> x <span class=\"token operator\">&lt;=</span> n <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> y <span class=\"token operator\">>=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> y <span class=\"token operator\">&lt;=</span> n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token operator\">||</span> a<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> \n        \t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">else</span>\n        <span class=\"token punctuation\">&#123;</span>\n        \ta<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n            <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n            <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span> i<span class=\"token punctuation\">)</span>\n    \t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span> j<span class=\"token punctuation\">)</span>\n    \t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span> i<span class=\"token punctuation\">)</span>\n    \t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span> j<span class=\"token punctuation\">)</span>\n    \t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> \n    \t\t\ta<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    \t\t<span class=\"token keyword\">else</span> \n    \t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> \n    \t\t\t\ta<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span> i<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n    \t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span> j<span class=\"token punctuation\">)</span> \n    \t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<p>注意：dfs在先搜索的时候应该搜索到矩阵的外面一圈<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo stretchy=\"false\">(</mo><mn>0</mn><mi mathvariant=\"normal\">，</mi><mi>n</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(0， n + 1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mord cjk_fallback\">，</span><span class=\"mord mathdefault\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span> 否则的话就会出现错误！(边缘处被涂色)</p>\n<hr>\n<h3 id=\"01迷宫\"><a class=\"markdownIt-Anchor\" href=\"#01迷宫\"></a> 01迷宫</h3>\n<h4 id=\"题目描述-2\"><a class=\"markdownIt-Anchor\" href=\"#题目描述-2\"></a> 题目描述</h4>\n<p>有一个仅由数字<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span>与<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>组成的<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>n</mi><mo>×</mo><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n×n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">n</span></span></span></span>格迷宫。若你位于一格<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span>上，那么你可以移动到相邻<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>4</mn></mrow><annotation encoding=\"application/x-tex\">4</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">4</span></span></span></span>格中的某一格<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>上，同样若你位于一格<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>上，那么你可以移动到相邻<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>4</mn></mrow><annotation encoding=\"application/x-tex\">4</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">4</span></span></span></span>格中的某一格<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span>上。</p>\n<p>你的任务是：对于给定的迷宫，询问从某一格开始能移动到多少个格子（包含自身）。</p>\n<h4 id=\"输入格式-2\"><a class=\"markdownIt-Anchor\" href=\"#输入格式-2\"></a> 输入格式</h4>\n<p>第<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>行为两个正整数<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>n</mi><mo separator=\"true\">,</mo><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">n,m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\">n</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\">m</span></span></span></span>。</p>\n<p>下面<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">n</span></span></span></span>行，每行*<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">n</span></span></span></span>*个字符，字符只可能是<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span>或者<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>，字符之间没有空格。</p>\n<p>接下来<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">m</span></span></span></span>行，每行<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span></span></span></span>个用空格分隔的正整数<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>i</mi><mo separator=\"true\">,</mo><mi>j</mi></mrow><annotation encoding=\"application/x-tex\">i,j</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.85396em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\">i</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05724em;\">j</span></span></span></span>，对应了迷宫中第<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">i</span></span></span></span>行第<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>j</mi></mrow><annotation encoding=\"application/x-tex\">j</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.85396em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05724em;\">j</span></span></span></span>列的一个格子，询问从这一格开始能移动到多少格。</p>\n<h4 id=\"输出格式-2\"><a class=\"markdownIt-Anchor\" href=\"#输出格式-2\"></a> 输出格式</h4>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">m</span></span></span></span>行，对于每个询问输出相应答案。</p>\n<h4 id=\"输入输出样例-2\"><a class=\"markdownIt-Anchor\" href=\"#输入输出样例-2\"></a> 输入输出样例</h4>\n<p><strong>输入 #1</strong></p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token number\">2</span> <span class=\"token number\">2</span>\n01\n<span class=\"token number\">10</span>\n<span class=\"token number\">1</span> <span class=\"token number\">1</span>\n<span class=\"token number\">2</span> <span class=\"token number\">2</span></code></pre>\n<p><strong>输出 #1</strong></p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token number\">4</span>\n<span class=\"token number\">4</span></code></pre>\n<h4 id=\"说明提示-2\"><a class=\"markdownIt-Anchor\" href=\"#说明提示-2\"></a> 说明/提示</h4>\n<p>对于20%的数据，<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>n</mi><mo>≤</mo><mn>10</mn></mrow><annotation encoding=\"application/x-tex\">n≤10</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mord mathdefault\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\">0</span></span></span></span>；</p>\n<p>对于40%的数据，<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>n</mi><mo>≤</mo><mn>50</mn></mrow><annotation encoding=\"application/x-tex\">n≤50</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mord mathdefault\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">5</span><span class=\"mord\">0</span></span></span></span>；</p>\n<p>对于50%的数据，<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>m</mi><mo>≤</mo><mn>5</mn></mrow><annotation encoding=\"application/x-tex\">m≤5</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mord mathdefault\">m</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">5</span></span></span></span>；</p>\n<p>对于60%的数据，<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>n</mi><mo>∗</mo><mo>≤</mo><mn>100</mn><mo separator=\"true\">,</mo><mo>∗</mo><mi>m</mi><mo>≤</mo><mn>100</mn></mrow><annotation encoding=\"application/x-tex\">n*≤100,*m≤100</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mord mathdefault\">n</span><span class=\"mord\">∗</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8388800000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord\">1</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">∗</span><span class=\"mord mathdefault\">m</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\">0</span><span class=\"mord\">0</span></span></span></span>；</p>\n<p>对于100%的数据，<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>n</mi><mo>∗</mo><mo>≤</mo><mn>1000</mn><mo separator=\"true\">,</mo><mo>∗</mo><mi>m</mi><mo>≤</mo><mn>100000</mn></mrow><annotation encoding=\"application/x-tex\">n*≤1000,*m≤100000</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mord mathdefault\">n</span><span class=\"mord\">∗</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8388800000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord\">1</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">∗</span><span class=\"mord mathdefault\">m</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">0</span></span></span></span>。</p>\n<h4 id=\"答案解析-2\"><a class=\"markdownIt-Anchor\" href=\"#答案解析-2\"></a> 答案解析</h4>\n<p>BFS，70分代码：</p>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;cstring></span></span>\nusing namespace std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">mg</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\nbool map<span class=\"token punctuation\">[</span><span class=\"token number\">1001</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1001</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nbool flag<span class=\"token punctuation\">[</span><span class=\"token number\">1001</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1001</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nmg q<span class=\"token punctuation\">[</span><span class=\"token number\">1000001</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> m<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">bfs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\tcin<span class=\"token operator\">>></span>n<span class=\"token operator\">>></span>m<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">char</span> ch<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\tcin<span class=\"token operator\">>></span>ch<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ch<span class=\"token operator\">==</span><span class=\"token char\">'1'</span><span class=\"token punctuation\">)</span>\n\t\t\t\tmap<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>true<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>m<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">;</span>\n\t\tcin<span class=\"token operator\">>></span>x<span class=\"token operator\">>></span>y<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">bfs</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">bfs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> dx<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> dy<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> ans<span class=\"token punctuation\">,</span>f<span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">,</span>newx<span class=\"token punctuation\">,</span>newy<span class=\"token punctuation\">;</span>\n    ans<span class=\"token operator\">=</span>f<span class=\"token operator\">=</span>r<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    q<span class=\"token punctuation\">[</span>f<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>x<span class=\"token operator\">=</span>x<span class=\"token punctuation\">;</span>\n    q<span class=\"token punctuation\">[</span>f<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>y<span class=\"token operator\">=</span>y<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">,</span>false<span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    flag<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>true<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>f<span class=\"token operator\">&lt;=</span>r<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n    \t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">4</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    \t<span class=\"token punctuation\">&#123;</span>\n    \t\tnewx<span class=\"token operator\">=</span>q<span class=\"token punctuation\">[</span>f<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>x<span class=\"token operator\">+</span>dx<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    \t\tnewy<span class=\"token operator\">=</span>q<span class=\"token punctuation\">[</span>f<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>y<span class=\"token operator\">+</span>dy<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    \t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>newx<span class=\"token operator\">></span><span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> newx<span class=\"token operator\">&lt;=</span>n <span class=\"token operator\">&amp;&amp;</span> newy<span class=\"token operator\">></span><span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> newy<span class=\"token operator\">&lt;=</span>n <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>flag<span class=\"token punctuation\">[</span>newx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>newy<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    \t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">[</span>q<span class=\"token punctuation\">[</span>f<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>q<span class=\"token punctuation\">[</span>f<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> map<span class=\"token punctuation\">[</span>newx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>newy<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">[</span>q<span class=\"token punctuation\">[</span>f<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>q<span class=\"token punctuation\">[</span>f<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> map<span class=\"token punctuation\">[</span>newx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>newy<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    \t\t\t<span class=\"token punctuation\">&#123;</span>\n    \t\t\t\tr<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    \t\t\t\tans<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    \t\t\t\tflag<span class=\"token punctuation\">[</span>newx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>newy<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>true<span class=\"token punctuation\">;</span>\n    \t\t\t\tq<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>x<span class=\"token operator\">=</span>newx<span class=\"token punctuation\">;</span>\n    \t\t\t\tq<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>y<span class=\"token operator\">=</span>newy<span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\tf<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tcout<span class=\"token operator\">&lt;&lt;</span>ans<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">&#125;</span> </code></pre>\n<p>有三个点TEL，所以对代码进行一定时间优化，学名叫记忆化搜索，以时间换空间，优化如下：</p>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;cstring></span></span>\nusing namespace std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">mg</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\nbool map<span class=\"token punctuation\">[</span><span class=\"token number\">1001</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1001</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nbool flag<span class=\"token punctuation\">[</span><span class=\"token number\">1001</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1001</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">1001</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1001</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nmg q<span class=\"token punctuation\">[</span><span class=\"token number\">5000001</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> m<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">bfs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\tcin<span class=\"token operator\">>></span>n<span class=\"token operator\">>></span>m<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">char</span> ch<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\tcin<span class=\"token operator\">>></span>ch<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ch<span class=\"token operator\">==</span><span class=\"token char\">'1'</span><span class=\"token punctuation\">)</span>\n\t\t\t\tmap<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>true<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>m<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">;</span>\n\t\tcin<span class=\"token operator\">>></span>x<span class=\"token operator\">>></span>y<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token function\">bfs</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">else</span>\n\t\t\tcout<span class=\"token operator\">&lt;&lt;</span>a<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">bfs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> dx<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> dy<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> ans<span class=\"token punctuation\">,</span>f<span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">,</span>newx<span class=\"token punctuation\">,</span>newy<span class=\"token punctuation\">;</span>\n    ans<span class=\"token operator\">=</span>f<span class=\"token operator\">=</span>r<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    q<span class=\"token punctuation\">[</span>f<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>x<span class=\"token operator\">=</span>x<span class=\"token punctuation\">;</span>\n    q<span class=\"token punctuation\">[</span>f<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>y<span class=\"token operator\">=</span>y<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">,</span>false<span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    flag<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>true<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>f<span class=\"token operator\">&lt;=</span>r<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n    \t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">4</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    \t<span class=\"token punctuation\">&#123;</span>\n    \t\tnewx<span class=\"token operator\">=</span>q<span class=\"token punctuation\">[</span>f<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>x<span class=\"token operator\">+</span>dx<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    \t\tnewy<span class=\"token operator\">=</span>q<span class=\"token punctuation\">[</span>f<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>y<span class=\"token operator\">+</span>dy<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    \t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>newx<span class=\"token operator\">></span><span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> newx<span class=\"token operator\">&lt;=</span>n <span class=\"token operator\">&amp;&amp;</span> newy<span class=\"token operator\">></span><span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> newy<span class=\"token operator\">&lt;=</span>n <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>flag<span class=\"token punctuation\">[</span>newx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>newy<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    \t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">[</span>q<span class=\"token punctuation\">[</span>f<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>q<span class=\"token punctuation\">[</span>f<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> map<span class=\"token punctuation\">[</span>newx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>newy<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">[</span>q<span class=\"token punctuation\">[</span>f<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>q<span class=\"token punctuation\">[</span>f<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> map<span class=\"token punctuation\">[</span>newx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>newy<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    \t\t\t<span class=\"token punctuation\">&#123;</span>\n    \t\t\t\tr<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    \t\t\t\tans<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    \t\t\t\tflag<span class=\"token punctuation\">[</span>newx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>newy<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>true<span class=\"token punctuation\">;</span>\n    \t\t\t\tq<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>x<span class=\"token operator\">=</span>newx<span class=\"token punctuation\">;</span>\n    \t\t\t\tq<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>y<span class=\"token operator\">=</span>newy<span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\tf<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\t\t\t\ta<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>ans<span class=\"token punctuation\">;</span>\n\tcout<span class=\"token operator\">&lt;&lt;</span>ans<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">&#125;</span> </code></pre>\n<p>当然，本题也可以用DFS来做，读者可以先自行写一写，不要看下面的答案：</p>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;cstdio></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;cstring></span></span>\n<span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span>m<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> ans<span class=\"token punctuation\">[</span><span class=\"token number\">100002</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>f<span class=\"token punctuation\">[</span><span class=\"token number\">1002</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1002</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">char</span> s<span class=\"token punctuation\">[</span><span class=\"token number\">1002</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1002</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> r<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> c<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> z<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> lll<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>r<span class=\"token operator\">&lt;</span><span class=\"token number\">0</span> <span class=\"token operator\">||</span> r<span class=\"token operator\">>=</span>n <span class=\"token operator\">||</span> c<span class=\"token operator\">&lt;</span><span class=\"token number\">0</span> <span class=\"token operator\">||</span> c<span class=\"token operator\">>=</span>n <span class=\"token operator\">||</span> f<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">]</span><span class=\"token operator\">!=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">||</span> s<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token char\">'0'</span><span class=\"token operator\">!=</span>z<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    f<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>lll<span class=\"token punctuation\">;</span>\n    ans<span class=\"token punctuation\">[</span>lll<span class=\"token punctuation\">]</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>r<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">,</span><span class=\"token operator\">!</span>z<span class=\"token punctuation\">,</span>lll<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>r<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">,</span><span class=\"token operator\">!</span>z<span class=\"token punctuation\">,</span>lll<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">,</span>c<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token operator\">!</span>z<span class=\"token punctuation\">,</span>lll<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">,</span>c<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token operator\">!</span>z<span class=\"token punctuation\">,</span>lll<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    \t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\"</span><span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>m<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        x<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n        y<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n            <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token char\">'0'</span><span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">else</span> \n            ans<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>ans<span class=\"token punctuation\">[</span>f<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>m<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    \t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span>ans<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>E</mi><mi>N</mi><mi>D</mi></mrow><annotation encoding=\"application/x-tex\">END\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">N</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">D</span></span></span></span></span></p>\n"},{"title":"BM字符串匹配算法","date":"2022-03-27T06:55:51.000Z","author":"Tony","katex":true,"_content":"\n## 算法简介\n\nBM(Boyer-Moore)算法由Bob Boyer和J Strother Moore于1977年设计，目的在于高效的查找字符串中的的子串。该算法的执行时间是线性的$(O(N))$，且往往更优于KMP算法。与KMP算法一样的是，都是需要且只需要对目标字符串进行预处理，而非被搜索的字符串；与KMP有所不同的是，BM算法是从后向前查找匹配，先从关键字的最后一个字符开始向前对应。\n\n如果想了解KMP算法，请参看我的另一篇文章：\n\n## BM算法原理\n\nBM算法本质上只说明了两个规则：\n\n1. 坏字符规则\n2. 好后缀规则\n\n下面详细讲解一下这两个规则；在此之前我们约定，下文中提到的所有目标字符串（Key）统称为**substr**， 而需要被查找的字符串（较长的那个）统称为**str**。\n\n### 坏字符规则\n\n当substr中某个字符与str不匹配时，这个(str中的)字符就称为坏字符。找到坏字符后，substr就要向后移动，**移动的位数**$move\\_num=\\lambda_1-\\lambda_2$ ，其中$\\lambda_1$为**坏字符在substr中的位置**，$\\lambda_2$为**坏字符在substr中最后出现的位置**。如果substr中并没有坏字符，那么$\\lambda_2=-1$，也就是说，整体向右移动一个substr的长度。\n\n看到这里是不是很懵，没关系，我们来看一个例子：\n\n<img src=\"BM-algorithm/image-20220328004145309.png\" alt=\"image-20220328004145309\" style=\"zoom:50%;\" />\n\n首先从右向左查找字符，`e`和`d`是匹配的，到第三个元素`c`不匹配，因此`c`就是坏字符。找到了坏字符后我们就可以确定$\\lambda_1=2$(从0开始算起)；然后寻找坏字符`c`在substr中最后出现的位置，也就是是从右向左的第一个坏字符，我们得到$\\lambda_2=0$，因此我们应该向右移动两位，也就是将上下的两个`c`对齐的位置。\n\n### 好后缀规则\n\n当我们从后向前匹配时出现相同的字符串时（也就是说至少有一个字符是对应的），我们就称这个字符串以及该字符串的子串为好后缀$^{[1]}$。找到好后缀之后，substr就要向后移动，**移动的位数**$move\\_num=\\lambda_3-\\lambda_4$ ，其中$\\lambda_3$为**好后缀在substr中的位置**，$\\lambda_4$为**好后缀在substr中（上一次）最后出现的位置**。如果substr中再没有好后缀，那么$\\lambda_4=-1$，也就是说，整体向右移动一个substr的长度。\n\n我们发现，坏字符规则和好后缀规则的描述十分相似，如果你可以理解坏字符规则，那么好后缀规则也很容易理解，当然，需要注意的是每次判断时坏字符只有一个，好后缀却有很多。（好后缀的个数等于好后缀的长度）\n\n[1]: 这里解释一下，比如这个好后缀为abcd，那么bcd，cd，d也为好后缀。\n\n我们还是用一个例子来说明好字符规则：\n\n<img src=\"BM-algorithm/image-20220328005451919.png\" alt=\"image-20220328005451919\" style=\"zoom:51%;\" />\n\n根据好后缀规则，我们首先很容易找到最长的好后缀是`de`，那么`e`也是好后缀（因为`e`是好后缀的后缀子串）。那么下面我们要做的事情就是在substr中查找最长的能跟这些好后缀（`e,de`)匹配的子串。首先我们查找`e`这个好后缀，发现`substr[2]`与之匹配；然后查找好后缀`de`，发现`substr[1]`与之匹配。那么我们选择最长的那个子串，也就是`substr[1]`，因此$\\lambda_3=3,\\lambda_4=1，move\\_num=2$，即向右移动两位。\n\n\n\n## BM的实现\n\n### 建立坏字符的hash table\n\n为了节省时间，我们将所有待匹配的字符都建立一个映射，这样在找到坏字符的时候就可以以$O(1)$的时间知道substr应该向右移动多少。其实就是用一个最简单的hash table来寻找$\\lambda_2$的值。\n\n我们这里为了简单起见，只适配了256个ASCII字符，如果想加入中文，那么这个hash table将变得大一些。按照规则，如果substr没有出现的字符一律设置成$\\lambda_2=-1$，因此我们将hash table初始化成$-1$。\n\n```c\nvoid generate_bad_char_table(string str)\n{\n    bad_char_table = new int [256];\n    for(int i=0;i<256;i++)\n        bad_char_table[i]=-1;\n    for(int i=0;i<str.length();i++)\n    {\n        int ASCII=str[i];\n        bad_char_table[ASCII]=i;\n    }\n}\n```\n\n### 好后缀的预处理\n\n根据好后缀规则，我们完全可以暴力求解$\\lambda _3$和$\\lambda _4$的值，但是这样的效率显然不是最佳的，如果substr的长度比较大，那么每次判断好后缀的右移长度将浪费很多不必要的时间。因此我们可以对substr的所有好后缀进行预处理。建立两个长度与substr相等的数组，分别为`suffix[]`和`prefix[]`**，前者记录了substr中与好后缀匹配的最后一个字串的位置**（即$\\lambda _4$)**，后者记录了与好后缀匹配的前缀子串**（不过目前鄙人认为没啥用）。\n\n听起来很懵，看一个例子：\n\n<img src=\"BM-algorithm/image-20220328173308025.png\" alt=\"image-20220328173308025\" style=\"zoom:50%;\" />\n\n这样我们就可以知道所有好后缀的$\\lambda _4$的值，当我们找到str中的好后缀（也即$\\lambda_3$），就可以用$O(1)$的时间知道向右移动的长度。\n\n```c\nvoid generate_suffix_prefix(string str)\n{\n    int len=str.length();\n    suffix= new int [len];\n    prefix = new bool [len];\n    for(int i=0;i<len;i++)\n    {\n        prefix[i]= false;\n        suffix[i]= -1;\n    }\n    for(int i=0;i<len-1;i++)\n    {\n        int j=i;\n        int k=0;\n        while(j>=0 && str[j]==str[len-1-k])//inverse search\n        {\n            j--;\n            k++;\n            suffix[k]=j+1;\n        }\n        if(j==-1)//如果找到了开头\n            prefix[k]=true;\n    }\n}\n```\n\n\n\n## 完整代码\n\n```c\n#include <iostream>\n#include <string>\n#include <algorithm>\nusing namespace std;\n\nint* bad_char_table;\nint* suffix;\nbool* prefix;\nint move_by_GS(int ptr,int str_len);//判断好后缀移动距离\nint BM(string str, string substr);//BM实现\nvoid generate_bad_char_table(string str);//建立坏字符hash table\nvoid generate_suffix_prefix(string str);//建立好后缀数组\n\nint main()\n{\n    string str,substr;\n    str=\"abcdefgagabgag\";\n    substr=\"abg\";\n    cout<<BM(str,substr)<<endl;\n    return 0;\n}\n\nvoid generate_bad_char_table(string str)\n{\n    bad_char_table = new int [256];\n    for(int i=0;i<256;i++)\n        bad_char_table[i]=-1;\n    for(int i=0;i<str.length();i++)\n    {\n        int ASCII=str[i];\n        bad_char_table[ASCII]=i;\n    }\n}\n\nvoid generate_suffix_prefix(string str)\n{\n    int len=str.length();\n    suffix= new int [len];\n    prefix = new bool [len];\n    for(int i=0;i<len;i++)\n    {\n        prefix[i]= false;\n        suffix[i]= -1;\n    }\n    for(int i=0;i<len-1;i++)\n    {\n        int j=i;\n        int k=0;\n        while(j>=0 && str[j]==str[len-1-k])//inverse search\n        {\n            j--;\n            k++;\n            suffix[k]=j+1;\n        }\n        if(j==-1)//如果找到了开头\n            prefix[k]=true;\n    }\n}\n\nint move_by_GS(int ptr, int str_len)\n{\n    int len=str_len-1-ptr;\n    if(suffix[len]!= -1)\n        return ptr-suffix[len]+1;\n    for(int i=ptr+2;i<str_len;i++)\n        if(prefix[str_len-i])\n            return i;\n    return str_len;\n}\n\nint BM(string str, string substr)\n{\n    generate_bad_char_table(substr);\n    generate_suffix_prefix(substr);\n    int move_step,bad_char;\n    for(int i=0;i<str.length()-substr.length()+1;i+=move_step)//从头到尾遍历\n    {\n        for(int j=substr.length()-1;j>=0;j--)//从后网线查找\n        {\n            if(str[i+j]!=substr[j])//找到坏字符\n            {\n                bad_char=str[i+j];\n                move_step=j-bad_char_table[bad_char];\n                break;\n            }\n            if(j==0)//找到substr\n            {\n                delete [] bad_char_table;\n                delete [] suffix;\n                delete [] prefix;\n                return i;\n            }\n            if(j<str.length()-1)//找到好后缀\n                move_step=max(move_step, move_by_GS(j, str.length()));\n        }\n    }\n    delete [] bad_char_table;\n    delete [] suffix;\n    delete [] prefix;\n    return -1;\n}\n\n```\n\n","source":"_posts/BM-algorithm.md","raw":"---\ntitle: BM字符串匹配算法\ndate: 2022-03-27 14:55:51\ntags:\n\t- algorithm\n\t- BM\n\t- search\ncategories:\n\t- algorithm\nauthor: Tony\nkatex: true\n---\n\n## 算法简介\n\nBM(Boyer-Moore)算法由Bob Boyer和J Strother Moore于1977年设计，目的在于高效的查找字符串中的的子串。该算法的执行时间是线性的$(O(N))$，且往往更优于KMP算法。与KMP算法一样的是，都是需要且只需要对目标字符串进行预处理，而非被搜索的字符串；与KMP有所不同的是，BM算法是从后向前查找匹配，先从关键字的最后一个字符开始向前对应。\n\n如果想了解KMP算法，请参看我的另一篇文章：\n\n## BM算法原理\n\nBM算法本质上只说明了两个规则：\n\n1. 坏字符规则\n2. 好后缀规则\n\n下面详细讲解一下这两个规则；在此之前我们约定，下文中提到的所有目标字符串（Key）统称为**substr**， 而需要被查找的字符串（较长的那个）统称为**str**。\n\n### 坏字符规则\n\n当substr中某个字符与str不匹配时，这个(str中的)字符就称为坏字符。找到坏字符后，substr就要向后移动，**移动的位数**$move\\_num=\\lambda_1-\\lambda_2$ ，其中$\\lambda_1$为**坏字符在substr中的位置**，$\\lambda_2$为**坏字符在substr中最后出现的位置**。如果substr中并没有坏字符，那么$\\lambda_2=-1$，也就是说，整体向右移动一个substr的长度。\n\n看到这里是不是很懵，没关系，我们来看一个例子：\n\n<img src=\"BM-algorithm/image-20220328004145309.png\" alt=\"image-20220328004145309\" style=\"zoom:50%;\" />\n\n首先从右向左查找字符，`e`和`d`是匹配的，到第三个元素`c`不匹配，因此`c`就是坏字符。找到了坏字符后我们就可以确定$\\lambda_1=2$(从0开始算起)；然后寻找坏字符`c`在substr中最后出现的位置，也就是是从右向左的第一个坏字符，我们得到$\\lambda_2=0$，因此我们应该向右移动两位，也就是将上下的两个`c`对齐的位置。\n\n### 好后缀规则\n\n当我们从后向前匹配时出现相同的字符串时（也就是说至少有一个字符是对应的），我们就称这个字符串以及该字符串的子串为好后缀$^{[1]}$。找到好后缀之后，substr就要向后移动，**移动的位数**$move\\_num=\\lambda_3-\\lambda_4$ ，其中$\\lambda_3$为**好后缀在substr中的位置**，$\\lambda_4$为**好后缀在substr中（上一次）最后出现的位置**。如果substr中再没有好后缀，那么$\\lambda_4=-1$，也就是说，整体向右移动一个substr的长度。\n\n我们发现，坏字符规则和好后缀规则的描述十分相似，如果你可以理解坏字符规则，那么好后缀规则也很容易理解，当然，需要注意的是每次判断时坏字符只有一个，好后缀却有很多。（好后缀的个数等于好后缀的长度）\n\n[1]: 这里解释一下，比如这个好后缀为abcd，那么bcd，cd，d也为好后缀。\n\n我们还是用一个例子来说明好字符规则：\n\n<img src=\"BM-algorithm/image-20220328005451919.png\" alt=\"image-20220328005451919\" style=\"zoom:51%;\" />\n\n根据好后缀规则，我们首先很容易找到最长的好后缀是`de`，那么`e`也是好后缀（因为`e`是好后缀的后缀子串）。那么下面我们要做的事情就是在substr中查找最长的能跟这些好后缀（`e,de`)匹配的子串。首先我们查找`e`这个好后缀，发现`substr[2]`与之匹配；然后查找好后缀`de`，发现`substr[1]`与之匹配。那么我们选择最长的那个子串，也就是`substr[1]`，因此$\\lambda_3=3,\\lambda_4=1，move\\_num=2$，即向右移动两位。\n\n\n\n## BM的实现\n\n### 建立坏字符的hash table\n\n为了节省时间，我们将所有待匹配的字符都建立一个映射，这样在找到坏字符的时候就可以以$O(1)$的时间知道substr应该向右移动多少。其实就是用一个最简单的hash table来寻找$\\lambda_2$的值。\n\n我们这里为了简单起见，只适配了256个ASCII字符，如果想加入中文，那么这个hash table将变得大一些。按照规则，如果substr没有出现的字符一律设置成$\\lambda_2=-1$，因此我们将hash table初始化成$-1$。\n\n```c\nvoid generate_bad_char_table(string str)\n{\n    bad_char_table = new int [256];\n    for(int i=0;i<256;i++)\n        bad_char_table[i]=-1;\n    for(int i=0;i<str.length();i++)\n    {\n        int ASCII=str[i];\n        bad_char_table[ASCII]=i;\n    }\n}\n```\n\n### 好后缀的预处理\n\n根据好后缀规则，我们完全可以暴力求解$\\lambda _3$和$\\lambda _4$的值，但是这样的效率显然不是最佳的，如果substr的长度比较大，那么每次判断好后缀的右移长度将浪费很多不必要的时间。因此我们可以对substr的所有好后缀进行预处理。建立两个长度与substr相等的数组，分别为`suffix[]`和`prefix[]`**，前者记录了substr中与好后缀匹配的最后一个字串的位置**（即$\\lambda _4$)**，后者记录了与好后缀匹配的前缀子串**（不过目前鄙人认为没啥用）。\n\n听起来很懵，看一个例子：\n\n<img src=\"BM-algorithm/image-20220328173308025.png\" alt=\"image-20220328173308025\" style=\"zoom:50%;\" />\n\n这样我们就可以知道所有好后缀的$\\lambda _4$的值，当我们找到str中的好后缀（也即$\\lambda_3$），就可以用$O(1)$的时间知道向右移动的长度。\n\n```c\nvoid generate_suffix_prefix(string str)\n{\n    int len=str.length();\n    suffix= new int [len];\n    prefix = new bool [len];\n    for(int i=0;i<len;i++)\n    {\n        prefix[i]= false;\n        suffix[i]= -1;\n    }\n    for(int i=0;i<len-1;i++)\n    {\n        int j=i;\n        int k=0;\n        while(j>=0 && str[j]==str[len-1-k])//inverse search\n        {\n            j--;\n            k++;\n            suffix[k]=j+1;\n        }\n        if(j==-1)//如果找到了开头\n            prefix[k]=true;\n    }\n}\n```\n\n\n\n## 完整代码\n\n```c\n#include <iostream>\n#include <string>\n#include <algorithm>\nusing namespace std;\n\nint* bad_char_table;\nint* suffix;\nbool* prefix;\nint move_by_GS(int ptr,int str_len);//判断好后缀移动距离\nint BM(string str, string substr);//BM实现\nvoid generate_bad_char_table(string str);//建立坏字符hash table\nvoid generate_suffix_prefix(string str);//建立好后缀数组\n\nint main()\n{\n    string str,substr;\n    str=\"abcdefgagabgag\";\n    substr=\"abg\";\n    cout<<BM(str,substr)<<endl;\n    return 0;\n}\n\nvoid generate_bad_char_table(string str)\n{\n    bad_char_table = new int [256];\n    for(int i=0;i<256;i++)\n        bad_char_table[i]=-1;\n    for(int i=0;i<str.length();i++)\n    {\n        int ASCII=str[i];\n        bad_char_table[ASCII]=i;\n    }\n}\n\nvoid generate_suffix_prefix(string str)\n{\n    int len=str.length();\n    suffix= new int [len];\n    prefix = new bool [len];\n    for(int i=0;i<len;i++)\n    {\n        prefix[i]= false;\n        suffix[i]= -1;\n    }\n    for(int i=0;i<len-1;i++)\n    {\n        int j=i;\n        int k=0;\n        while(j>=0 && str[j]==str[len-1-k])//inverse search\n        {\n            j--;\n            k++;\n            suffix[k]=j+1;\n        }\n        if(j==-1)//如果找到了开头\n            prefix[k]=true;\n    }\n}\n\nint move_by_GS(int ptr, int str_len)\n{\n    int len=str_len-1-ptr;\n    if(suffix[len]!= -1)\n        return ptr-suffix[len]+1;\n    for(int i=ptr+2;i<str_len;i++)\n        if(prefix[str_len-i])\n            return i;\n    return str_len;\n}\n\nint BM(string str, string substr)\n{\n    generate_bad_char_table(substr);\n    generate_suffix_prefix(substr);\n    int move_step,bad_char;\n    for(int i=0;i<str.length()-substr.length()+1;i+=move_step)//从头到尾遍历\n    {\n        for(int j=substr.length()-1;j>=0;j--)//从后网线查找\n        {\n            if(str[i+j]!=substr[j])//找到坏字符\n            {\n                bad_char=str[i+j];\n                move_step=j-bad_char_table[bad_char];\n                break;\n            }\n            if(j==0)//找到substr\n            {\n                delete [] bad_char_table;\n                delete [] suffix;\n                delete [] prefix;\n                return i;\n            }\n            if(j<str.length()-1)//找到好后缀\n                move_step=max(move_step, move_by_GS(j, str.length()));\n        }\n    }\n    delete [] bad_char_table;\n    delete [] suffix;\n    delete [] prefix;\n    return -1;\n}\n\n```\n\n","slug":"BM-algorithm","published":1,"updated":"2022-04-03T10:02:43.760Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1rj2n4x0006gwcygjswas5u","content":"<h2 id=\"算法简介\"><a class=\"markdownIt-Anchor\" href=\"#算法简介\"></a> 算法简介</h2>\n<p>BM(Boyer-Moore)算法由Bob Boyer和J Strother Moore于1977年设计，目的在于高效的查找字符串中的的子串。该算法的执行时间是线性的<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo stretchy=\"false\">(</mo><mi>O</mi><mo stretchy=\"false\">(</mo><mi>N</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(O(N))</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">N</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span></span></span></span>，且往往更优于KMP算法。与KMP算法一样的是，都是需要且只需要对目标字符串进行预处理，而非被搜索的字符串；与KMP有所不同的是，BM算法是从后向前查找匹配，先从关键字的最后一个字符开始向前对应。</p>\n<p>如果想了解KMP算法，请参看我的另一篇文章：</p>\n<h2 id=\"bm算法原理\"><a class=\"markdownIt-Anchor\" href=\"#bm算法原理\"></a> BM算法原理</h2>\n<p>BM算法本质上只说明了两个规则：</p>\n<ol>\n<li>坏字符规则</li>\n<li>好后缀规则</li>\n</ol>\n<p>下面详细讲解一下这两个规则；在此之前我们约定，下文中提到的所有目标字符串（Key）统称为<strong>substr</strong>， 而需要被查找的字符串（较长的那个）统称为<strong>str</strong>。</p>\n<h3 id=\"坏字符规则\"><a class=\"markdownIt-Anchor\" href=\"#坏字符规则\"></a> 坏字符规则</h3>\n<p>当substr中某个字符与str不匹配时，这个(str中的)字符就称为坏字符。找到坏字符后，substr就要向后移动，<strong>移动的位数</strong><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>m</mi><mi>o</mi><mi>v</mi><mi>e</mi><mi mathvariant=\"normal\">_</mi><mi>n</mi><mi>u</mi><mi>m</mi><mo>=</mo><msub><mi>λ</mi><mn>1</mn></msub><mo>−</mo><msub><mi>λ</mi><mn>2</mn></msub></mrow><annotation encoding=\"application/x-tex\">move\\_num=\\lambda_1-\\lambda_2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.74056em;vertical-align:-0.31em;\"></span><span class=\"mord mathdefault\">m</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">v</span><span class=\"mord mathdefault\">e</span><span class=\"mord\" style=\"margin-right:0.02778em;\">_</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\">u</span><span class=\"mord mathdefault\">m</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">λ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">λ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> ，其中<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>λ</mi><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\">\\lambda_1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">λ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>为<strong>坏字符在substr中的位置</strong>，<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>λ</mi><mn>2</mn></msub></mrow><annotation encoding=\"application/x-tex\">\\lambda_2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">λ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>为<strong>坏字符在substr中最后出现的位置</strong>。如果substr中并没有坏字符，那么<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>λ</mi><mn>2</mn></msub><mo>=</mo><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">\\lambda_2=-1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">λ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">−</span><span class=\"mord\">1</span></span></span></span>，也就是说，整体向右移动一个substr的长度。</p>\n<p>看到这里是不是很懵，没关系，我们来看一个例子：</p>\n<img src=\"/2022/03/27/BM-algorithm/image-20220328004145309.png\" alt=\"image-20220328004145309\" style=\"zoom:50%;\" loading=\"lazy\">\n<p>首先从右向左查找字符，<code>e</code>和<code>d</code>是匹配的，到第三个元素<code>c</code>不匹配，因此<code>c</code>就是坏字符。找到了坏字符后我们就可以确定<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>λ</mi><mn>1</mn></msub><mo>=</mo><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">\\lambda_1=2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">λ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span></span></span></span>(从0开始算起)；然后寻找坏字符<code>c</code>在substr中最后出现的位置，也就是是从右向左的第一个坏字符，我们得到<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>λ</mi><mn>2</mn></msub><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">\\lambda_2=0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">λ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span>，因此我们应该向右移动两位，也就是将上下的两个<code>c</code>对齐的位置。</p>\n<h3 id=\"好后缀规则\"><a class=\"markdownIt-Anchor\" href=\"#好后缀规则\"></a> 好后缀规则</h3>\n<p>当我们从后向前匹配时出现相同的字符串时（也就是说至少有一个字符是对应的），我们就称这个字符串以及该字符串的子串为好后缀<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mrow></mrow><mrow><mo stretchy=\"false\">[</mo><mn>1</mn><mo stretchy=\"false\">]</mo></mrow></msup></mrow><annotation encoding=\"application/x-tex\">^{[1]}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8879999999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8879999999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">[</span><span class=\"mord mtight\">1</span><span class=\"mclose mtight\">]</span></span></span></span></span></span></span></span></span></span></span></span>。找到好后缀之后，substr就要向后移动，<strong>移动的位数</strong><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>m</mi><mi>o</mi><mi>v</mi><mi>e</mi><mi mathvariant=\"normal\">_</mi><mi>n</mi><mi>u</mi><mi>m</mi><mo>=</mo><msub><mi>λ</mi><mn>3</mn></msub><mo>−</mo><msub><mi>λ</mi><mn>4</mn></msub></mrow><annotation encoding=\"application/x-tex\">move\\_num=\\lambda_3-\\lambda_4</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.74056em;vertical-align:-0.31em;\"></span><span class=\"mord mathdefault\">m</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">v</span><span class=\"mord mathdefault\">e</span><span class=\"mord\" style=\"margin-right:0.02778em;\">_</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\">u</span><span class=\"mord mathdefault\">m</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">λ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">λ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">4</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> ，其中<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>λ</mi><mn>3</mn></msub></mrow><annotation encoding=\"application/x-tex\">\\lambda_3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">λ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>为<strong>好后缀在substr中的位置</strong>，<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>λ</mi><mn>4</mn></msub></mrow><annotation encoding=\"application/x-tex\">\\lambda_4</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">λ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">4</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>为<strong>好后缀在substr中（上一次）最后出现的位置</strong>。如果substr中再没有好后缀，那么<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>λ</mi><mn>4</mn></msub><mo>=</mo><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">\\lambda_4=-1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">λ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">4</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">−</span><span class=\"mord\">1</span></span></span></span>，也就是说，整体向右移动一个substr的长度。</p>\n<p>我们发现，坏字符规则和好后缀规则的描述十分相似，如果你可以理解坏字符规则，那么好后缀规则也很容易理解，当然，需要注意的是每次判断时坏字符只有一个，好后缀却有很多。（好后缀的个数等于好后缀的长度）</p>\n<p>我们还是用一个例子来说明好字符规则：</p>\n<img src=\"/2022/03/27/BM-algorithm/image-20220328005451919.png\" alt=\"image-20220328005451919\" style=\"zoom:51%;\" loading=\"lazy\">\n<p>根据好后缀规则，我们首先很容易找到最长的好后缀是<code>de</code>，那么<code>e</code>也是好后缀（因为<code>e</code>是好后缀的后缀子串）。那么下面我们要做的事情就是在substr中查找最长的能跟这些好后缀（<code>e,de</code>)匹配的子串。首先我们查找<code>e</code>这个好后缀，发现<code>substr[2]</code>与之匹配；然后查找好后缀<code>de</code>，发现<code>substr[1]</code>与之匹配。那么我们选择最长的那个子串，也就是<code>substr[1]</code>，因此<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>λ</mi><mn>3</mn></msub><mo>=</mo><mn>3</mn><mo separator=\"true\">,</mo><msub><mi>λ</mi><mn>4</mn></msub><mo>=</mo><mn>1</mn><mi mathvariant=\"normal\">，</mi><mi>m</mi><mi>o</mi><mi>v</mi><mi>e</mi><mi mathvariant=\"normal\">_</mi><mi>n</mi><mi>u</mi><mi>m</mi><mo>=</mo><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">\\lambda_3=3,\\lambda_4=1，move\\_num=2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">λ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\">3</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">λ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">4</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.95444em;vertical-align:-0.31em;\"></span><span class=\"mord\">1</span><span class=\"mord cjk_fallback\">，</span><span class=\"mord mathdefault\">m</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">v</span><span class=\"mord mathdefault\">e</span><span class=\"mord\" style=\"margin-right:0.02778em;\">_</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\">u</span><span class=\"mord mathdefault\">m</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span></span></span></span>，即向右移动两位。</p>\n<h2 id=\"bm的实现\"><a class=\"markdownIt-Anchor\" href=\"#bm的实现\"></a> BM的实现</h2>\n<h3 id=\"建立坏字符的hash-table\"><a class=\"markdownIt-Anchor\" href=\"#建立坏字符的hash-table\"></a> 建立坏字符的hash table</h3>\n<p>为了节省时间，我们将所有待匹配的字符都建立一个映射，这样在找到坏字符的时候就可以以<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span>的时间知道substr应该向右移动多少。其实就是用一个最简单的hash table来寻找<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>λ</mi><mn>2</mn></msub></mrow><annotation encoding=\"application/x-tex\">\\lambda_2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">λ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>的值。</p>\n<p>我们这里为了简单起见，只适配了256个ASCII字符，如果想加入中文，那么这个hash table将变得大一些。按照规则，如果substr没有出现的字符一律设置成<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>λ</mi><mn>2</mn></msub><mo>=</mo><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">\\lambda_2=-1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">λ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">−</span><span class=\"mord\">1</span></span></span></span>，因此我们将hash table初始化成<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">-1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">−</span><span class=\"mord\">1</span></span></span></span>。</p>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">generate_bad_char_table</span><span class=\"token punctuation\">(</span>string str<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    bad_char_table <span class=\"token operator\">=</span> new <span class=\"token keyword\">int</span> <span class=\"token punctuation\">[</span><span class=\"token number\">256</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">256</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        bad_char_table<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> ASCII<span class=\"token operator\">=</span>str<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        bad_char_table<span class=\"token punctuation\">[</span>ASCII<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>i<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<h3 id=\"好后缀的预处理\"><a class=\"markdownIt-Anchor\" href=\"#好后缀的预处理\"></a> 好后缀的预处理</h3>\n<p>根据好后缀规则，我们完全可以暴力求解<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>λ</mi><mn>3</mn></msub></mrow><annotation encoding=\"application/x-tex\">\\lambda _3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">λ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>和<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>λ</mi><mn>4</mn></msub></mrow><annotation encoding=\"application/x-tex\">\\lambda _4</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">λ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">4</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>的值，但是这样的效率显然不是最佳的，如果substr的长度比较大，那么每次判断好后缀的右移长度将浪费很多不必要的时间。因此我们可以对substr的所有好后缀进行预处理。建立两个长度与substr相等的数组，分别为<code>suffix[]</code>和<code>prefix[]</code><strong>，前者记录了substr中与好后缀匹配的最后一个字串的位置</strong>（即<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>λ</mi><mn>4</mn></msub></mrow><annotation encoding=\"application/x-tex\">\\lambda _4</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">λ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">4</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>)<strong>，后者记录了与好后缀匹配的前缀子串</strong>（不过目前鄙人认为没啥用）。</p>\n<p>听起来很懵，看一个例子：</p>\n<img src=\"/2022/03/27/BM-algorithm/image-20220328173308025.png\" alt=\"image-20220328173308025\" style=\"zoom:50%;\" loading=\"lazy\">\n<p>这样我们就可以知道所有好后缀的<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>λ</mi><mn>4</mn></msub></mrow><annotation encoding=\"application/x-tex\">\\lambda _4</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">λ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">4</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>的值，当我们找到str中的好后缀（也即<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>λ</mi><mn>3</mn></msub></mrow><annotation encoding=\"application/x-tex\">\\lambda_3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">λ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>），就可以用<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span>的时间知道向右移动的长度。</p>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">generate_suffix_prefix</span><span class=\"token punctuation\">(</span>string str<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> len<span class=\"token operator\">=</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    suffix<span class=\"token operator\">=</span> new <span class=\"token keyword\">int</span> <span class=\"token punctuation\">[</span>len<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    prefix <span class=\"token operator\">=</span> new bool <span class=\"token punctuation\">[</span>len<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>len<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        prefix<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span> false<span class=\"token punctuation\">;</span>\n        suffix<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>len<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span>i<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> k<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">>=</span><span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> str<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span>str<span class=\"token punctuation\">[</span>len<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">-</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//inverse search</span>\n        <span class=\"token punctuation\">&#123;</span>\n            j<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n            k<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            suffix<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">==</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//如果找到了开头</span>\n            prefix<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>true<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<h2 id=\"完整代码\"><a class=\"markdownIt-Anchor\" href=\"#完整代码\"></a> 完整代码</h2>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;algorithm></span></span>\nusing namespace std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> bad_char_table<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> suffix<span class=\"token punctuation\">;</span>\nbool<span class=\"token operator\">*</span> prefix<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">move_by_GS</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> ptr<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> str_len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//判断好后缀移动距离</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">BM</span><span class=\"token punctuation\">(</span>string str<span class=\"token punctuation\">,</span> string substr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//BM实现</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">generate_bad_char_table</span><span class=\"token punctuation\">(</span>string str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//建立坏字符hash table</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">generate_suffix_prefix</span><span class=\"token punctuation\">(</span>string str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//建立好后缀数组</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    string str<span class=\"token punctuation\">,</span>substr<span class=\"token punctuation\">;</span>\n    str<span class=\"token operator\">=</span><span class=\"token string\">\"abcdefgagabgag\"</span><span class=\"token punctuation\">;</span>\n    substr<span class=\"token operator\">=</span><span class=\"token string\">\"abg\"</span><span class=\"token punctuation\">;</span>\n    cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token function\">BM</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span>substr<span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">generate_bad_char_table</span><span class=\"token punctuation\">(</span>string str<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    bad_char_table <span class=\"token operator\">=</span> new <span class=\"token keyword\">int</span> <span class=\"token punctuation\">[</span><span class=\"token number\">256</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">256</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        bad_char_table<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> ASCII<span class=\"token operator\">=</span>str<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        bad_char_table<span class=\"token punctuation\">[</span>ASCII<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>i<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">generate_suffix_prefix</span><span class=\"token punctuation\">(</span>string str<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> len<span class=\"token operator\">=</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    suffix<span class=\"token operator\">=</span> new <span class=\"token keyword\">int</span> <span class=\"token punctuation\">[</span>len<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    prefix <span class=\"token operator\">=</span> new bool <span class=\"token punctuation\">[</span>len<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>len<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        prefix<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span> false<span class=\"token punctuation\">;</span>\n        suffix<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>len<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span>i<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> k<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">>=</span><span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> str<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span>str<span class=\"token punctuation\">[</span>len<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">-</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//inverse search</span>\n        <span class=\"token punctuation\">&#123;</span>\n            j<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n            k<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            suffix<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">==</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//如果找到了开头</span>\n            prefix<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>true<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">move_by_GS</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> ptr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> str_len<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> len<span class=\"token operator\">=</span>str_len<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">-</span>ptr<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>suffix<span class=\"token punctuation\">[</span>len<span class=\"token punctuation\">]</span><span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> ptr<span class=\"token operator\">-</span>suffix<span class=\"token punctuation\">[</span>len<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span>ptr<span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>str_len<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>prefix<span class=\"token punctuation\">[</span>str_len<span class=\"token operator\">-</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> i<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> str_len<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">BM</span><span class=\"token punctuation\">(</span>string str<span class=\"token punctuation\">,</span> string substr<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">generate_bad_char_table</span><span class=\"token punctuation\">(</span>substr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">generate_suffix_prefix</span><span class=\"token punctuation\">(</span>substr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> move_step<span class=\"token punctuation\">,</span>bad_char<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span>substr<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">+=</span>move_step<span class=\"token punctuation\">)</span><span class=\"token comment\">//从头到尾遍历</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span>substr<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">>=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//从后网线查找</span>\n        <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">!=</span>substr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//找到坏字符</span>\n            <span class=\"token punctuation\">&#123;</span>\n                bad_char<span class=\"token operator\">=</span>str<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                move_step<span class=\"token operator\">=</span>j<span class=\"token operator\">-</span>bad_char_table<span class=\"token punctuation\">[</span>bad_char<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//找到substr</span>\n            <span class=\"token punctuation\">&#123;</span>\n                delete <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> bad_char_table<span class=\"token punctuation\">;</span>\n                delete <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> suffix<span class=\"token punctuation\">;</span>\n                delete <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> prefix<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> i<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">&lt;</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//找到好后缀</span>\n                move_step<span class=\"token operator\">=</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>move_step<span class=\"token punctuation\">,</span> <span class=\"token function\">move_by_GS</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    delete <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> bad_char_table<span class=\"token punctuation\">;</span>\n    delete <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> suffix<span class=\"token punctuation\">;</span>\n    delete <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> prefix<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"算法简介\"><a class=\"markdownIt-Anchor\" href=\"#算法简介\"></a> 算法简介</h2>\n<p>BM(Boyer-Moore)算法由Bob Boyer和J Strother Moore于1977年设计，目的在于高效的查找字符串中的的子串。该算法的执行时间是线性的<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo stretchy=\"false\">(</mo><mi>O</mi><mo stretchy=\"false\">(</mo><mi>N</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(O(N))</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">N</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span></span></span></span>，且往往更优于KMP算法。与KMP算法一样的是，都是需要且只需要对目标字符串进行预处理，而非被搜索的字符串；与KMP有所不同的是，BM算法是从后向前查找匹配，先从关键字的最后一个字符开始向前对应。</p>\n<p>如果想了解KMP算法，请参看我的另一篇文章：</p>\n<h2 id=\"bm算法原理\"><a class=\"markdownIt-Anchor\" href=\"#bm算法原理\"></a> BM算法原理</h2>\n<p>BM算法本质上只说明了两个规则：</p>\n<ol>\n<li>坏字符规则</li>\n<li>好后缀规则</li>\n</ol>\n<p>下面详细讲解一下这两个规则；在此之前我们约定，下文中提到的所有目标字符串（Key）统称为<strong>substr</strong>， 而需要被查找的字符串（较长的那个）统称为<strong>str</strong>。</p>\n<h3 id=\"坏字符规则\"><a class=\"markdownIt-Anchor\" href=\"#坏字符规则\"></a> 坏字符规则</h3>\n<p>当substr中某个字符与str不匹配时，这个(str中的)字符就称为坏字符。找到坏字符后，substr就要向后移动，<strong>移动的位数</strong><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>m</mi><mi>o</mi><mi>v</mi><mi>e</mi><mi mathvariant=\"normal\">_</mi><mi>n</mi><mi>u</mi><mi>m</mi><mo>=</mo><msub><mi>λ</mi><mn>1</mn></msub><mo>−</mo><msub><mi>λ</mi><mn>2</mn></msub></mrow><annotation encoding=\"application/x-tex\">move\\_num=\\lambda_1-\\lambda_2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.74056em;vertical-align:-0.31em;\"></span><span class=\"mord mathdefault\">m</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">v</span><span class=\"mord mathdefault\">e</span><span class=\"mord\" style=\"margin-right:0.02778em;\">_</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\">u</span><span class=\"mord mathdefault\">m</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">λ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">λ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> ，其中<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>λ</mi><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\">\\lambda_1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">λ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>为<strong>坏字符在substr中的位置</strong>，<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>λ</mi><mn>2</mn></msub></mrow><annotation encoding=\"application/x-tex\">\\lambda_2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">λ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>为<strong>坏字符在substr中最后出现的位置</strong>。如果substr中并没有坏字符，那么<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>λ</mi><mn>2</mn></msub><mo>=</mo><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">\\lambda_2=-1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">λ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">−</span><span class=\"mord\">1</span></span></span></span>，也就是说，整体向右移动一个substr的长度。</p>\n<p>看到这里是不是很懵，没关系，我们来看一个例子：</p>\n<img src=\"/2022/03/27/BM-algorithm/image-20220328004145309.png\" alt=\"image-20220328004145309\" style=\"zoom:50%;\">\n<p>首先从右向左查找字符，<code>e</code>和<code>d</code>是匹配的，到第三个元素<code>c</code>不匹配，因此<code>c</code>就是坏字符。找到了坏字符后我们就可以确定<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>λ</mi><mn>1</mn></msub><mo>=</mo><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">\\lambda_1=2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">λ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span></span></span></span>(从0开始算起)；然后寻找坏字符<code>c</code>在substr中最后出现的位置，也就是是从右向左的第一个坏字符，我们得到<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>λ</mi><mn>2</mn></msub><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">\\lambda_2=0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">λ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span>，因此我们应该向右移动两位，也就是将上下的两个<code>c</code>对齐的位置。</p>\n<h3 id=\"好后缀规则\"><a class=\"markdownIt-Anchor\" href=\"#好后缀规则\"></a> 好后缀规则</h3>\n<p>当我们从后向前匹配时出现相同的字符串时（也就是说至少有一个字符是对应的），我们就称这个字符串以及该字符串的子串为好后缀<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mrow></mrow><mrow><mo stretchy=\"false\">[</mo><mn>1</mn><mo stretchy=\"false\">]</mo></mrow></msup></mrow><annotation encoding=\"application/x-tex\">^{[1]}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8879999999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8879999999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">[</span><span class=\"mord mtight\">1</span><span class=\"mclose mtight\">]</span></span></span></span></span></span></span></span></span></span></span></span>。找到好后缀之后，substr就要向后移动，<strong>移动的位数</strong><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>m</mi><mi>o</mi><mi>v</mi><mi>e</mi><mi mathvariant=\"normal\">_</mi><mi>n</mi><mi>u</mi><mi>m</mi><mo>=</mo><msub><mi>λ</mi><mn>3</mn></msub><mo>−</mo><msub><mi>λ</mi><mn>4</mn></msub></mrow><annotation encoding=\"application/x-tex\">move\\_num=\\lambda_3-\\lambda_4</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.74056em;vertical-align:-0.31em;\"></span><span class=\"mord mathdefault\">m</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">v</span><span class=\"mord mathdefault\">e</span><span class=\"mord\" style=\"margin-right:0.02778em;\">_</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\">u</span><span class=\"mord mathdefault\">m</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">λ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">λ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">4</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> ，其中<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>λ</mi><mn>3</mn></msub></mrow><annotation encoding=\"application/x-tex\">\\lambda_3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">λ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>为<strong>好后缀在substr中的位置</strong>，<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>λ</mi><mn>4</mn></msub></mrow><annotation encoding=\"application/x-tex\">\\lambda_4</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">λ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">4</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>为<strong>好后缀在substr中（上一次）最后出现的位置</strong>。如果substr中再没有好后缀，那么<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>λ</mi><mn>4</mn></msub><mo>=</mo><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">\\lambda_4=-1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">λ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">4</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">−</span><span class=\"mord\">1</span></span></span></span>，也就是说，整体向右移动一个substr的长度。</p>\n<p>我们发现，坏字符规则和好后缀规则的描述十分相似，如果你可以理解坏字符规则，那么好后缀规则也很容易理解，当然，需要注意的是每次判断时坏字符只有一个，好后缀却有很多。（好后缀的个数等于好后缀的长度）</p>\n<p>我们还是用一个例子来说明好字符规则：</p>\n<img src=\"/2022/03/27/BM-algorithm/image-20220328005451919.png\" alt=\"image-20220328005451919\" style=\"zoom:51%;\">\n<p>根据好后缀规则，我们首先很容易找到最长的好后缀是<code>de</code>，那么<code>e</code>也是好后缀（因为<code>e</code>是好后缀的后缀子串）。那么下面我们要做的事情就是在substr中查找最长的能跟这些好后缀（<code>e,de</code>)匹配的子串。首先我们查找<code>e</code>这个好后缀，发现<code>substr[2]</code>与之匹配；然后查找好后缀<code>de</code>，发现<code>substr[1]</code>与之匹配。那么我们选择最长的那个子串，也就是<code>substr[1]</code>，因此<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>λ</mi><mn>3</mn></msub><mo>=</mo><mn>3</mn><mo separator=\"true\">,</mo><msub><mi>λ</mi><mn>4</mn></msub><mo>=</mo><mn>1</mn><mi mathvariant=\"normal\">，</mi><mi>m</mi><mi>o</mi><mi>v</mi><mi>e</mi><mi mathvariant=\"normal\">_</mi><mi>n</mi><mi>u</mi><mi>m</mi><mo>=</mo><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">\\lambda_3=3,\\lambda_4=1，move\\_num=2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">λ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\">3</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">λ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">4</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.95444em;vertical-align:-0.31em;\"></span><span class=\"mord\">1</span><span class=\"mord cjk_fallback\">，</span><span class=\"mord mathdefault\">m</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">v</span><span class=\"mord mathdefault\">e</span><span class=\"mord\" style=\"margin-right:0.02778em;\">_</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\">u</span><span class=\"mord mathdefault\">m</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span></span></span></span>，即向右移动两位。</p>\n<h2 id=\"bm的实现\"><a class=\"markdownIt-Anchor\" href=\"#bm的实现\"></a> BM的实现</h2>\n<h3 id=\"建立坏字符的hash-table\"><a class=\"markdownIt-Anchor\" href=\"#建立坏字符的hash-table\"></a> 建立坏字符的hash table</h3>\n<p>为了节省时间，我们将所有待匹配的字符都建立一个映射，这样在找到坏字符的时候就可以以<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span>的时间知道substr应该向右移动多少。其实就是用一个最简单的hash table来寻找<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>λ</mi><mn>2</mn></msub></mrow><annotation encoding=\"application/x-tex\">\\lambda_2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">λ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>的值。</p>\n<p>我们这里为了简单起见，只适配了256个ASCII字符，如果想加入中文，那么这个hash table将变得大一些。按照规则，如果substr没有出现的字符一律设置成<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>λ</mi><mn>2</mn></msub><mo>=</mo><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">\\lambda_2=-1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">λ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">−</span><span class=\"mord\">1</span></span></span></span>，因此我们将hash table初始化成<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">-1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">−</span><span class=\"mord\">1</span></span></span></span>。</p>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">generate_bad_char_table</span><span class=\"token punctuation\">(</span>string str<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    bad_char_table <span class=\"token operator\">=</span> new <span class=\"token keyword\">int</span> <span class=\"token punctuation\">[</span><span class=\"token number\">256</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">256</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        bad_char_table<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> ASCII<span class=\"token operator\">=</span>str<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        bad_char_table<span class=\"token punctuation\">[</span>ASCII<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>i<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<h3 id=\"好后缀的预处理\"><a class=\"markdownIt-Anchor\" href=\"#好后缀的预处理\"></a> 好后缀的预处理</h3>\n<p>根据好后缀规则，我们完全可以暴力求解<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>λ</mi><mn>3</mn></msub></mrow><annotation encoding=\"application/x-tex\">\\lambda _3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">λ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>和<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>λ</mi><mn>4</mn></msub></mrow><annotation encoding=\"application/x-tex\">\\lambda _4</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">λ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">4</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>的值，但是这样的效率显然不是最佳的，如果substr的长度比较大，那么每次判断好后缀的右移长度将浪费很多不必要的时间。因此我们可以对substr的所有好后缀进行预处理。建立两个长度与substr相等的数组，分别为<code>suffix[]</code>和<code>prefix[]</code><strong>，前者记录了substr中与好后缀匹配的最后一个字串的位置</strong>（即<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>λ</mi><mn>4</mn></msub></mrow><annotation encoding=\"application/x-tex\">\\lambda _4</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">λ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">4</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>)<strong>，后者记录了与好后缀匹配的前缀子串</strong>（不过目前鄙人认为没啥用）。</p>\n<p>听起来很懵，看一个例子：</p>\n<img src=\"/2022/03/27/BM-algorithm/image-20220328173308025.png\" alt=\"image-20220328173308025\" style=\"zoom:50%;\">\n<p>这样我们就可以知道所有好后缀的<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>λ</mi><mn>4</mn></msub></mrow><annotation encoding=\"application/x-tex\">\\lambda _4</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">λ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">4</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>的值，当我们找到str中的好后缀（也即<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>λ</mi><mn>3</mn></msub></mrow><annotation encoding=\"application/x-tex\">\\lambda_3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">λ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>），就可以用<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span>的时间知道向右移动的长度。</p>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">generate_suffix_prefix</span><span class=\"token punctuation\">(</span>string str<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> len<span class=\"token operator\">=</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    suffix<span class=\"token operator\">=</span> new <span class=\"token keyword\">int</span> <span class=\"token punctuation\">[</span>len<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    prefix <span class=\"token operator\">=</span> new bool <span class=\"token punctuation\">[</span>len<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>len<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        prefix<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span> false<span class=\"token punctuation\">;</span>\n        suffix<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>len<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span>i<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> k<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">>=</span><span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> str<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span>str<span class=\"token punctuation\">[</span>len<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">-</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//inverse search</span>\n        <span class=\"token punctuation\">&#123;</span>\n            j<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n            k<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            suffix<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">==</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//如果找到了开头</span>\n            prefix<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>true<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<h2 id=\"完整代码\"><a class=\"markdownIt-Anchor\" href=\"#完整代码\"></a> 完整代码</h2>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;algorithm></span></span>\nusing namespace std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> bad_char_table<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> suffix<span class=\"token punctuation\">;</span>\nbool<span class=\"token operator\">*</span> prefix<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">move_by_GS</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> ptr<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> str_len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//判断好后缀移动距离</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">BM</span><span class=\"token punctuation\">(</span>string str<span class=\"token punctuation\">,</span> string substr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//BM实现</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">generate_bad_char_table</span><span class=\"token punctuation\">(</span>string str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//建立坏字符hash table</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">generate_suffix_prefix</span><span class=\"token punctuation\">(</span>string str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//建立好后缀数组</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    string str<span class=\"token punctuation\">,</span>substr<span class=\"token punctuation\">;</span>\n    str<span class=\"token operator\">=</span><span class=\"token string\">\"abcdefgagabgag\"</span><span class=\"token punctuation\">;</span>\n    substr<span class=\"token operator\">=</span><span class=\"token string\">\"abg\"</span><span class=\"token punctuation\">;</span>\n    cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token function\">BM</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span>substr<span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">generate_bad_char_table</span><span class=\"token punctuation\">(</span>string str<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    bad_char_table <span class=\"token operator\">=</span> new <span class=\"token keyword\">int</span> <span class=\"token punctuation\">[</span><span class=\"token number\">256</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">256</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        bad_char_table<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> ASCII<span class=\"token operator\">=</span>str<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        bad_char_table<span class=\"token punctuation\">[</span>ASCII<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>i<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">generate_suffix_prefix</span><span class=\"token punctuation\">(</span>string str<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> len<span class=\"token operator\">=</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    suffix<span class=\"token operator\">=</span> new <span class=\"token keyword\">int</span> <span class=\"token punctuation\">[</span>len<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    prefix <span class=\"token operator\">=</span> new bool <span class=\"token punctuation\">[</span>len<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>len<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        prefix<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span> false<span class=\"token punctuation\">;</span>\n        suffix<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>len<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span>i<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> k<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">>=</span><span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> str<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span>str<span class=\"token punctuation\">[</span>len<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">-</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//inverse search</span>\n        <span class=\"token punctuation\">&#123;</span>\n            j<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n            k<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            suffix<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">==</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//如果找到了开头</span>\n            prefix<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>true<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">move_by_GS</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> ptr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> str_len<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> len<span class=\"token operator\">=</span>str_len<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">-</span>ptr<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>suffix<span class=\"token punctuation\">[</span>len<span class=\"token punctuation\">]</span><span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> ptr<span class=\"token operator\">-</span>suffix<span class=\"token punctuation\">[</span>len<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span>ptr<span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>str_len<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>prefix<span class=\"token punctuation\">[</span>str_len<span class=\"token operator\">-</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> i<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> str_len<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">BM</span><span class=\"token punctuation\">(</span>string str<span class=\"token punctuation\">,</span> string substr<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">generate_bad_char_table</span><span class=\"token punctuation\">(</span>substr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">generate_suffix_prefix</span><span class=\"token punctuation\">(</span>substr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> move_step<span class=\"token punctuation\">,</span>bad_char<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span>substr<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">+=</span>move_step<span class=\"token punctuation\">)</span><span class=\"token comment\">//从头到尾遍历</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span>substr<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">>=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//从后网线查找</span>\n        <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">!=</span>substr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//找到坏字符</span>\n            <span class=\"token punctuation\">&#123;</span>\n                bad_char<span class=\"token operator\">=</span>str<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                move_step<span class=\"token operator\">=</span>j<span class=\"token operator\">-</span>bad_char_table<span class=\"token punctuation\">[</span>bad_char<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//找到substr</span>\n            <span class=\"token punctuation\">&#123;</span>\n                delete <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> bad_char_table<span class=\"token punctuation\">;</span>\n                delete <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> suffix<span class=\"token punctuation\">;</span>\n                delete <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> prefix<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> i<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">&lt;</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//找到好后缀</span>\n                move_step<span class=\"token operator\">=</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>move_step<span class=\"token punctuation\">,</span> <span class=\"token function\">move_by_GS</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    delete <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> bad_char_table<span class=\"token punctuation\">;</span>\n    delete <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> suffix<span class=\"token punctuation\">;</span>\n    delete <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> prefix<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n</code></pre>\n"},{"title":"背包问题","date":"2022-03-10T13:35:50.000Z","katex":true,"_content":"\n背包问题(backpack problem)是最经典也是最简单的一类动态规划(dynamic programming)问题，本篇文章重点讲解背包问题中的0-1背包，完全背包，以及多重背包三大问题，顺带也会说明一下动态规划的基本策略，**适合完全不理解相关算法的初学者**。\n\n## 0-1背包(0-1 Knapsack Problem)\n\n### 1.1 问题描述\n\n一共有$N$件物品，每件物品的价格为$W_i$，价值为$V_i$，在总重量不超过背包承载上限$W_{max}$的情况下，如何分配使得装入背包的价值最高？\n\n### 1.2 问题分析\n\n最先想到的就是暴力穷举法，把每种可能的情况都装进去然后找到最大的情况，但是这样做显然是极其低效的，总的时间复杂度是$O(2^n)$.\n\n因此，这里引用了动态规划的思路。在这里我们以此为例，每一组的价格和价值如图所示，假设这里背包的最大重量为$10$。\n\n| N=5    | 1    | 2    | 3    | 4    | 5    |\n| :----- | :--- | :--- | :--- | :--- | :--- |\n| Weight | 1    | 3    | 4    | 5    | 2    |\n| Value  | 5    | 10   | 18   | 20   | 7    |\n\n那么接下来我们要做的事情是，创建一个二维数组`dp[i][j]`，这样的数组表示将前$i$件商品装入重量为j的背包中可以获得的最大价值，其中$$0\\leq i\\leq N\\qquad 0\\leq j\\leq W_{max}$$\n\n现在我们来看一下，按照这样的规则得到的二维数组是什么样子：\n\n|      | 1    | 2    | 3    | 4    | 5    |\n| :--- | :--- | :--- | :--- | :--- | :--- |\n| 1    | 5    | 5    | 5    | 5    | 5    |\n| 2    | 5    | 5    | 5    | 5    | 7    |\n| 3    | 5    | 10   | 10   | 10   | 12   |\n| 4    | 5    | 15   | 18   | 18   | 18   |\n| 5    | 5    | 15   | 23   | 23   | 23   |\n| 6    | 5    | 15   | 23   | 25   | 25   |\n| 7    | 5    | 15   | 28   | 28   | 30   |\n| 8    | 5    | 15   | 33   | 33   | 33   |\n| 9    | 5    | 15   | 33   | 38   | 38   |\n| 10   | 5    | 15   | 33   | 43   | 43   |\n\n最后的答案就是数组右下角的结果，那么我们又该如何通过程序得到这样的数组呢？\n\n当我们只有第一件物品的时候（数组的第一列），无论背包容量有多大都只能装下一个物品，所得到的价值也只有第一个物品的价值，此例中即为5.\n\n当我们拥有第二件物品的时候，就要做一个选择，**要么装入该物品（前提是能装得下），要么不装入该物品。**\n\n那么有人可能就会问了，既然是可以装得下，那么为什么不装入这个物品呢？如果一个物品很沉很沉价值又非常之低，那么我们转入了这个物品的总价值反而要少于装了其他同等重量物品的价值，这个时候装入该物品就显得很多余了。\n\n回到重点，对于这个二维数组来说，**不装入第$i$件物品的意思是`dp[i-1][j]`，装入第$i$件物品的意思是`dp[i-1][j-w[i]] + v[i]`.**\n\n请认真仔细的对照上面的数组，好好理解一下上面的表达式。那么我们得到的状态转移方程即为：$$\ndp[i][j]=max(dp[i-1][j],\\ dp[i-1][j-w[i]] + v[i]) $$\n\n### 1.3 python代码\n\n```python\nimport numpy as np\nn = 5\nw_max = 10\nw = [1, 3, 4, 5, 2]\nv = [5, 10, 18 ,20, 7]\ndp = np.zeros((n ,w_max + 1),dtype = np.int)\nfor i in range(0, n):\n    for j in range(0,w_max + 1):\n        if j - w[i] >= 0:\n            dp[i][j] = max(dp[i-1][j],dp[i-1][j-w[i]] + v[i])\n        else:\n            dp[i][j] = dp[i-1][j]\nprint(dp[n - 1][w_max])#43\n```\n\n### 1.4 算法优化\n\n我们可以看到，这样的0-1背包我们用时间复杂度为$O(W·N)$就可以解决，那么当$W_{max}$很大的时候，虽然时间复杂度是足够的，但是空间复杂度依旧为$O(W·N)$，这就导致了二维数组可能会超出内存限制。\n\n实际上，我们不难发现这样一个二维数组是从上至下一层一层进行的（上面的表格是从左至右），在每次进行下一层计算的时候，只有上一层的数据是有用的，其余的数据就没有任何作用了。即，`dp[i][j]`的值只与`dp[i-1][0]… … dp[i-1][j]`是有关系的。\n\n因此，我们可以利用这个特性，采用滚动数组的方法对空间复杂度进行优化，使其从二维变为长度为 $W_{max}$的一维数组。这种方法在动态规划中是一种常见的策略。\n\n至于为什么是一维数组，而不是两行数组(`dp[i][j]`与`dp[i-1][j]`)，我们只需要在循环j的时候做**逆向计算**，从最后一个物品往前推，这样就可以避免上一组数据被覆盖掉。（仔细想一想为什么）\n\n优化后的部分代码如下：\n\n```python\ndp = np.zeros(w_max + 1,dtype = np.int)\nfor i in range(0, n):\n    for j in range(w_max, -1, -1):\n        if j - w[i] >= 0:\n            dp[j] = max(dp[j],dp[j-w[i]] + v[i])\n```\n\n## 完全背包 (Unbounded Knapsack Problem)\n\n### 2.1 问题描述\n\n完全背包与0-1背包唯一的区别在于完全背包中每种物品可以有无限多个。\n\n### 2.2 问题分析\n\n对于完全背包问题，我们很自然的就能想到设置一个$$性价比=\\frac{V_i}{W_i}$$，这样一来只需要不停的装性价比最高的商品就能获得最优解。\n\n然而，事实上这样的作法很多时候并不能得到最高的答案，当背包即将装满但还有一定空余时（没办法再装下一个的时候），装性价比最高的商品不见得比装性价比不那么高但是能将背包装满的商品。\n\n事实上，上面的想法是完全可以进行下去的，只是稍稍麻烦一点。我们依旧围绕0-1背包的角度思考，只需要稍加修改即可。依旧是上一组数据，只不过每个物品可以无限拿取。\n\n| N=5    | 1    | 2    | 3    | 4    | 5    |\n| :----- | :--- | :--- | :--- | :--- | :--- |\n| Weight | 1    | 3    | 4    | 5    | 2    |\n| Value  | 5    | 10   | 18   | 20   | 7    |\n\n对于完全背包问题，我们依旧是做一个选择，装与不装第$i$件物品：\n\n- 不把物品$i$装入背包：`dp[i][j]=dp[i-1][j]`\n- 把物品$i$装入背包：`dp[i][j]=dp[i][j-w[i]] + v[i]`\n\n(相比于0-1背包，唯一的区别就是`dp[i][j]=dp[i-1][j-w[i]] + v[i]`\n\n这里肯定有很多小伙伴一脸懵逼，不妨停下来多思考思考。我在写这个文章的时候在这里也停顿了很久，不知道如何言简意赅的来阐述这样的思路。\n\n0-1背包当取走第$i$个物品时，需要找到第$i-1$个物品的最优解中，当取走第$i$个物品时，它也可以再次取走自己，所以只需要找到第$i$个物品的最优解即可。\n\n因此，完全背包的状态转移方程为：$$\ndp[i][j]=max(dp[i-1][j],\\ dp[i][j-w[i]] + v[i])\n\n### 2.3 算法优化\n\n对于完全背包依旧可以优化空间复杂度，如同0-1背包一样将其压缩到一维数组。唯一的不同点在于完全背包的滚动数组在循环j的时候需要**正向计算**。从第一个物品往后推，这样就可以避免上一组数据被覆盖掉。（仔细想一想为什么）\n\n优化后的部分代码如下：\n\n```python\ndp = np.zeros((w_max + 1,dtype = np.int)\nfor i in range(0, n)\n    for j in range(0,w_max + 1):\n        if j - w[i] >= 0:\n            dp[j] = max(dp[j],dp[j-w[i]] + v[i])\n```\n\n一件很有趣的事情是，我们回过头来看*1.4节*的0-1背包优化算法，有没有发现他们长得十分相似呢？\n\n此外，对于物品是无限的情况来说，如果有一个物品重量超过另一个物品然而价值又低于另一个物品，那么这样的物品就可以扔掉了。\n\n我们只需要花费$O(N^2)$的时间复杂度进行一次搜索，或许可以排除掉大量没有价值的商品，这样可以极大的节约动态规划的时间开销和空间开销。\n\n### 2.4 另一种思路\n\n我们回过头来看2.1节提到的思路，不妨在此基础上想一下，我们完全可以将完全背包转换成0-1背包。\n\n虽然每件商品的数量是无限的，但是总量$W_{max}$是有限的。因此我们可以计算出每件商品最多可以装入$$\\frac{W_{max}}{W_i}$$个，这样一来，我们就拥有了有限多个商品。\n\n当然，这种思路根本谈不上优化，因为其完全没有降低时间复杂度和空间复杂度，只是提供了另一种思路罢了。\n\n```python\ndp = np.zeros((n ,w_max + 1),dtype = np.int)\nfor i in range(0, n):\n    for j in range(0, w_max + 1):\n        for k in range(0, w_max//w[i] + 1):\n            if j - k * w[i] >= 0:\n                dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - k * w[i]] + k * v[i])\n```\n\n更高效的做法是使用二进制，即将每种物品的**取的个数**都用$$V_i=\\sum2^i\\quad 0\\leq i\\leq\\log_2V_i$$来表示（这是一个常识，任何数字都可以分解成以$2$为指数的数组），如$13$，我们可以表示为$13= 2^0 + 2^2 +2^3$.\n\n我们的目的就是要找出第i件物品要取几个好，那么与其用传统的方法每次取一个，然后询问取好呢还是不取好呢，不如用二进制的方法来代替。\n\n举例说明，第一件物品最多可以取$13$个，假设取$7$个是最优解，那么我们第一次询问取$2^0$个该物品好不好，然后询问$2^1,2^2,2^3… …$，最终得到了 $2^0 +2^2+2^1=7$这样的一个结果，我们只需要询问$4$次而非$13$次，这是一个从$n$降到$\\log n$级别的优化。\n\n现在，小伙伴们可能已经彻底蒙圈了，或许能稍稍理解这样的思想，但是却怎么也写不出来，没关系，只要稍微理解以上的思路就好，我们先来看下一节。\n\n## 多重背包(bounded knapsack problem)\n\n### 3.1 问题描述\n\n多重背包与前面的完全背包的不同点在于每种物品是有限多个。\n\n### 3.2 问题分析\n\n我们在*2.4节*中提到，完全背包每种物品其实也是有上限的，即加和不应当超过背包的最大承载重量。那么，既然完全背包可以转化成0-1背包问题进行求解，多重背包自然也可以。\n\n我们依旧是分为两个部分，装与不装。\n\n- 不把物品$i$装入背包：`dp[i][j]=dp[i-1][j]`\n- 把物品$i$装入背包：因为每种物品有数量限制，因此我们需要在限制数量中找到最大的价值，此时`dp[i][j]=dp[i-1][j-k*w[i]] + k*v[i-1]`\n\n因此，状态转移方程为：$$\ndp[i][j]=max(dp[i-1][j],\\ dp[i][j-k*w[i]] + k*v[i])\n$$\n\n### 3.3 python代码\n\n```python\nimport numpy as np\nn = 5\nw_max = 10\nw = [1, 3, 4, 5, 2]    #weight\nv = [5, 10, 18 ,20, 7] #value\nmaxx = [3, 5, 1, 8, 2] #maximum number\ndp = np.zeros((n ,w_max + 1),dtype = np.int)\nfor i in range(0, n):\n    for j in range(0, w_max + 1):\n        for k in range(0, min(w_max//w[i], maxx[i]) + 1):\n            if j - k * w[i] >= 0:\n                dp[i][j] = max(dp[i - 1][j],\n                dp[i - 1][j - k * w[i]] + k * v[i])\nprint(dp)\nprint(dp[n - 1][w_max]) #42\n```\n\n### 3.4 算法优化\n\n无论是完全背包还是多重背包，都存在着一种优化方式，就是2进制优化。","source":"_posts/Backpack.md","raw":"---\ntitle: 背包问题\ndate: 2022-03-10 21:35:50\ntags:\n\t- algorithm\n\t- 背包问题\n\t- DP\ncategories:\n\t- algorithm\nkatex: true\n---\n\n背包问题(backpack problem)是最经典也是最简单的一类动态规划(dynamic programming)问题，本篇文章重点讲解背包问题中的0-1背包，完全背包，以及多重背包三大问题，顺带也会说明一下动态规划的基本策略，**适合完全不理解相关算法的初学者**。\n\n## 0-1背包(0-1 Knapsack Problem)\n\n### 1.1 问题描述\n\n一共有$N$件物品，每件物品的价格为$W_i$，价值为$V_i$，在总重量不超过背包承载上限$W_{max}$的情况下，如何分配使得装入背包的价值最高？\n\n### 1.2 问题分析\n\n最先想到的就是暴力穷举法，把每种可能的情况都装进去然后找到最大的情况，但是这样做显然是极其低效的，总的时间复杂度是$O(2^n)$.\n\n因此，这里引用了动态规划的思路。在这里我们以此为例，每一组的价格和价值如图所示，假设这里背包的最大重量为$10$。\n\n| N=5    | 1    | 2    | 3    | 4    | 5    |\n| :----- | :--- | :--- | :--- | :--- | :--- |\n| Weight | 1    | 3    | 4    | 5    | 2    |\n| Value  | 5    | 10   | 18   | 20   | 7    |\n\n那么接下来我们要做的事情是，创建一个二维数组`dp[i][j]`，这样的数组表示将前$i$件商品装入重量为j的背包中可以获得的最大价值，其中$$0\\leq i\\leq N\\qquad 0\\leq j\\leq W_{max}$$\n\n现在我们来看一下，按照这样的规则得到的二维数组是什么样子：\n\n|      | 1    | 2    | 3    | 4    | 5    |\n| :--- | :--- | :--- | :--- | :--- | :--- |\n| 1    | 5    | 5    | 5    | 5    | 5    |\n| 2    | 5    | 5    | 5    | 5    | 7    |\n| 3    | 5    | 10   | 10   | 10   | 12   |\n| 4    | 5    | 15   | 18   | 18   | 18   |\n| 5    | 5    | 15   | 23   | 23   | 23   |\n| 6    | 5    | 15   | 23   | 25   | 25   |\n| 7    | 5    | 15   | 28   | 28   | 30   |\n| 8    | 5    | 15   | 33   | 33   | 33   |\n| 9    | 5    | 15   | 33   | 38   | 38   |\n| 10   | 5    | 15   | 33   | 43   | 43   |\n\n最后的答案就是数组右下角的结果，那么我们又该如何通过程序得到这样的数组呢？\n\n当我们只有第一件物品的时候（数组的第一列），无论背包容量有多大都只能装下一个物品，所得到的价值也只有第一个物品的价值，此例中即为5.\n\n当我们拥有第二件物品的时候，就要做一个选择，**要么装入该物品（前提是能装得下），要么不装入该物品。**\n\n那么有人可能就会问了，既然是可以装得下，那么为什么不装入这个物品呢？如果一个物品很沉很沉价值又非常之低，那么我们转入了这个物品的总价值反而要少于装了其他同等重量物品的价值，这个时候装入该物品就显得很多余了。\n\n回到重点，对于这个二维数组来说，**不装入第$i$件物品的意思是`dp[i-1][j]`，装入第$i$件物品的意思是`dp[i-1][j-w[i]] + v[i]`.**\n\n请认真仔细的对照上面的数组，好好理解一下上面的表达式。那么我们得到的状态转移方程即为：$$\ndp[i][j]=max(dp[i-1][j],\\ dp[i-1][j-w[i]] + v[i]) $$\n\n### 1.3 python代码\n\n```python\nimport numpy as np\nn = 5\nw_max = 10\nw = [1, 3, 4, 5, 2]\nv = [5, 10, 18 ,20, 7]\ndp = np.zeros((n ,w_max + 1),dtype = np.int)\nfor i in range(0, n):\n    for j in range(0,w_max + 1):\n        if j - w[i] >= 0:\n            dp[i][j] = max(dp[i-1][j],dp[i-1][j-w[i]] + v[i])\n        else:\n            dp[i][j] = dp[i-1][j]\nprint(dp[n - 1][w_max])#43\n```\n\n### 1.4 算法优化\n\n我们可以看到，这样的0-1背包我们用时间复杂度为$O(W·N)$就可以解决，那么当$W_{max}$很大的时候，虽然时间复杂度是足够的，但是空间复杂度依旧为$O(W·N)$，这就导致了二维数组可能会超出内存限制。\n\n实际上，我们不难发现这样一个二维数组是从上至下一层一层进行的（上面的表格是从左至右），在每次进行下一层计算的时候，只有上一层的数据是有用的，其余的数据就没有任何作用了。即，`dp[i][j]`的值只与`dp[i-1][0]… … dp[i-1][j]`是有关系的。\n\n因此，我们可以利用这个特性，采用滚动数组的方法对空间复杂度进行优化，使其从二维变为长度为 $W_{max}$的一维数组。这种方法在动态规划中是一种常见的策略。\n\n至于为什么是一维数组，而不是两行数组(`dp[i][j]`与`dp[i-1][j]`)，我们只需要在循环j的时候做**逆向计算**，从最后一个物品往前推，这样就可以避免上一组数据被覆盖掉。（仔细想一想为什么）\n\n优化后的部分代码如下：\n\n```python\ndp = np.zeros(w_max + 1,dtype = np.int)\nfor i in range(0, n):\n    for j in range(w_max, -1, -1):\n        if j - w[i] >= 0:\n            dp[j] = max(dp[j],dp[j-w[i]] + v[i])\n```\n\n## 完全背包 (Unbounded Knapsack Problem)\n\n### 2.1 问题描述\n\n完全背包与0-1背包唯一的区别在于完全背包中每种物品可以有无限多个。\n\n### 2.2 问题分析\n\n对于完全背包问题，我们很自然的就能想到设置一个$$性价比=\\frac{V_i}{W_i}$$，这样一来只需要不停的装性价比最高的商品就能获得最优解。\n\n然而，事实上这样的作法很多时候并不能得到最高的答案，当背包即将装满但还有一定空余时（没办法再装下一个的时候），装性价比最高的商品不见得比装性价比不那么高但是能将背包装满的商品。\n\n事实上，上面的想法是完全可以进行下去的，只是稍稍麻烦一点。我们依旧围绕0-1背包的角度思考，只需要稍加修改即可。依旧是上一组数据，只不过每个物品可以无限拿取。\n\n| N=5    | 1    | 2    | 3    | 4    | 5    |\n| :----- | :--- | :--- | :--- | :--- | :--- |\n| Weight | 1    | 3    | 4    | 5    | 2    |\n| Value  | 5    | 10   | 18   | 20   | 7    |\n\n对于完全背包问题，我们依旧是做一个选择，装与不装第$i$件物品：\n\n- 不把物品$i$装入背包：`dp[i][j]=dp[i-1][j]`\n- 把物品$i$装入背包：`dp[i][j]=dp[i][j-w[i]] + v[i]`\n\n(相比于0-1背包，唯一的区别就是`dp[i][j]=dp[i-1][j-w[i]] + v[i]`\n\n这里肯定有很多小伙伴一脸懵逼，不妨停下来多思考思考。我在写这个文章的时候在这里也停顿了很久，不知道如何言简意赅的来阐述这样的思路。\n\n0-1背包当取走第$i$个物品时，需要找到第$i-1$个物品的最优解中，当取走第$i$个物品时，它也可以再次取走自己，所以只需要找到第$i$个物品的最优解即可。\n\n因此，完全背包的状态转移方程为：$$\ndp[i][j]=max(dp[i-1][j],\\ dp[i][j-w[i]] + v[i])\n\n### 2.3 算法优化\n\n对于完全背包依旧可以优化空间复杂度，如同0-1背包一样将其压缩到一维数组。唯一的不同点在于完全背包的滚动数组在循环j的时候需要**正向计算**。从第一个物品往后推，这样就可以避免上一组数据被覆盖掉。（仔细想一想为什么）\n\n优化后的部分代码如下：\n\n```python\ndp = np.zeros((w_max + 1,dtype = np.int)\nfor i in range(0, n)\n    for j in range(0,w_max + 1):\n        if j - w[i] >= 0:\n            dp[j] = max(dp[j],dp[j-w[i]] + v[i])\n```\n\n一件很有趣的事情是，我们回过头来看*1.4节*的0-1背包优化算法，有没有发现他们长得十分相似呢？\n\n此外，对于物品是无限的情况来说，如果有一个物品重量超过另一个物品然而价值又低于另一个物品，那么这样的物品就可以扔掉了。\n\n我们只需要花费$O(N^2)$的时间复杂度进行一次搜索，或许可以排除掉大量没有价值的商品，这样可以极大的节约动态规划的时间开销和空间开销。\n\n### 2.4 另一种思路\n\n我们回过头来看2.1节提到的思路，不妨在此基础上想一下，我们完全可以将完全背包转换成0-1背包。\n\n虽然每件商品的数量是无限的，但是总量$W_{max}$是有限的。因此我们可以计算出每件商品最多可以装入$$\\frac{W_{max}}{W_i}$$个，这样一来，我们就拥有了有限多个商品。\n\n当然，这种思路根本谈不上优化，因为其完全没有降低时间复杂度和空间复杂度，只是提供了另一种思路罢了。\n\n```python\ndp = np.zeros((n ,w_max + 1),dtype = np.int)\nfor i in range(0, n):\n    for j in range(0, w_max + 1):\n        for k in range(0, w_max//w[i] + 1):\n            if j - k * w[i] >= 0:\n                dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - k * w[i]] + k * v[i])\n```\n\n更高效的做法是使用二进制，即将每种物品的**取的个数**都用$$V_i=\\sum2^i\\quad 0\\leq i\\leq\\log_2V_i$$来表示（这是一个常识，任何数字都可以分解成以$2$为指数的数组），如$13$，我们可以表示为$13= 2^0 + 2^2 +2^3$.\n\n我们的目的就是要找出第i件物品要取几个好，那么与其用传统的方法每次取一个，然后询问取好呢还是不取好呢，不如用二进制的方法来代替。\n\n举例说明，第一件物品最多可以取$13$个，假设取$7$个是最优解，那么我们第一次询问取$2^0$个该物品好不好，然后询问$2^1,2^2,2^3… …$，最终得到了 $2^0 +2^2+2^1=7$这样的一个结果，我们只需要询问$4$次而非$13$次，这是一个从$n$降到$\\log n$级别的优化。\n\n现在，小伙伴们可能已经彻底蒙圈了，或许能稍稍理解这样的思想，但是却怎么也写不出来，没关系，只要稍微理解以上的思路就好，我们先来看下一节。\n\n## 多重背包(bounded knapsack problem)\n\n### 3.1 问题描述\n\n多重背包与前面的完全背包的不同点在于每种物品是有限多个。\n\n### 3.2 问题分析\n\n我们在*2.4节*中提到，完全背包每种物品其实也是有上限的，即加和不应当超过背包的最大承载重量。那么，既然完全背包可以转化成0-1背包问题进行求解，多重背包自然也可以。\n\n我们依旧是分为两个部分，装与不装。\n\n- 不把物品$i$装入背包：`dp[i][j]=dp[i-1][j]`\n- 把物品$i$装入背包：因为每种物品有数量限制，因此我们需要在限制数量中找到最大的价值，此时`dp[i][j]=dp[i-1][j-k*w[i]] + k*v[i-1]`\n\n因此，状态转移方程为：$$\ndp[i][j]=max(dp[i-1][j],\\ dp[i][j-k*w[i]] + k*v[i])\n$$\n\n### 3.3 python代码\n\n```python\nimport numpy as np\nn = 5\nw_max = 10\nw = [1, 3, 4, 5, 2]    #weight\nv = [5, 10, 18 ,20, 7] #value\nmaxx = [3, 5, 1, 8, 2] #maximum number\ndp = np.zeros((n ,w_max + 1),dtype = np.int)\nfor i in range(0, n):\n    for j in range(0, w_max + 1):\n        for k in range(0, min(w_max//w[i], maxx[i]) + 1):\n            if j - k * w[i] >= 0:\n                dp[i][j] = max(dp[i - 1][j],\n                dp[i - 1][j - k * w[i]] + k * v[i])\nprint(dp)\nprint(dp[n - 1][w_max]) #42\n```\n\n### 3.4 算法优化\n\n无论是完全背包还是多重背包，都存在着一种优化方式，就是2进制优化。","slug":"Backpack","published":1,"updated":"2022-03-13T14:32:27.784Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1rj2n4y0008gwcy291l747g","content":"<p>背包问题(backpack problem)是最经典也是最简单的一类动态规划(dynamic programming)问题，本篇文章重点讲解背包问题中的0-1背包，完全背包，以及多重背包三大问题，顺带也会说明一下动态规划的基本策略，<strong>适合完全不理解相关算法的初学者</strong>。</p>\n<h2 id=\"0-1背包0-1-knapsack-problem\"><a class=\"markdownIt-Anchor\" href=\"#0-1背包0-1-knapsack-problem\"></a> 0-1背包(0-1 Knapsack Problem)</h2>\n<h3 id=\"11-问题描述\"><a class=\"markdownIt-Anchor\" href=\"#11-问题描述\"></a> 1.1 问题描述</h3>\n<p>一共有<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">N</span></span></span></span>件物品，每件物品的价格为<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>W</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">W_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">W</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>，价值为<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>V</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">V_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.22222em;\">V</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>，在总重量不超过背包承载上限<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>W</mi><mrow><mi>m</mi><mi>a</mi><mi>x</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">W_{max}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">W</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">m</span><span class=\"mord mathdefault mtight\">a</span><span class=\"mord mathdefault mtight\">x</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>的情况下，如何分配使得装入背包的价值最高？</p>\n<h3 id=\"12-问题分析\"><a class=\"markdownIt-Anchor\" href=\"#12-问题分析\"></a> 1.2 问题分析</h3>\n<p>最先想到的就是暴力穷举法，把每种可能的情况都装进去然后找到最大的情况，但是这样做显然是极其低效的，总的时间复杂度是<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mn>2</mn><mi>n</mi></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(2^n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>.</p>\n<p>因此，这里引用了动态规划的思路。在这里我们以此为例，每一组的价格和价值如图所示，假设这里背包的最大重量为<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>10</mn></mrow><annotation encoding=\"application/x-tex\">10</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\">0</span></span></span></span>。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">N=5</th>\n<th style=\"text-align:left\">1</th>\n<th style=\"text-align:left\">2</th>\n<th style=\"text-align:left\">3</th>\n<th style=\"text-align:left\">4</th>\n<th style=\"text-align:left\">5</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">Weight</td>\n<td style=\"text-align:left\">1</td>\n<td style=\"text-align:left\">3</td>\n<td style=\"text-align:left\">4</td>\n<td style=\"text-align:left\">5</td>\n<td style=\"text-align:left\">2</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Value</td>\n<td style=\"text-align:left\">5</td>\n<td style=\"text-align:left\">10</td>\n<td style=\"text-align:left\">18</td>\n<td style=\"text-align:left\">20</td>\n<td style=\"text-align:left\">7</td>\n</tr>\n</tbody>\n</table>\n<p>那么接下来我们要做的事情是，创建一个二维数组<code>dp[i][j]</code>，这样的数组表示将前<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">i</span></span></span></span>件商品装入重量为j的背包中可以获得的最大价值，其中$$0\\leq i\\leq N\\qquad 0\\leq j\\leq W_{max}$$</p>\n<p>现在我们来看一下，按照这样的规则得到的二维数组是什么样子：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\"></th>\n<th style=\"text-align:left\">1</th>\n<th style=\"text-align:left\">2</th>\n<th style=\"text-align:left\">3</th>\n<th style=\"text-align:left\">4</th>\n<th style=\"text-align:left\">5</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">1</td>\n<td style=\"text-align:left\">5</td>\n<td style=\"text-align:left\">5</td>\n<td style=\"text-align:left\">5</td>\n<td style=\"text-align:left\">5</td>\n<td style=\"text-align:left\">5</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">2</td>\n<td style=\"text-align:left\">5</td>\n<td style=\"text-align:left\">5</td>\n<td style=\"text-align:left\">5</td>\n<td style=\"text-align:left\">5</td>\n<td style=\"text-align:left\">7</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">3</td>\n<td style=\"text-align:left\">5</td>\n<td style=\"text-align:left\">10</td>\n<td style=\"text-align:left\">10</td>\n<td style=\"text-align:left\">10</td>\n<td style=\"text-align:left\">12</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">4</td>\n<td style=\"text-align:left\">5</td>\n<td style=\"text-align:left\">15</td>\n<td style=\"text-align:left\">18</td>\n<td style=\"text-align:left\">18</td>\n<td style=\"text-align:left\">18</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">5</td>\n<td style=\"text-align:left\">5</td>\n<td style=\"text-align:left\">15</td>\n<td style=\"text-align:left\">23</td>\n<td style=\"text-align:left\">23</td>\n<td style=\"text-align:left\">23</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">6</td>\n<td style=\"text-align:left\">5</td>\n<td style=\"text-align:left\">15</td>\n<td style=\"text-align:left\">23</td>\n<td style=\"text-align:left\">25</td>\n<td style=\"text-align:left\">25</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">7</td>\n<td style=\"text-align:left\">5</td>\n<td style=\"text-align:left\">15</td>\n<td style=\"text-align:left\">28</td>\n<td style=\"text-align:left\">28</td>\n<td style=\"text-align:left\">30</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">8</td>\n<td style=\"text-align:left\">5</td>\n<td style=\"text-align:left\">15</td>\n<td style=\"text-align:left\">33</td>\n<td style=\"text-align:left\">33</td>\n<td style=\"text-align:left\">33</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">9</td>\n<td style=\"text-align:left\">5</td>\n<td style=\"text-align:left\">15</td>\n<td style=\"text-align:left\">33</td>\n<td style=\"text-align:left\">38</td>\n<td style=\"text-align:left\">38</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">10</td>\n<td style=\"text-align:left\">5</td>\n<td style=\"text-align:left\">15</td>\n<td style=\"text-align:left\">33</td>\n<td style=\"text-align:left\">43</td>\n<td style=\"text-align:left\">43</td>\n</tr>\n</tbody>\n</table>\n<p>最后的答案就是数组右下角的结果，那么我们又该如何通过程序得到这样的数组呢？</p>\n<p>当我们只有第一件物品的时候（数组的第一列），无论背包容量有多大都只能装下一个物品，所得到的价值也只有第一个物品的价值，此例中即为5.</p>\n<p>当我们拥有第二件物品的时候，就要做一个选择，<strong>要么装入该物品（前提是能装得下），要么不装入该物品。</strong></p>\n<p>那么有人可能就会问了，既然是可以装得下，那么为什么不装入这个物品呢？如果一个物品很沉很沉价值又非常之低，那么我们转入了这个物品的总价值反而要少于装了其他同等重量物品的价值，这个时候装入该物品就显得很多余了。</p>\n<p>回到重点，对于这个二维数组来说，<strong>不装入第<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">i</span></span></span></span>件物品的意思是<code>dp[i-1][j]</code>，装入第<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">i</span></span></span></span>件物品的意思是<code>dp[i-1][j-w[i]] + v[i]</code>.</strong></p>\n<p>请认真仔细的对照上面的数组，好好理解一下上面的表达式。那么我们得到的状态转移方程即为：$$<br>\ndp[i][j]=max(dp[i-1][j],\\ dp[i-1][j-w[i]] + v[i]) $$</p>\n<h3 id=\"13-python代码\"><a class=\"markdownIt-Anchor\" href=\"#13-python代码\"></a> 1.3 python代码</h3>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\nn <span class=\"token operator\">=</span> <span class=\"token number\">5</span>\nw_max <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\nw <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\nv <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span> <span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">]</span>\ndp <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>zeros<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>n <span class=\"token punctuation\">,</span>w_max <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>dtype <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>w_max <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> j <span class=\"token operator\">-</span> w<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n            dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>dp<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token operator\">-</span>w<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> v<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> dp<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>w_max<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token comment\">#43</span></code></pre>\n<h3 id=\"14-算法优化\"><a class=\"markdownIt-Anchor\" href=\"#14-算法优化\"></a> 1.4 算法优化</h3>\n<p>我们可以看到，这样的0-1背包我们用时间复杂度为<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>W</mi><mo separator=\"true\">⋅</mo><mi>N</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(W·N)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">W</span><span class=\"mpunct\">⋅</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">N</span><span class=\"mclose\">)</span></span></span></span>就可以解决，那么当<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>W</mi><mrow><mi>m</mi><mi>a</mi><mi>x</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">W_{max}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">W</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">m</span><span class=\"mord mathdefault mtight\">a</span><span class=\"mord mathdefault mtight\">x</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>很大的时候，虽然时间复杂度是足够的，但是空间复杂度依旧为<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>W</mi><mo separator=\"true\">⋅</mo><mi>N</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(W·N)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">W</span><span class=\"mpunct\">⋅</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">N</span><span class=\"mclose\">)</span></span></span></span>，这就导致了二维数组可能会超出内存限制。</p>\n<p>实际上，我们不难发现这样一个二维数组是从上至下一层一层进行的（上面的表格是从左至右），在每次进行下一层计算的时候，只有上一层的数据是有用的，其余的数据就没有任何作用了。即，<code>dp[i][j]</code>的值只与<code>dp[i-1][0]… … dp[i-1][j]</code>是有关系的。</p>\n<p>因此，我们可以利用这个特性，采用滚动数组的方法对空间复杂度进行优化，使其从二维变为长度为 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>W</mi><mrow><mi>m</mi><mi>a</mi><mi>x</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">W_{max}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">W</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">m</span><span class=\"mord mathdefault mtight\">a</span><span class=\"mord mathdefault mtight\">x</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>的一维数组。这种方法在动态规划中是一种常见的策略。</p>\n<p>至于为什么是一维数组，而不是两行数组(<code>dp[i][j]</code>与<code>dp[i-1][j]</code>)，我们只需要在循环j的时候做<strong>逆向计算</strong>，从最后一个物品往前推，这样就可以避免上一组数据被覆盖掉。（仔细想一想为什么）</p>\n<p>优化后的部分代码如下：</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">dp <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>zeros<span class=\"token punctuation\">(</span>w_max <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>dtype <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>w_max<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> j <span class=\"token operator\">-</span> w<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n            dp<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>dp<span class=\"token punctuation\">[</span>j<span class=\"token operator\">-</span>w<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> v<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre>\n<h2 id=\"完全背包-unbounded-knapsack-problem\"><a class=\"markdownIt-Anchor\" href=\"#完全背包-unbounded-knapsack-problem\"></a> 完全背包 (Unbounded Knapsack Problem)</h2>\n<h3 id=\"21-问题描述\"><a class=\"markdownIt-Anchor\" href=\"#21-问题描述\"></a> 2.1 问题描述</h3>\n<p>完全背包与0-1背包唯一的区别在于完全背包中每种物品可以有无限多个。</p>\n<h3 id=\"22-问题分析\"><a class=\"markdownIt-Anchor\" href=\"#22-问题分析\"></a> 2.2 问题分析</h3>\n<p>对于完全背包问题，我们很自然的就能想到设置一个$$性价比=\\frac{V_i}{W_i}$$，这样一来只需要不停的装性价比最高的商品就能获得最优解。</p>\n<p>然而，事实上这样的作法很多时候并不能得到最高的答案，当背包即将装满但还有一定空余时（没办法再装下一个的时候），装性价比最高的商品不见得比装性价比不那么高但是能将背包装满的商品。</p>\n<p>事实上，上面的想法是完全可以进行下去的，只是稍稍麻烦一点。我们依旧围绕0-1背包的角度思考，只需要稍加修改即可。依旧是上一组数据，只不过每个物品可以无限拿取。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">N=5</th>\n<th style=\"text-align:left\">1</th>\n<th style=\"text-align:left\">2</th>\n<th style=\"text-align:left\">3</th>\n<th style=\"text-align:left\">4</th>\n<th style=\"text-align:left\">5</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">Weight</td>\n<td style=\"text-align:left\">1</td>\n<td style=\"text-align:left\">3</td>\n<td style=\"text-align:left\">4</td>\n<td style=\"text-align:left\">5</td>\n<td style=\"text-align:left\">2</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Value</td>\n<td style=\"text-align:left\">5</td>\n<td style=\"text-align:left\">10</td>\n<td style=\"text-align:left\">18</td>\n<td style=\"text-align:left\">20</td>\n<td style=\"text-align:left\">7</td>\n</tr>\n</tbody>\n</table>\n<p>对于完全背包问题，我们依旧是做一个选择，装与不装第<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">i</span></span></span></span>件物品：</p>\n<ul>\n<li>不把物品<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">i</span></span></span></span>装入背包：<code>dp[i][j]=dp[i-1][j]</code></li>\n<li>把物品<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">i</span></span></span></span>装入背包：<code>dp[i][j]=dp[i][j-w[i]] + v[i]</code></li>\n</ul>\n<p>(相比于0-1背包，唯一的区别就是<code>dp[i][j]=dp[i-1][j-w[i]] + v[i]</code></p>\n<p>这里肯定有很多小伙伴一脸懵逼，不妨停下来多思考思考。我在写这个文章的时候在这里也停顿了很久，不知道如何言简意赅的来阐述这样的思路。</p>\n<p>0-1背包当取走第<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">i</span></span></span></span>个物品时，需要找到第<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">i-1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.74285em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\">i</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>个物品的最优解中，当取走第<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">i</span></span></span></span>个物品时，它也可以再次取走自己，所以只需要找到第<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">i</span></span></span></span>个物品的最优解即可。</p>\n<p>因此，完全背包的状态转移方程为：$$<br>\ndp[i][j]=max(dp[i-1][j],\\ dp[i][j-w[i]] + v[i])</p>\n<h3 id=\"23-算法优化\"><a class=\"markdownIt-Anchor\" href=\"#23-算法优化\"></a> 2.3 算法优化</h3>\n<p>对于完全背包依旧可以优化空间复杂度，如同0-1背包一样将其压缩到一维数组。唯一的不同点在于完全背包的滚动数组在循环j的时候需要<strong>正向计算</strong>。从第一个物品往后推，这样就可以避免上一组数据被覆盖掉。（仔细想一想为什么）</p>\n<p>优化后的部分代码如下：</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">dp <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>zeros<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>w_max <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>dtype <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>w_max <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> j <span class=\"token operator\">-</span> w<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n            dp<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>dp<span class=\"token punctuation\">[</span>j<span class=\"token operator\">-</span>w<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> v<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre>\n<p>一件很有趣的事情是，我们回过头来看<em>1.4节</em>的0-1背包优化算法，有没有发现他们长得十分相似呢？</p>\n<p>此外，对于物品是无限的情况来说，如果有一个物品重量超过另一个物品然而价值又低于另一个物品，那么这样的物品就可以扔掉了。</p>\n<p>我们只需要花费<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>N</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(N^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">N</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>的时间复杂度进行一次搜索，或许可以排除掉大量没有价值的商品，这样可以极大的节约动态规划的时间开销和空间开销。</p>\n<h3 id=\"24-另一种思路\"><a class=\"markdownIt-Anchor\" href=\"#24-另一种思路\"></a> 2.4 另一种思路</h3>\n<p>我们回过头来看2.1节提到的思路，不妨在此基础上想一下，我们完全可以将完全背包转换成0-1背包。</p>\n<p>虽然每件商品的数量是无限的，但是总量<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>W</mi><mrow><mi>m</mi><mi>a</mi><mi>x</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">W_{max}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">W</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">m</span><span class=\"mord mathdefault mtight\">a</span><span class=\"mord mathdefault mtight\">x</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>是有限的。因此我们可以计算出每件商品最多可以装入$$\\frac{W_{max}}{W_i}$$个，这样一来，我们就拥有了有限多个商品。</p>\n<p>当然，这种思路根本谈不上优化，因为其完全没有降低时间复杂度和空间复杂度，只是提供了另一种思路罢了。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">dp <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>zeros<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>n <span class=\"token punctuation\">,</span>w_max <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>dtype <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> w_max <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">for</span> k <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> w_max<span class=\"token operator\">//</span>w<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> j <span class=\"token operator\">-</span> k <span class=\"token operator\">*</span> w<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n                dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> dp<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> k <span class=\"token operator\">*</span> w<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> k <span class=\"token operator\">*</span> v<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre>\n<p>更高效的做法是使用二进制，即将每种物品的<strong>取的个数</strong>都用$$V_i=\\sum2^i\\quad 0\\leq i\\leq\\log_2V_i$$来表示（这是一个常识，任何数字都可以分解成以<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span></span></span></span>为指数的数组），如<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>13</mn></mrow><annotation encoding=\"application/x-tex\">13</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\">3</span></span></span></span>，我们可以表示为<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>13</mn><mo>=</mo><msup><mn>2</mn><mn>0</mn></msup><mo>+</mo><msup><mn>2</mn><mn>2</mn></msup><mo>+</mo><msup><mn>2</mn><mn>3</mn></msup></mrow><annotation encoding=\"application/x-tex\">13= 2^0 + 2^2 +2^3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\">3</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.897438em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.897438em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span></span></span></span>.</p>\n<p>我们的目的就是要找出第i件物品要取几个好，那么与其用传统的方法每次取一个，然后询问取好呢还是不取好呢，不如用二进制的方法来代替。</p>\n<p>举例说明，第一件物品最多可以取<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>13</mn></mrow><annotation encoding=\"application/x-tex\">13</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\">3</span></span></span></span>个，假设取<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>7</mn></mrow><annotation encoding=\"application/x-tex\">7</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">7</span></span></span></span>个是最优解，那么我们第一次询问取<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mn>2</mn><mn>0</mn></msup></mrow><annotation encoding=\"application/x-tex\">2^0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span></span></span></span></span></span></span></span>个该物品好不好，然后询问<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mn>2</mn><mn>1</mn></msup><mo separator=\"true\">,</mo><msup><mn>2</mn><mn>2</mn></msup><mo separator=\"true\">,</mo><msup><mn>2</mn><mn>3</mn></msup><mo>…</mo><mo>…</mo></mrow><annotation encoding=\"application/x-tex\">2^1,2^2,2^3… …</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.008548em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">…</span></span></span></span>，最终得到了 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mn>2</mn><mn>0</mn></msup><mo>+</mo><msup><mn>2</mn><mn>2</mn></msup><mo>+</mo><msup><mn>2</mn><mn>1</mn></msup><mo>=</mo><mn>7</mn></mrow><annotation encoding=\"application/x-tex\">2^0 +2^2+2^1=7</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.897438em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.897438em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">7</span></span></span></span>这样的一个结果，我们只需要询问<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>4</mn></mrow><annotation encoding=\"application/x-tex\">4</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">4</span></span></span></span>次而非<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>13</mn></mrow><annotation encoding=\"application/x-tex\">13</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\">3</span></span></span></span>次，这是一个从<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">n</span></span></span></span>降到<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>log</mi><mo>⁡</mo><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">\\log n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\">n</span></span></span></span>级别的优化。</p>\n<p>现在，小伙伴们可能已经彻底蒙圈了，或许能稍稍理解这样的思想，但是却怎么也写不出来，没关系，只要稍微理解以上的思路就好，我们先来看下一节。</p>\n<h2 id=\"多重背包bounded-knapsack-problem\"><a class=\"markdownIt-Anchor\" href=\"#多重背包bounded-knapsack-problem\"></a> 多重背包(bounded knapsack problem)</h2>\n<h3 id=\"31-问题描述\"><a class=\"markdownIt-Anchor\" href=\"#31-问题描述\"></a> 3.1 问题描述</h3>\n<p>多重背包与前面的完全背包的不同点在于每种物品是有限多个。</p>\n<h3 id=\"32-问题分析\"><a class=\"markdownIt-Anchor\" href=\"#32-问题分析\"></a> 3.2 问题分析</h3>\n<p>我们在<em>2.4节</em>中提到，完全背包每种物品其实也是有上限的，即加和不应当超过背包的最大承载重量。那么，既然完全背包可以转化成0-1背包问题进行求解，多重背包自然也可以。</p>\n<p>我们依旧是分为两个部分，装与不装。</p>\n<ul>\n<li>不把物品<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">i</span></span></span></span>装入背包：<code>dp[i][j]=dp[i-1][j]</code></li>\n<li>把物品<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">i</span></span></span></span>装入背包：因为每种物品有数量限制，因此我们需要在限制数量中找到最大的价值，此时<code>dp[i][j]=dp[i-1][j-k*w[i]] + k*v[i-1]</code></li>\n</ul>\n<p>因此，状态转移方程为：$$<br>\ndp[i][j]=max(dp[i-1][j],\\ dp[i][j-k<em>w[i]] + k</em>v[i])</p>\n<p class=\"katex-block katex-error\" title=\"ParseError: KaTeX parse error: Expected &#039;EOF&#039;, got &#039;#&#039; at position 2: \n#̲## 3.3 python代码…\">\n### 3.3 python代码\n\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\nn <span class=\"token operator\">=</span> <span class=\"token number\">5</span>\nw_max <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\nw <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span>    <span class=\"token comment\">#weight</span>\nv <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span> <span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">#value</span>\nmaxx <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">#maximum number</span>\ndp <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>zeros<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>n <span class=\"token punctuation\">,</span>w_max <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>dtype <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> w_max <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">for</span> k <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">min</span><span class=\"token punctuation\">(</span>w_max<span class=\"token operator\">//</span>w<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> maxx<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> j <span class=\"token operator\">-</span> k <span class=\"token operator\">*</span> w<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n                dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                dp<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> k <span class=\"token operator\">*</span> w<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> k <span class=\"token operator\">*</span> v<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>w_max<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#42</span></code></pre>\n\n### 3.4 算法优化\n\n无论是完全背包还是多重背包，都存在着一种优化方式，就是2进制优化。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>背包问题(backpack problem)是最经典也是最简单的一类动态规划(dynamic programming)问题，本篇文章重点讲解背包问题中的0-1背包，完全背包，以及多重背包三大问题，顺带也会说明一下动态规划的基本策略，<strong>适合完全不理解相关算法的初学者</strong>。</p>\n<h2 id=\"0-1背包0-1-knapsack-problem\"><a class=\"markdownIt-Anchor\" href=\"#0-1背包0-1-knapsack-problem\"></a> 0-1背包(0-1 Knapsack Problem)</h2>\n<h3 id=\"11-问题描述\"><a class=\"markdownIt-Anchor\" href=\"#11-问题描述\"></a> 1.1 问题描述</h3>\n<p>一共有<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">N</span></span></span></span>件物品，每件物品的价格为<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>W</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">W_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">W</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>，价值为<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>V</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">V_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.22222em;\">V</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>，在总重量不超过背包承载上限<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>W</mi><mrow><mi>m</mi><mi>a</mi><mi>x</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">W_{max}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">W</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">m</span><span class=\"mord mathdefault mtight\">a</span><span class=\"mord mathdefault mtight\">x</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>的情况下，如何分配使得装入背包的价值最高？</p>\n<h3 id=\"12-问题分析\"><a class=\"markdownIt-Anchor\" href=\"#12-问题分析\"></a> 1.2 问题分析</h3>\n<p>最先想到的就是暴力穷举法，把每种可能的情况都装进去然后找到最大的情况，但是这样做显然是极其低效的，总的时间复杂度是<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mn>2</mn><mi>n</mi></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(2^n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>.</p>\n<p>因此，这里引用了动态规划的思路。在这里我们以此为例，每一组的价格和价值如图所示，假设这里背包的最大重量为<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>10</mn></mrow><annotation encoding=\"application/x-tex\">10</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\">0</span></span></span></span>。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">N=5</th>\n<th style=\"text-align:left\">1</th>\n<th style=\"text-align:left\">2</th>\n<th style=\"text-align:left\">3</th>\n<th style=\"text-align:left\">4</th>\n<th style=\"text-align:left\">5</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">Weight</td>\n<td style=\"text-align:left\">1</td>\n<td style=\"text-align:left\">3</td>\n<td style=\"text-align:left\">4</td>\n<td style=\"text-align:left\">5</td>\n<td style=\"text-align:left\">2</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Value</td>\n<td style=\"text-align:left\">5</td>\n<td style=\"text-align:left\">10</td>\n<td style=\"text-align:left\">18</td>\n<td style=\"text-align:left\">20</td>\n<td style=\"text-align:left\">7</td>\n</tr>\n</tbody>\n</table>\n<p>那么接下来我们要做的事情是，创建一个二维数组<code>dp[i][j]</code>，这样的数组表示将前<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">i</span></span></span></span>件商品装入重量为j的背包中可以获得的最大价值，其中$$0\\leq i\\leq N\\qquad 0\\leq j\\leq W_{max}$$</p>\n<p>现在我们来看一下，按照这样的规则得到的二维数组是什么样子：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\"></th>\n<th style=\"text-align:left\">1</th>\n<th style=\"text-align:left\">2</th>\n<th style=\"text-align:left\">3</th>\n<th style=\"text-align:left\">4</th>\n<th style=\"text-align:left\">5</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">1</td>\n<td style=\"text-align:left\">5</td>\n<td style=\"text-align:left\">5</td>\n<td style=\"text-align:left\">5</td>\n<td style=\"text-align:left\">5</td>\n<td style=\"text-align:left\">5</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">2</td>\n<td style=\"text-align:left\">5</td>\n<td style=\"text-align:left\">5</td>\n<td style=\"text-align:left\">5</td>\n<td style=\"text-align:left\">5</td>\n<td style=\"text-align:left\">7</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">3</td>\n<td style=\"text-align:left\">5</td>\n<td style=\"text-align:left\">10</td>\n<td style=\"text-align:left\">10</td>\n<td style=\"text-align:left\">10</td>\n<td style=\"text-align:left\">12</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">4</td>\n<td style=\"text-align:left\">5</td>\n<td style=\"text-align:left\">15</td>\n<td style=\"text-align:left\">18</td>\n<td style=\"text-align:left\">18</td>\n<td style=\"text-align:left\">18</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">5</td>\n<td style=\"text-align:left\">5</td>\n<td style=\"text-align:left\">15</td>\n<td style=\"text-align:left\">23</td>\n<td style=\"text-align:left\">23</td>\n<td style=\"text-align:left\">23</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">6</td>\n<td style=\"text-align:left\">5</td>\n<td style=\"text-align:left\">15</td>\n<td style=\"text-align:left\">23</td>\n<td style=\"text-align:left\">25</td>\n<td style=\"text-align:left\">25</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">7</td>\n<td style=\"text-align:left\">5</td>\n<td style=\"text-align:left\">15</td>\n<td style=\"text-align:left\">28</td>\n<td style=\"text-align:left\">28</td>\n<td style=\"text-align:left\">30</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">8</td>\n<td style=\"text-align:left\">5</td>\n<td style=\"text-align:left\">15</td>\n<td style=\"text-align:left\">33</td>\n<td style=\"text-align:left\">33</td>\n<td style=\"text-align:left\">33</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">9</td>\n<td style=\"text-align:left\">5</td>\n<td style=\"text-align:left\">15</td>\n<td style=\"text-align:left\">33</td>\n<td style=\"text-align:left\">38</td>\n<td style=\"text-align:left\">38</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">10</td>\n<td style=\"text-align:left\">5</td>\n<td style=\"text-align:left\">15</td>\n<td style=\"text-align:left\">33</td>\n<td style=\"text-align:left\">43</td>\n<td style=\"text-align:left\">43</td>\n</tr>\n</tbody>\n</table>\n<p>最后的答案就是数组右下角的结果，那么我们又该如何通过程序得到这样的数组呢？</p>\n<p>当我们只有第一件物品的时候（数组的第一列），无论背包容量有多大都只能装下一个物品，所得到的价值也只有第一个物品的价值，此例中即为5.</p>\n<p>当我们拥有第二件物品的时候，就要做一个选择，<strong>要么装入该物品（前提是能装得下），要么不装入该物品。</strong></p>\n<p>那么有人可能就会问了，既然是可以装得下，那么为什么不装入这个物品呢？如果一个物品很沉很沉价值又非常之低，那么我们转入了这个物品的总价值反而要少于装了其他同等重量物品的价值，这个时候装入该物品就显得很多余了。</p>\n<p>回到重点，对于这个二维数组来说，<strong>不装入第<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">i</span></span></span></span>件物品的意思是<code>dp[i-1][j]</code>，装入第<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">i</span></span></span></span>件物品的意思是<code>dp[i-1][j-w[i]] + v[i]</code>.</strong></p>\n<p>请认真仔细的对照上面的数组，好好理解一下上面的表达式。那么我们得到的状态转移方程即为：$$<br>\ndp[i][j]=max(dp[i-1][j],\\ dp[i-1][j-w[i]] + v[i]) $$</p>\n<h3 id=\"13-python代码\"><a class=\"markdownIt-Anchor\" href=\"#13-python代码\"></a> 1.3 python代码</h3>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\nn <span class=\"token operator\">=</span> <span class=\"token number\">5</span>\nw_max <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\nw <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\nv <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span> <span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">]</span>\ndp <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>zeros<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>n <span class=\"token punctuation\">,</span>w_max <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>dtype <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>w_max <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> j <span class=\"token operator\">-</span> w<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n            dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>dp<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token operator\">-</span>w<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> v<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> dp<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>w_max<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token comment\">#43</span></code></pre>\n<h3 id=\"14-算法优化\"><a class=\"markdownIt-Anchor\" href=\"#14-算法优化\"></a> 1.4 算法优化</h3>\n<p>我们可以看到，这样的0-1背包我们用时间复杂度为<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>W</mi><mo separator=\"true\">⋅</mo><mi>N</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(W·N)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">W</span><span class=\"mpunct\">⋅</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">N</span><span class=\"mclose\">)</span></span></span></span>就可以解决，那么当<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>W</mi><mrow><mi>m</mi><mi>a</mi><mi>x</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">W_{max}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">W</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">m</span><span class=\"mord mathdefault mtight\">a</span><span class=\"mord mathdefault mtight\">x</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>很大的时候，虽然时间复杂度是足够的，但是空间复杂度依旧为<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>W</mi><mo separator=\"true\">⋅</mo><mi>N</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(W·N)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">W</span><span class=\"mpunct\">⋅</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">N</span><span class=\"mclose\">)</span></span></span></span>，这就导致了二维数组可能会超出内存限制。</p>\n<p>实际上，我们不难发现这样一个二维数组是从上至下一层一层进行的（上面的表格是从左至右），在每次进行下一层计算的时候，只有上一层的数据是有用的，其余的数据就没有任何作用了。即，<code>dp[i][j]</code>的值只与<code>dp[i-1][0]… … dp[i-1][j]</code>是有关系的。</p>\n<p>因此，我们可以利用这个特性，采用滚动数组的方法对空间复杂度进行优化，使其从二维变为长度为 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>W</mi><mrow><mi>m</mi><mi>a</mi><mi>x</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">W_{max}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">W</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">m</span><span class=\"mord mathdefault mtight\">a</span><span class=\"mord mathdefault mtight\">x</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>的一维数组。这种方法在动态规划中是一种常见的策略。</p>\n<p>至于为什么是一维数组，而不是两行数组(<code>dp[i][j]</code>与<code>dp[i-1][j]</code>)，我们只需要在循环j的时候做<strong>逆向计算</strong>，从最后一个物品往前推，这样就可以避免上一组数据被覆盖掉。（仔细想一想为什么）</p>\n<p>优化后的部分代码如下：</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">dp <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>zeros<span class=\"token punctuation\">(</span>w_max <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>dtype <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>w_max<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> j <span class=\"token operator\">-</span> w<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n            dp<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>dp<span class=\"token punctuation\">[</span>j<span class=\"token operator\">-</span>w<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> v<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre>\n<h2 id=\"完全背包-unbounded-knapsack-problem\"><a class=\"markdownIt-Anchor\" href=\"#完全背包-unbounded-knapsack-problem\"></a> 完全背包 (Unbounded Knapsack Problem)</h2>\n<h3 id=\"21-问题描述\"><a class=\"markdownIt-Anchor\" href=\"#21-问题描述\"></a> 2.1 问题描述</h3>\n<p>完全背包与0-1背包唯一的区别在于完全背包中每种物品可以有无限多个。</p>\n<h3 id=\"22-问题分析\"><a class=\"markdownIt-Anchor\" href=\"#22-问题分析\"></a> 2.2 问题分析</h3>\n<p>对于完全背包问题，我们很自然的就能想到设置一个$$性价比=\\frac{V_i}{W_i}$$，这样一来只需要不停的装性价比最高的商品就能获得最优解。</p>\n<p>然而，事实上这样的作法很多时候并不能得到最高的答案，当背包即将装满但还有一定空余时（没办法再装下一个的时候），装性价比最高的商品不见得比装性价比不那么高但是能将背包装满的商品。</p>\n<p>事实上，上面的想法是完全可以进行下去的，只是稍稍麻烦一点。我们依旧围绕0-1背包的角度思考，只需要稍加修改即可。依旧是上一组数据，只不过每个物品可以无限拿取。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">N=5</th>\n<th style=\"text-align:left\">1</th>\n<th style=\"text-align:left\">2</th>\n<th style=\"text-align:left\">3</th>\n<th style=\"text-align:left\">4</th>\n<th style=\"text-align:left\">5</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">Weight</td>\n<td style=\"text-align:left\">1</td>\n<td style=\"text-align:left\">3</td>\n<td style=\"text-align:left\">4</td>\n<td style=\"text-align:left\">5</td>\n<td style=\"text-align:left\">2</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Value</td>\n<td style=\"text-align:left\">5</td>\n<td style=\"text-align:left\">10</td>\n<td style=\"text-align:left\">18</td>\n<td style=\"text-align:left\">20</td>\n<td style=\"text-align:left\">7</td>\n</tr>\n</tbody>\n</table>\n<p>对于完全背包问题，我们依旧是做一个选择，装与不装第<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">i</span></span></span></span>件物品：</p>\n<ul>\n<li>不把物品<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">i</span></span></span></span>装入背包：<code>dp[i][j]=dp[i-1][j]</code></li>\n<li>把物品<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">i</span></span></span></span>装入背包：<code>dp[i][j]=dp[i][j-w[i]] + v[i]</code></li>\n</ul>\n<p>(相比于0-1背包，唯一的区别就是<code>dp[i][j]=dp[i-1][j-w[i]] + v[i]</code></p>\n<p>这里肯定有很多小伙伴一脸懵逼，不妨停下来多思考思考。我在写这个文章的时候在这里也停顿了很久，不知道如何言简意赅的来阐述这样的思路。</p>\n<p>0-1背包当取走第<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">i</span></span></span></span>个物品时，需要找到第<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">i-1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.74285em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\">i</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>个物品的最优解中，当取走第<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">i</span></span></span></span>个物品时，它也可以再次取走自己，所以只需要找到第<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">i</span></span></span></span>个物品的最优解即可。</p>\n<p>因此，完全背包的状态转移方程为：$$<br>\ndp[i][j]=max(dp[i-1][j],\\ dp[i][j-w[i]] + v[i])</p>\n<h3 id=\"23-算法优化\"><a class=\"markdownIt-Anchor\" href=\"#23-算法优化\"></a> 2.3 算法优化</h3>\n<p>对于完全背包依旧可以优化空间复杂度，如同0-1背包一样将其压缩到一维数组。唯一的不同点在于完全背包的滚动数组在循环j的时候需要<strong>正向计算</strong>。从第一个物品往后推，这样就可以避免上一组数据被覆盖掉。（仔细想一想为什么）</p>\n<p>优化后的部分代码如下：</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">dp <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>zeros<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>w_max <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>dtype <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>w_max <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> j <span class=\"token operator\">-</span> w<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n            dp<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>dp<span class=\"token punctuation\">[</span>j<span class=\"token operator\">-</span>w<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> v<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre>\n<p>一件很有趣的事情是，我们回过头来看<em>1.4节</em>的0-1背包优化算法，有没有发现他们长得十分相似呢？</p>\n<p>此外，对于物品是无限的情况来说，如果有一个物品重量超过另一个物品然而价值又低于另一个物品，那么这样的物品就可以扔掉了。</p>\n<p>我们只需要花费<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>N</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(N^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">N</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>的时间复杂度进行一次搜索，或许可以排除掉大量没有价值的商品，这样可以极大的节约动态规划的时间开销和空间开销。</p>\n<h3 id=\"24-另一种思路\"><a class=\"markdownIt-Anchor\" href=\"#24-另一种思路\"></a> 2.4 另一种思路</h3>\n<p>我们回过头来看2.1节提到的思路，不妨在此基础上想一下，我们完全可以将完全背包转换成0-1背包。</p>\n<p>虽然每件商品的数量是无限的，但是总量<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>W</mi><mrow><mi>m</mi><mi>a</mi><mi>x</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">W_{max}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">W</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">m</span><span class=\"mord mathdefault mtight\">a</span><span class=\"mord mathdefault mtight\">x</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>是有限的。因此我们可以计算出每件商品最多可以装入$$\\frac{W_{max}}{W_i}$$个，这样一来，我们就拥有了有限多个商品。</p>\n<p>当然，这种思路根本谈不上优化，因为其完全没有降低时间复杂度和空间复杂度，只是提供了另一种思路罢了。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">dp <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>zeros<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>n <span class=\"token punctuation\">,</span>w_max <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>dtype <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> w_max <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">for</span> k <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> w_max<span class=\"token operator\">//</span>w<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> j <span class=\"token operator\">-</span> k <span class=\"token operator\">*</span> w<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n                dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> dp<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> k <span class=\"token operator\">*</span> w<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> k <span class=\"token operator\">*</span> v<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre>\n<p>更高效的做法是使用二进制，即将每种物品的<strong>取的个数</strong>都用$$V_i=\\sum2^i\\quad 0\\leq i\\leq\\log_2V_i$$来表示（这是一个常识，任何数字都可以分解成以<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span></span></span></span>为指数的数组），如<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>13</mn></mrow><annotation encoding=\"application/x-tex\">13</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\">3</span></span></span></span>，我们可以表示为<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>13</mn><mo>=</mo><msup><mn>2</mn><mn>0</mn></msup><mo>+</mo><msup><mn>2</mn><mn>2</mn></msup><mo>+</mo><msup><mn>2</mn><mn>3</mn></msup></mrow><annotation encoding=\"application/x-tex\">13= 2^0 + 2^2 +2^3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\">3</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.897438em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.897438em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span></span></span></span>.</p>\n<p>我们的目的就是要找出第i件物品要取几个好，那么与其用传统的方法每次取一个，然后询问取好呢还是不取好呢，不如用二进制的方法来代替。</p>\n<p>举例说明，第一件物品最多可以取<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>13</mn></mrow><annotation encoding=\"application/x-tex\">13</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\">3</span></span></span></span>个，假设取<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>7</mn></mrow><annotation encoding=\"application/x-tex\">7</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">7</span></span></span></span>个是最优解，那么我们第一次询问取<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mn>2</mn><mn>0</mn></msup></mrow><annotation encoding=\"application/x-tex\">2^0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span></span></span></span></span></span></span></span>个该物品好不好，然后询问<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mn>2</mn><mn>1</mn></msup><mo separator=\"true\">,</mo><msup><mn>2</mn><mn>2</mn></msup><mo separator=\"true\">,</mo><msup><mn>2</mn><mn>3</mn></msup><mo>…</mo><mo>…</mo></mrow><annotation encoding=\"application/x-tex\">2^1,2^2,2^3… …</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.008548em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">…</span></span></span></span>，最终得到了 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mn>2</mn><mn>0</mn></msup><mo>+</mo><msup><mn>2</mn><mn>2</mn></msup><mo>+</mo><msup><mn>2</mn><mn>1</mn></msup><mo>=</mo><mn>7</mn></mrow><annotation encoding=\"application/x-tex\">2^0 +2^2+2^1=7</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.897438em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.897438em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">7</span></span></span></span>这样的一个结果，我们只需要询问<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>4</mn></mrow><annotation encoding=\"application/x-tex\">4</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">4</span></span></span></span>次而非<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>13</mn></mrow><annotation encoding=\"application/x-tex\">13</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\">3</span></span></span></span>次，这是一个从<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">n</span></span></span></span>降到<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>log</mi><mo>⁡</mo><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">\\log n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\">n</span></span></span></span>级别的优化。</p>\n<p>现在，小伙伴们可能已经彻底蒙圈了，或许能稍稍理解这样的思想，但是却怎么也写不出来，没关系，只要稍微理解以上的思路就好，我们先来看下一节。</p>\n<h2 id=\"多重背包bounded-knapsack-problem\"><a class=\"markdownIt-Anchor\" href=\"#多重背包bounded-knapsack-problem\"></a> 多重背包(bounded knapsack problem)</h2>\n<h3 id=\"31-问题描述\"><a class=\"markdownIt-Anchor\" href=\"#31-问题描述\"></a> 3.1 问题描述</h3>\n<p>多重背包与前面的完全背包的不同点在于每种物品是有限多个。</p>\n<h3 id=\"32-问题分析\"><a class=\"markdownIt-Anchor\" href=\"#32-问题分析\"></a> 3.2 问题分析</h3>\n<p>我们在<em>2.4节</em>中提到，完全背包每种物品其实也是有上限的，即加和不应当超过背包的最大承载重量。那么，既然完全背包可以转化成0-1背包问题进行求解，多重背包自然也可以。</p>\n<p>我们依旧是分为两个部分，装与不装。</p>\n<ul>\n<li>不把物品<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">i</span></span></span></span>装入背包：<code>dp[i][j]=dp[i-1][j]</code></li>\n<li>把物品<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">i</span></span></span></span>装入背包：因为每种物品有数量限制，因此我们需要在限制数量中找到最大的价值，此时<code>dp[i][j]=dp[i-1][j-k*w[i]] + k*v[i-1]</code></li>\n</ul>\n<p>因此，状态转移方程为：$$<br>\ndp[i][j]=max(dp[i-1][j],\\ dp[i][j-k<em>w[i]] + k</em>v[i])</p>\n<p class=\"katex-block katex-error\" title=\"ParseError: KaTeX parse error: Expected &#039;EOF&#039;, got &#039;#&#039; at position 2: \n#̲## 3.3 python代码…\">\n### 3.3 python代码\n\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\nn <span class=\"token operator\">=</span> <span class=\"token number\">5</span>\nw_max <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\nw <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span>    <span class=\"token comment\">#weight</span>\nv <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span> <span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">#value</span>\nmaxx <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">#maximum number</span>\ndp <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>zeros<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>n <span class=\"token punctuation\">,</span>w_max <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>dtype <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> w_max <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">for</span> k <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">min</span><span class=\"token punctuation\">(</span>w_max<span class=\"token operator\">//</span>w<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> maxx<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> j <span class=\"token operator\">-</span> k <span class=\"token operator\">*</span> w<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n                dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                dp<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> k <span class=\"token operator\">*</span> w<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> k <span class=\"token operator\">*</span> v<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>w_max<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#42</span></code></pre>\n\n### 3.4 算法优化\n\n无论是完全背包还是多重背包，都存在着一种优化方式，就是2进制优化。</p>\n"},{"title":"计算机网络1 - Network Architecture","date":"2022-04-08T15:30:13.000Z","author":"Tony","katex":true,"_content":"\n### Networking basics\n\nQ: What are the differences between data networks and voice networks?\n\nData network -> Digital transmission\n\nVoice network -> Analog transmission\n\nQ: How many types of computer networks when it is classified by their scale?\n\nPersonal Area Networks(PAN), Local Area Networks(LAN), Metropolitan Area Networks(MAN), and Wide Area Networks(WAN).\n\n### Network architecture\n\nQ: What are the definitions of layers, protocols, and services in network architecture?\n\nA layer is a level of abstraction which has a well defined function.\n\nProtocols are executives of the functions.\n\nServices are functions provided through protocols.\n\nQ: What are the famous reference models used in computer networks?\n\n==OSI reference model== and ==TCP/IP reference model==\n\nQ: What are the differences between OSI and TCP/IP reference model?\n\n<img src=\"../../../../../Users/28580/Desktop/Final Review/Final Review.assets/image-20211201142249636.png\" alt=\"image-20211201142249636\" style=\"zoom:50%;\" />\n\n### Functions and technologies in OSI and TCP/IP reference model\n\nQ: What are the names of seven layers in OSI and TCP/IP reference model?\n\nPhysical layer, Data Link layer, Network layer, Transport layer, Session layer, Presentation layer, Application layer.\n\nQ: What functions are defined in each layer?\n\n<img src=\"CN-1/image-20211201155433683.png\" alt=\"image-20211201155433683\" style=\"zoom:50%;\" />\n\nQ: What protocols are defined in each layer?\n\nSome common protocols specified by the TCP/IP reference model layers. \n\n1. The **application layer** protocols include: \n   - Domain Name System (DNS) \n   - Hypertext Transfer Protocol (HTTP) \n   - File Transfer Protocol (FTP) \n   - Simple Mail Transfer Protocol (SMTP)\n   - Trivial File Transfer Protocol (TFTP)  \n2. The **transport layer** protocols include:\n   - Transport Control Protocol (TCP)\n   - User Datagram Protocol (UDP)  \n3. The **Internet layer** protocols include: \n   - Internet Protocol (IP)  \n4. The **network access** layer refers to any particular technology used on a specific network (Ethernet).\n\nQ: What addresses are defined in each layer?\n\nMAC address — Layer 2\n\nIP address — Layer 3\n\nDomain name — Layer 7\n\nSubnet mask — Layer 3\n\nQ: What network devices are operating at each layer?\n\n<img src=\"CN-1/image-20211201155917959.png\" alt=\"image-20211201155917959\" style=\"zoom:50%;\" />\n\nQ: The technologies of LANs and WANs are usually designed in which layers?\n\nBoth layer1 and layer 2.\n\n### Data encapsulation\n\nQ: What is the process of data encapsulation?\n\nFrom Top layer to the bottom layer.\n\n<img src=\"CN-1/image-20211201165246959.png\" alt=\"image-20211201165246959\" style=\"zoom:67%;\" />\n\nQ: What PDUs are used in each layers?\n\n1. **Data** - Build the data at layer 7, 6 and 5.\n2. **Segments** - Package the data for end-to-end transport at layer 4.  \n3. **Packets** - Append the network address (e.g. IP Address) to the network header at layer 3.  \n4. **Frames** - Append the local address (e.g. MAC Address) to the data link header at layer 2.\n5. **Bits** - Convert to bits for transmission on a physical link at layer 1.\n\nQ: What are the header format of common used PDUs in each layer?\n\n It usually contains the **address information** and control  information likes sequence numbers, and so on.\n\n### Network topology and terminologies\n\nQ: What are the differences of physical and logical network topologies? List some common used physical and logical network topologies.\n\nPhysical topology, which is the actual layout of the wire (media).\n\nLogical topology, which defines how the media is accessed by the hosts.\n\nThe physical topologies that are commonly used are the ==P2P Topology, Bus Topology, Ring Topology, Star Topology, Extended Star Topology, Hierarchical Topology, Tree Topology, Hybrid Topology and Mesh Topology==.\n\nThe ethernet protocol is the most common protocol used for logical topology. The physical topologies that are commonly used are the ==Ring Topology and Bus Topology==.\n\nSee more for: \n\n- [Physical Topology | Learn Top 7 Useful Types Of Physical Topology (educba.com)](https://www.educba.com/physical-topology/)\n- [Logical Topology | Know Why Do We Use Logical Topology in Networking? (educba.com)](https://www.educba.com/logical-topology/)\n\nQ: What is the unit of digital bandwidth and analog bandwidth?\n\nIn analog systems, the basic unit of analog bandwidth is ==hertz (Hz)==, or cycles per second.\n\nIn digital systems, the basic unit of bandwidth is ==bits per second (bps)==.\n\nQ: What is the definition of bandwidth and throughput, and baud? What is the relationship among bandwidth, throughput, and baud?\n\nThroughput ≤ Bandwidth\n\nThroughput is the real life bandwidth.\n\n$Bandwidth= log_2L\\times buad$ where L is the base info.\n\nSee more for: [Bits, Bauds and Bandwidth (technologyuk.net)](https://www.technologyuk.net/telecommunications/telecom-principles/bits-bauds-and-bandwidth.shtml) \n\nQ:  What is the difference between the transmission delay and propagation delay?\n\n**Propagation delay** is a simple measurement of how long it takes for a signal to travel along the cable being tested.(**single**)\n\n**Transmission delay** is the time needed to push all the packet bits on the transmission link.(**total**)\n$$\nPropagation\\ delay = \\frac{length\\ of \\ cable}{speed\\ of \\ signal(3\\times 10^8)}\\\\\nTransmission\\ delay= \\frac{size\\ of \\ signal}{speed\\ of\\ transmission}\\\\\n$$\n\nSee more for: [Propagation Delay vs Transmission Delay | Baeldung on Computer Science](https://www.baeldung.com/cs/propagation-vs-transmission-delay)\n\n","source":"_posts/CN-1.md","raw":"---\ntitle: 计算机网络1 - Network Architecture\ndate: 2022-04-08 23:30:13\ntags:\n\t- computer network\ncategories:\n\t- 计算机网络\nauthor: Tony\nkatex: true\n---\n\n### Networking basics\n\nQ: What are the differences between data networks and voice networks?\n\nData network -> Digital transmission\n\nVoice network -> Analog transmission\n\nQ: How many types of computer networks when it is classified by their scale?\n\nPersonal Area Networks(PAN), Local Area Networks(LAN), Metropolitan Area Networks(MAN), and Wide Area Networks(WAN).\n\n### Network architecture\n\nQ: What are the definitions of layers, protocols, and services in network architecture?\n\nA layer is a level of abstraction which has a well defined function.\n\nProtocols are executives of the functions.\n\nServices are functions provided through protocols.\n\nQ: What are the famous reference models used in computer networks?\n\n==OSI reference model== and ==TCP/IP reference model==\n\nQ: What are the differences between OSI and TCP/IP reference model?\n\n<img src=\"../../../../../Users/28580/Desktop/Final Review/Final Review.assets/image-20211201142249636.png\" alt=\"image-20211201142249636\" style=\"zoom:50%;\" />\n\n### Functions and technologies in OSI and TCP/IP reference model\n\nQ: What are the names of seven layers in OSI and TCP/IP reference model?\n\nPhysical layer, Data Link layer, Network layer, Transport layer, Session layer, Presentation layer, Application layer.\n\nQ: What functions are defined in each layer?\n\n<img src=\"CN-1/image-20211201155433683.png\" alt=\"image-20211201155433683\" style=\"zoom:50%;\" />\n\nQ: What protocols are defined in each layer?\n\nSome common protocols specified by the TCP/IP reference model layers. \n\n1. The **application layer** protocols include: \n   - Domain Name System (DNS) \n   - Hypertext Transfer Protocol (HTTP) \n   - File Transfer Protocol (FTP) \n   - Simple Mail Transfer Protocol (SMTP)\n   - Trivial File Transfer Protocol (TFTP)  \n2. The **transport layer** protocols include:\n   - Transport Control Protocol (TCP)\n   - User Datagram Protocol (UDP)  \n3. The **Internet layer** protocols include: \n   - Internet Protocol (IP)  \n4. The **network access** layer refers to any particular technology used on a specific network (Ethernet).\n\nQ: What addresses are defined in each layer?\n\nMAC address — Layer 2\n\nIP address — Layer 3\n\nDomain name — Layer 7\n\nSubnet mask — Layer 3\n\nQ: What network devices are operating at each layer?\n\n<img src=\"CN-1/image-20211201155917959.png\" alt=\"image-20211201155917959\" style=\"zoom:50%;\" />\n\nQ: The technologies of LANs and WANs are usually designed in which layers?\n\nBoth layer1 and layer 2.\n\n### Data encapsulation\n\nQ: What is the process of data encapsulation?\n\nFrom Top layer to the bottom layer.\n\n<img src=\"CN-1/image-20211201165246959.png\" alt=\"image-20211201165246959\" style=\"zoom:67%;\" />\n\nQ: What PDUs are used in each layers?\n\n1. **Data** - Build the data at layer 7, 6 and 5.\n2. **Segments** - Package the data for end-to-end transport at layer 4.  \n3. **Packets** - Append the network address (e.g. IP Address) to the network header at layer 3.  \n4. **Frames** - Append the local address (e.g. MAC Address) to the data link header at layer 2.\n5. **Bits** - Convert to bits for transmission on a physical link at layer 1.\n\nQ: What are the header format of common used PDUs in each layer?\n\n It usually contains the **address information** and control  information likes sequence numbers, and so on.\n\n### Network topology and terminologies\n\nQ: What are the differences of physical and logical network topologies? List some common used physical and logical network topologies.\n\nPhysical topology, which is the actual layout of the wire (media).\n\nLogical topology, which defines how the media is accessed by the hosts.\n\nThe physical topologies that are commonly used are the ==P2P Topology, Bus Topology, Ring Topology, Star Topology, Extended Star Topology, Hierarchical Topology, Tree Topology, Hybrid Topology and Mesh Topology==.\n\nThe ethernet protocol is the most common protocol used for logical topology. The physical topologies that are commonly used are the ==Ring Topology and Bus Topology==.\n\nSee more for: \n\n- [Physical Topology | Learn Top 7 Useful Types Of Physical Topology (educba.com)](https://www.educba.com/physical-topology/)\n- [Logical Topology | Know Why Do We Use Logical Topology in Networking? (educba.com)](https://www.educba.com/logical-topology/)\n\nQ: What is the unit of digital bandwidth and analog bandwidth?\n\nIn analog systems, the basic unit of analog bandwidth is ==hertz (Hz)==, or cycles per second.\n\nIn digital systems, the basic unit of bandwidth is ==bits per second (bps)==.\n\nQ: What is the definition of bandwidth and throughput, and baud? What is the relationship among bandwidth, throughput, and baud?\n\nThroughput ≤ Bandwidth\n\nThroughput is the real life bandwidth.\n\n$Bandwidth= log_2L\\times buad$ where L is the base info.\n\nSee more for: [Bits, Bauds and Bandwidth (technologyuk.net)](https://www.technologyuk.net/telecommunications/telecom-principles/bits-bauds-and-bandwidth.shtml) \n\nQ:  What is the difference between the transmission delay and propagation delay?\n\n**Propagation delay** is a simple measurement of how long it takes for a signal to travel along the cable being tested.(**single**)\n\n**Transmission delay** is the time needed to push all the packet bits on the transmission link.(**total**)\n$$\nPropagation\\ delay = \\frac{length\\ of \\ cable}{speed\\ of \\ signal(3\\times 10^8)}\\\\\nTransmission\\ delay= \\frac{size\\ of \\ signal}{speed\\ of\\ transmission}\\\\\n$$\n\nSee more for: [Propagation Delay vs Transmission Delay | Baeldung on Computer Science](https://www.baeldung.com/cs/propagation-vs-transmission-delay)\n\n","slug":"CN-1","published":1,"updated":"2022-04-09T07:20:30.076Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1rj2n4z0009gwcy354i4t45","content":"<h3 id=\"networking-basics\"><a class=\"markdownIt-Anchor\" href=\"#networking-basics\"></a> Networking basics</h3>\n<p>Q: What are the differences between data networks and voice networks?</p>\n<p>Data network -&gt; Digital transmission</p>\n<p>Voice network -&gt; Analog transmission</p>\n<p>Q: How many types of computer networks when it is classified by their scale?</p>\n<p>Personal Area Networks(PAN), Local Area Networks(LAN), Metropolitan Area Networks(MAN), and Wide Area Networks(WAN).</p>\n<h3 id=\"network-architecture\"><a class=\"markdownIt-Anchor\" href=\"#network-architecture\"></a> Network architecture</h3>\n<p>Q: What are the definitions of layers, protocols, and services in network architecture?</p>\n<p>A layer is a level of abstraction which has a well defined function.</p>\n<p>Protocols are executives of the functions.</p>\n<p>Services are functions provided through protocols.</p>\n<p>Q: What are the famous reference models used in computer networks?</p>\n<p><mark>OSI reference model</mark> and <mark>TCP/IP reference model</mark></p>\n<p>Q: What are the differences between OSI and TCP/IP reference model?</p>\n<img src=\"/2022/04/08/CN-1/../../../../Users/28580/Desktop/Final Review/Final Review.assets/image-20211201142249636.png\" alt=\"image-20211201142249636\" style=\"zoom:50%;\" loading=\"lazy\">\n<h3 id=\"functions-and-technologies-in-osi-and-tcpip-reference-model\"><a class=\"markdownIt-Anchor\" href=\"#functions-and-technologies-in-osi-and-tcpip-reference-model\"></a> Functions and technologies in OSI and TCP/IP reference model</h3>\n<p>Q: What are the names of seven layers in OSI and TCP/IP reference model?</p>\n<p>Physical layer, Data Link layer, Network layer, Transport layer, Session layer, Presentation layer, Application layer.</p>\n<p>Q: What functions are defined in each layer?</p>\n<img src=\"/2022/04/08/CN-1/image-20211201155433683.png\" alt=\"image-20211201155433683\" style=\"zoom:50%;\" loading=\"lazy\">\n<p>Q: What protocols are defined in each layer?</p>\n<p>Some common protocols specified by the TCP/IP reference model layers.</p>\n<ol>\n<li>The <strong>application layer</strong> protocols include:\n<ul>\n<li>Domain Name System (DNS)</li>\n<li>Hypertext Transfer Protocol (HTTP)</li>\n<li>File Transfer Protocol (FTP)</li>\n<li>Simple Mail Transfer Protocol (SMTP)</li>\n<li>Trivial File Transfer Protocol (TFTP)</li>\n</ul>\n</li>\n<li>The <strong>transport layer</strong> protocols include:\n<ul>\n<li>Transport Control Protocol (TCP)</li>\n<li>User Datagram Protocol (UDP)</li>\n</ul>\n</li>\n<li>The <strong>Internet layer</strong> protocols include:\n<ul>\n<li>Internet Protocol (IP)</li>\n</ul>\n</li>\n<li>The <strong>network access</strong> layer refers to any particular technology used on a specific network (Ethernet).</li>\n</ol>\n<p>Q: What addresses are defined in each layer?</p>\n<p>MAC address — Layer 2</p>\n<p>IP address — Layer 3</p>\n<p>Domain name — Layer 7</p>\n<p>Subnet mask — Layer 3</p>\n<p>Q: What network devices are operating at each layer?</p>\n<img src=\"/2022/04/08/CN-1/image-20211201155917959.png\" alt=\"image-20211201155917959\" style=\"zoom:50%;\" loading=\"lazy\">\n<p>Q: The technologies of LANs and WANs are usually designed in which layers?</p>\n<p>Both layer1 and layer 2.</p>\n<h3 id=\"data-encapsulation\"><a class=\"markdownIt-Anchor\" href=\"#data-encapsulation\"></a> Data encapsulation</h3>\n<p>Q: What is the process of data encapsulation?</p>\n<p>From Top layer to the bottom layer.</p>\n<img src=\"/2022/04/08/CN-1/image-20211201165246959.png\" alt=\"image-20211201165246959\" style=\"zoom:67%;\" loading=\"lazy\">\n<p>Q: What PDUs are used in each layers?</p>\n<ol>\n<li><strong>Data</strong> - Build the data at layer 7, 6 and 5.</li>\n<li><strong>Segments</strong> - Package the data for end-to-end transport at layer 4.</li>\n<li><strong>Packets</strong> - Append the network address (e.g. IP Address) to the network header at layer 3.</li>\n<li><strong>Frames</strong> - Append the local address (e.g. MAC Address) to the data link header at layer 2.</li>\n<li><strong>Bits</strong> - Convert to bits for transmission on a physical link at layer 1.</li>\n</ol>\n<p>Q: What are the header format of common used PDUs in each layer?</p>\n<p>It usually contains the <strong>address information</strong> and control  information likes sequence numbers, and so on.</p>\n<h3 id=\"network-topology-and-terminologies\"><a class=\"markdownIt-Anchor\" href=\"#network-topology-and-terminologies\"></a> Network topology and terminologies</h3>\n<p>Q: What are the differences of physical and logical network topologies? List some common used physical and logical network topologies.</p>\n<p>Physical topology, which is the actual layout of the wire (media).</p>\n<p>Logical topology, which defines how the media is accessed by the hosts.</p>\n<p>The physical topologies that are commonly used are the <mark>P2P Topology, Bus Topology, Ring Topology, Star Topology, Extended Star Topology, Hierarchical Topology, Tree Topology, Hybrid Topology and Mesh Topology</mark>.</p>\n<p>The ethernet protocol is the most common protocol used for logical topology. The physical topologies that are commonly used are the <mark>Ring Topology and Bus Topology</mark>.</p>\n<p>See more for:</p>\n<ul>\n<li><a href=\"https://www.educba.com/physical-topology/\">Physical Topology | Learn Top 7 Useful Types Of Physical Topology (educba.com)</a></li>\n<li><a href=\"https://www.educba.com/logical-topology/\">Logical Topology | Know Why Do We Use Logical Topology in Networking? (educba.com)</a></li>\n</ul>\n<p>Q: What is the unit of digital bandwidth and analog bandwidth?</p>\n<p>In analog systems, the basic unit of analog bandwidth is <mark>hertz (Hz)</mark>, or cycles per second.</p>\n<p>In digital systems, the basic unit of bandwidth is <mark>bits per second (bps)</mark>.</p>\n<p>Q: What is the definition of bandwidth and throughput, and baud? What is the relationship among bandwidth, throughput, and baud?</p>\n<p>Throughput ≤ Bandwidth</p>\n<p>Throughput is the real life bandwidth.</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>B</mi><mi>a</mi><mi>n</mi><mi>d</mi><mi>w</mi><mi>i</mi><mi>d</mi><mi>t</mi><mi>h</mi><mo>=</mo><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mi>L</mi><mo>×</mo><mi>b</mi><mi>u</mi><mi>a</mi><mi>d</mi></mrow><annotation encoding=\"application/x-tex\">Bandwidth= log_2L\\times buad</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05017em;\">B</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\" style=\"margin-right:0.02691em;\">w</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">h</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathdefault\">o</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord mathdefault\">L</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">b</span><span class=\"mord mathdefault\">u</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">d</span></span></span></span> where L is the base info.</p>\n<p>See more for: <a href=\"https://www.technologyuk.net/telecommunications/telecom-principles/bits-bauds-and-bandwidth.shtml\">Bits, Bauds and Bandwidth (technologyuk.net)</a></p>\n<p>Q:  What is the difference between the transmission delay and propagation delay?</p>\n<p><strong>Propagation delay</strong> is a simple measurement of how long it takes for a signal to travel along the cable being tested.(<strong>single</strong>)</p>\n<p><strong>Transmission delay</strong> is the time needed to push all the packet bits on the transmission link.(<strong>total</strong>)</p>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>P</mi><mi>r</mi><mi>o</mi><mi>p</mi><mi>a</mi><mi>g</mi><mi>a</mi><mi>t</mi><mi>i</mi><mi>o</mi><mi>n</mi><mtext> </mtext><mi>d</mi><mi>e</mi><mi>l</mi><mi>a</mi><mi>y</mi><mo>=</mo><mfrac><mrow><mi>l</mi><mi>e</mi><mi>n</mi><mi>g</mi><mi>t</mi><mi>h</mi><mtext> </mtext><mi>o</mi><mi>f</mi><mtext> </mtext><mi>c</mi><mi>a</mi><mi>b</mi><mi>l</mi><mi>e</mi></mrow><mrow><mi>s</mi><mi>p</mi><mi>e</mi><mi>e</mi><mi>d</mi><mtext> </mtext><mi>o</mi><mi>f</mi><mtext> </mtext><mi>s</mi><mi>i</mi><mi>g</mi><mi>n</mi><mi>a</mi><mi>l</mi><mo stretchy=\"false\">(</mo><mn>3</mn><mo>×</mo><mn>1</mn><msup><mn>0</mn><mn>8</mn></msup><mo stretchy=\"false\">)</mo></mrow></mfrac><mspace linebreak=\"newline\"></mspace><mi>T</mi><mi>r</mi><mi>a</mi><mi>n</mi><mi>s</mi><mi>m</mi><mi>i</mi><mi>s</mi><mi>s</mi><mi>i</mi><mi>o</mi><mi>n</mi><mtext> </mtext><mi>d</mi><mi>e</mi><mi>l</mi><mi>a</mi><mi>y</mi><mo>=</mo><mfrac><mrow><mi>s</mi><mi>i</mi><mi>z</mi><mi>e</mi><mtext> </mtext><mi>o</mi><mi>f</mi><mtext> </mtext><mi>s</mi><mi>i</mi><mi>g</mi><mi>n</mi><mi>a</mi><mi>l</mi></mrow><mrow><mi>s</mi><mi>p</mi><mi>e</mi><mi>e</mi><mi>d</mi><mtext> </mtext><mi>o</mi><mi>f</mi><mtext> </mtext><mi>t</mi><mi>r</mi><mi>a</mi><mi>n</mi><mi>s</mi><mi>m</mi><mi>i</mi><mi>s</mi><mi>s</mi><mi>i</mi><mi>o</mi><mi>n</mi></mrow></mfrac><mspace linebreak=\"newline\"></mspace></mrow><annotation encoding=\"application/x-tex\">Propagation\\ delay = \\frac{length\\ of \\ cable}{speed\\ of \\ signal(3\\times 10^8)}\\\\\nTransmission\\ delay= \\frac{size\\ of \\ signal}{speed\\ of\\ transmission}\\\\\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">P</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">p</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">n</span><span class=\"mspace\"> </span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.3074399999999997em;vertical-align:-0.936em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.3714399999999998em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">p</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\">d</span><span class=\"mspace\"> </span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\"> </span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mopen\">(</span><span class=\"mord\">3</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.740108em;\"><span style=\"top:-2.9890000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">8</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">h</span><span class=\"mspace\"> </span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\"> </span><span class=\"mord mathdefault\">c</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">b</span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathdefault\">e</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.936em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span><span class=\"mspace newline\"></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">m</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">n</span><span class=\"mspace\"> </span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.25188em;vertical-align:-0.8804400000000001em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.3714399999999998em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">p</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\">d</span><span class=\"mspace\"> </span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\"> </span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">m</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">n</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\" style=\"margin-right:0.04398em;\">z</span><span class=\"mord mathdefault\">e</span><span class=\"mspace\"> </span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\"> </span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8804400000000001em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span><span class=\"mspace newline\"></span></span></span></span></p>\n<p>See more for: <a href=\"https://www.baeldung.com/cs/propagation-vs-transmission-delay\">Propagation Delay vs Transmission Delay | Baeldung on Computer Science</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"networking-basics\"><a class=\"markdownIt-Anchor\" href=\"#networking-basics\"></a> Networking basics</h3>\n<p>Q: What are the differences between data networks and voice networks?</p>\n<p>Data network -&gt; Digital transmission</p>\n<p>Voice network -&gt; Analog transmission</p>\n<p>Q: How many types of computer networks when it is classified by their scale?</p>\n<p>Personal Area Networks(PAN), Local Area Networks(LAN), Metropolitan Area Networks(MAN), and Wide Area Networks(WAN).</p>\n<h3 id=\"network-architecture\"><a class=\"markdownIt-Anchor\" href=\"#network-architecture\"></a> Network architecture</h3>\n<p>Q: What are the definitions of layers, protocols, and services in network architecture?</p>\n<p>A layer is a level of abstraction which has a well defined function.</p>\n<p>Protocols are executives of the functions.</p>\n<p>Services are functions provided through protocols.</p>\n<p>Q: What are the famous reference models used in computer networks?</p>\n<p><mark>OSI reference model</mark> and <mark>TCP/IP reference model</mark></p>\n<p>Q: What are the differences between OSI and TCP/IP reference model?</p>\n<img src=\"/2022/04/08/CN-1/../../../../Users/28580/Desktop/Final Review/Final Review.assets/image-20211201142249636.png\" alt=\"image-20211201142249636\" style=\"zoom:50%;\">\n<h3 id=\"functions-and-technologies-in-osi-and-tcpip-reference-model\"><a class=\"markdownIt-Anchor\" href=\"#functions-and-technologies-in-osi-and-tcpip-reference-model\"></a> Functions and technologies in OSI and TCP/IP reference model</h3>\n<p>Q: What are the names of seven layers in OSI and TCP/IP reference model?</p>\n<p>Physical layer, Data Link layer, Network layer, Transport layer, Session layer, Presentation layer, Application layer.</p>\n<p>Q: What functions are defined in each layer?</p>\n<img src=\"/2022/04/08/CN-1/image-20211201155433683.png\" alt=\"image-20211201155433683\" style=\"zoom:50%;\">\n<p>Q: What protocols are defined in each layer?</p>\n<p>Some common protocols specified by the TCP/IP reference model layers.</p>\n<ol>\n<li>The <strong>application layer</strong> protocols include:\n<ul>\n<li>Domain Name System (DNS)</li>\n<li>Hypertext Transfer Protocol (HTTP)</li>\n<li>File Transfer Protocol (FTP)</li>\n<li>Simple Mail Transfer Protocol (SMTP)</li>\n<li>Trivial File Transfer Protocol (TFTP)</li>\n</ul>\n</li>\n<li>The <strong>transport layer</strong> protocols include:\n<ul>\n<li>Transport Control Protocol (TCP)</li>\n<li>User Datagram Protocol (UDP)</li>\n</ul>\n</li>\n<li>The <strong>Internet layer</strong> protocols include:\n<ul>\n<li>Internet Protocol (IP)</li>\n</ul>\n</li>\n<li>The <strong>network access</strong> layer refers to any particular technology used on a specific network (Ethernet).</li>\n</ol>\n<p>Q: What addresses are defined in each layer?</p>\n<p>MAC address — Layer 2</p>\n<p>IP address — Layer 3</p>\n<p>Domain name — Layer 7</p>\n<p>Subnet mask — Layer 3</p>\n<p>Q: What network devices are operating at each layer?</p>\n<img src=\"/2022/04/08/CN-1/image-20211201155917959.png\" alt=\"image-20211201155917959\" style=\"zoom:50%;\">\n<p>Q: The technologies of LANs and WANs are usually designed in which layers?</p>\n<p>Both layer1 and layer 2.</p>\n<h3 id=\"data-encapsulation\"><a class=\"markdownIt-Anchor\" href=\"#data-encapsulation\"></a> Data encapsulation</h3>\n<p>Q: What is the process of data encapsulation?</p>\n<p>From Top layer to the bottom layer.</p>\n<img src=\"/2022/04/08/CN-1/image-20211201165246959.png\" alt=\"image-20211201165246959\" style=\"zoom:67%;\">\n<p>Q: What PDUs are used in each layers?</p>\n<ol>\n<li><strong>Data</strong> - Build the data at layer 7, 6 and 5.</li>\n<li><strong>Segments</strong> - Package the data for end-to-end transport at layer 4.</li>\n<li><strong>Packets</strong> - Append the network address (e.g. IP Address) to the network header at layer 3.</li>\n<li><strong>Frames</strong> - Append the local address (e.g. MAC Address) to the data link header at layer 2.</li>\n<li><strong>Bits</strong> - Convert to bits for transmission on a physical link at layer 1.</li>\n</ol>\n<p>Q: What are the header format of common used PDUs in each layer?</p>\n<p>It usually contains the <strong>address information</strong> and control  information likes sequence numbers, and so on.</p>\n<h3 id=\"network-topology-and-terminologies\"><a class=\"markdownIt-Anchor\" href=\"#network-topology-and-terminologies\"></a> Network topology and terminologies</h3>\n<p>Q: What are the differences of physical and logical network topologies? List some common used physical and logical network topologies.</p>\n<p>Physical topology, which is the actual layout of the wire (media).</p>\n<p>Logical topology, which defines how the media is accessed by the hosts.</p>\n<p>The physical topologies that are commonly used are the <mark>P2P Topology, Bus Topology, Ring Topology, Star Topology, Extended Star Topology, Hierarchical Topology, Tree Topology, Hybrid Topology and Mesh Topology</mark>.</p>\n<p>The ethernet protocol is the most common protocol used for logical topology. The physical topologies that are commonly used are the <mark>Ring Topology and Bus Topology</mark>.</p>\n<p>See more for:</p>\n<ul>\n<li><a href=\"https://www.educba.com/physical-topology/\">Physical Topology | Learn Top 7 Useful Types Of Physical Topology (educba.com)</a></li>\n<li><a href=\"https://www.educba.com/logical-topology/\">Logical Topology | Know Why Do We Use Logical Topology in Networking? (educba.com)</a></li>\n</ul>\n<p>Q: What is the unit of digital bandwidth and analog bandwidth?</p>\n<p>In analog systems, the basic unit of analog bandwidth is <mark>hertz (Hz)</mark>, or cycles per second.</p>\n<p>In digital systems, the basic unit of bandwidth is <mark>bits per second (bps)</mark>.</p>\n<p>Q: What is the definition of bandwidth and throughput, and baud? What is the relationship among bandwidth, throughput, and baud?</p>\n<p>Throughput ≤ Bandwidth</p>\n<p>Throughput is the real life bandwidth.</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>B</mi><mi>a</mi><mi>n</mi><mi>d</mi><mi>w</mi><mi>i</mi><mi>d</mi><mi>t</mi><mi>h</mi><mo>=</mo><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mi>L</mi><mo>×</mo><mi>b</mi><mi>u</mi><mi>a</mi><mi>d</mi></mrow><annotation encoding=\"application/x-tex\">Bandwidth= log_2L\\times buad</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05017em;\">B</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\" style=\"margin-right:0.02691em;\">w</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">h</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathdefault\">o</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord mathdefault\">L</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">b</span><span class=\"mord mathdefault\">u</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">d</span></span></span></span> where L is the base info.</p>\n<p>See more for: <a href=\"https://www.technologyuk.net/telecommunications/telecom-principles/bits-bauds-and-bandwidth.shtml\">Bits, Bauds and Bandwidth (technologyuk.net)</a></p>\n<p>Q:  What is the difference between the transmission delay and propagation delay?</p>\n<p><strong>Propagation delay</strong> is a simple measurement of how long it takes for a signal to travel along the cable being tested.(<strong>single</strong>)</p>\n<p><strong>Transmission delay</strong> is the time needed to push all the packet bits on the transmission link.(<strong>total</strong>)</p>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>P</mi><mi>r</mi><mi>o</mi><mi>p</mi><mi>a</mi><mi>g</mi><mi>a</mi><mi>t</mi><mi>i</mi><mi>o</mi><mi>n</mi><mtext> </mtext><mi>d</mi><mi>e</mi><mi>l</mi><mi>a</mi><mi>y</mi><mo>=</mo><mfrac><mrow><mi>l</mi><mi>e</mi><mi>n</mi><mi>g</mi><mi>t</mi><mi>h</mi><mtext> </mtext><mi>o</mi><mi>f</mi><mtext> </mtext><mi>c</mi><mi>a</mi><mi>b</mi><mi>l</mi><mi>e</mi></mrow><mrow><mi>s</mi><mi>p</mi><mi>e</mi><mi>e</mi><mi>d</mi><mtext> </mtext><mi>o</mi><mi>f</mi><mtext> </mtext><mi>s</mi><mi>i</mi><mi>g</mi><mi>n</mi><mi>a</mi><mi>l</mi><mo stretchy=\"false\">(</mo><mn>3</mn><mo>×</mo><mn>1</mn><msup><mn>0</mn><mn>8</mn></msup><mo stretchy=\"false\">)</mo></mrow></mfrac><mspace linebreak=\"newline\"></mspace><mi>T</mi><mi>r</mi><mi>a</mi><mi>n</mi><mi>s</mi><mi>m</mi><mi>i</mi><mi>s</mi><mi>s</mi><mi>i</mi><mi>o</mi><mi>n</mi><mtext> </mtext><mi>d</mi><mi>e</mi><mi>l</mi><mi>a</mi><mi>y</mi><mo>=</mo><mfrac><mrow><mi>s</mi><mi>i</mi><mi>z</mi><mi>e</mi><mtext> </mtext><mi>o</mi><mi>f</mi><mtext> </mtext><mi>s</mi><mi>i</mi><mi>g</mi><mi>n</mi><mi>a</mi><mi>l</mi></mrow><mrow><mi>s</mi><mi>p</mi><mi>e</mi><mi>e</mi><mi>d</mi><mtext> </mtext><mi>o</mi><mi>f</mi><mtext> </mtext><mi>t</mi><mi>r</mi><mi>a</mi><mi>n</mi><mi>s</mi><mi>m</mi><mi>i</mi><mi>s</mi><mi>s</mi><mi>i</mi><mi>o</mi><mi>n</mi></mrow></mfrac><mspace linebreak=\"newline\"></mspace></mrow><annotation encoding=\"application/x-tex\">Propagation\\ delay = \\frac{length\\ of \\ cable}{speed\\ of \\ signal(3\\times 10^8)}\\\\\nTransmission\\ delay= \\frac{size\\ of \\ signal}{speed\\ of\\ transmission}\\\\\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">P</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">p</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">n</span><span class=\"mspace\"> </span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.3074399999999997em;vertical-align:-0.936em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.3714399999999998em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">p</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\">d</span><span class=\"mspace\"> </span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\"> </span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mopen\">(</span><span class=\"mord\">3</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.740108em;\"><span style=\"top:-2.9890000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">8</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">h</span><span class=\"mspace\"> </span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\"> </span><span class=\"mord mathdefault\">c</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">b</span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathdefault\">e</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.936em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span><span class=\"mspace newline\"></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">m</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">n</span><span class=\"mspace\"> </span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.25188em;vertical-align:-0.8804400000000001em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.3714399999999998em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">p</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\">d</span><span class=\"mspace\"> </span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\"> </span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">m</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">n</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\" style=\"margin-right:0.04398em;\">z</span><span class=\"mord mathdefault\">e</span><span class=\"mspace\"> </span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\"> </span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8804400000000001em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span><span class=\"mspace newline\"></span></span></span></span></p>\n<p>See more for: <a href=\"https://www.baeldung.com/cs/propagation-vs-transmission-delay\">Propagation Delay vs Transmission Delay | Baeldung on Computer Science</a></p>\n"},{"title":"Computer Network 2 - Layer 1,2 Technology, Ethernet","date":"2022-04-08T15:30:13.000Z","author":"Tony","katex":true,"_content":"\n## Chapter 2 Layer 1-2 Technology, Ethernet\n\n### Layer 1 Technologies\n\n#### Network media\n\n###### What carrier signals are used in the network media of copper, optical fiber and wireless?\n\n​\t\tElectrical signals are transferring in copper;\n\n​\t\tLight signals are transferring in optical fiber;\n\n​\t\tElectromagnetic waves are transferring in the air to communicate wireless network media(WIFI).\n\n###### What is the purpose of encoding and modulation?\n\n​\t\t**Encoding** is the process by which the data is converted into digital format for efficient transmission or storage. \n\n​\t\t**Modulation** is the process of converting information (signals or data) to an electronic or optical carrier, so that it can be transmitted to comparatively large distance without getting affected by noise or unwanted signals.\n\n​\t\tEncoding is about converting digital or analog data to digital signal(**D2A**), whereas modulation is about converting digital or analog data to an analog signal(**A2D**).\t\n\n#### Network cabling\n\n###### What are the differences between LAN cabling and WAN cabling?\n\n​\t\tNothing different?\n\n###### List some common used types of cables in LAN and WAN cabling. \n\n​\t\tLAN cabling: coaxial cable, UTP cable, single-mode and multimode fiber, etc.\n\n​\t\tWAN cabling: RS-232 cable, V.35 cable, etc.\n\n###### In LAN cabling, how to use the UTP cables of straight-through, crossover, rollover to connect devices?\n\n​\t\tSee [Straight-through, Crossover & Rollover Cable Pinouts Explained | Computer Cable Store](https://www.computercablestore.com/straight-through-crossover-and-rollover-wiring).\n\n###### Which wires of a UTP cable are used to transmit and receive data in Ethernet?\n\n​\t\tCategory 6 cable(LAN Cable).\n\n###### In WAN cabling, what is the difference between DTE and DCE cabling?\n\n​\t\tDTE: Data Terminal Equipment, e.g. your own PC\n\n​\t\tDCE: Data Circuit Terminating Equipment, e.g. modem.\n\n---\n\n### Layer 2 Technologies\n\n#### Layer 2 functions\n\n###### What is the media access method of CSMA/CD?\n\n​\t\tCSMA is a simple system that allows only one host to transmit at a time. Hosts on the network can access the  media at any time. Before sending data, CSMA hosts isten to the network to determine if it is already in use.\n​\t\t➢ If in use, then the hosts wait.\n​\t\t➢ If not in use, they transmit.\n\n###### How does a host use backoff algorithm for transmission attempt when collision occurred in  Ethernet network?\n\n> Exponential backoff is an algorithm that uses feedback to multiplicatively decrease the rate of some process, in order to gradually find an acceptable rate.(Wikipedia)\n\n​\t\tAfter a conflict occurred in a computer network, nodes on the network wait for a certain period of time before sending. The waiting time increases exponentially to avoid frequent triggering conflicts. \n\n​\t\tAfter $n$ conflicts occur, the waiting time is randomly selected between $0$ ~ $2^n-1$ slot times. Note that $n$ cannot be unlimited growing since the waiting time will not increasing without pause. Usually, we set $n\\leq 10$ so that the longest waiting time will not exceed over 1023 slot times.\n$$\nRandom\\ waiting\\ period = [ 0, (2^n – 1) \\times slot\\ time ]\\\\\n$$\n\n#### Ethernet switching\n\n###### What is bridging? \n\n​\t\tBridging refers to a technology in which a device known as a bridge connects two or more LAN segments.\n\n###### What addresses in the received frame does a switch use to build the switching table and make  forwarding decision?\n\n​\t\tThe switching table is built by using  source address, e.g. **source MAC**. \n\n​\t\tThe forward decision is made by using destination address, e.g.  **destination MAC**.\n\n###### What are the differences between the switching modes of store-and-forward, fast-forward, and  fragment-free?\n\n​\t\tThe entire frame is received before any forwarding takes place for **Store-and-forward**.\n\n​\t\tThe switch reads the destination address before receiving the entire frame which then forwarded before the entire frame arrives for fast-forward, and fragment-free. (Both belongs to **Cut-through**)\n\n###### What is the definition of broadcast domain and collision domain?\n\n​\t\tA **broadcast domain** includes all of the collision domains that process the same broadcast frame. This includes all the hosts that are part of the network segment bounded by a layer 3 device.\n\n​\t\tA **collision domain** is a connected physical network segment where collisions can occur. Using the layer 1 device likes repeater or hub extends the collision domain.\n\n###### How can the layer 1, 2 and 3 network devices be used to segment a network into different domains?\n\n​\t\tRepeater and Hub (layer 1 devices)cannot segment a network into different domain. \n\n​\t\tBridge and Switch (layer 2 devices) can segment a network into different collision domain.\n\n​\t\tRouter (layer 3 devices) can segment a network into different broadcast domain. \n\n![image-20211204114107336](CN-2/image-20211204114107336.png)\n\nQ1: All the red cables are WAN cables, and all the black cables are LAN cables.\n\nQ2: Category 6 Cable\n\nQ3: \n\n![image-20211210170210391](CN-2/image-20211210170210391.png)\n\n![image-20211204114128703](CN-2/image-20211204114128703.png)\n\nQ1: Not success, because PC1 and PC3 are in the same collision domain.\n\nQ2: PC1 and PC3, since the back-off algorithm.\n\nQ3: PC2 and PC3, since they are in the same collision domain.\n\nQ4: They will not produce collision, because the four PCs are in the different collision domain.\n\n![image-20211204114150471](CN-2/image-20211204114150471.png)\n\nWe have to simulate the process step by step:\n\nFirstly, the messages are sent by PC1, and received by Switch1. Switch1 needs to 2 steps, first check the routing table to see whether there is a record about PC3. If there is no record, then Switch1 will broadcast the message through P2 and P3. Therefore, that is the reason why PC2 can receive the message. But PC2 will drop the message since the destination of the message is PC3. \n\nThen, Switch2 received that message. What Switch2 need to do is also that 2 steps, first check the routing table. Switch2 found the PC3 in the routing table, so it just need to send the message to PC3 directly and PC4 will never receive the message. The second step is to write the PC1 into the routing table of Switch 2, as shown below.\n\n![image-20211210171011761](Final Review Chap2.assets/image-20211210171011761.png)","source":"_posts/CN-2.md","raw":"---\ntitle: Computer Network 2 - Layer 1,2 Technology, Ethernet\ndate: 2022-04-08 23:30:13\ntags:\n\t- computer network\ncategories:\n\t- 计算机网络\nauthor: Tony\nkatex: true\n---\n\n## Chapter 2 Layer 1-2 Technology, Ethernet\n\n### Layer 1 Technologies\n\n#### Network media\n\n###### What carrier signals are used in the network media of copper, optical fiber and wireless?\n\n​\t\tElectrical signals are transferring in copper;\n\n​\t\tLight signals are transferring in optical fiber;\n\n​\t\tElectromagnetic waves are transferring in the air to communicate wireless network media(WIFI).\n\n###### What is the purpose of encoding and modulation?\n\n​\t\t**Encoding** is the process by which the data is converted into digital format for efficient transmission or storage. \n\n​\t\t**Modulation** is the process of converting information (signals or data) to an electronic or optical carrier, so that it can be transmitted to comparatively large distance without getting affected by noise or unwanted signals.\n\n​\t\tEncoding is about converting digital or analog data to digital signal(**D2A**), whereas modulation is about converting digital or analog data to an analog signal(**A2D**).\t\n\n#### Network cabling\n\n###### What are the differences between LAN cabling and WAN cabling?\n\n​\t\tNothing different?\n\n###### List some common used types of cables in LAN and WAN cabling. \n\n​\t\tLAN cabling: coaxial cable, UTP cable, single-mode and multimode fiber, etc.\n\n​\t\tWAN cabling: RS-232 cable, V.35 cable, etc.\n\n###### In LAN cabling, how to use the UTP cables of straight-through, crossover, rollover to connect devices?\n\n​\t\tSee [Straight-through, Crossover & Rollover Cable Pinouts Explained | Computer Cable Store](https://www.computercablestore.com/straight-through-crossover-and-rollover-wiring).\n\n###### Which wires of a UTP cable are used to transmit and receive data in Ethernet?\n\n​\t\tCategory 6 cable(LAN Cable).\n\n###### In WAN cabling, what is the difference between DTE and DCE cabling?\n\n​\t\tDTE: Data Terminal Equipment, e.g. your own PC\n\n​\t\tDCE: Data Circuit Terminating Equipment, e.g. modem.\n\n---\n\n### Layer 2 Technologies\n\n#### Layer 2 functions\n\n###### What is the media access method of CSMA/CD?\n\n​\t\tCSMA is a simple system that allows only one host to transmit at a time. Hosts on the network can access the  media at any time. Before sending data, CSMA hosts isten to the network to determine if it is already in use.\n​\t\t➢ If in use, then the hosts wait.\n​\t\t➢ If not in use, they transmit.\n\n###### How does a host use backoff algorithm for transmission attempt when collision occurred in  Ethernet network?\n\n> Exponential backoff is an algorithm that uses feedback to multiplicatively decrease the rate of some process, in order to gradually find an acceptable rate.(Wikipedia)\n\n​\t\tAfter a conflict occurred in a computer network, nodes on the network wait for a certain period of time before sending. The waiting time increases exponentially to avoid frequent triggering conflicts. \n\n​\t\tAfter $n$ conflicts occur, the waiting time is randomly selected between $0$ ~ $2^n-1$ slot times. Note that $n$ cannot be unlimited growing since the waiting time will not increasing without pause. Usually, we set $n\\leq 10$ so that the longest waiting time will not exceed over 1023 slot times.\n$$\nRandom\\ waiting\\ period = [ 0, (2^n – 1) \\times slot\\ time ]\\\\\n$$\n\n#### Ethernet switching\n\n###### What is bridging? \n\n​\t\tBridging refers to a technology in which a device known as a bridge connects two or more LAN segments.\n\n###### What addresses in the received frame does a switch use to build the switching table and make  forwarding decision?\n\n​\t\tThe switching table is built by using  source address, e.g. **source MAC**. \n\n​\t\tThe forward decision is made by using destination address, e.g.  **destination MAC**.\n\n###### What are the differences between the switching modes of store-and-forward, fast-forward, and  fragment-free?\n\n​\t\tThe entire frame is received before any forwarding takes place for **Store-and-forward**.\n\n​\t\tThe switch reads the destination address before receiving the entire frame which then forwarded before the entire frame arrives for fast-forward, and fragment-free. (Both belongs to **Cut-through**)\n\n###### What is the definition of broadcast domain and collision domain?\n\n​\t\tA **broadcast domain** includes all of the collision domains that process the same broadcast frame. This includes all the hosts that are part of the network segment bounded by a layer 3 device.\n\n​\t\tA **collision domain** is a connected physical network segment where collisions can occur. Using the layer 1 device likes repeater or hub extends the collision domain.\n\n###### How can the layer 1, 2 and 3 network devices be used to segment a network into different domains?\n\n​\t\tRepeater and Hub (layer 1 devices)cannot segment a network into different domain. \n\n​\t\tBridge and Switch (layer 2 devices) can segment a network into different collision domain.\n\n​\t\tRouter (layer 3 devices) can segment a network into different broadcast domain. \n\n![image-20211204114107336](CN-2/image-20211204114107336.png)\n\nQ1: All the red cables are WAN cables, and all the black cables are LAN cables.\n\nQ2: Category 6 Cable\n\nQ3: \n\n![image-20211210170210391](CN-2/image-20211210170210391.png)\n\n![image-20211204114128703](CN-2/image-20211204114128703.png)\n\nQ1: Not success, because PC1 and PC3 are in the same collision domain.\n\nQ2: PC1 and PC3, since the back-off algorithm.\n\nQ3: PC2 and PC3, since they are in the same collision domain.\n\nQ4: They will not produce collision, because the four PCs are in the different collision domain.\n\n![image-20211204114150471](CN-2/image-20211204114150471.png)\n\nWe have to simulate the process step by step:\n\nFirstly, the messages are sent by PC1, and received by Switch1. Switch1 needs to 2 steps, first check the routing table to see whether there is a record about PC3. If there is no record, then Switch1 will broadcast the message through P2 and P3. Therefore, that is the reason why PC2 can receive the message. But PC2 will drop the message since the destination of the message is PC3. \n\nThen, Switch2 received that message. What Switch2 need to do is also that 2 steps, first check the routing table. Switch2 found the PC3 in the routing table, so it just need to send the message to PC3 directly and PC4 will never receive the message. The second step is to write the PC1 into the routing table of Switch 2, as shown below.\n\n![image-20211210171011761](Final Review Chap2.assets/image-20211210171011761.png)","slug":"CN-2","published":1,"updated":"2022-04-08T15:34:48.223Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1rj2n50000bgwcy46ltclhs","content":"<h2 id=\"chapter-2-layer-1-2-technology-ethernet\"><a class=\"markdownIt-Anchor\" href=\"#chapter-2-layer-1-2-technology-ethernet\"></a> Chapter 2 Layer 1-2 Technology, Ethernet</h2>\n<h3 id=\"layer-1-technologies\"><a class=\"markdownIt-Anchor\" href=\"#layer-1-technologies\"></a> Layer 1 Technologies</h3>\n<h4 id=\"network-media\"><a class=\"markdownIt-Anchor\" href=\"#network-media\"></a> Network media</h4>\n<h6 id=\"what-carrier-signals-are-used-in-the-network-media-of-copper-optical-fiber-and-wireless\"><a class=\"markdownIt-Anchor\" href=\"#what-carrier-signals-are-used-in-the-network-media-of-copper-optical-fiber-and-wireless\"></a> What carrier signals are used in the network media of copper, optical fiber and wireless?</h6>\n<p>​\t\tElectrical signals are transferring in copper;</p>\n<p>​\t\tLight signals are transferring in optical fiber;</p>\n<p>​\t\tElectromagnetic waves are transferring in the air to communicate wireless network media(WIFI).</p>\n<h6 id=\"what-is-the-purpose-of-encoding-and-modulation\"><a class=\"markdownIt-Anchor\" href=\"#what-is-the-purpose-of-encoding-and-modulation\"></a> What is the purpose of encoding and modulation?</h6>\n<p>​\t\t<strong>Encoding</strong> is the process by which the data is converted into digital format for efficient transmission or storage.</p>\n<p>​\t\t<strong>Modulation</strong> is the process of converting information (signals or data) to an electronic or optical carrier, so that it can be transmitted to comparatively large distance without getting affected by noise or unwanted signals.</p>\n<p>​\t\tEncoding is about converting digital or analog data to digital signal(<strong>D2A</strong>), whereas modulation is about converting digital or analog data to an analog signal(<strong>A2D</strong>).</p>\n<h4 id=\"network-cabling\"><a class=\"markdownIt-Anchor\" href=\"#network-cabling\"></a> Network cabling</h4>\n<h6 id=\"what-are-the-differences-between-lan-cabling-and-wan-cabling\"><a class=\"markdownIt-Anchor\" href=\"#what-are-the-differences-between-lan-cabling-and-wan-cabling\"></a> What are the differences between LAN cabling and WAN cabling?</h6>\n<p>​\t\tNothing different?</p>\n<h6 id=\"list-some-common-used-types-of-cables-in-lan-and-wan-cabling\"><a class=\"markdownIt-Anchor\" href=\"#list-some-common-used-types-of-cables-in-lan-and-wan-cabling\"></a> List some common used types of cables in LAN and WAN cabling.</h6>\n<p>​\t\tLAN cabling: coaxial cable, UTP cable, single-mode and multimode fiber, etc.</p>\n<p>​\t\tWAN cabling: RS-232 cable, V.35 cable, etc.</p>\n<h6 id=\"in-lan-cabling-how-to-use-the-utp-cables-of-straight-through-crossover-rollover-to-connect-devices\"><a class=\"markdownIt-Anchor\" href=\"#in-lan-cabling-how-to-use-the-utp-cables-of-straight-through-crossover-rollover-to-connect-devices\"></a> In LAN cabling, how to use the UTP cables of straight-through, crossover, rollover to connect devices?</h6>\n<p>​\t\tSee <a href=\"https://www.computercablestore.com/straight-through-crossover-and-rollover-wiring\">Straight-through, Crossover &amp; Rollover Cable Pinouts Explained | Computer Cable Store</a>.</p>\n<h6 id=\"which-wires-of-a-utp-cable-are-used-to-transmit-and-receive-data-in-ethernet\"><a class=\"markdownIt-Anchor\" href=\"#which-wires-of-a-utp-cable-are-used-to-transmit-and-receive-data-in-ethernet\"></a> Which wires of a UTP cable are used to transmit and receive data in Ethernet?</h6>\n<p>​\t\tCategory 6 cable(LAN Cable).</p>\n<h6 id=\"in-wan-cabling-what-is-the-difference-between-dte-and-dce-cabling\"><a class=\"markdownIt-Anchor\" href=\"#in-wan-cabling-what-is-the-difference-between-dte-and-dce-cabling\"></a> In WAN cabling, what is the difference between DTE and DCE cabling?</h6>\n<p>​\t\tDTE: Data Terminal Equipment, e.g. your own PC</p>\n<p>​\t\tDCE: Data Circuit Terminating Equipment, e.g. modem.</p>\n<hr>\n<h3 id=\"layer-2-technologies\"><a class=\"markdownIt-Anchor\" href=\"#layer-2-technologies\"></a> Layer 2 Technologies</h3>\n<h4 id=\"layer-2-functions\"><a class=\"markdownIt-Anchor\" href=\"#layer-2-functions\"></a> Layer 2 functions</h4>\n<h6 id=\"what-is-the-media-access-method-of-csmacd\"><a class=\"markdownIt-Anchor\" href=\"#what-is-the-media-access-method-of-csmacd\"></a> What is the media access method of CSMA/CD?</h6>\n<p>​\t\tCSMA is a simple system that allows only one host to transmit at a time. Hosts on the network can access the  media at any time. Before sending data, CSMA hosts isten to the network to determine if it is already in use.<br>\n​\t\t➢ If in use, then the hosts wait.<br>\n​\t\t➢ If not in use, they transmit.</p>\n<h6 id=\"how-does-a-host-use-backoff-algorithm-for-transmission-attempt-when-collision-occurred-in-ethernet-network\"><a class=\"markdownIt-Anchor\" href=\"#how-does-a-host-use-backoff-algorithm-for-transmission-attempt-when-collision-occurred-in-ethernet-network\"></a> How does a host use backoff algorithm for transmission attempt when collision occurred in  Ethernet network?</h6>\n<blockquote>\n<p>Exponential backoff is an algorithm that uses feedback to multiplicatively decrease the rate of some process, in order to gradually find an acceptable rate.(Wikipedia)</p>\n</blockquote>\n<p>​\t\tAfter a conflict occurred in a computer network, nodes on the network wait for a certain period of time before sending. The waiting time increases exponentially to avoid frequent triggering conflicts.</p>\n<p>​\t\tAfter <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">n</span></span></span></span> conflicts occur, the waiting time is randomly selected between <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span> ~ <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mn>2</mn><mi>n</mi></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">2^n-1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.747722em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span> slot times. Note that <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">n</span></span></span></span> cannot be unlimited growing since the waiting time will not increasing without pause. Usually, we set <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>n</mi><mo>≤</mo><mn>10</mn></mrow><annotation encoding=\"application/x-tex\">n\\leq 10</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mord mathdefault\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\">0</span></span></span></span> so that the longest waiting time will not exceed over 1023 slot times.</p>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>R</mi><mi>a</mi><mi>n</mi><mi>d</mi><mi>o</mi><mi>m</mi><mtext> </mtext><mi>w</mi><mi>a</mi><mi>i</mi><mi>t</mi><mi>i</mi><mi>n</mi><mi>g</mi><mtext> </mtext><mi>p</mi><mi>e</mi><mi>r</mi><mi>i</mi><mi>o</mi><mi>d</mi><mo>=</mo><mo stretchy=\"false\">[</mo><mn>0</mn><mo separator=\"true\">,</mo><mo stretchy=\"false\">(</mo><msup><mn>2</mn><mi>n</mi></msup><mi mathvariant=\"normal\">–</mi><mn>1</mn><mo stretchy=\"false\">)</mo><mo>×</mo><mi>s</mi><mi>l</mi><mi>o</mi><mi>t</mi><mtext> </mtext><mi>t</mi><mi>i</mi><mi>m</mi><mi>e</mi><mo stretchy=\"false\">]</mo><mspace linebreak=\"newline\"></mspace></mrow><annotation encoding=\"application/x-tex\">Random\\ waiting\\ period = [ 0, (2^n – 1) \\times slot\\ time ]\\\\\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">m</span><span class=\"mspace\"> </span><span class=\"mord mathdefault\" style=\"margin-right:0.02691em;\">w</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span><span class=\"mspace\"> </span><span class=\"mord mathdefault\">p</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">d</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7143919999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span></span></span></span></span><span class=\"mord\" style=\"margin-right:0.02778em;\">–</span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">t</span><span class=\"mspace\"> </span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">m</span><span class=\"mord mathdefault\">e</span><span class=\"mclose\">]</span></span><span class=\"mspace newline\"></span></span></span></span></p>\n<h4 id=\"ethernet-switching\"><a class=\"markdownIt-Anchor\" href=\"#ethernet-switching\"></a> Ethernet switching</h4>\n<h6 id=\"what-is-bridging\"><a class=\"markdownIt-Anchor\" href=\"#what-is-bridging\"></a> What is bridging?</h6>\n<p>​\t\tBridging refers to a technology in which a device known as a bridge connects two or more LAN segments.</p>\n<h6 id=\"what-addresses-in-the-received-frame-does-a-switch-use-to-build-the-switching-table-and-make-forwarding-decision\"><a class=\"markdownIt-Anchor\" href=\"#what-addresses-in-the-received-frame-does-a-switch-use-to-build-the-switching-table-and-make-forwarding-decision\"></a> What addresses in the received frame does a switch use to build the switching table and make  forwarding decision?</h6>\n<p>​\t\tThe switching table is built by using  source address, e.g. <strong>source MAC</strong>.</p>\n<p>​\t\tThe forward decision is made by using destination address, e.g.  <strong>destination MAC</strong>.</p>\n<h6 id=\"what-are-the-differences-between-the-switching-modes-of-store-and-forward-fast-forward-and-fragment-free\"><a class=\"markdownIt-Anchor\" href=\"#what-are-the-differences-between-the-switching-modes-of-store-and-forward-fast-forward-and-fragment-free\"></a> What are the differences between the switching modes of store-and-forward, fast-forward, and  fragment-free?</h6>\n<p>​\t\tThe entire frame is received before any forwarding takes place for <strong>Store-and-forward</strong>.</p>\n<p>​\t\tThe switch reads the destination address before receiving the entire frame which then forwarded before the entire frame arrives for fast-forward, and fragment-free. (Both belongs to <strong>Cut-through</strong>)</p>\n<h6 id=\"what-is-the-definition-of-broadcast-domain-and-collision-domain\"><a class=\"markdownIt-Anchor\" href=\"#what-is-the-definition-of-broadcast-domain-and-collision-domain\"></a> What is the definition of broadcast domain and collision domain?</h6>\n<p>​\t\tA <strong>broadcast domain</strong> includes all of the collision domains that process the same broadcast frame. This includes all the hosts that are part of the network segment bounded by a layer 3 device.</p>\n<p>​\t\tA <strong>collision domain</strong> is a connected physical network segment where collisions can occur. Using the layer 1 device likes repeater or hub extends the collision domain.</p>\n<h6 id=\"how-can-the-layer-1-2-and-3-network-devices-be-used-to-segment-a-network-into-different-domains\"><a class=\"markdownIt-Anchor\" href=\"#how-can-the-layer-1-2-and-3-network-devices-be-used-to-segment-a-network-into-different-domains\"></a> How can the layer 1, 2 and 3 network devices be used to segment a network into different domains?</h6>\n<p>​\t\tRepeater and Hub (layer 1 devices)cannot segment a network into different domain.</p>\n<p>​\t\tBridge and Switch (layer 2 devices) can segment a network into different collision domain.</p>\n<p>​\t\tRouter (layer 3 devices) can segment a network into different broadcast domain.</p>\n<p><img src=\"/2022/04/08/CN-2/image-20211204114107336.png\" alt=\"image-20211204114107336\" loading=\"lazy\"></p>\n<p>Q1: All the red cables are WAN cables, and all the black cables are LAN cables.</p>\n<p>Q2: Category 6 Cable</p>\n<p>Q3:</p>\n<p><img src=\"/2022/04/08/CN-2/image-20211210170210391.png\" alt=\"image-20211210170210391\" loading=\"lazy\"></p>\n<p><img src=\"/2022/04/08/CN-2/image-20211204114128703.png\" alt=\"image-20211204114128703\" loading=\"lazy\"></p>\n<p>Q1: Not success, because PC1 and PC3 are in the same collision domain.</p>\n<p>Q2: PC1 and PC3, since the back-off algorithm.</p>\n<p>Q3: PC2 and PC3, since they are in the same collision domain.</p>\n<p>Q4: They will not produce collision, because the four PCs are in the different collision domain.</p>\n<p><img src=\"/2022/04/08/CN-2/image-20211204114150471.png\" alt=\"image-20211204114150471\" loading=\"lazy\"></p>\n<p>We have to simulate the process step by step:</p>\n<p>Firstly, the messages are sent by PC1, and received by Switch1. Switch1 needs to 2 steps, first check the routing table to see whether there is a record about PC3. If there is no record, then Switch1 will broadcast the message through P2 and P3. Therefore, that is the reason why PC2 can receive the message. But PC2 will drop the message since the destination of the message is PC3.</p>\n<p>Then, Switch2 received that message. What Switch2 need to do is also that 2 steps, first check the routing table. Switch2 found the PC3 in the routing table, so it just need to send the message to PC3 directly and PC4 will never receive the message. The second step is to write the PC1 into the routing table of Switch 2, as shown below.</p>\n<p>![image-20211210171011761](Final Review Chap2.assets/image-20211210171011761.png)</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"chapter-2-layer-1-2-technology-ethernet\"><a class=\"markdownIt-Anchor\" href=\"#chapter-2-layer-1-2-technology-ethernet\"></a> Chapter 2 Layer 1-2 Technology, Ethernet</h2>\n<h3 id=\"layer-1-technologies\"><a class=\"markdownIt-Anchor\" href=\"#layer-1-technologies\"></a> Layer 1 Technologies</h3>\n<h4 id=\"network-media\"><a class=\"markdownIt-Anchor\" href=\"#network-media\"></a> Network media</h4>\n<h6 id=\"what-carrier-signals-are-used-in-the-network-media-of-copper-optical-fiber-and-wireless\"><a class=\"markdownIt-Anchor\" href=\"#what-carrier-signals-are-used-in-the-network-media-of-copper-optical-fiber-and-wireless\"></a> What carrier signals are used in the network media of copper, optical fiber and wireless?</h6>\n<p>​\t\tElectrical signals are transferring in copper;</p>\n<p>​\t\tLight signals are transferring in optical fiber;</p>\n<p>​\t\tElectromagnetic waves are transferring in the air to communicate wireless network media(WIFI).</p>\n<h6 id=\"what-is-the-purpose-of-encoding-and-modulation\"><a class=\"markdownIt-Anchor\" href=\"#what-is-the-purpose-of-encoding-and-modulation\"></a> What is the purpose of encoding and modulation?</h6>\n<p>​\t\t<strong>Encoding</strong> is the process by which the data is converted into digital format for efficient transmission or storage.</p>\n<p>​\t\t<strong>Modulation</strong> is the process of converting information (signals or data) to an electronic or optical carrier, so that it can be transmitted to comparatively large distance without getting affected by noise or unwanted signals.</p>\n<p>​\t\tEncoding is about converting digital or analog data to digital signal(<strong>D2A</strong>), whereas modulation is about converting digital or analog data to an analog signal(<strong>A2D</strong>).</p>\n<h4 id=\"network-cabling\"><a class=\"markdownIt-Anchor\" href=\"#network-cabling\"></a> Network cabling</h4>\n<h6 id=\"what-are-the-differences-between-lan-cabling-and-wan-cabling\"><a class=\"markdownIt-Anchor\" href=\"#what-are-the-differences-between-lan-cabling-and-wan-cabling\"></a> What are the differences between LAN cabling and WAN cabling?</h6>\n<p>​\t\tNothing different?</p>\n<h6 id=\"list-some-common-used-types-of-cables-in-lan-and-wan-cabling\"><a class=\"markdownIt-Anchor\" href=\"#list-some-common-used-types-of-cables-in-lan-and-wan-cabling\"></a> List some common used types of cables in LAN and WAN cabling.</h6>\n<p>​\t\tLAN cabling: coaxial cable, UTP cable, single-mode and multimode fiber, etc.</p>\n<p>​\t\tWAN cabling: RS-232 cable, V.35 cable, etc.</p>\n<h6 id=\"in-lan-cabling-how-to-use-the-utp-cables-of-straight-through-crossover-rollover-to-connect-devices\"><a class=\"markdownIt-Anchor\" href=\"#in-lan-cabling-how-to-use-the-utp-cables-of-straight-through-crossover-rollover-to-connect-devices\"></a> In LAN cabling, how to use the UTP cables of straight-through, crossover, rollover to connect devices?</h6>\n<p>​\t\tSee <a href=\"https://www.computercablestore.com/straight-through-crossover-and-rollover-wiring\">Straight-through, Crossover &amp; Rollover Cable Pinouts Explained | Computer Cable Store</a>.</p>\n<h6 id=\"which-wires-of-a-utp-cable-are-used-to-transmit-and-receive-data-in-ethernet\"><a class=\"markdownIt-Anchor\" href=\"#which-wires-of-a-utp-cable-are-used-to-transmit-and-receive-data-in-ethernet\"></a> Which wires of a UTP cable are used to transmit and receive data in Ethernet?</h6>\n<p>​\t\tCategory 6 cable(LAN Cable).</p>\n<h6 id=\"in-wan-cabling-what-is-the-difference-between-dte-and-dce-cabling\"><a class=\"markdownIt-Anchor\" href=\"#in-wan-cabling-what-is-the-difference-between-dte-and-dce-cabling\"></a> In WAN cabling, what is the difference between DTE and DCE cabling?</h6>\n<p>​\t\tDTE: Data Terminal Equipment, e.g. your own PC</p>\n<p>​\t\tDCE: Data Circuit Terminating Equipment, e.g. modem.</p>\n<hr>\n<h3 id=\"layer-2-technologies\"><a class=\"markdownIt-Anchor\" href=\"#layer-2-technologies\"></a> Layer 2 Technologies</h3>\n<h4 id=\"layer-2-functions\"><a class=\"markdownIt-Anchor\" href=\"#layer-2-functions\"></a> Layer 2 functions</h4>\n<h6 id=\"what-is-the-media-access-method-of-csmacd\"><a class=\"markdownIt-Anchor\" href=\"#what-is-the-media-access-method-of-csmacd\"></a> What is the media access method of CSMA/CD?</h6>\n<p>​\t\tCSMA is a simple system that allows only one host to transmit at a time. Hosts on the network can access the  media at any time. Before sending data, CSMA hosts isten to the network to determine if it is already in use.<br>\n​\t\t➢ If in use, then the hosts wait.<br>\n​\t\t➢ If not in use, they transmit.</p>\n<h6 id=\"how-does-a-host-use-backoff-algorithm-for-transmission-attempt-when-collision-occurred-in-ethernet-network\"><a class=\"markdownIt-Anchor\" href=\"#how-does-a-host-use-backoff-algorithm-for-transmission-attempt-when-collision-occurred-in-ethernet-network\"></a> How does a host use backoff algorithm for transmission attempt when collision occurred in  Ethernet network?</h6>\n<blockquote>\n<p>Exponential backoff is an algorithm that uses feedback to multiplicatively decrease the rate of some process, in order to gradually find an acceptable rate.(Wikipedia)</p>\n</blockquote>\n<p>​\t\tAfter a conflict occurred in a computer network, nodes on the network wait for a certain period of time before sending. The waiting time increases exponentially to avoid frequent triggering conflicts.</p>\n<p>​\t\tAfter <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">n</span></span></span></span> conflicts occur, the waiting time is randomly selected between <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span> ~ <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mn>2</mn><mi>n</mi></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">2^n-1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.747722em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span> slot times. Note that <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">n</span></span></span></span> cannot be unlimited growing since the waiting time will not increasing without pause. Usually, we set <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>n</mi><mo>≤</mo><mn>10</mn></mrow><annotation encoding=\"application/x-tex\">n\\leq 10</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mord mathdefault\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\">0</span></span></span></span> so that the longest waiting time will not exceed over 1023 slot times.</p>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>R</mi><mi>a</mi><mi>n</mi><mi>d</mi><mi>o</mi><mi>m</mi><mtext> </mtext><mi>w</mi><mi>a</mi><mi>i</mi><mi>t</mi><mi>i</mi><mi>n</mi><mi>g</mi><mtext> </mtext><mi>p</mi><mi>e</mi><mi>r</mi><mi>i</mi><mi>o</mi><mi>d</mi><mo>=</mo><mo stretchy=\"false\">[</mo><mn>0</mn><mo separator=\"true\">,</mo><mo stretchy=\"false\">(</mo><msup><mn>2</mn><mi>n</mi></msup><mi mathvariant=\"normal\">–</mi><mn>1</mn><mo stretchy=\"false\">)</mo><mo>×</mo><mi>s</mi><mi>l</mi><mi>o</mi><mi>t</mi><mtext> </mtext><mi>t</mi><mi>i</mi><mi>m</mi><mi>e</mi><mo stretchy=\"false\">]</mo><mspace linebreak=\"newline\"></mspace></mrow><annotation encoding=\"application/x-tex\">Random\\ waiting\\ period = [ 0, (2^n – 1) \\times slot\\ time ]\\\\\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">m</span><span class=\"mspace\"> </span><span class=\"mord mathdefault\" style=\"margin-right:0.02691em;\">w</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span><span class=\"mspace\"> </span><span class=\"mord mathdefault\">p</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">d</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7143919999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span></span></span></span></span><span class=\"mord\" style=\"margin-right:0.02778em;\">–</span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">t</span><span class=\"mspace\"> </span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">m</span><span class=\"mord mathdefault\">e</span><span class=\"mclose\">]</span></span><span class=\"mspace newline\"></span></span></span></span></p>\n<h4 id=\"ethernet-switching\"><a class=\"markdownIt-Anchor\" href=\"#ethernet-switching\"></a> Ethernet switching</h4>\n<h6 id=\"what-is-bridging\"><a class=\"markdownIt-Anchor\" href=\"#what-is-bridging\"></a> What is bridging?</h6>\n<p>​\t\tBridging refers to a technology in which a device known as a bridge connects two or more LAN segments.</p>\n<h6 id=\"what-addresses-in-the-received-frame-does-a-switch-use-to-build-the-switching-table-and-make-forwarding-decision\"><a class=\"markdownIt-Anchor\" href=\"#what-addresses-in-the-received-frame-does-a-switch-use-to-build-the-switching-table-and-make-forwarding-decision\"></a> What addresses in the received frame does a switch use to build the switching table and make  forwarding decision?</h6>\n<p>​\t\tThe switching table is built by using  source address, e.g. <strong>source MAC</strong>.</p>\n<p>​\t\tThe forward decision is made by using destination address, e.g.  <strong>destination MAC</strong>.</p>\n<h6 id=\"what-are-the-differences-between-the-switching-modes-of-store-and-forward-fast-forward-and-fragment-free\"><a class=\"markdownIt-Anchor\" href=\"#what-are-the-differences-between-the-switching-modes-of-store-and-forward-fast-forward-and-fragment-free\"></a> What are the differences between the switching modes of store-and-forward, fast-forward, and  fragment-free?</h6>\n<p>​\t\tThe entire frame is received before any forwarding takes place for <strong>Store-and-forward</strong>.</p>\n<p>​\t\tThe switch reads the destination address before receiving the entire frame which then forwarded before the entire frame arrives for fast-forward, and fragment-free. (Both belongs to <strong>Cut-through</strong>)</p>\n<h6 id=\"what-is-the-definition-of-broadcast-domain-and-collision-domain\"><a class=\"markdownIt-Anchor\" href=\"#what-is-the-definition-of-broadcast-domain-and-collision-domain\"></a> What is the definition of broadcast domain and collision domain?</h6>\n<p>​\t\tA <strong>broadcast domain</strong> includes all of the collision domains that process the same broadcast frame. This includes all the hosts that are part of the network segment bounded by a layer 3 device.</p>\n<p>​\t\tA <strong>collision domain</strong> is a connected physical network segment where collisions can occur. Using the layer 1 device likes repeater or hub extends the collision domain.</p>\n<h6 id=\"how-can-the-layer-1-2-and-3-network-devices-be-used-to-segment-a-network-into-different-domains\"><a class=\"markdownIt-Anchor\" href=\"#how-can-the-layer-1-2-and-3-network-devices-be-used-to-segment-a-network-into-different-domains\"></a> How can the layer 1, 2 and 3 network devices be used to segment a network into different domains?</h6>\n<p>​\t\tRepeater and Hub (layer 1 devices)cannot segment a network into different domain.</p>\n<p>​\t\tBridge and Switch (layer 2 devices) can segment a network into different collision domain.</p>\n<p>​\t\tRouter (layer 3 devices) can segment a network into different broadcast domain.</p>\n<p><img src=\"/2022/04/08/CN-2/image-20211204114107336.png\" alt=\"image-20211204114107336\"></p>\n<p>Q1: All the red cables are WAN cables, and all the black cables are LAN cables.</p>\n<p>Q2: Category 6 Cable</p>\n<p>Q3:</p>\n<p><img src=\"/2022/04/08/CN-2/image-20211210170210391.png\" alt=\"image-20211210170210391\"></p>\n<p><img src=\"/2022/04/08/CN-2/image-20211204114128703.png\" alt=\"image-20211204114128703\"></p>\n<p>Q1: Not success, because PC1 and PC3 are in the same collision domain.</p>\n<p>Q2: PC1 and PC3, since the back-off algorithm.</p>\n<p>Q3: PC2 and PC3, since they are in the same collision domain.</p>\n<p>Q4: They will not produce collision, because the four PCs are in the different collision domain.</p>\n<p><img src=\"/2022/04/08/CN-2/image-20211204114150471.png\" alt=\"image-20211204114150471\"></p>\n<p>We have to simulate the process step by step:</p>\n<p>Firstly, the messages are sent by PC1, and received by Switch1. Switch1 needs to 2 steps, first check the routing table to see whether there is a record about PC3. If there is no record, then Switch1 will broadcast the message through P2 and P3. Therefore, that is the reason why PC2 can receive the message. But PC2 will drop the message since the destination of the message is PC3.</p>\n<p>Then, Switch2 received that message. What Switch2 need to do is also that 2 steps, first check the routing table. Switch2 found the PC3 in the routing table, so it just need to send the message to PC3 directly and PC4 will never receive the message. The second step is to write the PC1 into the routing table of Switch 2, as shown below.</p>\n<p>![image-20211210171011761](Final Review Chap2.assets/image-20211210171011761.png)</p>\n"},{"title":"computer network 3 - Technology, IP Addressing and IP Routing","date":"2022-04-08T15:35:12.000Z","author":"Tony","katex":true,"_content":"\n## Chapter 3 Technology, IP Addressing and IP Routing\n\n### Layer 3 technologies\n\n#### IPv4 addressing\n\n###### What are the differences between flat addressing and hierarchical addressing?\n\n==Flat addressing== assigns a device the next available address. For example, the ==MAC addressing==.\n\n==Hierarchical addressing== contains different levels. For example, the ==IP addressing==.\n\n###### What are the ranges of the Class A, B, C addresses and their default subnet masks?\n\nClass A: `1.0.0.0/8 ~ 126.255.255.255/8` \n\nClass B: `128.0.0.0/16 ~ 191.255.255.255/16`\n\nClass C: `192.0.0.0/24 ~ 223.255.255.255/24`\n\n###### What are the three ranges of private IP addresses?\n\nThere are certain addresses in each class of IPv4 address that are not assigned. These addresses are  called ==private addresses==. `RFC 1918` sets aside 3 blocks of IPv4 addresses for private, internal use.  These 3 blocks consist of one Class A, a range of Class B addresses, and a range of Class C  addresses.\n\n![image-20211205162300456](CN-3/image-20211205162300456.png)\n\n###### What is the difference of network address, broadcast address and host address? What are these  types of addresses used for?\n\n(**IP addresses**: Addresses in computer networks which contains network address and host address.)\n\n**Network address**: Used to identify the network itself where the host portion were all zeros. For instance:\n\n<img src=\"../../../../../OneDrive - Macau University of Science and Technology/Junior/First Semester/Computer Network/Mid-term/Mid-term Assignment.assets/image-20211110131414754.png\" alt=\"image-20211110131414754\" style=\"zoom: 67%;\" />\n\n**Host address** is the address in which the host portion cannot be all zeros (0s) or all ones (1s), can be assigned to a device on the network. For instance:\n\n<img src=\"../../../../../OneDrive - Macau University of Science and Technology/Junior/First Semester/Computer Network/Mid-term/Mid-term Assignment.assets/image-20211110131554883.png\" alt=\"image-20211110131554883\" style=\"zoom:67%;\" />\n\n**Broadcast address**: Used for broadcasting packets to all the devices on a network. If the host portion were all ones (1s), it would be a broadcast address. For example:\n\n<img src=\"file://C:\\Users\\28580\\OneDrive - Macau University of Science and Technology\\Junior\\First Semester\\Computer Network\\Mid-term\\Mid-term Assignment.assets\\image-20211110131623041.png?lastModify=1638693050\" alt=\"image-20211110131623041\" style=\"zoom:67%;\" />\n\n#### IPv4 subnetting\n\n###### What is IPv4 classful subnetting?\n\nClassful addressing is an IPv4 addressing architecture that divides addresses into five groups.\n\n![image-20211205174403372](CN-3/image-20211205174403372.png)\n\n###### What is IPv4 classless subnetting? \n\nClassless addressing is an IPv4 addressing architecture that uses ==VLSM== (variable-length subnet masking).\n\n![image-20211205174543073](CN-3/image-20211205174543073.png)\n\n#### IPv6 addressing\n\n###### How to represent IPv6 address in full form and simplified form?\n\nFull form example: `FE80:0:0:0:0:2AA:FE9A:4CA2`\n\nSimplified form example: `FE80::2AA:FE9A:4CA2`\n\n###### What are the three types of IPv6 addresses? What specific addresses are defined for these types  IPv6 addresses?\n\nThe three types of IPv6 addresses are **unicast, multicast and anycast** respectively.\n\n- **Unicast (one to one)**: A packet addressed to a unicast address is delivered to a single interface.\n\n- **Multicast (one to many)**: A multicast address identifies multiple interfaces. A packet addressed to a multicast address is delivered to all interfaces that are identified by the address.\n\n- **Anycast (one to nearest-one / one to one-of-many)**: An anycast address identifies multiple interfaces. A packet addressed to an anycast address is delivered to a single interface, the nearest interface that is identified by the address. The “nearest” interface is defined as being closest in terms of routing distance.\n\nSpecific addresses of these three types of IPv6 addresses are:\n\n- Prefix of **Multicast** is `FF00::/8`.\n\n- Prefix of **Link-local unicast** is `FE80::/10`.\n\n- Prefix of **global unicast** is `2000::/3`.\n\n###### How to form a link-local address? How to form a global unicast address using stateless auto-configuration?\n\nlink-local scope all-nodes (`FF02::1`) and all-routers (`FF02::2`) multicast address.\n\nStateless autoconfiguration uses the information in RA(Router Advertisement) messages to configure the IPv6 hosts automatically. Thus, every IPv6 hosts (other than routers) is able to build its own global unicast address.\n\n#### IPv6 neighbor discovery protocol (NDP)\n\n###### What 4 ICMPv6 messages are used in NDP?\n\nRA(Router Advertisement)\n\nRS(Router Solicitation)\n\nNS(Neighbor Solicitation)\n\nNA(Neighbor Advertisement)\n\nSee more for: [NDP - Neighbor Discovery Protocol (howdoesinternetwork.com)](https://howdoesinternetwork.com/2012/ndp-ipv6-neighbor-discovery-protocol)\n\n###### What ICMPv6 messages are used for the functions provided by NDP? (For example, Address  resolution, Duplicate address detection, Prefix and Router discovery.)\n\nDAD (Duplicate address detection) mechanism is realized through **NS and NA** messages. \n\nWhat is DAD: when a new unicast address is configured, it will perform DAD testing— sending a NS message which contain the destination address of itself through the network. (for example, if the new address that want to allocate is `2000::1`, it will send the NS message with source address `::` and destination address `2000::1`). Note that the node will ignore the NS message sent by itself. If nobody respond a NA message, we can consider that this unicast address is unique on this link. This method is call DAD.\n\nSee more for: [paper-03.pdf (thomasclausen.org)](http://interop.thomasclausen.org/Interop05/Papers/Papers/paper-03.pdf)\n\n[What is duplicate address detection? (ibm.com)](https://www.ibm.com/support/pages/what-duplicate-address-detection)\n\nPrefix and Router discovery mechanism is realized through **RS and RA** messages.\n\nRouter will send RA messages periodically in order to let the host computers and other equipment know of its existence, and the RA messages contain the prefix network information and more. Sometimes host computer will also actively send RS messages for communication with other nodes, and the router will respond with a RA message.\n\nSee more for: [IPv6 part 10: Neighbor Discovery – Router Discovery - Intense School](http://resources.intenseschool.com/ipv6-neighbor-discovery-router-discovery/)\n\n#### IP Routing\n\n###### What are the differences between layer 2 switching and layer 3 routing?\n\n**Layer 2 switching** is based on data-link layer information, e.g. MAC addresses. Switches (typically  stands for layer 2 switches) use layer 2 switching to forward frames.\n\n**Layer 3 routing** is based on network layer addresses information, e.g. IP addresses. Routers or  layer 3 switches use layer 3 switching to route a packet. It has 2 processes which is Path determination and Packet switching.\n\n###### What is the difference between the next-hop and the default gateway?\n\n**Default gateway** is used for a host to communicate with hosts on other networks. The default gateway's IP address must be in the same network subnet as the source host.\n\n**Next hop** is a routing term that refers to the next closest router a packet can go through.\n\nThere are practically incomparable between default gateway and next hop.\n\n###### What are the differences between the intra-subnet and inter-subnet communications?\n\nIf a host communicates with each other ==within== a subnet, called ==intra-subnet communication.==\n\nIf the IP communication is between hosts in ==different== IP subnets, called ==inter-subnet  communication==.\n\n###### How to use Address Resolution Protocol (ARP) in the intra-subnet and inter-subnet communications?\n\nARP is working in the networking layer, which is responsible for ==resolving IP address into MAC address==.\n\nIn the intra-subnet communication, the source device will broadcast an ARP request and wait for an ARP reply from the destination devices. The source devices then record the destination IP and MAC address to an ARP table.\n\nIn the inter-subnet communication, however, the source device will obtain the MAC address of the default gateway router through ARP request.\n\n###### For inter-subnet communication, how do IP addresses and MAC addresses change in the packet  during the data transmission?\n\nIP addresses are ==changeless== during the data transmission.\n\nMAC address are ==changing== based on different routers during the data transmission.=\n\n---\n\n![image-20211205153141538](CN-3/image-20211205153141538.png)\n\nQ1:\n\nSince subnet mast is 29, which means:`11111111.11111111.11111111.111111000`. Only 3bits are dynamic, which is $2^3=8$.\n\nSince the IP address of router is `172.16.11.11/29`, the sub-network segment is `172.16.11.8--172.16.11.15`.\n\n**Note that** the host address with all 0s or with all 1s cannot be used for networking, which means `172.16.11.8` and `172.16.11.15` cannot be a client IP.\n\nTherefore, the IP address of PC1 and PC2 are both wrong. What is more, the subnet mask of PC2 is not corresponding with this network domain(it should be 29).\n\nQ2:\n\nIn the same way of Q1, we know the subnet mask of this network domain is 18 (`11111111.11111111.11000000.00000000`). $6bits$ are dynamic,which is $2^6=64$. The sub-network segment is `172.16.0.0--172.16.63.255`.\n\nTherefor, PC3 is in this segment while PC4 is not in this subnet domain.\n\nQ3:\n\nWe have already know that `172.16.0.0` is for network address and `172.16.63.255` is for broadcast address. Thus, the range of valid host address is `172.16.0.1--172.16.63.254`.\n\n---\n\n![image-20211205153202429](CN-3/image-20211205153202429.png)\n\nVLSM steps:\n\n**Step 1: Divide the subnet**\n\n![image-20211205165352723](CN-3/image-20211205165352723.png)\n\n**Note that** routers divide broadcast domain, therefore a point-to-point WAN connection is also a subnet.\n\n**Step 2: Allocate the subnet(usually from largest to smallest)**\n\nSubnet mask=24, `1111111.1111111.1111111.0000000`, which means all subnets are in the form of `192.168.1.H` and $H$ contains 8 bits. Now lets allocate the $H$:\n\n`192.168.1.0XXXXXXX` $\\to$ 120 hosts\n\n`192.168.1.10XXXXXX` $\\to$ 60 hosts\n\n`192.168.1.110XXXXX` $\\to$ 30 hosts\n\n`192.168.1.1110XXXX` $\\to$ 10 hosts\n\n`192.168.1.111100XX` $\\to$ 2 hosts\n\n`192.168.1.111101XX` $\\to$ WAN link 1\n\n`192.168.1.111110XX` $\\to$ WAN link 2\n\n`192.168.1.111111XX` $\\to$ WAN link 3\n\n**Note that** ==at most== a 30-bit mask can be used for point-to-point WAN connections since the first address and the last address are used for network address and broadcast address separately, which occupy 2 addresses, and the source address and destination address also occupy 2 addresses. Therefore, at least 4 addresses ($2^2$) are used and $32-2=30$.\n\n![image-20211205153214433](CN-3/image-20211205153214433.png)\n\nIP routing contains several steps, each step is in the same broadcast domain, but the source IP and destination IP are always changeless. In this example, they are always `192.168.1.11` and `192.168.2.88`.\n\n\n\n![image-20211205153227168](CN-3/image-20211205153227168.png)\n\nQ1: `FE80::/10`\n\nQ2: ???\n\nQ3: RS-RA\n\nQ4: DAD\n\n","source":"_posts/CN-3.md","raw":"---\ntitle: computer network 3 - Technology, IP Addressing and IP Routing\ndate: 2022-04-08 23:35:12\ntags:\n\t- computer network\ncategories:\n\t- 计算机网络\nauthor: Tony\nkatex: true\n---\n\n## Chapter 3 Technology, IP Addressing and IP Routing\n\n### Layer 3 technologies\n\n#### IPv4 addressing\n\n###### What are the differences between flat addressing and hierarchical addressing?\n\n==Flat addressing== assigns a device the next available address. For example, the ==MAC addressing==.\n\n==Hierarchical addressing== contains different levels. For example, the ==IP addressing==.\n\n###### What are the ranges of the Class A, B, C addresses and their default subnet masks?\n\nClass A: `1.0.0.0/8 ~ 126.255.255.255/8` \n\nClass B: `128.0.0.0/16 ~ 191.255.255.255/16`\n\nClass C: `192.0.0.0/24 ~ 223.255.255.255/24`\n\n###### What are the three ranges of private IP addresses?\n\nThere are certain addresses in each class of IPv4 address that are not assigned. These addresses are  called ==private addresses==. `RFC 1918` sets aside 3 blocks of IPv4 addresses for private, internal use.  These 3 blocks consist of one Class A, a range of Class B addresses, and a range of Class C  addresses.\n\n![image-20211205162300456](CN-3/image-20211205162300456.png)\n\n###### What is the difference of network address, broadcast address and host address? What are these  types of addresses used for?\n\n(**IP addresses**: Addresses in computer networks which contains network address and host address.)\n\n**Network address**: Used to identify the network itself where the host portion were all zeros. For instance:\n\n<img src=\"../../../../../OneDrive - Macau University of Science and Technology/Junior/First Semester/Computer Network/Mid-term/Mid-term Assignment.assets/image-20211110131414754.png\" alt=\"image-20211110131414754\" style=\"zoom: 67%;\" />\n\n**Host address** is the address in which the host portion cannot be all zeros (0s) or all ones (1s), can be assigned to a device on the network. For instance:\n\n<img src=\"../../../../../OneDrive - Macau University of Science and Technology/Junior/First Semester/Computer Network/Mid-term/Mid-term Assignment.assets/image-20211110131554883.png\" alt=\"image-20211110131554883\" style=\"zoom:67%;\" />\n\n**Broadcast address**: Used for broadcasting packets to all the devices on a network. If the host portion were all ones (1s), it would be a broadcast address. For example:\n\n<img src=\"file://C:\\Users\\28580\\OneDrive - Macau University of Science and Technology\\Junior\\First Semester\\Computer Network\\Mid-term\\Mid-term Assignment.assets\\image-20211110131623041.png?lastModify=1638693050\" alt=\"image-20211110131623041\" style=\"zoom:67%;\" />\n\n#### IPv4 subnetting\n\n###### What is IPv4 classful subnetting?\n\nClassful addressing is an IPv4 addressing architecture that divides addresses into five groups.\n\n![image-20211205174403372](CN-3/image-20211205174403372.png)\n\n###### What is IPv4 classless subnetting? \n\nClassless addressing is an IPv4 addressing architecture that uses ==VLSM== (variable-length subnet masking).\n\n![image-20211205174543073](CN-3/image-20211205174543073.png)\n\n#### IPv6 addressing\n\n###### How to represent IPv6 address in full form and simplified form?\n\nFull form example: `FE80:0:0:0:0:2AA:FE9A:4CA2`\n\nSimplified form example: `FE80::2AA:FE9A:4CA2`\n\n###### What are the three types of IPv6 addresses? What specific addresses are defined for these types  IPv6 addresses?\n\nThe three types of IPv6 addresses are **unicast, multicast and anycast** respectively.\n\n- **Unicast (one to one)**: A packet addressed to a unicast address is delivered to a single interface.\n\n- **Multicast (one to many)**: A multicast address identifies multiple interfaces. A packet addressed to a multicast address is delivered to all interfaces that are identified by the address.\n\n- **Anycast (one to nearest-one / one to one-of-many)**: An anycast address identifies multiple interfaces. A packet addressed to an anycast address is delivered to a single interface, the nearest interface that is identified by the address. The “nearest” interface is defined as being closest in terms of routing distance.\n\nSpecific addresses of these three types of IPv6 addresses are:\n\n- Prefix of **Multicast** is `FF00::/8`.\n\n- Prefix of **Link-local unicast** is `FE80::/10`.\n\n- Prefix of **global unicast** is `2000::/3`.\n\n###### How to form a link-local address? How to form a global unicast address using stateless auto-configuration?\n\nlink-local scope all-nodes (`FF02::1`) and all-routers (`FF02::2`) multicast address.\n\nStateless autoconfiguration uses the information in RA(Router Advertisement) messages to configure the IPv6 hosts automatically. Thus, every IPv6 hosts (other than routers) is able to build its own global unicast address.\n\n#### IPv6 neighbor discovery protocol (NDP)\n\n###### What 4 ICMPv6 messages are used in NDP?\n\nRA(Router Advertisement)\n\nRS(Router Solicitation)\n\nNS(Neighbor Solicitation)\n\nNA(Neighbor Advertisement)\n\nSee more for: [NDP - Neighbor Discovery Protocol (howdoesinternetwork.com)](https://howdoesinternetwork.com/2012/ndp-ipv6-neighbor-discovery-protocol)\n\n###### What ICMPv6 messages are used for the functions provided by NDP? (For example, Address  resolution, Duplicate address detection, Prefix and Router discovery.)\n\nDAD (Duplicate address detection) mechanism is realized through **NS and NA** messages. \n\nWhat is DAD: when a new unicast address is configured, it will perform DAD testing— sending a NS message which contain the destination address of itself through the network. (for example, if the new address that want to allocate is `2000::1`, it will send the NS message with source address `::` and destination address `2000::1`). Note that the node will ignore the NS message sent by itself. If nobody respond a NA message, we can consider that this unicast address is unique on this link. This method is call DAD.\n\nSee more for: [paper-03.pdf (thomasclausen.org)](http://interop.thomasclausen.org/Interop05/Papers/Papers/paper-03.pdf)\n\n[What is duplicate address detection? (ibm.com)](https://www.ibm.com/support/pages/what-duplicate-address-detection)\n\nPrefix and Router discovery mechanism is realized through **RS and RA** messages.\n\nRouter will send RA messages periodically in order to let the host computers and other equipment know of its existence, and the RA messages contain the prefix network information and more. Sometimes host computer will also actively send RS messages for communication with other nodes, and the router will respond with a RA message.\n\nSee more for: [IPv6 part 10: Neighbor Discovery – Router Discovery - Intense School](http://resources.intenseschool.com/ipv6-neighbor-discovery-router-discovery/)\n\n#### IP Routing\n\n###### What are the differences between layer 2 switching and layer 3 routing?\n\n**Layer 2 switching** is based on data-link layer information, e.g. MAC addresses. Switches (typically  stands for layer 2 switches) use layer 2 switching to forward frames.\n\n**Layer 3 routing** is based on network layer addresses information, e.g. IP addresses. Routers or  layer 3 switches use layer 3 switching to route a packet. It has 2 processes which is Path determination and Packet switching.\n\n###### What is the difference between the next-hop and the default gateway?\n\n**Default gateway** is used for a host to communicate with hosts on other networks. The default gateway's IP address must be in the same network subnet as the source host.\n\n**Next hop** is a routing term that refers to the next closest router a packet can go through.\n\nThere are practically incomparable between default gateway and next hop.\n\n###### What are the differences between the intra-subnet and inter-subnet communications?\n\nIf a host communicates with each other ==within== a subnet, called ==intra-subnet communication.==\n\nIf the IP communication is between hosts in ==different== IP subnets, called ==inter-subnet  communication==.\n\n###### How to use Address Resolution Protocol (ARP) in the intra-subnet and inter-subnet communications?\n\nARP is working in the networking layer, which is responsible for ==resolving IP address into MAC address==.\n\nIn the intra-subnet communication, the source device will broadcast an ARP request and wait for an ARP reply from the destination devices. The source devices then record the destination IP and MAC address to an ARP table.\n\nIn the inter-subnet communication, however, the source device will obtain the MAC address of the default gateway router through ARP request.\n\n###### For inter-subnet communication, how do IP addresses and MAC addresses change in the packet  during the data transmission?\n\nIP addresses are ==changeless== during the data transmission.\n\nMAC address are ==changing== based on different routers during the data transmission.=\n\n---\n\n![image-20211205153141538](CN-3/image-20211205153141538.png)\n\nQ1:\n\nSince subnet mast is 29, which means:`11111111.11111111.11111111.111111000`. Only 3bits are dynamic, which is $2^3=8$.\n\nSince the IP address of router is `172.16.11.11/29`, the sub-network segment is `172.16.11.8--172.16.11.15`.\n\n**Note that** the host address with all 0s or with all 1s cannot be used for networking, which means `172.16.11.8` and `172.16.11.15` cannot be a client IP.\n\nTherefore, the IP address of PC1 and PC2 are both wrong. What is more, the subnet mask of PC2 is not corresponding with this network domain(it should be 29).\n\nQ2:\n\nIn the same way of Q1, we know the subnet mask of this network domain is 18 (`11111111.11111111.11000000.00000000`). $6bits$ are dynamic,which is $2^6=64$. The sub-network segment is `172.16.0.0--172.16.63.255`.\n\nTherefor, PC3 is in this segment while PC4 is not in this subnet domain.\n\nQ3:\n\nWe have already know that `172.16.0.0` is for network address and `172.16.63.255` is for broadcast address. Thus, the range of valid host address is `172.16.0.1--172.16.63.254`.\n\n---\n\n![image-20211205153202429](CN-3/image-20211205153202429.png)\n\nVLSM steps:\n\n**Step 1: Divide the subnet**\n\n![image-20211205165352723](CN-3/image-20211205165352723.png)\n\n**Note that** routers divide broadcast domain, therefore a point-to-point WAN connection is also a subnet.\n\n**Step 2: Allocate the subnet(usually from largest to smallest)**\n\nSubnet mask=24, `1111111.1111111.1111111.0000000`, which means all subnets are in the form of `192.168.1.H` and $H$ contains 8 bits. Now lets allocate the $H$:\n\n`192.168.1.0XXXXXXX` $\\to$ 120 hosts\n\n`192.168.1.10XXXXXX` $\\to$ 60 hosts\n\n`192.168.1.110XXXXX` $\\to$ 30 hosts\n\n`192.168.1.1110XXXX` $\\to$ 10 hosts\n\n`192.168.1.111100XX` $\\to$ 2 hosts\n\n`192.168.1.111101XX` $\\to$ WAN link 1\n\n`192.168.1.111110XX` $\\to$ WAN link 2\n\n`192.168.1.111111XX` $\\to$ WAN link 3\n\n**Note that** ==at most== a 30-bit mask can be used for point-to-point WAN connections since the first address and the last address are used for network address and broadcast address separately, which occupy 2 addresses, and the source address and destination address also occupy 2 addresses. Therefore, at least 4 addresses ($2^2$) are used and $32-2=30$.\n\n![image-20211205153214433](CN-3/image-20211205153214433.png)\n\nIP routing contains several steps, each step is in the same broadcast domain, but the source IP and destination IP are always changeless. In this example, they are always `192.168.1.11` and `192.168.2.88`.\n\n\n\n![image-20211205153227168](CN-3/image-20211205153227168.png)\n\nQ1: `FE80::/10`\n\nQ2: ???\n\nQ3: RS-RA\n\nQ4: DAD\n\n","slug":"CN-3","published":1,"updated":"2022-04-08T15:36:47.258Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1rj2n51000dgwcy64dv874o","content":"<h2 id=\"chapter-3-technology-ip-addressing-and-ip-routing\"><a class=\"markdownIt-Anchor\" href=\"#chapter-3-technology-ip-addressing-and-ip-routing\"></a> Chapter 3 Technology, IP Addressing and IP Routing</h2>\n<h3 id=\"layer-3-technologies\"><a class=\"markdownIt-Anchor\" href=\"#layer-3-technologies\"></a> Layer 3 technologies</h3>\n<h4 id=\"ipv4-addressing\"><a class=\"markdownIt-Anchor\" href=\"#ipv4-addressing\"></a> IPv4 addressing</h4>\n<h6 id=\"what-are-the-differences-between-flat-addressing-and-hierarchical-addressing\"><a class=\"markdownIt-Anchor\" href=\"#what-are-the-differences-between-flat-addressing-and-hierarchical-addressing\"></a> What are the differences between flat addressing and hierarchical addressing?</h6>\n<p><mark>Flat addressing</mark> assigns a device the next available address. For example, the <mark>MAC addressing</mark>.</p>\n<p><mark>Hierarchical addressing</mark> contains different levels. For example, the <mark>IP addressing</mark>.</p>\n<h6 id=\"what-are-the-ranges-of-the-class-a-b-c-addresses-and-their-default-subnet-masks\"><a class=\"markdownIt-Anchor\" href=\"#what-are-the-ranges-of-the-class-a-b-c-addresses-and-their-default-subnet-masks\"></a> What are the ranges of the Class A, B, C addresses and their default subnet masks?</h6>\n<p>Class A: <code>1.0.0.0/8 ~ 126.255.255.255/8</code></p>\n<p>Class B: <code>128.0.0.0/16 ~ 191.255.255.255/16</code></p>\n<p>Class C: <code>192.0.0.0/24 ~ 223.255.255.255/24</code></p>\n<h6 id=\"what-are-the-three-ranges-of-private-ip-addresses\"><a class=\"markdownIt-Anchor\" href=\"#what-are-the-three-ranges-of-private-ip-addresses\"></a> What are the three ranges of private IP addresses?</h6>\n<p>There are certain addresses in each class of IPv4 address that are not assigned. These addresses are  called <mark>private addresses</mark>. <code>RFC 1918</code> sets aside 3 blocks of IPv4 addresses for private, internal use.  These 3 blocks consist of one Class A, a range of Class B addresses, and a range of Class C  addresses.</p>\n<p><img src=\"/2022/04/08/CN-3/image-20211205162300456.png\" alt=\"image-20211205162300456\" loading=\"lazy\"></p>\n<h6 id=\"what-is-the-difference-of-network-address-broadcast-address-and-host-address-what-are-these-types-of-addresses-used-for\"><a class=\"markdownIt-Anchor\" href=\"#what-is-the-difference-of-network-address-broadcast-address-and-host-address-what-are-these-types-of-addresses-used-for\"></a> What is the difference of network address, broadcast address and host address? What are these  types of addresses used for?</h6>\n<p>(<strong>IP addresses</strong>: Addresses in computer networks which contains network address and host address.)</p>\n<p><strong>Network address</strong>: Used to identify the network itself where the host portion were all zeros. For instance:</p>\n<img src=\"/2022/04/08/CN-3/../../../../OneDrive - Macau University of Science and Technology/Junior/First Semester/Computer Network/Mid-term/Mid-term Assignment.assets/image-20211110131414754.png\" alt=\"image-20211110131414754\" style=\"zoom: 67%;\" loading=\"lazy\">\n<p><strong>Host address</strong> is the address in which the host portion cannot be all zeros (0s) or all ones (1s), can be assigned to a device on the network. For instance:</p>\n<img src=\"/2022/04/08/CN-3/../../../../OneDrive - Macau University of Science and Technology/Junior/First Semester/Computer Network/Mid-term/Mid-term Assignment.assets/image-20211110131554883.png\" alt=\"image-20211110131554883\" style=\"zoom:67%;\" loading=\"lazy\">\n<p><strong>Broadcast address</strong>: Used for broadcasting packets to all the devices on a network. If the host portion were all ones (1s), it would be a broadcast address. For example:</p>\n<img src=\"file://C:\\Users\\28580\\OneDrive - Macau University of Science and Technology\\Junior\\First Semester\\Computer Network\\Mid-term\\Mid-term Assignment.assets\\image-20211110131623041.png?lastModify=1638693050\" alt=\"image-20211110131623041\" style=\"zoom:67%;\" loading=\"lazy\">\n<h4 id=\"ipv4-subnetting\"><a class=\"markdownIt-Anchor\" href=\"#ipv4-subnetting\"></a> IPv4 subnetting</h4>\n<h6 id=\"what-is-ipv4-classful-subnetting\"><a class=\"markdownIt-Anchor\" href=\"#what-is-ipv4-classful-subnetting\"></a> What is IPv4 classful subnetting?</h6>\n<p>Classful addressing is an IPv4 addressing architecture that divides addresses into five groups.</p>\n<p><img src=\"/2022/04/08/CN-3/image-20211205174403372.png\" alt=\"image-20211205174403372\" loading=\"lazy\"></p>\n<h6 id=\"what-is-ipv4-classless-subnetting\"><a class=\"markdownIt-Anchor\" href=\"#what-is-ipv4-classless-subnetting\"></a> What is IPv4 classless subnetting?</h6>\n<p>Classless addressing is an IPv4 addressing architecture that uses <mark>VLSM</mark> (variable-length subnet masking).</p>\n<p><img src=\"/2022/04/08/CN-3/image-20211205174543073.png\" alt=\"image-20211205174543073\" loading=\"lazy\"></p>\n<h4 id=\"ipv6-addressing\"><a class=\"markdownIt-Anchor\" href=\"#ipv6-addressing\"></a> IPv6 addressing</h4>\n<h6 id=\"how-to-represent-ipv6-address-in-full-form-and-simplified-form\"><a class=\"markdownIt-Anchor\" href=\"#how-to-represent-ipv6-address-in-full-form-and-simplified-form\"></a> How to represent IPv6 address in full form and simplified form?</h6>\n<p>Full form example: <code>FE80:0:0:0:0:2AA:FE9A:4CA2</code></p>\n<p>Simplified form example: <code>FE80::2AA:FE9A:4CA2</code></p>\n<h6 id=\"what-are-the-three-types-of-ipv6-addresses-what-specific-addresses-are-defined-for-these-types-ipv6-addresses\"><a class=\"markdownIt-Anchor\" href=\"#what-are-the-three-types-of-ipv6-addresses-what-specific-addresses-are-defined-for-these-types-ipv6-addresses\"></a> What are the three types of IPv6 addresses? What specific addresses are defined for these types  IPv6 addresses?</h6>\n<p>The three types of IPv6 addresses are <strong>unicast, multicast and anycast</strong> respectively.</p>\n<ul>\n<li>\n<p><strong>Unicast (one to one)</strong>: A packet addressed to a unicast address is delivered to a single interface.</p>\n</li>\n<li>\n<p><strong>Multicast (one to many)</strong>: A multicast address identifies multiple interfaces. A packet addressed to a multicast address is delivered to all interfaces that are identified by the address.</p>\n</li>\n<li>\n<p><strong>Anycast (one to nearest-one / one to one-of-many)</strong>: An anycast address identifies multiple interfaces. A packet addressed to an anycast address is delivered to a single interface, the nearest interface that is identified by the address. The “nearest” interface is defined as being closest in terms of routing distance.</p>\n</li>\n</ul>\n<p>Specific addresses of these three types of IPv6 addresses are:</p>\n<ul>\n<li>\n<p>Prefix of <strong>Multicast</strong> is <code>FF00::/8</code>.</p>\n</li>\n<li>\n<p>Prefix of <strong>Link-local unicast</strong> is <code>FE80::/10</code>.</p>\n</li>\n<li>\n<p>Prefix of <strong>global unicast</strong> is <code>2000::/3</code>.</p>\n</li>\n</ul>\n<h6 id=\"how-to-form-a-link-local-address-how-to-form-a-global-unicast-address-using-stateless-auto-configuration\"><a class=\"markdownIt-Anchor\" href=\"#how-to-form-a-link-local-address-how-to-form-a-global-unicast-address-using-stateless-auto-configuration\"></a> How to form a link-local address? How to form a global unicast address using stateless auto-configuration?</h6>\n<p>link-local scope all-nodes (<code>FF02::1</code>) and all-routers (<code>FF02::2</code>) multicast address.</p>\n<p>Stateless autoconfiguration uses the information in RA(Router Advertisement) messages to configure the IPv6 hosts automatically. Thus, every IPv6 hosts (other than routers) is able to build its own global unicast address.</p>\n<h4 id=\"ipv6-neighbor-discovery-protocol-ndp\"><a class=\"markdownIt-Anchor\" href=\"#ipv6-neighbor-discovery-protocol-ndp\"></a> IPv6 neighbor discovery protocol (NDP)</h4>\n<h6 id=\"what-4-icmpv6-messages-are-used-in-ndp\"><a class=\"markdownIt-Anchor\" href=\"#what-4-icmpv6-messages-are-used-in-ndp\"></a> What 4 ICMPv6 messages are used in NDP?</h6>\n<p>RA(Router Advertisement)</p>\n<p>RS(Router Solicitation)</p>\n<p>NS(Neighbor Solicitation)</p>\n<p>NA(Neighbor Advertisement)</p>\n<p>See more for: <a href=\"https://howdoesinternetwork.com/2012/ndp-ipv6-neighbor-discovery-protocol\">NDP - Neighbor Discovery Protocol (howdoesinternetwork.com)</a></p>\n<h6 id=\"what-icmpv6-messages-are-used-for-the-functions-provided-by-ndp-for-example-address-resolution-duplicate-address-detection-prefix-and-router-discovery\"><a class=\"markdownIt-Anchor\" href=\"#what-icmpv6-messages-are-used-for-the-functions-provided-by-ndp-for-example-address-resolution-duplicate-address-detection-prefix-and-router-discovery\"></a> What ICMPv6 messages are used for the functions provided by NDP? (For example, Address  resolution, Duplicate address detection, Prefix and Router discovery.)</h6>\n<p>DAD (Duplicate address detection) mechanism is realized through <strong>NS and NA</strong> messages.</p>\n<p>What is DAD: when a new unicast address is configured, it will perform DAD testing— sending a NS message which contain the destination address of itself through the network. (for example, if the new address that want to allocate is <code>2000::1</code>, it will send the NS message with source address <code>::</code> and destination address <code>2000::1</code>). Note that the node will ignore the NS message sent by itself. If nobody respond a NA message, we can consider that this unicast address is unique on this link. This method is call DAD.</p>\n<p>See more for: <a href=\"http://interop.thomasclausen.org/Interop05/Papers/Papers/paper-03.pdf\">paper-03.pdf (thomasclausen.org)</a></p>\n<p><a href=\"https://www.ibm.com/support/pages/what-duplicate-address-detection\">What is duplicate address detection? (ibm.com)</a></p>\n<p>Prefix and Router discovery mechanism is realized through <strong>RS and RA</strong> messages.</p>\n<p>Router will send RA messages periodically in order to let the host computers and other equipment know of its existence, and the RA messages contain the prefix network information and more. Sometimes host computer will also actively send RS messages for communication with other nodes, and the router will respond with a RA message.</p>\n<p>See more for: <a href=\"http://resources.intenseschool.com/ipv6-neighbor-discovery-router-discovery/\">IPv6 part 10: Neighbor Discovery – Router Discovery - Intense School</a></p>\n<h4 id=\"ip-routing\"><a class=\"markdownIt-Anchor\" href=\"#ip-routing\"></a> IP Routing</h4>\n<h6 id=\"what-are-the-differences-between-layer-2-switching-and-layer-3-routing\"><a class=\"markdownIt-Anchor\" href=\"#what-are-the-differences-between-layer-2-switching-and-layer-3-routing\"></a> What are the differences between layer 2 switching and layer 3 routing?</h6>\n<p><strong>Layer 2 switching</strong> is based on data-link layer information, e.g. MAC addresses. Switches (typically  stands for layer 2 switches) use layer 2 switching to forward frames.</p>\n<p><strong>Layer 3 routing</strong> is based on network layer addresses information, e.g. IP addresses. Routers or  layer 3 switches use layer 3 switching to route a packet. It has 2 processes which is Path determination and Packet switching.</p>\n<h6 id=\"what-is-the-difference-between-the-next-hop-and-the-default-gateway\"><a class=\"markdownIt-Anchor\" href=\"#what-is-the-difference-between-the-next-hop-and-the-default-gateway\"></a> What is the difference between the next-hop and the default gateway?</h6>\n<p><strong>Default gateway</strong> is used for a host to communicate with hosts on other networks. The default gateway’s IP address must be in the same network subnet as the source host.</p>\n<p><strong>Next hop</strong> is a routing term that refers to the next closest router a packet can go through.</p>\n<p>There are practically incomparable between default gateway and next hop.</p>\n<h6 id=\"what-are-the-differences-between-the-intra-subnet-and-inter-subnet-communications\"><a class=\"markdownIt-Anchor\" href=\"#what-are-the-differences-between-the-intra-subnet-and-inter-subnet-communications\"></a> What are the differences between the intra-subnet and inter-subnet communications?</h6>\n<p>If a host communicates with each other <mark>within</mark> a subnet, called <mark>intra-subnet communication.</mark></p>\n<p>If the IP communication is between hosts in <mark>different</mark> IP subnets, called <mark>inter-subnet  communication</mark>.</p>\n<h6 id=\"how-to-use-address-resolution-protocol-arp-in-the-intra-subnet-and-inter-subnet-communications\"><a class=\"markdownIt-Anchor\" href=\"#how-to-use-address-resolution-protocol-arp-in-the-intra-subnet-and-inter-subnet-communications\"></a> How to use Address Resolution Protocol (ARP) in the intra-subnet and inter-subnet communications?</h6>\n<p>ARP is working in the networking layer, which is responsible for <mark>resolving IP address into MAC address</mark>.</p>\n<p>In the intra-subnet communication, the source device will broadcast an ARP request and wait for an ARP reply from the destination devices. The source devices then record the destination IP and MAC address to an ARP table.</p>\n<p>In the inter-subnet communication, however, the source device will obtain the MAC address of the default gateway router through ARP request.</p>\n<h6 id=\"for-inter-subnet-communication-how-do-ip-addresses-and-mac-addresses-change-in-the-packet-during-the-data-transmission\"><a class=\"markdownIt-Anchor\" href=\"#for-inter-subnet-communication-how-do-ip-addresses-and-mac-addresses-change-in-the-packet-during-the-data-transmission\"></a> For inter-subnet communication, how do IP addresses and MAC addresses change in the packet  during the data transmission?</h6>\n<p>IP addresses are <mark>changeless</mark> during the data transmission.</p>\n<p>MAC address are <mark>changing</mark> based on different routers during the data transmission.=</p>\n<hr>\n<p><img src=\"/2022/04/08/CN-3/image-20211205153141538.png\" alt=\"image-20211205153141538\" loading=\"lazy\"></p>\n<p>Q1:</p>\n<p>Since subnet mast is 29, which means:<code>11111111.11111111.11111111.111111000</code>. Only 3bits are dynamic, which is <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mn>2</mn><mn>3</mn></msup><mo>=</mo><mn>8</mn></mrow><annotation encoding=\"application/x-tex\">2^3=8</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">8</span></span></span></span>.</p>\n<p>Since the IP address of router is <code>172.16.11.11/29</code>, the sub-network segment is <code>172.16.11.8--172.16.11.15</code>.</p>\n<p><strong>Note that</strong> the host address with all 0s or with all 1s cannot be used for networking, which means <code>172.16.11.8</code> and <code>172.16.11.15</code> cannot be a client IP.</p>\n<p>Therefore, the IP address of PC1 and PC2 are both wrong. What is more, the subnet mask of PC2 is not corresponding with this network domain(it should be 29).</p>\n<p>Q2:</p>\n<p>In the same way of Q1, we know the subnet mask of this network domain is 18 (<code>11111111.11111111.11000000.00000000</code>). <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>6</mn><mi>b</mi><mi>i</mi><mi>t</mi><mi>s</mi></mrow><annotation encoding=\"application/x-tex\">6bits</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord\">6</span><span class=\"mord mathdefault\">b</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">s</span></span></span></span> are dynamic,which is <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mn>2</mn><mn>6</mn></msup><mo>=</mo><mn>64</mn></mrow><annotation encoding=\"application/x-tex\">2^6=64</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">6</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">6</span><span class=\"mord\">4</span></span></span></span>. The sub-network segment is <code>172.16.0.0--172.16.63.255</code>.</p>\n<p>Therefor, PC3 is in this segment while PC4 is not in this subnet domain.</p>\n<p>Q3:</p>\n<p>We have already know that <code>172.16.0.0</code> is for network address and <code>172.16.63.255</code> is for broadcast address. Thus, the range of valid host address is <code>172.16.0.1--172.16.63.254</code>.</p>\n<hr>\n<p><img src=\"/2022/04/08/CN-3/image-20211205153202429.png\" alt=\"image-20211205153202429\" loading=\"lazy\"></p>\n<p>VLSM steps:</p>\n<p><strong>Step 1: Divide the subnet</strong></p>\n<p><img src=\"/2022/04/08/CN-3/image-20211205165352723.png\" alt=\"image-20211205165352723\" loading=\"lazy\"></p>\n<p><strong>Note that</strong> routers divide broadcast domain, therefore a point-to-point WAN connection is also a subnet.</p>\n<p><strong>Step 2: Allocate the subnet(usually from largest to smallest)</strong></p>\n<p>Subnet mask=24, <code>1111111.1111111.1111111.0000000</code>, which means all subnets are in the form of <code>192.168.1.H</code> and <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>H</mi></mrow><annotation encoding=\"application/x-tex\">H</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.08125em;\">H</span></span></span></span> contains 8 bits. Now lets allocate the <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>H</mi></mrow><annotation encoding=\"application/x-tex\">H</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.08125em;\">H</span></span></span></span>:</p>\n<p><code>192.168.1.0XXXXXXX</code> <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>→</mo></mrow><annotation encoding=\"application/x-tex\">\\to</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">→</span></span></span></span> 120 hosts</p>\n<p><code>192.168.1.10XXXXXX</code> <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>→</mo></mrow><annotation encoding=\"application/x-tex\">\\to</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">→</span></span></span></span> 60 hosts</p>\n<p><code>192.168.1.110XXXXX</code> <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>→</mo></mrow><annotation encoding=\"application/x-tex\">\\to</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">→</span></span></span></span> 30 hosts</p>\n<p><code>192.168.1.1110XXXX</code> <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>→</mo></mrow><annotation encoding=\"application/x-tex\">\\to</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">→</span></span></span></span> 10 hosts</p>\n<p><code>192.168.1.111100XX</code> <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>→</mo></mrow><annotation encoding=\"application/x-tex\">\\to</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">→</span></span></span></span> 2 hosts</p>\n<p><code>192.168.1.111101XX</code> <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>→</mo></mrow><annotation encoding=\"application/x-tex\">\\to</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">→</span></span></span></span> WAN link 1</p>\n<p><code>192.168.1.111110XX</code> <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>→</mo></mrow><annotation encoding=\"application/x-tex\">\\to</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">→</span></span></span></span> WAN link 2</p>\n<p><code>192.168.1.111111XX</code> <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>→</mo></mrow><annotation encoding=\"application/x-tex\">\\to</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">→</span></span></span></span> WAN link 3</p>\n<p><strong>Note that</strong> <mark>at most</mark> a 30-bit mask can be used for point-to-point WAN connections since the first address and the last address are used for network address and broadcast address separately, which occupy 2 addresses, and the source address and destination address also occupy 2 addresses. Therefore, at least 4 addresses (<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mn>2</mn><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">2^2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span>) are used and <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>32</mn><mo>−</mo><mn>2</mn><mo>=</mo><mn>30</mn></mrow><annotation encoding=\"application/x-tex\">32-2=30</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">3</span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">3</span><span class=\"mord\">0</span></span></span></span>.</p>\n<p><img src=\"/2022/04/08/CN-3/image-20211205153214433.png\" alt=\"image-20211205153214433\" loading=\"lazy\"></p>\n<p>IP routing contains several steps, each step is in the same broadcast domain, but the source IP and destination IP are always changeless. In this example, they are always <code>192.168.1.11</code> and <code>192.168.2.88</code>.</p>\n<p><img src=\"/2022/04/08/CN-3/image-20211205153227168.png\" alt=\"image-20211205153227168\" loading=\"lazy\"></p>\n<p>Q1: <code>FE80::/10</code></p>\n<p>Q2: ???</p>\n<p>Q3: RS-RA</p>\n<p>Q4: DAD</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"chapter-3-technology-ip-addressing-and-ip-routing\"><a class=\"markdownIt-Anchor\" href=\"#chapter-3-technology-ip-addressing-and-ip-routing\"></a> Chapter 3 Technology, IP Addressing and IP Routing</h2>\n<h3 id=\"layer-3-technologies\"><a class=\"markdownIt-Anchor\" href=\"#layer-3-technologies\"></a> Layer 3 technologies</h3>\n<h4 id=\"ipv4-addressing\"><a class=\"markdownIt-Anchor\" href=\"#ipv4-addressing\"></a> IPv4 addressing</h4>\n<h6 id=\"what-are-the-differences-between-flat-addressing-and-hierarchical-addressing\"><a class=\"markdownIt-Anchor\" href=\"#what-are-the-differences-between-flat-addressing-and-hierarchical-addressing\"></a> What are the differences between flat addressing and hierarchical addressing?</h6>\n<p><mark>Flat addressing</mark> assigns a device the next available address. For example, the <mark>MAC addressing</mark>.</p>\n<p><mark>Hierarchical addressing</mark> contains different levels. For example, the <mark>IP addressing</mark>.</p>\n<h6 id=\"what-are-the-ranges-of-the-class-a-b-c-addresses-and-their-default-subnet-masks\"><a class=\"markdownIt-Anchor\" href=\"#what-are-the-ranges-of-the-class-a-b-c-addresses-and-their-default-subnet-masks\"></a> What are the ranges of the Class A, B, C addresses and their default subnet masks?</h6>\n<p>Class A: <code>1.0.0.0/8 ~ 126.255.255.255/8</code></p>\n<p>Class B: <code>128.0.0.0/16 ~ 191.255.255.255/16</code></p>\n<p>Class C: <code>192.0.0.0/24 ~ 223.255.255.255/24</code></p>\n<h6 id=\"what-are-the-three-ranges-of-private-ip-addresses\"><a class=\"markdownIt-Anchor\" href=\"#what-are-the-three-ranges-of-private-ip-addresses\"></a> What are the three ranges of private IP addresses?</h6>\n<p>There are certain addresses in each class of IPv4 address that are not assigned. These addresses are  called <mark>private addresses</mark>. <code>RFC 1918</code> sets aside 3 blocks of IPv4 addresses for private, internal use.  These 3 blocks consist of one Class A, a range of Class B addresses, and a range of Class C  addresses.</p>\n<p><img src=\"/2022/04/08/CN-3/image-20211205162300456.png\" alt=\"image-20211205162300456\"></p>\n<h6 id=\"what-is-the-difference-of-network-address-broadcast-address-and-host-address-what-are-these-types-of-addresses-used-for\"><a class=\"markdownIt-Anchor\" href=\"#what-is-the-difference-of-network-address-broadcast-address-and-host-address-what-are-these-types-of-addresses-used-for\"></a> What is the difference of network address, broadcast address and host address? What are these  types of addresses used for?</h6>\n<p>(<strong>IP addresses</strong>: Addresses in computer networks which contains network address and host address.)</p>\n<p><strong>Network address</strong>: Used to identify the network itself where the host portion were all zeros. For instance:</p>\n<img src=\"/2022/04/08/CN-3/../../../../OneDrive - Macau University of Science and Technology/Junior/First Semester/Computer Network/Mid-term/Mid-term Assignment.assets/image-20211110131414754.png\" alt=\"image-20211110131414754\" style=\"zoom: 67%;\">\n<p><strong>Host address</strong> is the address in which the host portion cannot be all zeros (0s) or all ones (1s), can be assigned to a device on the network. For instance:</p>\n<img src=\"/2022/04/08/CN-3/../../../../OneDrive - Macau University of Science and Technology/Junior/First Semester/Computer Network/Mid-term/Mid-term Assignment.assets/image-20211110131554883.png\" alt=\"image-20211110131554883\" style=\"zoom:67%;\">\n<p><strong>Broadcast address</strong>: Used for broadcasting packets to all the devices on a network. If the host portion were all ones (1s), it would be a broadcast address. For example:</p>\n<img src=\"file://C:\\Users\\28580\\OneDrive - Macau University of Science and Technology\\Junior\\First Semester\\Computer Network\\Mid-term\\Mid-term Assignment.assets\\image-20211110131623041.png?lastModify=1638693050\" alt=\"image-20211110131623041\" style=\"zoom:67%;\">\n<h4 id=\"ipv4-subnetting\"><a class=\"markdownIt-Anchor\" href=\"#ipv4-subnetting\"></a> IPv4 subnetting</h4>\n<h6 id=\"what-is-ipv4-classful-subnetting\"><a class=\"markdownIt-Anchor\" href=\"#what-is-ipv4-classful-subnetting\"></a> What is IPv4 classful subnetting?</h6>\n<p>Classful addressing is an IPv4 addressing architecture that divides addresses into five groups.</p>\n<p><img src=\"/2022/04/08/CN-3/image-20211205174403372.png\" alt=\"image-20211205174403372\"></p>\n<h6 id=\"what-is-ipv4-classless-subnetting\"><a class=\"markdownIt-Anchor\" href=\"#what-is-ipv4-classless-subnetting\"></a> What is IPv4 classless subnetting?</h6>\n<p>Classless addressing is an IPv4 addressing architecture that uses <mark>VLSM</mark> (variable-length subnet masking).</p>\n<p><img src=\"/2022/04/08/CN-3/image-20211205174543073.png\" alt=\"image-20211205174543073\"></p>\n<h4 id=\"ipv6-addressing\"><a class=\"markdownIt-Anchor\" href=\"#ipv6-addressing\"></a> IPv6 addressing</h4>\n<h6 id=\"how-to-represent-ipv6-address-in-full-form-and-simplified-form\"><a class=\"markdownIt-Anchor\" href=\"#how-to-represent-ipv6-address-in-full-form-and-simplified-form\"></a> How to represent IPv6 address in full form and simplified form?</h6>\n<p>Full form example: <code>FE80:0:0:0:0:2AA:FE9A:4CA2</code></p>\n<p>Simplified form example: <code>FE80::2AA:FE9A:4CA2</code></p>\n<h6 id=\"what-are-the-three-types-of-ipv6-addresses-what-specific-addresses-are-defined-for-these-types-ipv6-addresses\"><a class=\"markdownIt-Anchor\" href=\"#what-are-the-three-types-of-ipv6-addresses-what-specific-addresses-are-defined-for-these-types-ipv6-addresses\"></a> What are the three types of IPv6 addresses? What specific addresses are defined for these types  IPv6 addresses?</h6>\n<p>The three types of IPv6 addresses are <strong>unicast, multicast and anycast</strong> respectively.</p>\n<ul>\n<li>\n<p><strong>Unicast (one to one)</strong>: A packet addressed to a unicast address is delivered to a single interface.</p>\n</li>\n<li>\n<p><strong>Multicast (one to many)</strong>: A multicast address identifies multiple interfaces. A packet addressed to a multicast address is delivered to all interfaces that are identified by the address.</p>\n</li>\n<li>\n<p><strong>Anycast (one to nearest-one / one to one-of-many)</strong>: An anycast address identifies multiple interfaces. A packet addressed to an anycast address is delivered to a single interface, the nearest interface that is identified by the address. The “nearest” interface is defined as being closest in terms of routing distance.</p>\n</li>\n</ul>\n<p>Specific addresses of these three types of IPv6 addresses are:</p>\n<ul>\n<li>\n<p>Prefix of <strong>Multicast</strong> is <code>FF00::/8</code>.</p>\n</li>\n<li>\n<p>Prefix of <strong>Link-local unicast</strong> is <code>FE80::/10</code>.</p>\n</li>\n<li>\n<p>Prefix of <strong>global unicast</strong> is <code>2000::/3</code>.</p>\n</li>\n</ul>\n<h6 id=\"how-to-form-a-link-local-address-how-to-form-a-global-unicast-address-using-stateless-auto-configuration\"><a class=\"markdownIt-Anchor\" href=\"#how-to-form-a-link-local-address-how-to-form-a-global-unicast-address-using-stateless-auto-configuration\"></a> How to form a link-local address? How to form a global unicast address using stateless auto-configuration?</h6>\n<p>link-local scope all-nodes (<code>FF02::1</code>) and all-routers (<code>FF02::2</code>) multicast address.</p>\n<p>Stateless autoconfiguration uses the information in RA(Router Advertisement) messages to configure the IPv6 hosts automatically. Thus, every IPv6 hosts (other than routers) is able to build its own global unicast address.</p>\n<h4 id=\"ipv6-neighbor-discovery-protocol-ndp\"><a class=\"markdownIt-Anchor\" href=\"#ipv6-neighbor-discovery-protocol-ndp\"></a> IPv6 neighbor discovery protocol (NDP)</h4>\n<h6 id=\"what-4-icmpv6-messages-are-used-in-ndp\"><a class=\"markdownIt-Anchor\" href=\"#what-4-icmpv6-messages-are-used-in-ndp\"></a> What 4 ICMPv6 messages are used in NDP?</h6>\n<p>RA(Router Advertisement)</p>\n<p>RS(Router Solicitation)</p>\n<p>NS(Neighbor Solicitation)</p>\n<p>NA(Neighbor Advertisement)</p>\n<p>See more for: <a href=\"https://howdoesinternetwork.com/2012/ndp-ipv6-neighbor-discovery-protocol\">NDP - Neighbor Discovery Protocol (howdoesinternetwork.com)</a></p>\n<h6 id=\"what-icmpv6-messages-are-used-for-the-functions-provided-by-ndp-for-example-address-resolution-duplicate-address-detection-prefix-and-router-discovery\"><a class=\"markdownIt-Anchor\" href=\"#what-icmpv6-messages-are-used-for-the-functions-provided-by-ndp-for-example-address-resolution-duplicate-address-detection-prefix-and-router-discovery\"></a> What ICMPv6 messages are used for the functions provided by NDP? (For example, Address  resolution, Duplicate address detection, Prefix and Router discovery.)</h6>\n<p>DAD (Duplicate address detection) mechanism is realized through <strong>NS and NA</strong> messages.</p>\n<p>What is DAD: when a new unicast address is configured, it will perform DAD testing— sending a NS message which contain the destination address of itself through the network. (for example, if the new address that want to allocate is <code>2000::1</code>, it will send the NS message with source address <code>::</code> and destination address <code>2000::1</code>). Note that the node will ignore the NS message sent by itself. If nobody respond a NA message, we can consider that this unicast address is unique on this link. This method is call DAD.</p>\n<p>See more for: <a href=\"http://interop.thomasclausen.org/Interop05/Papers/Papers/paper-03.pdf\">paper-03.pdf (thomasclausen.org)</a></p>\n<p><a href=\"https://www.ibm.com/support/pages/what-duplicate-address-detection\">What is duplicate address detection? (ibm.com)</a></p>\n<p>Prefix and Router discovery mechanism is realized through <strong>RS and RA</strong> messages.</p>\n<p>Router will send RA messages periodically in order to let the host computers and other equipment know of its existence, and the RA messages contain the prefix network information and more. Sometimes host computer will also actively send RS messages for communication with other nodes, and the router will respond with a RA message.</p>\n<p>See more for: <a href=\"http://resources.intenseschool.com/ipv6-neighbor-discovery-router-discovery/\">IPv6 part 10: Neighbor Discovery – Router Discovery - Intense School</a></p>\n<h4 id=\"ip-routing\"><a class=\"markdownIt-Anchor\" href=\"#ip-routing\"></a> IP Routing</h4>\n<h6 id=\"what-are-the-differences-between-layer-2-switching-and-layer-3-routing\"><a class=\"markdownIt-Anchor\" href=\"#what-are-the-differences-between-layer-2-switching-and-layer-3-routing\"></a> What are the differences between layer 2 switching and layer 3 routing?</h6>\n<p><strong>Layer 2 switching</strong> is based on data-link layer information, e.g. MAC addresses. Switches (typically  stands for layer 2 switches) use layer 2 switching to forward frames.</p>\n<p><strong>Layer 3 routing</strong> is based on network layer addresses information, e.g. IP addresses. Routers or  layer 3 switches use layer 3 switching to route a packet. It has 2 processes which is Path determination and Packet switching.</p>\n<h6 id=\"what-is-the-difference-between-the-next-hop-and-the-default-gateway\"><a class=\"markdownIt-Anchor\" href=\"#what-is-the-difference-between-the-next-hop-and-the-default-gateway\"></a> What is the difference between the next-hop and the default gateway?</h6>\n<p><strong>Default gateway</strong> is used for a host to communicate with hosts on other networks. The default gateway’s IP address must be in the same network subnet as the source host.</p>\n<p><strong>Next hop</strong> is a routing term that refers to the next closest router a packet can go through.</p>\n<p>There are practically incomparable between default gateway and next hop.</p>\n<h6 id=\"what-are-the-differences-between-the-intra-subnet-and-inter-subnet-communications\"><a class=\"markdownIt-Anchor\" href=\"#what-are-the-differences-between-the-intra-subnet-and-inter-subnet-communications\"></a> What are the differences between the intra-subnet and inter-subnet communications?</h6>\n<p>If a host communicates with each other <mark>within</mark> a subnet, called <mark>intra-subnet communication.</mark></p>\n<p>If the IP communication is between hosts in <mark>different</mark> IP subnets, called <mark>inter-subnet  communication</mark>.</p>\n<h6 id=\"how-to-use-address-resolution-protocol-arp-in-the-intra-subnet-and-inter-subnet-communications\"><a class=\"markdownIt-Anchor\" href=\"#how-to-use-address-resolution-protocol-arp-in-the-intra-subnet-and-inter-subnet-communications\"></a> How to use Address Resolution Protocol (ARP) in the intra-subnet and inter-subnet communications?</h6>\n<p>ARP is working in the networking layer, which is responsible for <mark>resolving IP address into MAC address</mark>.</p>\n<p>In the intra-subnet communication, the source device will broadcast an ARP request and wait for an ARP reply from the destination devices. The source devices then record the destination IP and MAC address to an ARP table.</p>\n<p>In the inter-subnet communication, however, the source device will obtain the MAC address of the default gateway router through ARP request.</p>\n<h6 id=\"for-inter-subnet-communication-how-do-ip-addresses-and-mac-addresses-change-in-the-packet-during-the-data-transmission\"><a class=\"markdownIt-Anchor\" href=\"#for-inter-subnet-communication-how-do-ip-addresses-and-mac-addresses-change-in-the-packet-during-the-data-transmission\"></a> For inter-subnet communication, how do IP addresses and MAC addresses change in the packet  during the data transmission?</h6>\n<p>IP addresses are <mark>changeless</mark> during the data transmission.</p>\n<p>MAC address are <mark>changing</mark> based on different routers during the data transmission.=</p>\n<hr>\n<p><img src=\"/2022/04/08/CN-3/image-20211205153141538.png\" alt=\"image-20211205153141538\"></p>\n<p>Q1:</p>\n<p>Since subnet mast is 29, which means:<code>11111111.11111111.11111111.111111000</code>. Only 3bits are dynamic, which is <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mn>2</mn><mn>3</mn></msup><mo>=</mo><mn>8</mn></mrow><annotation encoding=\"application/x-tex\">2^3=8</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">8</span></span></span></span>.</p>\n<p>Since the IP address of router is <code>172.16.11.11/29</code>, the sub-network segment is <code>172.16.11.8--172.16.11.15</code>.</p>\n<p><strong>Note that</strong> the host address with all 0s or with all 1s cannot be used for networking, which means <code>172.16.11.8</code> and <code>172.16.11.15</code> cannot be a client IP.</p>\n<p>Therefore, the IP address of PC1 and PC2 are both wrong. What is more, the subnet mask of PC2 is not corresponding with this network domain(it should be 29).</p>\n<p>Q2:</p>\n<p>In the same way of Q1, we know the subnet mask of this network domain is 18 (<code>11111111.11111111.11000000.00000000</code>). <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>6</mn><mi>b</mi><mi>i</mi><mi>t</mi><mi>s</mi></mrow><annotation encoding=\"application/x-tex\">6bits</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord\">6</span><span class=\"mord mathdefault\">b</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">s</span></span></span></span> are dynamic,which is <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mn>2</mn><mn>6</mn></msup><mo>=</mo><mn>64</mn></mrow><annotation encoding=\"application/x-tex\">2^6=64</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">6</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">6</span><span class=\"mord\">4</span></span></span></span>. The sub-network segment is <code>172.16.0.0--172.16.63.255</code>.</p>\n<p>Therefor, PC3 is in this segment while PC4 is not in this subnet domain.</p>\n<p>Q3:</p>\n<p>We have already know that <code>172.16.0.0</code> is for network address and <code>172.16.63.255</code> is for broadcast address. Thus, the range of valid host address is <code>172.16.0.1--172.16.63.254</code>.</p>\n<hr>\n<p><img src=\"/2022/04/08/CN-3/image-20211205153202429.png\" alt=\"image-20211205153202429\"></p>\n<p>VLSM steps:</p>\n<p><strong>Step 1: Divide the subnet</strong></p>\n<p><img src=\"/2022/04/08/CN-3/image-20211205165352723.png\" alt=\"image-20211205165352723\"></p>\n<p><strong>Note that</strong> routers divide broadcast domain, therefore a point-to-point WAN connection is also a subnet.</p>\n<p><strong>Step 2: Allocate the subnet(usually from largest to smallest)</strong></p>\n<p>Subnet mask=24, <code>1111111.1111111.1111111.0000000</code>, which means all subnets are in the form of <code>192.168.1.H</code> and <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>H</mi></mrow><annotation encoding=\"application/x-tex\">H</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.08125em;\">H</span></span></span></span> contains 8 bits. Now lets allocate the <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>H</mi></mrow><annotation encoding=\"application/x-tex\">H</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.08125em;\">H</span></span></span></span>:</p>\n<p><code>192.168.1.0XXXXXXX</code> <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>→</mo></mrow><annotation encoding=\"application/x-tex\">\\to</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">→</span></span></span></span> 120 hosts</p>\n<p><code>192.168.1.10XXXXXX</code> <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>→</mo></mrow><annotation encoding=\"application/x-tex\">\\to</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">→</span></span></span></span> 60 hosts</p>\n<p><code>192.168.1.110XXXXX</code> <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>→</mo></mrow><annotation encoding=\"application/x-tex\">\\to</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">→</span></span></span></span> 30 hosts</p>\n<p><code>192.168.1.1110XXXX</code> <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>→</mo></mrow><annotation encoding=\"application/x-tex\">\\to</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">→</span></span></span></span> 10 hosts</p>\n<p><code>192.168.1.111100XX</code> <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>→</mo></mrow><annotation encoding=\"application/x-tex\">\\to</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">→</span></span></span></span> 2 hosts</p>\n<p><code>192.168.1.111101XX</code> <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>→</mo></mrow><annotation encoding=\"application/x-tex\">\\to</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">→</span></span></span></span> WAN link 1</p>\n<p><code>192.168.1.111110XX</code> <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>→</mo></mrow><annotation encoding=\"application/x-tex\">\\to</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">→</span></span></span></span> WAN link 2</p>\n<p><code>192.168.1.111111XX</code> <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>→</mo></mrow><annotation encoding=\"application/x-tex\">\\to</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">→</span></span></span></span> WAN link 3</p>\n<p><strong>Note that</strong> <mark>at most</mark> a 30-bit mask can be used for point-to-point WAN connections since the first address and the last address are used for network address and broadcast address separately, which occupy 2 addresses, and the source address and destination address also occupy 2 addresses. Therefore, at least 4 addresses (<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mn>2</mn><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">2^2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span>) are used and <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>32</mn><mo>−</mo><mn>2</mn><mo>=</mo><mn>30</mn></mrow><annotation encoding=\"application/x-tex\">32-2=30</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">3</span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">3</span><span class=\"mord\">0</span></span></span></span>.</p>\n<p><img src=\"/2022/04/08/CN-3/image-20211205153214433.png\" alt=\"image-20211205153214433\"></p>\n<p>IP routing contains several steps, each step is in the same broadcast domain, but the source IP and destination IP are always changeless. In this example, they are always <code>192.168.1.11</code> and <code>192.168.2.88</code>.</p>\n<p><img src=\"/2022/04/08/CN-3/image-20211205153227168.png\" alt=\"image-20211205153227168\"></p>\n<p>Q1: <code>FE80::/10</code></p>\n<p>Q2: ???</p>\n<p>Q3: RS-RA</p>\n<p>Q4: DAD</p>\n"},{"title":"Computer Network 4 - Layer 3, Routing Protocols","date":"2022-04-08T15:37:00.000Z","author":"Tony","katex":true,"_content":"\n## Layer 3, Routing Protocols\n\n#### Routing protocols\n\n###### What are the differences between Interior Gateway Protocol (IGP) and Exterior Gateway Protocol  (EGP)? List some example of them.\n\n​\t\tInterior Gateway Protocols (IGP) route data ==in== an autonomous system. Like EIGRP, OSPF.\n\n​\t\tExterior Gateway Protocols (EGP) route data ==between== autonomous system. Like BGP.\n\n###### What algorithm is used by distance vector routing protocols?\n\n​\t\tDistance vector routing protocol algorithm: ==Bellman-Ford algorithm==\n\n​\t\tLink-state routing protocol algorithm: ==Dijkstra algorithm==\n\n###### What are the features of distance vector routing protocols?\n\n​\t\t==Features:== Periodic updates, send entire routing table to directly connected routers, do not know the  exact network topology.\n\nWhen the topology changes, routing table updates must occur. It passes periodic copies of a routing  table from router to router. Distance-vector algorithms call for each router to send its entire routing  table to each of its directly connected neighboring routers.\n\n​\t\tThe algorithm eventually accumulates network distances so that it can maintain a database of  network topology information.\n\n​\t\tDistance-vector algorithms do not know the exact topology of an internetwork.\n\n###### What algorithm is used by link-state routing protocols?\n\n​\t\tDistance vector routing protocol algorithm: ==Bellman-Ford algorithm==\n\n​\t\tLink-state routing protocol algorithm: ==Dijkstra algorithm==\n\n###### What are the features of link-state routing protocols?\n\n​\t\t==Features:== Trigger updates, send partial routing to all routers on the network, know the exact  network topology.\n\n​\t\tIt exchanges LSAs (Link-state advertisements) to collect the routing information between routers  starting with directly connected networks.\n\n​\t\tEach router in parallel with the others constructs this logical topology as a tree, with itself as the root,  consisting of all possible paths to each network in the link-state protocol internetwork.\n\n​\t\tSPF algorithm calculation is performed on the database resulting in the SPF tree. A list of the known  paths and interfaces is stored in the routing tables. \n\n​\t\tA link-state routing algorithm maintains full knowledge of distant routers and how they interconnect.\n\n#### EIGRP\n\n###### What three tables are maintained by EIGRP for each routed protocol? What information are stored  in these tables? Which tables does EIGRP store the primary route (successor) to the destination?  Which tables does EIGRP store the backup route (feasible successor) to the destination?\n\nThree tables: ==neighbor table,  topology table and routing table==\n\nBoth topology table and routing table stored the successor route (primary route).\n\nTopology table stored the feasible successor route (backup route).\n\nSee more for: [EIGRP路由协议 - 简书 (jianshu.com)](https://www.jianshu.com/p/5ec0e020d97a)\n\n###### What are the operations of DUAL? How can EIGRP determine the feasible distance, reported  distance, successor and feasible successor for a destination network?\n\nDUAL (Diffusing Update Algorithm) is the method to guarantee the successor distance and feasible successor distance of a non-circle topology network.\n\nFD (Feasible Distance): the local route’s metric of the ==best route== to reach a specific network.\n\nRD (Reported Distance): the metric advertised by the neighbor router for a specific route.\n\nSuccessor for a destination network: the next hop on the primary route with the shortest feasible distance to the destination.\n\nFeasible successor for a destination network: When a destination network is removed from the EIGRP topology, a router initiates a route querying process in an attempt to locate a different route to that destination. As it is preferable to avoid this querying process, EIGRP routers will opportunistically store backup routes, known as *feasible successors*, when certain requirements are met.\n\n###### What are used as metric for EIGRP? How to calculate the metric for a destination network?\n\n$$\nMetric = Bandwidth + Delay\n$$\n\nNote that the unit of bandwidth is ==$Kbps$== and the unit of delay is ==$\\mu s$==\n$$\nFD=\\Big( \\frac{10^7}{BandWidth}+\\frac{Delay(\\mu s)}{10}  \\Big)\\times 256\n$$\n\n###### Which multicast addresses are used by EIGRP to exchange the routing information?\n\nIPv4: `224.0.0.10`\n\nIPv6: `FF02::A`\n\n#### OSPF\n\n###### What three databases are maintained by OSPF? What information are stored in these databases?\n\nThree databases: ==neighbor database,  topology database and routing database==\n\nSee more for: [OSPF详解（一）_智慧云工具箱的博客-CSDN博客_ospf详解](https://blog.csdn.net/qq_44967475/article/details/90901793)\n\n###### What types of networks need a DR (Designated Router) and BDR (Backup Designated Router)  election? Why?How to determine the DR and BDR in OSPF network?\n\n==Multi-access networks== need a DR and BDR election.\n\n==Point-to-point networks== do **NOT** need a DR or BDR election.\n\nDR is the ==largest== number of the router ID set of a sub-network.\n\nBDR is the ==second largest== number of the router ID set of a sub-network.\n\n###### What is used as metric for OSPF? How to calculate the metric for a destination network?\n\n$$\nOSPF\\ Cost=\\sum \\frac{10^8}{BandWidth}\n$$\n\nNote that the unit of bandwidth is ==$bps$==\n\n###### Which multicast addresses are used by OSPF to exchange the routing information?\n\nIPv4: `224.0.0.5` or `224.0.0.6`\n\nIPv6: `FF02::5` or `FF02::6`\n\n![image-20211206080928415](CN-4/image-20211206080928415-1649432396057.png)\n\nTo `192.168.1.11`: Find out `192.168.1.0/24` in routing table and next-hop is `172.16.1.2`\n\nTo `172,16.1.1`: Find out `172.16.1.0/24` in routing table and next-hop is Serial0\n\nTo `172.16.2.22`: Find out `0.0.0.0/0` in routing table and next-hop is `172.16.1.2`\n\nTo `255.255.255.255` drop since it is a broadcast IP therefore there is no next-hop.\n\n![image-20211206080908048](CN-4/image-20211206080908048-1649432396057.png)\n\nNote that ==Successor route== means the best route and ==Feasible successor route== means backup route.\n\nAnd the **feasible distance** calculation formula is: \n$$\nFD=\\Big( \\frac{10^7}{BandWidth(Kbps)}+\\frac{Delay(\\mu s)}{10}  \\Big)\\times 256\n$$\nRoute I: $Router1\\to Router2\\to Router3\\to192.168.33.0/24$\n$$\nFD_2=\\Big( \\frac{10^7}{10\\times 10^3}+\\frac{1000+1000+100}{10}  \\Big)\\times 256=309760\n$$\nRoute II: $Router1\\to Router3\\to192.168.33.0/24$\n$$\nFD_3=\\Big( \\frac{10^7}{56}+\\frac{20000+100}{10}  \\Big)\\times 256=46228845\n$$\nRoute III: $Router1\\to Router4\\to Router3\\to192.168.33.0/24$\n$$\nFD_4=\\Big( \\frac{10^7}{100\\times 10^3}+\\frac{100+100+100}{10}  \\Big)\\times 256=33280\n$$\nSince $FD_4$ is the shortest path (easy to compare), route III is called successor route.\n\nNow let’s calculate feasible successor route, or say, backup route.\n\nBecause *Router 4* is the successor router, we only need to calculate the RD of *Router 2* and *Router 3*. If $RD<FD$, we can say the route is a feasible successor route.\n\nRoute I: $Router2\\to Router3\\to192.168.33.0/24$\n$$\nRD_2=\\Big( \\frac{10^7}{10\\times 10^3}+\\frac{1000+100}{10}  \\Big)\\times 256\n$$\nRoute II: $Router3\\to192.168.33.0/24$\n$$\nRD_3=\\Big( \\frac{10^7}{100\\times 10^3}+\\frac{100}{10}  \\Big)\\times 256\\\\\n$$\nSince $RD_3$ is faster than $RD_2$, Route II is called feasible successor route.\n\n![image-20211206080942577](CN-4/image-20211206080942577-1649432396057.png)\n\nQ1:\n\n`192.168.11.0/24` sub-network and `192.168.44.0/24` sub-network require DR/BDR election.\n\nQ2:\n\nUse ==Router ID== only to choose DR and BDR.\n\nThe IP of Router1 is `192.168.11.1` \n\nThe IP of Router2 is `192.168.11.2`\n\nThe IP of Router3 is `192.168.11.3`\n\nSince the IP of Router 3 is the largest, DR is Router 3.\n\nSince the IP of Router 2 is the second largest, BDR is Router 2.\n\nQ3:\n$$\nMetrics=\\frac{10^8}{100\\times10^6}+\\frac{10^8}{64\\times 10^3}+\\frac{10^8}{100\\times10^6}\n$$\nNote that the unit of bandwidth is ==$bps$==, NOT *Kbps*!!!\n\n---\n\n$$\nEND\n$$\n\n","source":"_posts/CN-4.md","raw":"---\ntitle: Computer Network 4 - Layer 3, Routing Protocols\ndate: 2022-04-08 23:37:00\ntags:\n\t- computer network\ncategories:\n\t- 计算机网络\nauthor: Tony\nkatex: true\n---\n\n## Layer 3, Routing Protocols\n\n#### Routing protocols\n\n###### What are the differences between Interior Gateway Protocol (IGP) and Exterior Gateway Protocol  (EGP)? List some example of them.\n\n​\t\tInterior Gateway Protocols (IGP) route data ==in== an autonomous system. Like EIGRP, OSPF.\n\n​\t\tExterior Gateway Protocols (EGP) route data ==between== autonomous system. Like BGP.\n\n###### What algorithm is used by distance vector routing protocols?\n\n​\t\tDistance vector routing protocol algorithm: ==Bellman-Ford algorithm==\n\n​\t\tLink-state routing protocol algorithm: ==Dijkstra algorithm==\n\n###### What are the features of distance vector routing protocols?\n\n​\t\t==Features:== Periodic updates, send entire routing table to directly connected routers, do not know the  exact network topology.\n\nWhen the topology changes, routing table updates must occur. It passes periodic copies of a routing  table from router to router. Distance-vector algorithms call for each router to send its entire routing  table to each of its directly connected neighboring routers.\n\n​\t\tThe algorithm eventually accumulates network distances so that it can maintain a database of  network topology information.\n\n​\t\tDistance-vector algorithms do not know the exact topology of an internetwork.\n\n###### What algorithm is used by link-state routing protocols?\n\n​\t\tDistance vector routing protocol algorithm: ==Bellman-Ford algorithm==\n\n​\t\tLink-state routing protocol algorithm: ==Dijkstra algorithm==\n\n###### What are the features of link-state routing protocols?\n\n​\t\t==Features:== Trigger updates, send partial routing to all routers on the network, know the exact  network topology.\n\n​\t\tIt exchanges LSAs (Link-state advertisements) to collect the routing information between routers  starting with directly connected networks.\n\n​\t\tEach router in parallel with the others constructs this logical topology as a tree, with itself as the root,  consisting of all possible paths to each network in the link-state protocol internetwork.\n\n​\t\tSPF algorithm calculation is performed on the database resulting in the SPF tree. A list of the known  paths and interfaces is stored in the routing tables. \n\n​\t\tA link-state routing algorithm maintains full knowledge of distant routers and how they interconnect.\n\n#### EIGRP\n\n###### What three tables are maintained by EIGRP for each routed protocol? What information are stored  in these tables? Which tables does EIGRP store the primary route (successor) to the destination?  Which tables does EIGRP store the backup route (feasible successor) to the destination?\n\nThree tables: ==neighbor table,  topology table and routing table==\n\nBoth topology table and routing table stored the successor route (primary route).\n\nTopology table stored the feasible successor route (backup route).\n\nSee more for: [EIGRP路由协议 - 简书 (jianshu.com)](https://www.jianshu.com/p/5ec0e020d97a)\n\n###### What are the operations of DUAL? How can EIGRP determine the feasible distance, reported  distance, successor and feasible successor for a destination network?\n\nDUAL (Diffusing Update Algorithm) is the method to guarantee the successor distance and feasible successor distance of a non-circle topology network.\n\nFD (Feasible Distance): the local route’s metric of the ==best route== to reach a specific network.\n\nRD (Reported Distance): the metric advertised by the neighbor router for a specific route.\n\nSuccessor for a destination network: the next hop on the primary route with the shortest feasible distance to the destination.\n\nFeasible successor for a destination network: When a destination network is removed from the EIGRP topology, a router initiates a route querying process in an attempt to locate a different route to that destination. As it is preferable to avoid this querying process, EIGRP routers will opportunistically store backup routes, known as *feasible successors*, when certain requirements are met.\n\n###### What are used as metric for EIGRP? How to calculate the metric for a destination network?\n\n$$\nMetric = Bandwidth + Delay\n$$\n\nNote that the unit of bandwidth is ==$Kbps$== and the unit of delay is ==$\\mu s$==\n$$\nFD=\\Big( \\frac{10^7}{BandWidth}+\\frac{Delay(\\mu s)}{10}  \\Big)\\times 256\n$$\n\n###### Which multicast addresses are used by EIGRP to exchange the routing information?\n\nIPv4: `224.0.0.10`\n\nIPv6: `FF02::A`\n\n#### OSPF\n\n###### What three databases are maintained by OSPF? What information are stored in these databases?\n\nThree databases: ==neighbor database,  topology database and routing database==\n\nSee more for: [OSPF详解（一）_智慧云工具箱的博客-CSDN博客_ospf详解](https://blog.csdn.net/qq_44967475/article/details/90901793)\n\n###### What types of networks need a DR (Designated Router) and BDR (Backup Designated Router)  election? Why?How to determine the DR and BDR in OSPF network?\n\n==Multi-access networks== need a DR and BDR election.\n\n==Point-to-point networks== do **NOT** need a DR or BDR election.\n\nDR is the ==largest== number of the router ID set of a sub-network.\n\nBDR is the ==second largest== number of the router ID set of a sub-network.\n\n###### What is used as metric for OSPF? How to calculate the metric for a destination network?\n\n$$\nOSPF\\ Cost=\\sum \\frac{10^8}{BandWidth}\n$$\n\nNote that the unit of bandwidth is ==$bps$==\n\n###### Which multicast addresses are used by OSPF to exchange the routing information?\n\nIPv4: `224.0.0.5` or `224.0.0.6`\n\nIPv6: `FF02::5` or `FF02::6`\n\n![image-20211206080928415](CN-4/image-20211206080928415-1649432396057.png)\n\nTo `192.168.1.11`: Find out `192.168.1.0/24` in routing table and next-hop is `172.16.1.2`\n\nTo `172,16.1.1`: Find out `172.16.1.0/24` in routing table and next-hop is Serial0\n\nTo `172.16.2.22`: Find out `0.0.0.0/0` in routing table and next-hop is `172.16.1.2`\n\nTo `255.255.255.255` drop since it is a broadcast IP therefore there is no next-hop.\n\n![image-20211206080908048](CN-4/image-20211206080908048-1649432396057.png)\n\nNote that ==Successor route== means the best route and ==Feasible successor route== means backup route.\n\nAnd the **feasible distance** calculation formula is: \n$$\nFD=\\Big( \\frac{10^7}{BandWidth(Kbps)}+\\frac{Delay(\\mu s)}{10}  \\Big)\\times 256\n$$\nRoute I: $Router1\\to Router2\\to Router3\\to192.168.33.0/24$\n$$\nFD_2=\\Big( \\frac{10^7}{10\\times 10^3}+\\frac{1000+1000+100}{10}  \\Big)\\times 256=309760\n$$\nRoute II: $Router1\\to Router3\\to192.168.33.0/24$\n$$\nFD_3=\\Big( \\frac{10^7}{56}+\\frac{20000+100}{10}  \\Big)\\times 256=46228845\n$$\nRoute III: $Router1\\to Router4\\to Router3\\to192.168.33.0/24$\n$$\nFD_4=\\Big( \\frac{10^7}{100\\times 10^3}+\\frac{100+100+100}{10}  \\Big)\\times 256=33280\n$$\nSince $FD_4$ is the shortest path (easy to compare), route III is called successor route.\n\nNow let’s calculate feasible successor route, or say, backup route.\n\nBecause *Router 4* is the successor router, we only need to calculate the RD of *Router 2* and *Router 3*. If $RD<FD$, we can say the route is a feasible successor route.\n\nRoute I: $Router2\\to Router3\\to192.168.33.0/24$\n$$\nRD_2=\\Big( \\frac{10^7}{10\\times 10^3}+\\frac{1000+100}{10}  \\Big)\\times 256\n$$\nRoute II: $Router3\\to192.168.33.0/24$\n$$\nRD_3=\\Big( \\frac{10^7}{100\\times 10^3}+\\frac{100}{10}  \\Big)\\times 256\\\\\n$$\nSince $RD_3$ is faster than $RD_2$, Route II is called feasible successor route.\n\n![image-20211206080942577](CN-4/image-20211206080942577-1649432396057.png)\n\nQ1:\n\n`192.168.11.0/24` sub-network and `192.168.44.0/24` sub-network require DR/BDR election.\n\nQ2:\n\nUse ==Router ID== only to choose DR and BDR.\n\nThe IP of Router1 is `192.168.11.1` \n\nThe IP of Router2 is `192.168.11.2`\n\nThe IP of Router3 is `192.168.11.3`\n\nSince the IP of Router 3 is the largest, DR is Router 3.\n\nSince the IP of Router 2 is the second largest, BDR is Router 2.\n\nQ3:\n$$\nMetrics=\\frac{10^8}{100\\times10^6}+\\frac{10^8}{64\\times 10^3}+\\frac{10^8}{100\\times10^6}\n$$\nNote that the unit of bandwidth is ==$bps$==, NOT *Kbps*!!!\n\n---\n\n$$\nEND\n$$\n\n","slug":"CN-4","published":1,"updated":"2022-04-08T15:40:02.677Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1rj2n52000fgwcyew866ixi","content":"<h2 id=\"layer-3-routing-protocols\"><a class=\"markdownIt-Anchor\" href=\"#layer-3-routing-protocols\"></a> Layer 3, Routing Protocols</h2>\n<h4 id=\"routing-protocols\"><a class=\"markdownIt-Anchor\" href=\"#routing-protocols\"></a> Routing protocols</h4>\n<h6 id=\"what-are-the-differences-between-interior-gateway-protocol-igp-and-exterior-gateway-protocol-egp-list-some-example-of-them\"><a class=\"markdownIt-Anchor\" href=\"#what-are-the-differences-between-interior-gateway-protocol-igp-and-exterior-gateway-protocol-egp-list-some-example-of-them\"></a> What are the differences between Interior Gateway Protocol (IGP) and Exterior Gateway Protocol  (EGP)? List some example of them.</h6>\n<p>​\t\tInterior Gateway Protocols (IGP) route data <mark>in</mark> an autonomous system. Like EIGRP, OSPF.</p>\n<p>​\t\tExterior Gateway Protocols (EGP) route data <mark>between</mark> autonomous system. Like BGP.</p>\n<h6 id=\"what-algorithm-is-used-by-distance-vector-routing-protocols\"><a class=\"markdownIt-Anchor\" href=\"#what-algorithm-is-used-by-distance-vector-routing-protocols\"></a> What algorithm is used by distance vector routing protocols?</h6>\n<p>​\t\tDistance vector routing protocol algorithm: <mark>Bellman-Ford algorithm</mark></p>\n<p>​\t\tLink-state routing protocol algorithm: <mark>Dijkstra algorithm</mark></p>\n<h6 id=\"what-are-the-features-of-distance-vector-routing-protocols\"><a class=\"markdownIt-Anchor\" href=\"#what-are-the-features-of-distance-vector-routing-protocols\"></a> What are the features of distance vector routing protocols?</h6>\n<p>​\t\t<mark>Features:</mark> Periodic updates, send entire routing table to directly connected routers, do not know the  exact network topology.</p>\n<p>When the topology changes, routing table updates must occur. It passes periodic copies of a routing  table from router to router. Distance-vector algorithms call for each router to send its entire routing  table to each of its directly connected neighboring routers.</p>\n<p>​\t\tThe algorithm eventually accumulates network distances so that it can maintain a database of  network topology information.</p>\n<p>​\t\tDistance-vector algorithms do not know the exact topology of an internetwork.</p>\n<h6 id=\"what-algorithm-is-used-by-link-state-routing-protocols\"><a class=\"markdownIt-Anchor\" href=\"#what-algorithm-is-used-by-link-state-routing-protocols\"></a> What algorithm is used by link-state routing protocols?</h6>\n<p>​\t\tDistance vector routing protocol algorithm: <mark>Bellman-Ford algorithm</mark></p>\n<p>​\t\tLink-state routing protocol algorithm: <mark>Dijkstra algorithm</mark></p>\n<h6 id=\"what-are-the-features-of-link-state-routing-protocols\"><a class=\"markdownIt-Anchor\" href=\"#what-are-the-features-of-link-state-routing-protocols\"></a> What are the features of link-state routing protocols?</h6>\n<p>​\t\t<mark>Features:</mark> Trigger updates, send partial routing to all routers on the network, know the exact  network topology.</p>\n<p>​\t\tIt exchanges LSAs (Link-state advertisements) to collect the routing information between routers  starting with directly connected networks.</p>\n<p>​\t\tEach router in parallel with the others constructs this logical topology as a tree, with itself as the root,  consisting of all possible paths to each network in the link-state protocol internetwork.</p>\n<p>​\t\tSPF algorithm calculation is performed on the database resulting in the SPF tree. A list of the known  paths and interfaces is stored in the routing tables.</p>\n<p>​\t\tA link-state routing algorithm maintains full knowledge of distant routers and how they interconnect.</p>\n<h4 id=\"eigrp\"><a class=\"markdownIt-Anchor\" href=\"#eigrp\"></a> EIGRP</h4>\n<h6 id=\"what-three-tables-are-maintained-by-eigrp-for-each-routed-protocol-what-information-are-stored-in-these-tables-which-tables-does-eigrp-store-the-primary-route-successor-to-the-destination-which-tables-does-eigrp-store-the-backup-route-feasible-successor-to-the-destination\"><a class=\"markdownIt-Anchor\" href=\"#what-three-tables-are-maintained-by-eigrp-for-each-routed-protocol-what-information-are-stored-in-these-tables-which-tables-does-eigrp-store-the-primary-route-successor-to-the-destination-which-tables-does-eigrp-store-the-backup-route-feasible-successor-to-the-destination\"></a> What three tables are maintained by EIGRP for each routed protocol? What information are stored  in these tables? Which tables does EIGRP store the primary route (successor) to the destination?  Which tables does EIGRP store the backup route (feasible successor) to the destination?</h6>\n<p>Three tables: <mark>neighbor table,  topology table and routing table</mark></p>\n<p>Both topology table and routing table stored the successor route (primary route).</p>\n<p>Topology table stored the feasible successor route (backup route).</p>\n<p>See more for: <a href=\"https://www.jianshu.com/p/5ec0e020d97a\">EIGRP路由协议 - 简书 (jianshu.com)</a></p>\n<h6 id=\"what-are-the-operations-of-dual-how-can-eigrp-determine-the-feasible-distance-reported-distance-successor-and-feasible-successor-for-a-destination-network\"><a class=\"markdownIt-Anchor\" href=\"#what-are-the-operations-of-dual-how-can-eigrp-determine-the-feasible-distance-reported-distance-successor-and-feasible-successor-for-a-destination-network\"></a> What are the operations of DUAL? How can EIGRP determine the feasible distance, reported  distance, successor and feasible successor for a destination network?</h6>\n<p>DUAL (Diffusing Update Algorithm) is the method to guarantee the successor distance and feasible successor distance of a non-circle topology network.</p>\n<p>FD (Feasible Distance): the local route’s metric of the <mark>best route</mark> to reach a specific network.</p>\n<p>RD (Reported Distance): the metric advertised by the neighbor router for a specific route.</p>\n<p>Successor for a destination network: the next hop on the primary route with the shortest feasible distance to the destination.</p>\n<p>Feasible successor for a destination network: When a destination network is removed from the EIGRP topology, a router initiates a route querying process in an attempt to locate a different route to that destination. As it is preferable to avoid this querying process, EIGRP routers will opportunistically store backup routes, known as <em>feasible successors</em>, when certain requirements are met.</p>\n<h6 id=\"what-are-used-as-metric-for-eigrp-how-to-calculate-the-metric-for-a-destination-network\"><a class=\"markdownIt-Anchor\" href=\"#what-are-used-as-metric-for-eigrp-how-to-calculate-the-metric-for-a-destination-network\"></a> What are used as metric for EIGRP? How to calculate the metric for a destination network?</h6>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>M</mi><mi>e</mi><mi>t</mi><mi>r</mi><mi>i</mi><mi>c</mi><mo>=</mo><mi>B</mi><mi>a</mi><mi>n</mi><mi>d</mi><mi>w</mi><mi>i</mi><mi>d</mi><mi>t</mi><mi>h</mi><mo>+</mo><mi>D</mi><mi>e</mi><mi>l</mi><mi>a</mi><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">Metric = Bandwidth + Delay\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">M</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">c</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.77777em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05017em;\">B</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\" style=\"margin-right:0.02691em;\">w</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">h</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">D</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span></span></span></span></span></p>\n<p>Note that the unit of bandwidth is <mark><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>K</mi><mi>b</mi><mi>p</mi><mi>s</mi></mrow><annotation encoding=\"application/x-tex\">Kbps</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">K</span><span class=\"mord mathdefault\">b</span><span class=\"mord mathdefault\">p</span><span class=\"mord mathdefault\">s</span></span></span></span></mark> and the unit of delay is <mark><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>μ</mi><mi>s</mi></mrow><annotation encoding=\"application/x-tex\">\\mu s</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\">μ</span><span class=\"mord mathdefault\">s</span></span></span></span></mark></p>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>F</mi><mi>D</mi><mo>=</mo><mo fence=\"false\">(</mo><mfrac><mrow><mn>1</mn><msup><mn>0</mn><mn>7</mn></msup></mrow><mrow><mi>B</mi><mi>a</mi><mi>n</mi><mi>d</mi><mi>W</mi><mi>i</mi><mi>d</mi><mi>t</mi><mi>h</mi></mrow></mfrac><mo>+</mo><mfrac><mrow><mi>D</mi><mi>e</mi><mi>l</mi><mi>a</mi><mi>y</mi><mo stretchy=\"false\">(</mo><mi>μ</mi><mi>s</mi><mo stretchy=\"false\">)</mo></mrow><mn>10</mn></mfrac><mo fence=\"false\">)</mo><mo>×</mo><mn>256</mn></mrow><annotation encoding=\"application/x-tex\">FD=\\Big( \\frac{10^7}{BandWidth}+\\frac{Delay(\\mu s)}{10}  \\Big)\\times 256\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">F</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">D</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.177108em;vertical-align:-0.686em;\"></span><span class=\"mord\"><span class=\"delimsizing size2\">(</span></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.491108em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.05017em;\">B</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">W</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">h</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">7</span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.113em;vertical-align:-0.686em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.427em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"mord\">0</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">D</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">μ</span><span class=\"mord mathdefault\">s</span><span class=\"mclose\">)</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mord\"><span class=\"delimsizing size2\">)</span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span><span class=\"mord\">5</span><span class=\"mord\">6</span></span></span></span></span></p>\n<h6 id=\"which-multicast-addresses-are-used-by-eigrp-to-exchange-the-routing-information\"><a class=\"markdownIt-Anchor\" href=\"#which-multicast-addresses-are-used-by-eigrp-to-exchange-the-routing-information\"></a> Which multicast addresses are used by EIGRP to exchange the routing information?</h6>\n<p>IPv4: <code>224.0.0.10</code></p>\n<p>IPv6: <code>FF02::A</code></p>\n<h4 id=\"ospf\"><a class=\"markdownIt-Anchor\" href=\"#ospf\"></a> OSPF</h4>\n<h6 id=\"what-three-databases-are-maintained-by-ospf-what-information-are-stored-in-these-databases\"><a class=\"markdownIt-Anchor\" href=\"#what-three-databases-are-maintained-by-ospf-what-information-are-stored-in-these-databases\"></a> What three databases are maintained by OSPF? What information are stored in these databases?</h6>\n<p>Three databases: <mark>neighbor database,  topology database and routing database</mark></p>\n<p>See more for: <a href=\"https://blog.csdn.net/qq_44967475/article/details/90901793\">OSPF详解（一）_智慧云工具箱的博客-CSDN博客_ospf详解</a></p>\n<h6 id=\"what-types-of-networks-need-a-dr-designated-router-and-bdr-backup-designated-router-election-whyhow-to-determine-the-dr-and-bdr-in-ospf-network\"><a class=\"markdownIt-Anchor\" href=\"#what-types-of-networks-need-a-dr-designated-router-and-bdr-backup-designated-router-election-whyhow-to-determine-the-dr-and-bdr-in-ospf-network\"></a> What types of networks need a DR (Designated Router) and BDR (Backup Designated Router)  election? Why?How to determine the DR and BDR in OSPF network?</h6>\n<p><mark>Multi-access networks</mark> need a DR and BDR election.</p>\n<p><mark>Point-to-point networks</mark> do <strong>NOT</strong> need a DR or BDR election.</p>\n<p>DR is the <mark>largest</mark> number of the router ID set of a sub-network.</p>\n<p>BDR is the <mark>second largest</mark> number of the router ID set of a sub-network.</p>\n<h6 id=\"what-is-used-as-metric-for-ospf-how-to-calculate-the-metric-for-a-destination-network\"><a class=\"markdownIt-Anchor\" href=\"#what-is-used-as-metric-for-ospf-how-to-calculate-the-metric-for-a-destination-network\"></a> What is used as metric for OSPF? How to calculate the metric for a destination network?</h6>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>O</mi><mi>S</mi><mi>P</mi><mi>F</mi><mtext> </mtext><mi>C</mi><mi>o</mi><mi>s</mi><mi>t</mi><mo>=</mo><mo>∑</mo><mfrac><mrow><mn>1</mn><msup><mn>0</mn><mn>8</mn></msup></mrow><mrow><mi>B</mi><mi>a</mi><mi>n</mi><mi>d</mi><mi>W</mi><mi>i</mi><mi>d</mi><mi>t</mi><mi>h</mi></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\">OSPF\\ Cost=\\sum \\frac{10^8}{BandWidth}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">P</span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">F</span><span class=\"mspace\"> </span><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">C</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">t</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.177108em;vertical-align:-0.686em;\"></span><span class=\"mop op-symbol large-op\" style=\"position:relative;top:-0.000004999999999977245em;\">∑</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.491108em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.05017em;\">B</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">W</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">h</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">8</span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span></p>\n<p>Note that the unit of bandwidth is <mark><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>b</mi><mi>p</mi><mi>s</mi></mrow><annotation encoding=\"application/x-tex\">bps</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\">b</span><span class=\"mord mathdefault\">p</span><span class=\"mord mathdefault\">s</span></span></span></span></mark></p>\n<h6 id=\"which-multicast-addresses-are-used-by-ospf-to-exchange-the-routing-information\"><a class=\"markdownIt-Anchor\" href=\"#which-multicast-addresses-are-used-by-ospf-to-exchange-the-routing-information\"></a> Which multicast addresses are used by OSPF to exchange the routing information?</h6>\n<p>IPv4: <code>224.0.0.5</code> or <code>224.0.0.6</code></p>\n<p>IPv6: <code>FF02::5</code> or <code>FF02::6</code></p>\n<p><img src=\"/2022/04/08/CN-4/image-20211206080928415-1649432396057.png\" alt=\"image-20211206080928415\" loading=\"lazy\"></p>\n<p>To <code>192.168.1.11</code>: Find out <code>192.168.1.0/24</code> in routing table and next-hop is <code>172.16.1.2</code></p>\n<p>To <code>172,16.1.1</code>: Find out <code>172.16.1.0/24</code> in routing table and next-hop is Serial0</p>\n<p>To <code>172.16.2.22</code>: Find out <code>0.0.0.0/0</code> in routing table and next-hop is <code>172.16.1.2</code></p>\n<p>To <code>255.255.255.255</code> drop since it is a broadcast IP therefore there is no next-hop.</p>\n<p><img src=\"/2022/04/08/CN-4/image-20211206080908048-1649432396057.png\" alt=\"image-20211206080908048\" loading=\"lazy\"></p>\n<p>Note that <mark>Successor route</mark> means the best route and <mark>Feasible successor route</mark> means backup route.</p>\n<p>And the <strong>feasible distance</strong> calculation formula is:</p>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>F</mi><mi>D</mi><mo>=</mo><mo fence=\"false\">(</mo><mfrac><mrow><mn>1</mn><msup><mn>0</mn><mn>7</mn></msup></mrow><mrow><mi>B</mi><mi>a</mi><mi>n</mi><mi>d</mi><mi>W</mi><mi>i</mi><mi>d</mi><mi>t</mi><mi>h</mi><mo stretchy=\"false\">(</mo><mi>K</mi><mi>b</mi><mi>p</mi><mi>s</mi><mo stretchy=\"false\">)</mo></mrow></mfrac><mo>+</mo><mfrac><mrow><mi>D</mi><mi>e</mi><mi>l</mi><mi>a</mi><mi>y</mi><mo stretchy=\"false\">(</mo><mi>μ</mi><mi>s</mi><mo stretchy=\"false\">)</mo></mrow><mn>10</mn></mfrac><mo fence=\"false\">)</mo><mo>×</mo><mn>256</mn></mrow><annotation encoding=\"application/x-tex\">FD=\\Big( \\frac{10^7}{BandWidth(Kbps)}+\\frac{Delay(\\mu s)}{10}  \\Big)\\times 256\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">F</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">D</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.427108em;vertical-align:-0.936em;\"></span><span class=\"mord\"><span class=\"delimsizing size2\">(</span></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.491108em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.05017em;\">B</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">W</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">h</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">K</span><span class=\"mord mathdefault\">b</span><span class=\"mord mathdefault\">p</span><span class=\"mord mathdefault\">s</span><span class=\"mclose\">)</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">7</span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.936em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.113em;vertical-align:-0.686em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.427em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"mord\">0</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">D</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">μ</span><span class=\"mord mathdefault\">s</span><span class=\"mclose\">)</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mord\"><span class=\"delimsizing size2\">)</span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span><span class=\"mord\">5</span><span class=\"mord\">6</span></span></span></span></span></p>\n<p>Route I: <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>R</mi><mi>o</mi><mi>u</mi><mi>t</mi><mi>e</mi><mi>r</mi><mn>1</mn><mo>→</mo><mi>R</mi><mi>o</mi><mi>u</mi><mi>t</mi><mi>e</mi><mi>r</mi><mn>2</mn><mo>→</mo><mi>R</mi><mi>o</mi><mi>u</mi><mi>t</mi><mi>e</mi><mi>r</mi><mn>3</mn><mo>→</mo><mn>192.168.33.0</mn><mi mathvariant=\"normal\">/</mi><mn>24</mn></mrow><annotation encoding=\"application/x-tex\">Router1\\to Router2\\to Router3\\to192.168.33.0/24</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">u</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">u</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">u</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord\">3</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mord\">9</span><span class=\"mord\">2</span><span class=\"mord\">.</span><span class=\"mord\">1</span><span class=\"mord\">6</span><span class=\"mord\">8</span><span class=\"mord\">.</span><span class=\"mord\">3</span><span class=\"mord\">3</span><span class=\"mord\">.</span><span class=\"mord\">0</span><span class=\"mord\">/</span><span class=\"mord\">2</span><span class=\"mord\">4</span></span></span></span></p>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>F</mi><msub><mi>D</mi><mn>2</mn></msub><mo>=</mo><mo fence=\"false\">(</mo><mfrac><mrow><mn>1</mn><msup><mn>0</mn><mn>7</mn></msup></mrow><mrow><mn>10</mn><mo>×</mo><mn>1</mn><msup><mn>0</mn><mn>3</mn></msup></mrow></mfrac><mo>+</mo><mfrac><mrow><mn>1000</mn><mo>+</mo><mn>1000</mn><mo>+</mo><mn>100</mn></mrow><mn>10</mn></mfrac><mo fence=\"false\">)</mo><mo>×</mo><mn>256</mn><mo>=</mo><mn>309760</mn></mrow><annotation encoding=\"application/x-tex\">FD_2=\\Big( \\frac{10^7}{10\\times 10^3}+\\frac{1000+1000+100}{10}  \\Big)\\times 256=309760\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">F</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">D</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.260438em;vertical-align:-0.7693300000000001em;\"></span><span class=\"mord\"><span class=\"delimsizing size2\">(</span></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.491108em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.740108em;\"><span style=\"top:-2.9890000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">7</span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7693300000000001em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.00744em;vertical-align:-0.686em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"mord\">0</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\">1</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\">1</span><span class=\"mord\">0</span><span class=\"mord\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mord\"><span class=\"delimsizing size2\">)</span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span><span class=\"mord\">5</span><span class=\"mord\">6</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">3</span><span class=\"mord\">0</span><span class=\"mord\">9</span><span class=\"mord\">7</span><span class=\"mord\">6</span><span class=\"mord\">0</span></span></span></span></span></p>\n<p>Route II: <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>R</mi><mi>o</mi><mi>u</mi><mi>t</mi><mi>e</mi><mi>r</mi><mn>1</mn><mo>→</mo><mi>R</mi><mi>o</mi><mi>u</mi><mi>t</mi><mi>e</mi><mi>r</mi><mn>3</mn><mo>→</mo><mn>192.168.33.0</mn><mi mathvariant=\"normal\">/</mi><mn>24</mn></mrow><annotation encoding=\"application/x-tex\">Router1\\to Router3\\to192.168.33.0/24</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">u</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">u</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord\">3</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mord\">9</span><span class=\"mord\">2</span><span class=\"mord\">.</span><span class=\"mord\">1</span><span class=\"mord\">6</span><span class=\"mord\">8</span><span class=\"mord\">.</span><span class=\"mord\">3</span><span class=\"mord\">3</span><span class=\"mord\">.</span><span class=\"mord\">0</span><span class=\"mord\">/</span><span class=\"mord\">2</span><span class=\"mord\">4</span></span></span></span></p>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>F</mi><msub><mi>D</mi><mn>3</mn></msub><mo>=</mo><mo fence=\"false\">(</mo><mfrac><mrow><mn>1</mn><msup><mn>0</mn><mn>7</mn></msup></mrow><mn>56</mn></mfrac><mo>+</mo><mfrac><mrow><mn>20000</mn><mo>+</mo><mn>100</mn></mrow><mn>10</mn></mfrac><mo fence=\"false\">)</mo><mo>×</mo><mn>256</mn><mo>=</mo><mn>46228845</mn></mrow><annotation encoding=\"application/x-tex\">FD_3=\\Big( \\frac{10^7}{56}+\\frac{20000+100}{10}  \\Big)\\times 256=46228845\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">F</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">D</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.177108em;vertical-align:-0.686em;\"></span><span class=\"mord\"><span class=\"delimsizing size2\">(</span></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.491108em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">5</span><span class=\"mord\">6</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">7</span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.00744em;vertical-align:-0.686em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"mord\">0</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\">1</span><span class=\"mord\">0</span><span class=\"mord\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mord\"><span class=\"delimsizing size2\">)</span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span><span class=\"mord\">5</span><span class=\"mord\">6</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">4</span><span class=\"mord\">6</span><span class=\"mord\">2</span><span class=\"mord\">2</span><span class=\"mord\">8</span><span class=\"mord\">8</span><span class=\"mord\">4</span><span class=\"mord\">5</span></span></span></span></span></p>\n<p>Route III: <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>R</mi><mi>o</mi><mi>u</mi><mi>t</mi><mi>e</mi><mi>r</mi><mn>1</mn><mo>→</mo><mi>R</mi><mi>o</mi><mi>u</mi><mi>t</mi><mi>e</mi><mi>r</mi><mn>4</mn><mo>→</mo><mi>R</mi><mi>o</mi><mi>u</mi><mi>t</mi><mi>e</mi><mi>r</mi><mn>3</mn><mo>→</mo><mn>192.168.33.0</mn><mi mathvariant=\"normal\">/</mi><mn>24</mn></mrow><annotation encoding=\"application/x-tex\">Router1\\to Router4\\to Router3\\to192.168.33.0/24</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">u</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">u</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord\">4</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">u</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord\">3</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mord\">9</span><span class=\"mord\">2</span><span class=\"mord\">.</span><span class=\"mord\">1</span><span class=\"mord\">6</span><span class=\"mord\">8</span><span class=\"mord\">.</span><span class=\"mord\">3</span><span class=\"mord\">3</span><span class=\"mord\">.</span><span class=\"mord\">0</span><span class=\"mord\">/</span><span class=\"mord\">2</span><span class=\"mord\">4</span></span></span></span></p>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>F</mi><msub><mi>D</mi><mn>4</mn></msub><mo>=</mo><mo fence=\"false\">(</mo><mfrac><mrow><mn>1</mn><msup><mn>0</mn><mn>7</mn></msup></mrow><mrow><mn>100</mn><mo>×</mo><mn>1</mn><msup><mn>0</mn><mn>3</mn></msup></mrow></mfrac><mo>+</mo><mfrac><mrow><mn>100</mn><mo>+</mo><mn>100</mn><mo>+</mo><mn>100</mn></mrow><mn>10</mn></mfrac><mo fence=\"false\">)</mo><mo>×</mo><mn>256</mn><mo>=</mo><mn>33280</mn></mrow><annotation encoding=\"application/x-tex\">FD_4=\\Big( \\frac{10^7}{100\\times 10^3}+\\frac{100+100+100}{10}  \\Big)\\times 256=33280\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">F</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">D</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">4</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.260438em;vertical-align:-0.7693300000000001em;\"></span><span class=\"mord\"><span class=\"delimsizing size2\">(</span></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.491108em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.740108em;\"><span style=\"top:-2.9890000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">7</span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7693300000000001em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.00744em;vertical-align:-0.686em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"mord\">0</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\">1</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\">1</span><span class=\"mord\">0</span><span class=\"mord\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mord\"><span class=\"delimsizing size2\">)</span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span><span class=\"mord\">5</span><span class=\"mord\">6</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">3</span><span class=\"mord\">3</span><span class=\"mord\">2</span><span class=\"mord\">8</span><span class=\"mord\">0</span></span></span></span></span></p>\n<p>Since <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>F</mi><msub><mi>D</mi><mn>4</mn></msub></mrow><annotation encoding=\"application/x-tex\">FD_4</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">F</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">D</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">4</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> is the shortest path (easy to compare), route III is called successor route.</p>\n<p>Now let’s calculate feasible successor route, or say, backup route.</p>\n<p>Because <em>Router 4</em> is the successor router, we only need to calculate the RD of <em>Router 2</em> and <em>Router 3</em>. If <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>R</mi><mi>D</mi><mo>&lt;</mo><mi>F</mi><mi>D</mi></mrow><annotation encoding=\"application/x-tex\">RD&lt;FD</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72243em;vertical-align:-0.0391em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">D</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">F</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">D</span></span></span></span>, we can say the route is a feasible successor route.</p>\n<p>Route I: <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>R</mi><mi>o</mi><mi>u</mi><mi>t</mi><mi>e</mi><mi>r</mi><mn>2</mn><mo>→</mo><mi>R</mi><mi>o</mi><mi>u</mi><mi>t</mi><mi>e</mi><mi>r</mi><mn>3</mn><mo>→</mo><mn>192.168.33.0</mn><mi mathvariant=\"normal\">/</mi><mn>24</mn></mrow><annotation encoding=\"application/x-tex\">Router2\\to Router3\\to192.168.33.0/24</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">u</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">u</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord\">3</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mord\">9</span><span class=\"mord\">2</span><span class=\"mord\">.</span><span class=\"mord\">1</span><span class=\"mord\">6</span><span class=\"mord\">8</span><span class=\"mord\">.</span><span class=\"mord\">3</span><span class=\"mord\">3</span><span class=\"mord\">.</span><span class=\"mord\">0</span><span class=\"mord\">/</span><span class=\"mord\">2</span><span class=\"mord\">4</span></span></span></span></p>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>R</mi><msub><mi>D</mi><mn>2</mn></msub><mo>=</mo><mo fence=\"false\">(</mo><mfrac><mrow><mn>1</mn><msup><mn>0</mn><mn>7</mn></msup></mrow><mrow><mn>10</mn><mo>×</mo><mn>1</mn><msup><mn>0</mn><mn>3</mn></msup></mrow></mfrac><mo>+</mo><mfrac><mrow><mn>1000</mn><mo>+</mo><mn>100</mn></mrow><mn>10</mn></mfrac><mo fence=\"false\">)</mo><mo>×</mo><mn>256</mn></mrow><annotation encoding=\"application/x-tex\">RD_2=\\Big( \\frac{10^7}{10\\times 10^3}+\\frac{1000+100}{10}  \\Big)\\times 256\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">D</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.260438em;vertical-align:-0.7693300000000001em;\"></span><span class=\"mord\"><span class=\"delimsizing size2\">(</span></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.491108em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.740108em;\"><span style=\"top:-2.9890000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">7</span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7693300000000001em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.00744em;vertical-align:-0.686em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"mord\">0</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\">1</span><span class=\"mord\">0</span><span class=\"mord\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mord\"><span class=\"delimsizing size2\">)</span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span><span class=\"mord\">5</span><span class=\"mord\">6</span></span></span></span></span></p>\n<p>Route II: <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>R</mi><mi>o</mi><mi>u</mi><mi>t</mi><mi>e</mi><mi>r</mi><mn>3</mn><mo>→</mo><mn>192.168.33.0</mn><mi mathvariant=\"normal\">/</mi><mn>24</mn></mrow><annotation encoding=\"application/x-tex\">Router3\\to192.168.33.0/24</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">u</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord\">3</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mord\">9</span><span class=\"mord\">2</span><span class=\"mord\">.</span><span class=\"mord\">1</span><span class=\"mord\">6</span><span class=\"mord\">8</span><span class=\"mord\">.</span><span class=\"mord\">3</span><span class=\"mord\">3</span><span class=\"mord\">.</span><span class=\"mord\">0</span><span class=\"mord\">/</span><span class=\"mord\">2</span><span class=\"mord\">4</span></span></span></span></p>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>R</mi><msub><mi>D</mi><mn>3</mn></msub><mo>=</mo><mo fence=\"false\">(</mo><mfrac><mrow><mn>1</mn><msup><mn>0</mn><mn>7</mn></msup></mrow><mrow><mn>100</mn><mo>×</mo><mn>1</mn><msup><mn>0</mn><mn>3</mn></msup></mrow></mfrac><mo>+</mo><mfrac><mn>100</mn><mn>10</mn></mfrac><mo fence=\"false\">)</mo><mo>×</mo><mn>256</mn><mspace linebreak=\"newline\"></mspace></mrow><annotation encoding=\"application/x-tex\">RD_3=\\Big( \\frac{10^7}{100\\times 10^3}+\\frac{100}{10}  \\Big)\\times 256\\\\\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">D</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.260438em;vertical-align:-0.7693300000000001em;\"></span><span class=\"mord\"><span class=\"delimsizing size2\">(</span></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.491108em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.740108em;\"><span style=\"top:-2.9890000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">7</span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7693300000000001em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.00744em;vertical-align:-0.686em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"mord\">0</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"mord\">0</span><span class=\"mord\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mord\"><span class=\"delimsizing size2\">)</span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span><span class=\"mord\">5</span><span class=\"mord\">6</span></span><span class=\"mspace newline\"></span></span></span></span></p>\n<p>Since <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>R</mi><msub><mi>D</mi><mn>3</mn></msub></mrow><annotation encoding=\"application/x-tex\">RD_3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">D</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> is faster than <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>R</mi><msub><mi>D</mi><mn>2</mn></msub></mrow><annotation encoding=\"application/x-tex\">RD_2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">D</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>, Route II is called feasible successor route.</p>\n<p><img src=\"/2022/04/08/CN-4/image-20211206080942577-1649432396057.png\" alt=\"image-20211206080942577\" loading=\"lazy\"></p>\n<p>Q1:</p>\n<p><code>192.168.11.0/24</code> sub-network and <code>192.168.44.0/24</code> sub-network require DR/BDR election.</p>\n<p>Q2:</p>\n<p>Use <mark>Router ID</mark> only to choose DR and BDR.</p>\n<p>The IP of Router1 is <code>192.168.11.1</code></p>\n<p>The IP of Router2 is <code>192.168.11.2</code></p>\n<p>The IP of Router3 is <code>192.168.11.3</code></p>\n<p>Since the IP of Router 3 is the largest, DR is Router 3.</p>\n<p>Since the IP of Router 2 is the second largest, BDR is Router 2.</p>\n<p>Q3:</p>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>M</mi><mi>e</mi><mi>t</mi><mi>r</mi><mi>i</mi><mi>c</mi><mi>s</mi><mo>=</mo><mfrac><mrow><mn>1</mn><msup><mn>0</mn><mn>8</mn></msup></mrow><mrow><mn>100</mn><mo>×</mo><mn>1</mn><msup><mn>0</mn><mn>6</mn></msup></mrow></mfrac><mo>+</mo><mfrac><mrow><mn>1</mn><msup><mn>0</mn><mn>8</mn></msup></mrow><mrow><mn>64</mn><mo>×</mo><mn>1</mn><msup><mn>0</mn><mn>3</mn></msup></mrow></mfrac><mo>+</mo><mfrac><mrow><mn>1</mn><msup><mn>0</mn><mn>8</mn></msup></mrow><mrow><mn>100</mn><mo>×</mo><mn>1</mn><msup><mn>0</mn><mn>6</mn></msup></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\">Metrics=\\frac{10^8}{100\\times10^6}+\\frac{10^8}{64\\times 10^3}+\\frac{10^8}{100\\times10^6}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">M</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">c</span><span class=\"mord mathdefault\">s</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.260438em;vertical-align:-0.7693300000000001em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.491108em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.740108em;\"><span style=\"top:-2.9890000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">6</span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">8</span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7693300000000001em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.260438em;vertical-align:-0.7693300000000001em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.491108em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">6</span><span class=\"mord\">4</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.740108em;\"><span style=\"top:-2.9890000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">8</span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7693300000000001em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.260438em;vertical-align:-0.7693300000000001em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.491108em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.740108em;\"><span style=\"top:-2.9890000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">6</span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">8</span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7693300000000001em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span></p>\n<p>Note that the unit of bandwidth is <mark><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>b</mi><mi>p</mi><mi>s</mi></mrow><annotation encoding=\"application/x-tex\">bps</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\">b</span><span class=\"mord mathdefault\">p</span><span class=\"mord mathdefault\">s</span></span></span></span></mark>, NOT <em>Kbps</em>!!!</p>\n<hr>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>E</mi><mi>N</mi><mi>D</mi></mrow><annotation encoding=\"application/x-tex\">END\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">N</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">D</span></span></span></span></span></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"layer-3-routing-protocols\"><a class=\"markdownIt-Anchor\" href=\"#layer-3-routing-protocols\"></a> Layer 3, Routing Protocols</h2>\n<h4 id=\"routing-protocols\"><a class=\"markdownIt-Anchor\" href=\"#routing-protocols\"></a> Routing protocols</h4>\n<h6 id=\"what-are-the-differences-between-interior-gateway-protocol-igp-and-exterior-gateway-protocol-egp-list-some-example-of-them\"><a class=\"markdownIt-Anchor\" href=\"#what-are-the-differences-between-interior-gateway-protocol-igp-and-exterior-gateway-protocol-egp-list-some-example-of-them\"></a> What are the differences between Interior Gateway Protocol (IGP) and Exterior Gateway Protocol  (EGP)? List some example of them.</h6>\n<p>​\t\tInterior Gateway Protocols (IGP) route data <mark>in</mark> an autonomous system. Like EIGRP, OSPF.</p>\n<p>​\t\tExterior Gateway Protocols (EGP) route data <mark>between</mark> autonomous system. Like BGP.</p>\n<h6 id=\"what-algorithm-is-used-by-distance-vector-routing-protocols\"><a class=\"markdownIt-Anchor\" href=\"#what-algorithm-is-used-by-distance-vector-routing-protocols\"></a> What algorithm is used by distance vector routing protocols?</h6>\n<p>​\t\tDistance vector routing protocol algorithm: <mark>Bellman-Ford algorithm</mark></p>\n<p>​\t\tLink-state routing protocol algorithm: <mark>Dijkstra algorithm</mark></p>\n<h6 id=\"what-are-the-features-of-distance-vector-routing-protocols\"><a class=\"markdownIt-Anchor\" href=\"#what-are-the-features-of-distance-vector-routing-protocols\"></a> What are the features of distance vector routing protocols?</h6>\n<p>​\t\t<mark>Features:</mark> Periodic updates, send entire routing table to directly connected routers, do not know the  exact network topology.</p>\n<p>When the topology changes, routing table updates must occur. It passes periodic copies of a routing  table from router to router. Distance-vector algorithms call for each router to send its entire routing  table to each of its directly connected neighboring routers.</p>\n<p>​\t\tThe algorithm eventually accumulates network distances so that it can maintain a database of  network topology information.</p>\n<p>​\t\tDistance-vector algorithms do not know the exact topology of an internetwork.</p>\n<h6 id=\"what-algorithm-is-used-by-link-state-routing-protocols\"><a class=\"markdownIt-Anchor\" href=\"#what-algorithm-is-used-by-link-state-routing-protocols\"></a> What algorithm is used by link-state routing protocols?</h6>\n<p>​\t\tDistance vector routing protocol algorithm: <mark>Bellman-Ford algorithm</mark></p>\n<p>​\t\tLink-state routing protocol algorithm: <mark>Dijkstra algorithm</mark></p>\n<h6 id=\"what-are-the-features-of-link-state-routing-protocols\"><a class=\"markdownIt-Anchor\" href=\"#what-are-the-features-of-link-state-routing-protocols\"></a> What are the features of link-state routing protocols?</h6>\n<p>​\t\t<mark>Features:</mark> Trigger updates, send partial routing to all routers on the network, know the exact  network topology.</p>\n<p>​\t\tIt exchanges LSAs (Link-state advertisements) to collect the routing information between routers  starting with directly connected networks.</p>\n<p>​\t\tEach router in parallel with the others constructs this logical topology as a tree, with itself as the root,  consisting of all possible paths to each network in the link-state protocol internetwork.</p>\n<p>​\t\tSPF algorithm calculation is performed on the database resulting in the SPF tree. A list of the known  paths and interfaces is stored in the routing tables.</p>\n<p>​\t\tA link-state routing algorithm maintains full knowledge of distant routers and how they interconnect.</p>\n<h4 id=\"eigrp\"><a class=\"markdownIt-Anchor\" href=\"#eigrp\"></a> EIGRP</h4>\n<h6 id=\"what-three-tables-are-maintained-by-eigrp-for-each-routed-protocol-what-information-are-stored-in-these-tables-which-tables-does-eigrp-store-the-primary-route-successor-to-the-destination-which-tables-does-eigrp-store-the-backup-route-feasible-successor-to-the-destination\"><a class=\"markdownIt-Anchor\" href=\"#what-three-tables-are-maintained-by-eigrp-for-each-routed-protocol-what-information-are-stored-in-these-tables-which-tables-does-eigrp-store-the-primary-route-successor-to-the-destination-which-tables-does-eigrp-store-the-backup-route-feasible-successor-to-the-destination\"></a> What three tables are maintained by EIGRP for each routed protocol? What information are stored  in these tables? Which tables does EIGRP store the primary route (successor) to the destination?  Which tables does EIGRP store the backup route (feasible successor) to the destination?</h6>\n<p>Three tables: <mark>neighbor table,  topology table and routing table</mark></p>\n<p>Both topology table and routing table stored the successor route (primary route).</p>\n<p>Topology table stored the feasible successor route (backup route).</p>\n<p>See more for: <a href=\"https://www.jianshu.com/p/5ec0e020d97a\">EIGRP路由协议 - 简书 (jianshu.com)</a></p>\n<h6 id=\"what-are-the-operations-of-dual-how-can-eigrp-determine-the-feasible-distance-reported-distance-successor-and-feasible-successor-for-a-destination-network\"><a class=\"markdownIt-Anchor\" href=\"#what-are-the-operations-of-dual-how-can-eigrp-determine-the-feasible-distance-reported-distance-successor-and-feasible-successor-for-a-destination-network\"></a> What are the operations of DUAL? How can EIGRP determine the feasible distance, reported  distance, successor and feasible successor for a destination network?</h6>\n<p>DUAL (Diffusing Update Algorithm) is the method to guarantee the successor distance and feasible successor distance of a non-circle topology network.</p>\n<p>FD (Feasible Distance): the local route’s metric of the <mark>best route</mark> to reach a specific network.</p>\n<p>RD (Reported Distance): the metric advertised by the neighbor router for a specific route.</p>\n<p>Successor for a destination network: the next hop on the primary route with the shortest feasible distance to the destination.</p>\n<p>Feasible successor for a destination network: When a destination network is removed from the EIGRP topology, a router initiates a route querying process in an attempt to locate a different route to that destination. As it is preferable to avoid this querying process, EIGRP routers will opportunistically store backup routes, known as <em>feasible successors</em>, when certain requirements are met.</p>\n<h6 id=\"what-are-used-as-metric-for-eigrp-how-to-calculate-the-metric-for-a-destination-network\"><a class=\"markdownIt-Anchor\" href=\"#what-are-used-as-metric-for-eigrp-how-to-calculate-the-metric-for-a-destination-network\"></a> What are used as metric for EIGRP? How to calculate the metric for a destination network?</h6>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>M</mi><mi>e</mi><mi>t</mi><mi>r</mi><mi>i</mi><mi>c</mi><mo>=</mo><mi>B</mi><mi>a</mi><mi>n</mi><mi>d</mi><mi>w</mi><mi>i</mi><mi>d</mi><mi>t</mi><mi>h</mi><mo>+</mo><mi>D</mi><mi>e</mi><mi>l</mi><mi>a</mi><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">Metric = Bandwidth + Delay\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">M</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">c</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.77777em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05017em;\">B</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\" style=\"margin-right:0.02691em;\">w</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">h</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">D</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span></span></span></span></span></p>\n<p>Note that the unit of bandwidth is <mark><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>K</mi><mi>b</mi><mi>p</mi><mi>s</mi></mrow><annotation encoding=\"application/x-tex\">Kbps</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">K</span><span class=\"mord mathdefault\">b</span><span class=\"mord mathdefault\">p</span><span class=\"mord mathdefault\">s</span></span></span></span></mark> and the unit of delay is <mark><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>μ</mi><mi>s</mi></mrow><annotation encoding=\"application/x-tex\">\\mu s</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\">μ</span><span class=\"mord mathdefault\">s</span></span></span></span></mark></p>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>F</mi><mi>D</mi><mo>=</mo><mo fence=\"false\">(</mo><mfrac><mrow><mn>1</mn><msup><mn>0</mn><mn>7</mn></msup></mrow><mrow><mi>B</mi><mi>a</mi><mi>n</mi><mi>d</mi><mi>W</mi><mi>i</mi><mi>d</mi><mi>t</mi><mi>h</mi></mrow></mfrac><mo>+</mo><mfrac><mrow><mi>D</mi><mi>e</mi><mi>l</mi><mi>a</mi><mi>y</mi><mo stretchy=\"false\">(</mo><mi>μ</mi><mi>s</mi><mo stretchy=\"false\">)</mo></mrow><mn>10</mn></mfrac><mo fence=\"false\">)</mo><mo>×</mo><mn>256</mn></mrow><annotation encoding=\"application/x-tex\">FD=\\Big( \\frac{10^7}{BandWidth}+\\frac{Delay(\\mu s)}{10}  \\Big)\\times 256\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">F</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">D</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.177108em;vertical-align:-0.686em;\"></span><span class=\"mord\"><span class=\"delimsizing size2\">(</span></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.491108em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.05017em;\">B</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">W</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">h</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">7</span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.113em;vertical-align:-0.686em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.427em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"mord\">0</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">D</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">μ</span><span class=\"mord mathdefault\">s</span><span class=\"mclose\">)</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mord\"><span class=\"delimsizing size2\">)</span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span><span class=\"mord\">5</span><span class=\"mord\">6</span></span></span></span></span></p>\n<h6 id=\"which-multicast-addresses-are-used-by-eigrp-to-exchange-the-routing-information\"><a class=\"markdownIt-Anchor\" href=\"#which-multicast-addresses-are-used-by-eigrp-to-exchange-the-routing-information\"></a> Which multicast addresses are used by EIGRP to exchange the routing information?</h6>\n<p>IPv4: <code>224.0.0.10</code></p>\n<p>IPv6: <code>FF02::A</code></p>\n<h4 id=\"ospf\"><a class=\"markdownIt-Anchor\" href=\"#ospf\"></a> OSPF</h4>\n<h6 id=\"what-three-databases-are-maintained-by-ospf-what-information-are-stored-in-these-databases\"><a class=\"markdownIt-Anchor\" href=\"#what-three-databases-are-maintained-by-ospf-what-information-are-stored-in-these-databases\"></a> What three databases are maintained by OSPF? What information are stored in these databases?</h6>\n<p>Three databases: <mark>neighbor database,  topology database and routing database</mark></p>\n<p>See more for: <a href=\"https://blog.csdn.net/qq_44967475/article/details/90901793\">OSPF详解（一）_智慧云工具箱的博客-CSDN博客_ospf详解</a></p>\n<h6 id=\"what-types-of-networks-need-a-dr-designated-router-and-bdr-backup-designated-router-election-whyhow-to-determine-the-dr-and-bdr-in-ospf-network\"><a class=\"markdownIt-Anchor\" href=\"#what-types-of-networks-need-a-dr-designated-router-and-bdr-backup-designated-router-election-whyhow-to-determine-the-dr-and-bdr-in-ospf-network\"></a> What types of networks need a DR (Designated Router) and BDR (Backup Designated Router)  election? Why?How to determine the DR and BDR in OSPF network?</h6>\n<p><mark>Multi-access networks</mark> need a DR and BDR election.</p>\n<p><mark>Point-to-point networks</mark> do <strong>NOT</strong> need a DR or BDR election.</p>\n<p>DR is the <mark>largest</mark> number of the router ID set of a sub-network.</p>\n<p>BDR is the <mark>second largest</mark> number of the router ID set of a sub-network.</p>\n<h6 id=\"what-is-used-as-metric-for-ospf-how-to-calculate-the-metric-for-a-destination-network\"><a class=\"markdownIt-Anchor\" href=\"#what-is-used-as-metric-for-ospf-how-to-calculate-the-metric-for-a-destination-network\"></a> What is used as metric for OSPF? How to calculate the metric for a destination network?</h6>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>O</mi><mi>S</mi><mi>P</mi><mi>F</mi><mtext> </mtext><mi>C</mi><mi>o</mi><mi>s</mi><mi>t</mi><mo>=</mo><mo>∑</mo><mfrac><mrow><mn>1</mn><msup><mn>0</mn><mn>8</mn></msup></mrow><mrow><mi>B</mi><mi>a</mi><mi>n</mi><mi>d</mi><mi>W</mi><mi>i</mi><mi>d</mi><mi>t</mi><mi>h</mi></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\">OSPF\\ Cost=\\sum \\frac{10^8}{BandWidth}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">P</span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">F</span><span class=\"mspace\"> </span><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">C</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">t</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.177108em;vertical-align:-0.686em;\"></span><span class=\"mop op-symbol large-op\" style=\"position:relative;top:-0.000004999999999977245em;\">∑</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.491108em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.05017em;\">B</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">W</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">h</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">8</span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span></p>\n<p>Note that the unit of bandwidth is <mark><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>b</mi><mi>p</mi><mi>s</mi></mrow><annotation encoding=\"application/x-tex\">bps</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\">b</span><span class=\"mord mathdefault\">p</span><span class=\"mord mathdefault\">s</span></span></span></span></mark></p>\n<h6 id=\"which-multicast-addresses-are-used-by-ospf-to-exchange-the-routing-information\"><a class=\"markdownIt-Anchor\" href=\"#which-multicast-addresses-are-used-by-ospf-to-exchange-the-routing-information\"></a> Which multicast addresses are used by OSPF to exchange the routing information?</h6>\n<p>IPv4: <code>224.0.0.5</code> or <code>224.0.0.6</code></p>\n<p>IPv6: <code>FF02::5</code> or <code>FF02::6</code></p>\n<p><img src=\"/2022/04/08/CN-4/image-20211206080928415-1649432396057.png\" alt=\"image-20211206080928415\"></p>\n<p>To <code>192.168.1.11</code>: Find out <code>192.168.1.0/24</code> in routing table and next-hop is <code>172.16.1.2</code></p>\n<p>To <code>172,16.1.1</code>: Find out <code>172.16.1.0/24</code> in routing table and next-hop is Serial0</p>\n<p>To <code>172.16.2.22</code>: Find out <code>0.0.0.0/0</code> in routing table and next-hop is <code>172.16.1.2</code></p>\n<p>To <code>255.255.255.255</code> drop since it is a broadcast IP therefore there is no next-hop.</p>\n<p><img src=\"/2022/04/08/CN-4/image-20211206080908048-1649432396057.png\" alt=\"image-20211206080908048\"></p>\n<p>Note that <mark>Successor route</mark> means the best route and <mark>Feasible successor route</mark> means backup route.</p>\n<p>And the <strong>feasible distance</strong> calculation formula is:</p>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>F</mi><mi>D</mi><mo>=</mo><mo fence=\"false\">(</mo><mfrac><mrow><mn>1</mn><msup><mn>0</mn><mn>7</mn></msup></mrow><mrow><mi>B</mi><mi>a</mi><mi>n</mi><mi>d</mi><mi>W</mi><mi>i</mi><mi>d</mi><mi>t</mi><mi>h</mi><mo stretchy=\"false\">(</mo><mi>K</mi><mi>b</mi><mi>p</mi><mi>s</mi><mo stretchy=\"false\">)</mo></mrow></mfrac><mo>+</mo><mfrac><mrow><mi>D</mi><mi>e</mi><mi>l</mi><mi>a</mi><mi>y</mi><mo stretchy=\"false\">(</mo><mi>μ</mi><mi>s</mi><mo stretchy=\"false\">)</mo></mrow><mn>10</mn></mfrac><mo fence=\"false\">)</mo><mo>×</mo><mn>256</mn></mrow><annotation encoding=\"application/x-tex\">FD=\\Big( \\frac{10^7}{BandWidth(Kbps)}+\\frac{Delay(\\mu s)}{10}  \\Big)\\times 256\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">F</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">D</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.427108em;vertical-align:-0.936em;\"></span><span class=\"mord\"><span class=\"delimsizing size2\">(</span></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.491108em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.05017em;\">B</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">W</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">h</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">K</span><span class=\"mord mathdefault\">b</span><span class=\"mord mathdefault\">p</span><span class=\"mord mathdefault\">s</span><span class=\"mclose\">)</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">7</span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.936em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.113em;vertical-align:-0.686em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.427em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"mord\">0</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">D</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">μ</span><span class=\"mord mathdefault\">s</span><span class=\"mclose\">)</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mord\"><span class=\"delimsizing size2\">)</span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span><span class=\"mord\">5</span><span class=\"mord\">6</span></span></span></span></span></p>\n<p>Route I: <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>R</mi><mi>o</mi><mi>u</mi><mi>t</mi><mi>e</mi><mi>r</mi><mn>1</mn><mo>→</mo><mi>R</mi><mi>o</mi><mi>u</mi><mi>t</mi><mi>e</mi><mi>r</mi><mn>2</mn><mo>→</mo><mi>R</mi><mi>o</mi><mi>u</mi><mi>t</mi><mi>e</mi><mi>r</mi><mn>3</mn><mo>→</mo><mn>192.168.33.0</mn><mi mathvariant=\"normal\">/</mi><mn>24</mn></mrow><annotation encoding=\"application/x-tex\">Router1\\to Router2\\to Router3\\to192.168.33.0/24</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">u</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">u</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">u</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord\">3</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mord\">9</span><span class=\"mord\">2</span><span class=\"mord\">.</span><span class=\"mord\">1</span><span class=\"mord\">6</span><span class=\"mord\">8</span><span class=\"mord\">.</span><span class=\"mord\">3</span><span class=\"mord\">3</span><span class=\"mord\">.</span><span class=\"mord\">0</span><span class=\"mord\">/</span><span class=\"mord\">2</span><span class=\"mord\">4</span></span></span></span></p>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>F</mi><msub><mi>D</mi><mn>2</mn></msub><mo>=</mo><mo fence=\"false\">(</mo><mfrac><mrow><mn>1</mn><msup><mn>0</mn><mn>7</mn></msup></mrow><mrow><mn>10</mn><mo>×</mo><mn>1</mn><msup><mn>0</mn><mn>3</mn></msup></mrow></mfrac><mo>+</mo><mfrac><mrow><mn>1000</mn><mo>+</mo><mn>1000</mn><mo>+</mo><mn>100</mn></mrow><mn>10</mn></mfrac><mo fence=\"false\">)</mo><mo>×</mo><mn>256</mn><mo>=</mo><mn>309760</mn></mrow><annotation encoding=\"application/x-tex\">FD_2=\\Big( \\frac{10^7}{10\\times 10^3}+\\frac{1000+1000+100}{10}  \\Big)\\times 256=309760\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">F</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">D</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.260438em;vertical-align:-0.7693300000000001em;\"></span><span class=\"mord\"><span class=\"delimsizing size2\">(</span></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.491108em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.740108em;\"><span style=\"top:-2.9890000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">7</span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7693300000000001em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.00744em;vertical-align:-0.686em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"mord\">0</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\">1</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\">1</span><span class=\"mord\">0</span><span class=\"mord\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mord\"><span class=\"delimsizing size2\">)</span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span><span class=\"mord\">5</span><span class=\"mord\">6</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">3</span><span class=\"mord\">0</span><span class=\"mord\">9</span><span class=\"mord\">7</span><span class=\"mord\">6</span><span class=\"mord\">0</span></span></span></span></span></p>\n<p>Route II: <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>R</mi><mi>o</mi><mi>u</mi><mi>t</mi><mi>e</mi><mi>r</mi><mn>1</mn><mo>→</mo><mi>R</mi><mi>o</mi><mi>u</mi><mi>t</mi><mi>e</mi><mi>r</mi><mn>3</mn><mo>→</mo><mn>192.168.33.0</mn><mi mathvariant=\"normal\">/</mi><mn>24</mn></mrow><annotation encoding=\"application/x-tex\">Router1\\to Router3\\to192.168.33.0/24</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">u</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">u</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord\">3</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mord\">9</span><span class=\"mord\">2</span><span class=\"mord\">.</span><span class=\"mord\">1</span><span class=\"mord\">6</span><span class=\"mord\">8</span><span class=\"mord\">.</span><span class=\"mord\">3</span><span class=\"mord\">3</span><span class=\"mord\">.</span><span class=\"mord\">0</span><span class=\"mord\">/</span><span class=\"mord\">2</span><span class=\"mord\">4</span></span></span></span></p>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>F</mi><msub><mi>D</mi><mn>3</mn></msub><mo>=</mo><mo fence=\"false\">(</mo><mfrac><mrow><mn>1</mn><msup><mn>0</mn><mn>7</mn></msup></mrow><mn>56</mn></mfrac><mo>+</mo><mfrac><mrow><mn>20000</mn><mo>+</mo><mn>100</mn></mrow><mn>10</mn></mfrac><mo fence=\"false\">)</mo><mo>×</mo><mn>256</mn><mo>=</mo><mn>46228845</mn></mrow><annotation encoding=\"application/x-tex\">FD_3=\\Big( \\frac{10^7}{56}+\\frac{20000+100}{10}  \\Big)\\times 256=46228845\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">F</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">D</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.177108em;vertical-align:-0.686em;\"></span><span class=\"mord\"><span class=\"delimsizing size2\">(</span></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.491108em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">5</span><span class=\"mord\">6</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">7</span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.00744em;vertical-align:-0.686em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"mord\">0</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\">1</span><span class=\"mord\">0</span><span class=\"mord\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mord\"><span class=\"delimsizing size2\">)</span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span><span class=\"mord\">5</span><span class=\"mord\">6</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">4</span><span class=\"mord\">6</span><span class=\"mord\">2</span><span class=\"mord\">2</span><span class=\"mord\">8</span><span class=\"mord\">8</span><span class=\"mord\">4</span><span class=\"mord\">5</span></span></span></span></span></p>\n<p>Route III: <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>R</mi><mi>o</mi><mi>u</mi><mi>t</mi><mi>e</mi><mi>r</mi><mn>1</mn><mo>→</mo><mi>R</mi><mi>o</mi><mi>u</mi><mi>t</mi><mi>e</mi><mi>r</mi><mn>4</mn><mo>→</mo><mi>R</mi><mi>o</mi><mi>u</mi><mi>t</mi><mi>e</mi><mi>r</mi><mn>3</mn><mo>→</mo><mn>192.168.33.0</mn><mi mathvariant=\"normal\">/</mi><mn>24</mn></mrow><annotation encoding=\"application/x-tex\">Router1\\to Router4\\to Router3\\to192.168.33.0/24</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">u</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">u</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord\">4</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">u</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord\">3</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mord\">9</span><span class=\"mord\">2</span><span class=\"mord\">.</span><span class=\"mord\">1</span><span class=\"mord\">6</span><span class=\"mord\">8</span><span class=\"mord\">.</span><span class=\"mord\">3</span><span class=\"mord\">3</span><span class=\"mord\">.</span><span class=\"mord\">0</span><span class=\"mord\">/</span><span class=\"mord\">2</span><span class=\"mord\">4</span></span></span></span></p>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>F</mi><msub><mi>D</mi><mn>4</mn></msub><mo>=</mo><mo fence=\"false\">(</mo><mfrac><mrow><mn>1</mn><msup><mn>0</mn><mn>7</mn></msup></mrow><mrow><mn>100</mn><mo>×</mo><mn>1</mn><msup><mn>0</mn><mn>3</mn></msup></mrow></mfrac><mo>+</mo><mfrac><mrow><mn>100</mn><mo>+</mo><mn>100</mn><mo>+</mo><mn>100</mn></mrow><mn>10</mn></mfrac><mo fence=\"false\">)</mo><mo>×</mo><mn>256</mn><mo>=</mo><mn>33280</mn></mrow><annotation encoding=\"application/x-tex\">FD_4=\\Big( \\frac{10^7}{100\\times 10^3}+\\frac{100+100+100}{10}  \\Big)\\times 256=33280\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">F</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">D</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">4</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.260438em;vertical-align:-0.7693300000000001em;\"></span><span class=\"mord\"><span class=\"delimsizing size2\">(</span></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.491108em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.740108em;\"><span style=\"top:-2.9890000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">7</span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7693300000000001em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.00744em;vertical-align:-0.686em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"mord\">0</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\">1</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\">1</span><span class=\"mord\">0</span><span class=\"mord\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mord\"><span class=\"delimsizing size2\">)</span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span><span class=\"mord\">5</span><span class=\"mord\">6</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">3</span><span class=\"mord\">3</span><span class=\"mord\">2</span><span class=\"mord\">8</span><span class=\"mord\">0</span></span></span></span></span></p>\n<p>Since <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>F</mi><msub><mi>D</mi><mn>4</mn></msub></mrow><annotation encoding=\"application/x-tex\">FD_4</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">F</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">D</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">4</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> is the shortest path (easy to compare), route III is called successor route.</p>\n<p>Now let’s calculate feasible successor route, or say, backup route.</p>\n<p>Because <em>Router 4</em> is the successor router, we only need to calculate the RD of <em>Router 2</em> and <em>Router 3</em>. If <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>R</mi><mi>D</mi><mo>&lt;</mo><mi>F</mi><mi>D</mi></mrow><annotation encoding=\"application/x-tex\">RD&lt;FD</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72243em;vertical-align:-0.0391em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">D</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">F</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">D</span></span></span></span>, we can say the route is a feasible successor route.</p>\n<p>Route I: <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>R</mi><mi>o</mi><mi>u</mi><mi>t</mi><mi>e</mi><mi>r</mi><mn>2</mn><mo>→</mo><mi>R</mi><mi>o</mi><mi>u</mi><mi>t</mi><mi>e</mi><mi>r</mi><mn>3</mn><mo>→</mo><mn>192.168.33.0</mn><mi mathvariant=\"normal\">/</mi><mn>24</mn></mrow><annotation encoding=\"application/x-tex\">Router2\\to Router3\\to192.168.33.0/24</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">u</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">u</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord\">3</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mord\">9</span><span class=\"mord\">2</span><span class=\"mord\">.</span><span class=\"mord\">1</span><span class=\"mord\">6</span><span class=\"mord\">8</span><span class=\"mord\">.</span><span class=\"mord\">3</span><span class=\"mord\">3</span><span class=\"mord\">.</span><span class=\"mord\">0</span><span class=\"mord\">/</span><span class=\"mord\">2</span><span class=\"mord\">4</span></span></span></span></p>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>R</mi><msub><mi>D</mi><mn>2</mn></msub><mo>=</mo><mo fence=\"false\">(</mo><mfrac><mrow><mn>1</mn><msup><mn>0</mn><mn>7</mn></msup></mrow><mrow><mn>10</mn><mo>×</mo><mn>1</mn><msup><mn>0</mn><mn>3</mn></msup></mrow></mfrac><mo>+</mo><mfrac><mrow><mn>1000</mn><mo>+</mo><mn>100</mn></mrow><mn>10</mn></mfrac><mo fence=\"false\">)</mo><mo>×</mo><mn>256</mn></mrow><annotation encoding=\"application/x-tex\">RD_2=\\Big( \\frac{10^7}{10\\times 10^3}+\\frac{1000+100}{10}  \\Big)\\times 256\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">D</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.260438em;vertical-align:-0.7693300000000001em;\"></span><span class=\"mord\"><span class=\"delimsizing size2\">(</span></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.491108em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.740108em;\"><span style=\"top:-2.9890000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">7</span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7693300000000001em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.00744em;vertical-align:-0.686em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"mord\">0</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\">1</span><span class=\"mord\">0</span><span class=\"mord\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mord\"><span class=\"delimsizing size2\">)</span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span><span class=\"mord\">5</span><span class=\"mord\">6</span></span></span></span></span></p>\n<p>Route II: <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>R</mi><mi>o</mi><mi>u</mi><mi>t</mi><mi>e</mi><mi>r</mi><mn>3</mn><mo>→</mo><mn>192.168.33.0</mn><mi mathvariant=\"normal\">/</mi><mn>24</mn></mrow><annotation encoding=\"application/x-tex\">Router3\\to192.168.33.0/24</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">u</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord\">3</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mord\">9</span><span class=\"mord\">2</span><span class=\"mord\">.</span><span class=\"mord\">1</span><span class=\"mord\">6</span><span class=\"mord\">8</span><span class=\"mord\">.</span><span class=\"mord\">3</span><span class=\"mord\">3</span><span class=\"mord\">.</span><span class=\"mord\">0</span><span class=\"mord\">/</span><span class=\"mord\">2</span><span class=\"mord\">4</span></span></span></span></p>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>R</mi><msub><mi>D</mi><mn>3</mn></msub><mo>=</mo><mo fence=\"false\">(</mo><mfrac><mrow><mn>1</mn><msup><mn>0</mn><mn>7</mn></msup></mrow><mrow><mn>100</mn><mo>×</mo><mn>1</mn><msup><mn>0</mn><mn>3</mn></msup></mrow></mfrac><mo>+</mo><mfrac><mn>100</mn><mn>10</mn></mfrac><mo fence=\"false\">)</mo><mo>×</mo><mn>256</mn><mspace linebreak=\"newline\"></mspace></mrow><annotation encoding=\"application/x-tex\">RD_3=\\Big( \\frac{10^7}{100\\times 10^3}+\\frac{100}{10}  \\Big)\\times 256\\\\\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">D</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.260438em;vertical-align:-0.7693300000000001em;\"></span><span class=\"mord\"><span class=\"delimsizing size2\">(</span></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.491108em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.740108em;\"><span style=\"top:-2.9890000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">7</span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7693300000000001em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.00744em;vertical-align:-0.686em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"mord\">0</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"mord\">0</span><span class=\"mord\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mord\"><span class=\"delimsizing size2\">)</span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span><span class=\"mord\">5</span><span class=\"mord\">6</span></span><span class=\"mspace newline\"></span></span></span></span></p>\n<p>Since <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>R</mi><msub><mi>D</mi><mn>3</mn></msub></mrow><annotation encoding=\"application/x-tex\">RD_3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">D</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> is faster than <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>R</mi><msub><mi>D</mi><mn>2</mn></msub></mrow><annotation encoding=\"application/x-tex\">RD_2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">D</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>, Route II is called feasible successor route.</p>\n<p><img src=\"/2022/04/08/CN-4/image-20211206080942577-1649432396057.png\" alt=\"image-20211206080942577\"></p>\n<p>Q1:</p>\n<p><code>192.168.11.0/24</code> sub-network and <code>192.168.44.0/24</code> sub-network require DR/BDR election.</p>\n<p>Q2:</p>\n<p>Use <mark>Router ID</mark> only to choose DR and BDR.</p>\n<p>The IP of Router1 is <code>192.168.11.1</code></p>\n<p>The IP of Router2 is <code>192.168.11.2</code></p>\n<p>The IP of Router3 is <code>192.168.11.3</code></p>\n<p>Since the IP of Router 3 is the largest, DR is Router 3.</p>\n<p>Since the IP of Router 2 is the second largest, BDR is Router 2.</p>\n<p>Q3:</p>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>M</mi><mi>e</mi><mi>t</mi><mi>r</mi><mi>i</mi><mi>c</mi><mi>s</mi><mo>=</mo><mfrac><mrow><mn>1</mn><msup><mn>0</mn><mn>8</mn></msup></mrow><mrow><mn>100</mn><mo>×</mo><mn>1</mn><msup><mn>0</mn><mn>6</mn></msup></mrow></mfrac><mo>+</mo><mfrac><mrow><mn>1</mn><msup><mn>0</mn><mn>8</mn></msup></mrow><mrow><mn>64</mn><mo>×</mo><mn>1</mn><msup><mn>0</mn><mn>3</mn></msup></mrow></mfrac><mo>+</mo><mfrac><mrow><mn>1</mn><msup><mn>0</mn><mn>8</mn></msup></mrow><mrow><mn>100</mn><mo>×</mo><mn>1</mn><msup><mn>0</mn><mn>6</mn></msup></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\">Metrics=\\frac{10^8}{100\\times10^6}+\\frac{10^8}{64\\times 10^3}+\\frac{10^8}{100\\times10^6}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">M</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">c</span><span class=\"mord mathdefault\">s</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.260438em;vertical-align:-0.7693300000000001em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.491108em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.740108em;\"><span style=\"top:-2.9890000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">6</span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">8</span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7693300000000001em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.260438em;vertical-align:-0.7693300000000001em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.491108em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">6</span><span class=\"mord\">4</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.740108em;\"><span style=\"top:-2.9890000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">8</span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7693300000000001em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.260438em;vertical-align:-0.7693300000000001em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.491108em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.740108em;\"><span style=\"top:-2.9890000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">6</span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">8</span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7693300000000001em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span></p>\n<p>Note that the unit of bandwidth is <mark><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>b</mi><mi>p</mi><mi>s</mi></mrow><annotation encoding=\"application/x-tex\">bps</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\">b</span><span class=\"mord mathdefault\">p</span><span class=\"mord mathdefault\">s</span></span></span></span></mark>, NOT <em>Kbps</em>!!!</p>\n<hr>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>E</mi><mi>N</mi><mi>D</mi></mrow><annotation encoding=\"application/x-tex\">END\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">N</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">D</span></span></span></span></span></p>\n"},{"title":"Computer Network 5 -  Layer 4 Technology, Transport Protocols","date":"2022-04-08T15:40:15.000Z","author":"Tony","katex":true,"_content":"\n### Layer 4 Technology, Transport Protocols\n\n#### Transport protocols (TCP and UDP)\n\n###### What are the differences between connect-oriented and connectionless services? Which transport  protocol is providing these services? \n\nConnection-oriented service is like telephone service, the first message sent from source device will first received by destination device, which means the messages are ==in order==. TCP belongs to connection-oriented transport protocol.\n\nConnectionless service is like postal service, the first message sent from source device may not first received by destination device, which means the messages are ==not in order==. UDP belongs to connectionless transport protocol.\n\n###### What functions are provided by the transport protocols of TCP and UDP? \n\nTCP:\n\n- Connection-oriented. \n\n- Divides outgoing messages into segments, and reassembles messages at the destination host. \n\n- Reliable delivery that re-sends anything not received. \n\n- Provides flow control.\n\nUDP:\n\n- Connectionless \n- Unreliable delivery that uses no acknowledgments, and provides no software checking for message  delivery\n- Provides no flow control\n\n###### Which application layer protocols use TCP or UDP as transport protocol? \n\nTCP protocols include: FTP, HTTP, SMTP and Telnet.\n\nUDP protocols include: DNS, SNMP, TFTP and DHCP.\n\n###### What is the purpose of port number? How to assign the port number for the application on the server site and client site? List some common used port numbers for famous application protocols.\n\nTransport layer assigns port numbers to each of these ==applications or services==  to keep track of ==different conversations== that cross the network ==at the same time==.\n\nPort numbers have the following assigned ranges:\n\n- $0$ ~ $1023$: Well-known ports numbers. These numbers are reserved for well-known services and applications.\n\n- $1024$ ~ $49151$: Registered for vendor-specific applications. \n\n  ​\tThese port numbers are assigned to individual applications that a user has chosen to install rather  than common applications that would receive a Well Known Port. When not used for a server  resource, these ports may also be used dynamically selected by a client as its source port.\n\n- $49152$ ~ $65535$: Private and/or dynamically assigned ports numbers. \n\n  ​\tAlso known as Ephemeral Ports, these are usually assigned dynamically to client applications when  initiating a connection.\n\n  ![image-20211211154556832](CN-5/image-20211211154556832.png)\n\n#### TCP services\n\n###### How does TCP use three-way handshake to establish a connection? \n\n![image-20211211154616223](CN-5/image-20211211154616223.png)\n\n###### How does TCP use sequence number and acknowledgment to provide reliable transmission?\n\n![image-20211211154625242](CN-5/image-20211211154625242.png)\n\n![image-20211211152352560](CN-5/image-20211211152352560.png)\n\nSee more for three-way handshake. Client and Server has exchanged the sequence number and acknowledgment number.\n\nPay attention to the direction that messaged are sent. In this example, message is from client to server, therefore the $ACK=Seq\\ number + Packet\\ Size$. However, if the message is sent by server, the ACK would changed into $ACK=Seq\\ number - Packet\\ Size$.\n\n![image-20211211154842458](CN-5/image-20211211154842458.png)","source":"_posts/CN-5.md","raw":"---\ntitle: Computer Network 5 -  Layer 4 Technology, Transport Protocols\ndate: 2022-04-08 23:40:15\ntags:\n\t- computer network\ncategories:\n\t- 计算机网络\nauthor: Tony\nkatex: true\n---\n\n### Layer 4 Technology, Transport Protocols\n\n#### Transport protocols (TCP and UDP)\n\n###### What are the differences between connect-oriented and connectionless services? Which transport  protocol is providing these services? \n\nConnection-oriented service is like telephone service, the first message sent from source device will first received by destination device, which means the messages are ==in order==. TCP belongs to connection-oriented transport protocol.\n\nConnectionless service is like postal service, the first message sent from source device may not first received by destination device, which means the messages are ==not in order==. UDP belongs to connectionless transport protocol.\n\n###### What functions are provided by the transport protocols of TCP and UDP? \n\nTCP:\n\n- Connection-oriented. \n\n- Divides outgoing messages into segments, and reassembles messages at the destination host. \n\n- Reliable delivery that re-sends anything not received. \n\n- Provides flow control.\n\nUDP:\n\n- Connectionless \n- Unreliable delivery that uses no acknowledgments, and provides no software checking for message  delivery\n- Provides no flow control\n\n###### Which application layer protocols use TCP or UDP as transport protocol? \n\nTCP protocols include: FTP, HTTP, SMTP and Telnet.\n\nUDP protocols include: DNS, SNMP, TFTP and DHCP.\n\n###### What is the purpose of port number? How to assign the port number for the application on the server site and client site? List some common used port numbers for famous application protocols.\n\nTransport layer assigns port numbers to each of these ==applications or services==  to keep track of ==different conversations== that cross the network ==at the same time==.\n\nPort numbers have the following assigned ranges:\n\n- $0$ ~ $1023$: Well-known ports numbers. These numbers are reserved for well-known services and applications.\n\n- $1024$ ~ $49151$: Registered for vendor-specific applications. \n\n  ​\tThese port numbers are assigned to individual applications that a user has chosen to install rather  than common applications that would receive a Well Known Port. When not used for a server  resource, these ports may also be used dynamically selected by a client as its source port.\n\n- $49152$ ~ $65535$: Private and/or dynamically assigned ports numbers. \n\n  ​\tAlso known as Ephemeral Ports, these are usually assigned dynamically to client applications when  initiating a connection.\n\n  ![image-20211211154556832](CN-5/image-20211211154556832.png)\n\n#### TCP services\n\n###### How does TCP use three-way handshake to establish a connection? \n\n![image-20211211154616223](CN-5/image-20211211154616223.png)\n\n###### How does TCP use sequence number and acknowledgment to provide reliable transmission?\n\n![image-20211211154625242](CN-5/image-20211211154625242.png)\n\n![image-20211211152352560](CN-5/image-20211211152352560.png)\n\nSee more for three-way handshake. Client and Server has exchanged the sequence number and acknowledgment number.\n\nPay attention to the direction that messaged are sent. In this example, message is from client to server, therefore the $ACK=Seq\\ number + Packet\\ Size$. However, if the message is sent by server, the ACK would changed into $ACK=Seq\\ number - Packet\\ Size$.\n\n![image-20211211154842458](CN-5/image-20211211154842458.png)","slug":"CN-5","published":1,"updated":"2022-04-08T15:42:05.612Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1rj2n53000jgwcycryt4kqy","content":"<h3 id=\"layer-4-technology-transport-protocols\"><a class=\"markdownIt-Anchor\" href=\"#layer-4-technology-transport-protocols\"></a> Layer 4 Technology, Transport Protocols</h3>\n<h4 id=\"transport-protocols-tcp-and-udp\"><a class=\"markdownIt-Anchor\" href=\"#transport-protocols-tcp-and-udp\"></a> Transport protocols (TCP and UDP)</h4>\n<h6 id=\"what-are-the-differences-between-connect-oriented-and-connectionless-services-which-transport-protocol-is-providing-these-services\"><a class=\"markdownIt-Anchor\" href=\"#what-are-the-differences-between-connect-oriented-and-connectionless-services-which-transport-protocol-is-providing-these-services\"></a> What are the differences between connect-oriented and connectionless services? Which transport  protocol is providing these services?</h6>\n<p>Connection-oriented service is like telephone service, the first message sent from source device will first received by destination device, which means the messages are <mark>in order</mark>. TCP belongs to connection-oriented transport protocol.</p>\n<p>Connectionless service is like postal service, the first message sent from source device may not first received by destination device, which means the messages are <mark>not in order</mark>. UDP belongs to connectionless transport protocol.</p>\n<h6 id=\"what-functions-are-provided-by-the-transport-protocols-of-tcp-and-udp\"><a class=\"markdownIt-Anchor\" href=\"#what-functions-are-provided-by-the-transport-protocols-of-tcp-and-udp\"></a> What functions are provided by the transport protocols of TCP and UDP?</h6>\n<p>TCP:</p>\n<ul>\n<li>\n<p>Connection-oriented.</p>\n</li>\n<li>\n<p>Divides outgoing messages into segments, and reassembles messages at the destination host.</p>\n</li>\n<li>\n<p>Reliable delivery that re-sends anything not received.</p>\n</li>\n<li>\n<p>Provides flow control.</p>\n</li>\n</ul>\n<p>UDP:</p>\n<ul>\n<li>Connectionless</li>\n<li>Unreliable delivery that uses no acknowledgments, and provides no software checking for message  delivery</li>\n<li>Provides no flow control</li>\n</ul>\n<h6 id=\"which-application-layer-protocols-use-tcp-or-udp-as-transport-protocol\"><a class=\"markdownIt-Anchor\" href=\"#which-application-layer-protocols-use-tcp-or-udp-as-transport-protocol\"></a> Which application layer protocols use TCP or UDP as transport protocol?</h6>\n<p>TCP protocols include: FTP, HTTP, SMTP and Telnet.</p>\n<p>UDP protocols include: DNS, SNMP, TFTP and DHCP.</p>\n<h6 id=\"what-is-the-purpose-of-port-number-how-to-assign-the-port-number-for-the-application-on-the-server-site-and-client-site-list-some-common-used-port-numbers-for-famous-application-protocols\"><a class=\"markdownIt-Anchor\" href=\"#what-is-the-purpose-of-port-number-how-to-assign-the-port-number-for-the-application-on-the-server-site-and-client-site-list-some-common-used-port-numbers-for-famous-application-protocols\"></a> What is the purpose of port number? How to assign the port number for the application on the server site and client site? List some common used port numbers for famous application protocols.</h6>\n<p>Transport layer assigns port numbers to each of these <mark>applications or services</mark>  to keep track of <mark>different conversations</mark> that cross the network <mark>at the same time</mark>.</p>\n<p>Port numbers have the following assigned ranges:</p>\n<ul>\n<li>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span> ~ <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>1023</mn></mrow><annotation encoding=\"application/x-tex\">1023</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\">0</span><span class=\"mord\">2</span><span class=\"mord\">3</span></span></span></span>: Well-known ports numbers. These numbers are reserved for well-known services and applications.</p>\n</li>\n<li>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>1024</mn></mrow><annotation encoding=\"application/x-tex\">1024</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\">0</span><span class=\"mord\">2</span><span class=\"mord\">4</span></span></span></span> ~ <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>49151</mn></mrow><annotation encoding=\"application/x-tex\">49151</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">4</span><span class=\"mord\">9</span><span class=\"mord\">1</span><span class=\"mord\">5</span><span class=\"mord\">1</span></span></span></span>: Registered for vendor-specific applications.</p>\n<p>​\tThese port numbers are assigned to individual applications that a user has chosen to install rather  than common applications that would receive a Well Known Port. When not used for a server  resource, these ports may also be used dynamically selected by a client as its source port.</p>\n</li>\n<li>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>49152</mn></mrow><annotation encoding=\"application/x-tex\">49152</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">4</span><span class=\"mord\">9</span><span class=\"mord\">1</span><span class=\"mord\">5</span><span class=\"mord\">2</span></span></span></span> ~ <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>65535</mn></mrow><annotation encoding=\"application/x-tex\">65535</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">6</span><span class=\"mord\">5</span><span class=\"mord\">5</span><span class=\"mord\">3</span><span class=\"mord\">5</span></span></span></span>: Private and/or dynamically assigned ports numbers.</p>\n<p>​\tAlso known as Ephemeral Ports, these are usually assigned dynamically to client applications when  initiating a connection.</p>\n<p><img src=\"/2022/04/08/CN-5/image-20211211154556832.png\" alt=\"image-20211211154556832\" loading=\"lazy\"></p>\n</li>\n</ul>\n<h4 id=\"tcp-services\"><a class=\"markdownIt-Anchor\" href=\"#tcp-services\"></a> TCP services</h4>\n<h6 id=\"how-does-tcp-use-three-way-handshake-to-establish-a-connection\"><a class=\"markdownIt-Anchor\" href=\"#how-does-tcp-use-three-way-handshake-to-establish-a-connection\"></a> How does TCP use three-way handshake to establish a connection?</h6>\n<p><img src=\"/2022/04/08/CN-5/image-20211211154616223.png\" alt=\"image-20211211154616223\" loading=\"lazy\"></p>\n<h6 id=\"how-does-tcp-use-sequence-number-and-acknowledgment-to-provide-reliable-transmission\"><a class=\"markdownIt-Anchor\" href=\"#how-does-tcp-use-sequence-number-and-acknowledgment-to-provide-reliable-transmission\"></a> How does TCP use sequence number and acknowledgment to provide reliable transmission?</h6>\n<p><img src=\"/2022/04/08/CN-5/image-20211211154625242.png\" alt=\"image-20211211154625242\" loading=\"lazy\"></p>\n<p><img src=\"/2022/04/08/CN-5/image-20211211152352560.png\" alt=\"image-20211211152352560\" loading=\"lazy\"></p>\n<p>See more for three-way handshake. Client and Server has exchanged the sequence number and acknowledgment number.</p>\n<p>Pay attention to the direction that messaged are sent. In this example, message is from client to server, therefore the <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>A</mi><mi>C</mi><mi>K</mi><mo>=</mo><mi>S</mi><mi>e</mi><mi>q</mi><mtext> </mtext><mi>n</mi><mi>u</mi><mi>m</mi><mi>b</mi><mi>e</mi><mi>r</mi><mo>+</mo><mi>P</mi><mi>a</mi><mi>c</mi><mi>k</mi><mi>e</mi><mi>t</mi><mtext> </mtext><mi>S</mi><mi>i</mi><mi>z</mi><mi>e</mi></mrow><annotation encoding=\"application/x-tex\">ACK=Seq\\ number + Packet\\ Size</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">A</span><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">C</span><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">K</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">q</span><span class=\"mspace\"> </span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\">u</span><span class=\"mord mathdefault\">m</span><span class=\"mord mathdefault\">b</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">P</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">c</span><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\">t</span><span class=\"mspace\"> </span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\" style=\"margin-right:0.04398em;\">z</span><span class=\"mord mathdefault\">e</span></span></span></span>. However, if the message is sent by server, the ACK would changed into <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>A</mi><mi>C</mi><mi>K</mi><mo>=</mo><mi>S</mi><mi>e</mi><mi>q</mi><mtext> </mtext><mi>n</mi><mi>u</mi><mi>m</mi><mi>b</mi><mi>e</mi><mi>r</mi><mo>−</mo><mi>P</mi><mi>a</mi><mi>c</mi><mi>k</mi><mi>e</mi><mi>t</mi><mtext> </mtext><mi>S</mi><mi>i</mi><mi>z</mi><mi>e</mi></mrow><annotation encoding=\"application/x-tex\">ACK=Seq\\ number - Packet\\ Size</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">A</span><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">C</span><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">K</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">q</span><span class=\"mspace\"> </span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\">u</span><span class=\"mord mathdefault\">m</span><span class=\"mord mathdefault\">b</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">P</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">c</span><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\">t</span><span class=\"mspace\"> </span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\" style=\"margin-right:0.04398em;\">z</span><span class=\"mord mathdefault\">e</span></span></span></span>.</p>\n<p><img src=\"/2022/04/08/CN-5/image-20211211154842458.png\" alt=\"image-20211211154842458\" loading=\"lazy\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"layer-4-technology-transport-protocols\"><a class=\"markdownIt-Anchor\" href=\"#layer-4-technology-transport-protocols\"></a> Layer 4 Technology, Transport Protocols</h3>\n<h4 id=\"transport-protocols-tcp-and-udp\"><a class=\"markdownIt-Anchor\" href=\"#transport-protocols-tcp-and-udp\"></a> Transport protocols (TCP and UDP)</h4>\n<h6 id=\"what-are-the-differences-between-connect-oriented-and-connectionless-services-which-transport-protocol-is-providing-these-services\"><a class=\"markdownIt-Anchor\" href=\"#what-are-the-differences-between-connect-oriented-and-connectionless-services-which-transport-protocol-is-providing-these-services\"></a> What are the differences between connect-oriented and connectionless services? Which transport  protocol is providing these services?</h6>\n<p>Connection-oriented service is like telephone service, the first message sent from source device will first received by destination device, which means the messages are <mark>in order</mark>. TCP belongs to connection-oriented transport protocol.</p>\n<p>Connectionless service is like postal service, the first message sent from source device may not first received by destination device, which means the messages are <mark>not in order</mark>. UDP belongs to connectionless transport protocol.</p>\n<h6 id=\"what-functions-are-provided-by-the-transport-protocols-of-tcp-and-udp\"><a class=\"markdownIt-Anchor\" href=\"#what-functions-are-provided-by-the-transport-protocols-of-tcp-and-udp\"></a> What functions are provided by the transport protocols of TCP and UDP?</h6>\n<p>TCP:</p>\n<ul>\n<li>\n<p>Connection-oriented.</p>\n</li>\n<li>\n<p>Divides outgoing messages into segments, and reassembles messages at the destination host.</p>\n</li>\n<li>\n<p>Reliable delivery that re-sends anything not received.</p>\n</li>\n<li>\n<p>Provides flow control.</p>\n</li>\n</ul>\n<p>UDP:</p>\n<ul>\n<li>Connectionless</li>\n<li>Unreliable delivery that uses no acknowledgments, and provides no software checking for message  delivery</li>\n<li>Provides no flow control</li>\n</ul>\n<h6 id=\"which-application-layer-protocols-use-tcp-or-udp-as-transport-protocol\"><a class=\"markdownIt-Anchor\" href=\"#which-application-layer-protocols-use-tcp-or-udp-as-transport-protocol\"></a> Which application layer protocols use TCP or UDP as transport protocol?</h6>\n<p>TCP protocols include: FTP, HTTP, SMTP and Telnet.</p>\n<p>UDP protocols include: DNS, SNMP, TFTP and DHCP.</p>\n<h6 id=\"what-is-the-purpose-of-port-number-how-to-assign-the-port-number-for-the-application-on-the-server-site-and-client-site-list-some-common-used-port-numbers-for-famous-application-protocols\"><a class=\"markdownIt-Anchor\" href=\"#what-is-the-purpose-of-port-number-how-to-assign-the-port-number-for-the-application-on-the-server-site-and-client-site-list-some-common-used-port-numbers-for-famous-application-protocols\"></a> What is the purpose of port number? How to assign the port number for the application on the server site and client site? List some common used port numbers for famous application protocols.</h6>\n<p>Transport layer assigns port numbers to each of these <mark>applications or services</mark>  to keep track of <mark>different conversations</mark> that cross the network <mark>at the same time</mark>.</p>\n<p>Port numbers have the following assigned ranges:</p>\n<ul>\n<li>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span> ~ <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>1023</mn></mrow><annotation encoding=\"application/x-tex\">1023</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\">0</span><span class=\"mord\">2</span><span class=\"mord\">3</span></span></span></span>: Well-known ports numbers. These numbers are reserved for well-known services and applications.</p>\n</li>\n<li>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>1024</mn></mrow><annotation encoding=\"application/x-tex\">1024</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\">0</span><span class=\"mord\">2</span><span class=\"mord\">4</span></span></span></span> ~ <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>49151</mn></mrow><annotation encoding=\"application/x-tex\">49151</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">4</span><span class=\"mord\">9</span><span class=\"mord\">1</span><span class=\"mord\">5</span><span class=\"mord\">1</span></span></span></span>: Registered for vendor-specific applications.</p>\n<p>​\tThese port numbers are assigned to individual applications that a user has chosen to install rather  than common applications that would receive a Well Known Port. When not used for a server  resource, these ports may also be used dynamically selected by a client as its source port.</p>\n</li>\n<li>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>49152</mn></mrow><annotation encoding=\"application/x-tex\">49152</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">4</span><span class=\"mord\">9</span><span class=\"mord\">1</span><span class=\"mord\">5</span><span class=\"mord\">2</span></span></span></span> ~ <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>65535</mn></mrow><annotation encoding=\"application/x-tex\">65535</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">6</span><span class=\"mord\">5</span><span class=\"mord\">5</span><span class=\"mord\">3</span><span class=\"mord\">5</span></span></span></span>: Private and/or dynamically assigned ports numbers.</p>\n<p>​\tAlso known as Ephemeral Ports, these are usually assigned dynamically to client applications when  initiating a connection.</p>\n<p><img src=\"/2022/04/08/CN-5/image-20211211154556832.png\" alt=\"image-20211211154556832\"></p>\n</li>\n</ul>\n<h4 id=\"tcp-services\"><a class=\"markdownIt-Anchor\" href=\"#tcp-services\"></a> TCP services</h4>\n<h6 id=\"how-does-tcp-use-three-way-handshake-to-establish-a-connection\"><a class=\"markdownIt-Anchor\" href=\"#how-does-tcp-use-three-way-handshake-to-establish-a-connection\"></a> How does TCP use three-way handshake to establish a connection?</h6>\n<p><img src=\"/2022/04/08/CN-5/image-20211211154616223.png\" alt=\"image-20211211154616223\"></p>\n<h6 id=\"how-does-tcp-use-sequence-number-and-acknowledgment-to-provide-reliable-transmission\"><a class=\"markdownIt-Anchor\" href=\"#how-does-tcp-use-sequence-number-and-acknowledgment-to-provide-reliable-transmission\"></a> How does TCP use sequence number and acknowledgment to provide reliable transmission?</h6>\n<p><img src=\"/2022/04/08/CN-5/image-20211211154625242.png\" alt=\"image-20211211154625242\"></p>\n<p><img src=\"/2022/04/08/CN-5/image-20211211152352560.png\" alt=\"image-20211211152352560\"></p>\n<p>See more for three-way handshake. Client and Server has exchanged the sequence number and acknowledgment number.</p>\n<p>Pay attention to the direction that messaged are sent. In this example, message is from client to server, therefore the <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>A</mi><mi>C</mi><mi>K</mi><mo>=</mo><mi>S</mi><mi>e</mi><mi>q</mi><mtext> </mtext><mi>n</mi><mi>u</mi><mi>m</mi><mi>b</mi><mi>e</mi><mi>r</mi><mo>+</mo><mi>P</mi><mi>a</mi><mi>c</mi><mi>k</mi><mi>e</mi><mi>t</mi><mtext> </mtext><mi>S</mi><mi>i</mi><mi>z</mi><mi>e</mi></mrow><annotation encoding=\"application/x-tex\">ACK=Seq\\ number + Packet\\ Size</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">A</span><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">C</span><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">K</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">q</span><span class=\"mspace\"> </span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\">u</span><span class=\"mord mathdefault\">m</span><span class=\"mord mathdefault\">b</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">P</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">c</span><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\">t</span><span class=\"mspace\"> </span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\" style=\"margin-right:0.04398em;\">z</span><span class=\"mord mathdefault\">e</span></span></span></span>. However, if the message is sent by server, the ACK would changed into <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>A</mi><mi>C</mi><mi>K</mi><mo>=</mo><mi>S</mi><mi>e</mi><mi>q</mi><mtext> </mtext><mi>n</mi><mi>u</mi><mi>m</mi><mi>b</mi><mi>e</mi><mi>r</mi><mo>−</mo><mi>P</mi><mi>a</mi><mi>c</mi><mi>k</mi><mi>e</mi><mi>t</mi><mtext> </mtext><mi>S</mi><mi>i</mi><mi>z</mi><mi>e</mi></mrow><annotation encoding=\"application/x-tex\">ACK=Seq\\ number - Packet\\ Size</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">A</span><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">C</span><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">K</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">q</span><span class=\"mspace\"> </span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\">u</span><span class=\"mord mathdefault\">m</span><span class=\"mord mathdefault\">b</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">P</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">c</span><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\">t</span><span class=\"mspace\"> </span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\" style=\"margin-right:0.04398em;\">z</span><span class=\"mord mathdefault\">e</span></span></span></span>.</p>\n<p><img src=\"/2022/04/08/CN-5/image-20211211154842458.png\" alt=\"image-20211211154842458\"></p>\n"},{"title":"Computer Network 6 - Layer 5-7 Technology, Application Protocols","date":"2022-04-08T15:42:16.000Z","author":"Tony","katex":true,"_content":"\n#### Layer 5-7 Technology, Application Protocols\n\n#### Layer 5-7 technologies\n\n###### What are the two types of application communications?\n\nPeer-to-peer Communications\n\nClient-Server Communications\n\n###### List some Application layer protocols that is familiar\n\n▪ Domain Name System (DNS) \n\n▪ Hypertext Transfer Protocol (HTTP) \n\n▪ File Transfer Protocol (FTP) \n\n▪ Trivial File Transfer Protocol (TFTP) \n\n▪ Telnet \n\n▪ Simple Mail Transfer Protocol (SMTP) \n\n▪ Post Office Protocol, version 3 (POP3) \n\n▪ Simple Network Management Protocol (SNMP)\n\n###### What is the operations of DNS? What is the difference between the authoritative or non-authoritative DNS records?\n\nThese article is worth to read: \n\n[DNS 是什么？如何运作的？ - 知乎 (zhihu.com)](https://zhuanlan.zhihu.com/p/350054986)\n\n[DNS运作方式 - 简书 (jianshu.com)](https://www.jianshu.com/p/441de4542245)\n\n###### What is the operations of HTTP? \n\nClient use HTTP Protocol to request information from Server\n\nServer then send the information(like HTML, CSS) to Client\n\nNote that the HTTP Protocol is a stateless protocol\n\n###### What is the format of URL?\n\nURL: `https://Tony:tonytony@must.icu/menu/folder1/answer.html`\n\nProtocol: `https://`\n\nUsername&password:`Tony:tonytony`\n\nDomain name:`www.must.icu`\n\nFolder&file:`menu/folder1/answer.html`\n\n###### What is the operations of email system using SMTP and POP3?\n\nClient use SMTP Protocol to send packages to Server\n\nServer use POP3 Protocol to receive packages to Client \n\nNote that as long as the packages sent to the Server, Client will receive “send the E-mail successfully”, but actually we cannot guarantee that another has received the E-mail or not.\n\n\n\n---\n\n![image-20211207025902517](CN-6/image-20211207025902517.png)\n\nDomain name: www.must.edu.mo\n\nApplication protocol: HTTP (Note that the application protocol is only depend on `http://`)\n\nTransport protocol: TCP (just recite it)","source":"_posts/CN-6.md","raw":"---\ntitle: Computer Network 6 - Layer 5-7 Technology, Application Protocols\ndate: 2022-04-08 23:42:16\ntags:\n\t- computer network\ncategories:\n\t- 计算机网络\nauthor: Tony\nkatex: true\n---\n\n#### Layer 5-7 Technology, Application Protocols\n\n#### Layer 5-7 technologies\n\n###### What are the two types of application communications?\n\nPeer-to-peer Communications\n\nClient-Server Communications\n\n###### List some Application layer protocols that is familiar\n\n▪ Domain Name System (DNS) \n\n▪ Hypertext Transfer Protocol (HTTP) \n\n▪ File Transfer Protocol (FTP) \n\n▪ Trivial File Transfer Protocol (TFTP) \n\n▪ Telnet \n\n▪ Simple Mail Transfer Protocol (SMTP) \n\n▪ Post Office Protocol, version 3 (POP3) \n\n▪ Simple Network Management Protocol (SNMP)\n\n###### What is the operations of DNS? What is the difference between the authoritative or non-authoritative DNS records?\n\nThese article is worth to read: \n\n[DNS 是什么？如何运作的？ - 知乎 (zhihu.com)](https://zhuanlan.zhihu.com/p/350054986)\n\n[DNS运作方式 - 简书 (jianshu.com)](https://www.jianshu.com/p/441de4542245)\n\n###### What is the operations of HTTP? \n\nClient use HTTP Protocol to request information from Server\n\nServer then send the information(like HTML, CSS) to Client\n\nNote that the HTTP Protocol is a stateless protocol\n\n###### What is the format of URL?\n\nURL: `https://Tony:tonytony@must.icu/menu/folder1/answer.html`\n\nProtocol: `https://`\n\nUsername&password:`Tony:tonytony`\n\nDomain name:`www.must.icu`\n\nFolder&file:`menu/folder1/answer.html`\n\n###### What is the operations of email system using SMTP and POP3?\n\nClient use SMTP Protocol to send packages to Server\n\nServer use POP3 Protocol to receive packages to Client \n\nNote that as long as the packages sent to the Server, Client will receive “send the E-mail successfully”, but actually we cannot guarantee that another has received the E-mail or not.\n\n\n\n---\n\n![image-20211207025902517](CN-6/image-20211207025902517.png)\n\nDomain name: www.must.edu.mo\n\nApplication protocol: HTTP (Note that the application protocol is only depend on `http://`)\n\nTransport protocol: TCP (just recite it)","slug":"CN-6","published":1,"updated":"2022-04-08T15:42:58.118Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1rj2n54000mgwcy864shas1","content":"<h4 id=\"layer-5-7-technology-application-protocols\"><a class=\"markdownIt-Anchor\" href=\"#layer-5-7-technology-application-protocols\"></a> Layer 5-7 Technology, Application Protocols</h4>\n<h4 id=\"layer-5-7-technologies\"><a class=\"markdownIt-Anchor\" href=\"#layer-5-7-technologies\"></a> Layer 5-7 technologies</h4>\n<h6 id=\"what-are-the-two-types-of-application-communications\"><a class=\"markdownIt-Anchor\" href=\"#what-are-the-two-types-of-application-communications\"></a> What are the two types of application communications?</h6>\n<p>Peer-to-peer Communications</p>\n<p>Client-Server Communications</p>\n<h6 id=\"list-some-application-layer-protocols-that-is-familiar\"><a class=\"markdownIt-Anchor\" href=\"#list-some-application-layer-protocols-that-is-familiar\"></a> List some Application layer protocols that is familiar</h6>\n<p>▪ Domain Name System (DNS)</p>\n<p>▪ Hypertext Transfer Protocol (HTTP)</p>\n<p>▪ File Transfer Protocol (FTP)</p>\n<p>▪ Trivial File Transfer Protocol (TFTP)</p>\n<p>▪ Telnet</p>\n<p>▪ Simple Mail Transfer Protocol (SMTP)</p>\n<p>▪ Post Office Protocol, version 3 (POP3)</p>\n<p>▪ Simple Network Management Protocol (SNMP)</p>\n<h6 id=\"what-is-the-operations-of-dns-what-is-the-difference-between-the-authoritative-or-non-authoritative-dns-records\"><a class=\"markdownIt-Anchor\" href=\"#what-is-the-operations-of-dns-what-is-the-difference-between-the-authoritative-or-non-authoritative-dns-records\"></a> What is the operations of DNS? What is the difference between the authoritative or non-authoritative DNS records?</h6>\n<p>These article is worth to read:</p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/350054986\">DNS 是什么？如何运作的？ - 知乎 (zhihu.com)</a></p>\n<p><a href=\"https://www.jianshu.com/p/441de4542245\">DNS运作方式 - 简书 (jianshu.com)</a></p>\n<h6 id=\"what-is-the-operations-of-http\"><a class=\"markdownIt-Anchor\" href=\"#what-is-the-operations-of-http\"></a> What is the operations of HTTP?</h6>\n<p>Client use HTTP Protocol to request information from Server</p>\n<p>Server then send the information(like HTML, CSS) to Client</p>\n<p>Note that the HTTP Protocol is a stateless protocol</p>\n<h6 id=\"what-is-the-format-of-url\"><a class=\"markdownIt-Anchor\" href=\"#what-is-the-format-of-url\"></a> What is the format of URL?</h6>\n<p>URL: <code>https://Tony:tonytony@must.icu/menu/folder1/answer.html</code></p>\n<p>Protocol: <code>https://</code></p>\n<p>Username&amp;password:<code>Tony:tonytony</code></p>\n<p>Domain name:<code>www.must.icu</code></p>\n<p>Folder&amp;file:<code>menu/folder1/answer.html</code></p>\n<h6 id=\"what-is-the-operations-of-email-system-using-smtp-and-pop3\"><a class=\"markdownIt-Anchor\" href=\"#what-is-the-operations-of-email-system-using-smtp-and-pop3\"></a> What is the operations of email system using SMTP and POP3?</h6>\n<p>Client use SMTP Protocol to send packages to Server</p>\n<p>Server use POP3 Protocol to receive packages to Client</p>\n<p>Note that as long as the packages sent to the Server, Client will receive “send the E-mail successfully”, but actually we cannot guarantee that another has received the E-mail or not.</p>\n<hr>\n<p><img src=\"/2022/04/08/CN-6/image-20211207025902517.png\" alt=\"image-20211207025902517\" loading=\"lazy\"></p>\n<p>Domain name: <a href=\"http://www.must.edu.mo\">www.must.edu.mo</a></p>\n<p>Application protocol: HTTP (Note that the application protocol is only depend on <code>http://</code>)</p>\n<p>Transport protocol: TCP (just recite it)</p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"layer-5-7-technology-application-protocols\"><a class=\"markdownIt-Anchor\" href=\"#layer-5-7-technology-application-protocols\"></a> Layer 5-7 Technology, Application Protocols</h4>\n<h4 id=\"layer-5-7-technologies\"><a class=\"markdownIt-Anchor\" href=\"#layer-5-7-technologies\"></a> Layer 5-7 technologies</h4>\n<h6 id=\"what-are-the-two-types-of-application-communications\"><a class=\"markdownIt-Anchor\" href=\"#what-are-the-two-types-of-application-communications\"></a> What are the two types of application communications?</h6>\n<p>Peer-to-peer Communications</p>\n<p>Client-Server Communications</p>\n<h6 id=\"list-some-application-layer-protocols-that-is-familiar\"><a class=\"markdownIt-Anchor\" href=\"#list-some-application-layer-protocols-that-is-familiar\"></a> List some Application layer protocols that is familiar</h6>\n<p>▪ Domain Name System (DNS)</p>\n<p>▪ Hypertext Transfer Protocol (HTTP)</p>\n<p>▪ File Transfer Protocol (FTP)</p>\n<p>▪ Trivial File Transfer Protocol (TFTP)</p>\n<p>▪ Telnet</p>\n<p>▪ Simple Mail Transfer Protocol (SMTP)</p>\n<p>▪ Post Office Protocol, version 3 (POP3)</p>\n<p>▪ Simple Network Management Protocol (SNMP)</p>\n<h6 id=\"what-is-the-operations-of-dns-what-is-the-difference-between-the-authoritative-or-non-authoritative-dns-records\"><a class=\"markdownIt-Anchor\" href=\"#what-is-the-operations-of-dns-what-is-the-difference-between-the-authoritative-or-non-authoritative-dns-records\"></a> What is the operations of DNS? What is the difference between the authoritative or non-authoritative DNS records?</h6>\n<p>These article is worth to read:</p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/350054986\">DNS 是什么？如何运作的？ - 知乎 (zhihu.com)</a></p>\n<p><a href=\"https://www.jianshu.com/p/441de4542245\">DNS运作方式 - 简书 (jianshu.com)</a></p>\n<h6 id=\"what-is-the-operations-of-http\"><a class=\"markdownIt-Anchor\" href=\"#what-is-the-operations-of-http\"></a> What is the operations of HTTP?</h6>\n<p>Client use HTTP Protocol to request information from Server</p>\n<p>Server then send the information(like HTML, CSS) to Client</p>\n<p>Note that the HTTP Protocol is a stateless protocol</p>\n<h6 id=\"what-is-the-format-of-url\"><a class=\"markdownIt-Anchor\" href=\"#what-is-the-format-of-url\"></a> What is the format of URL?</h6>\n<p>URL: <code>https://Tony:tonytony@must.icu/menu/folder1/answer.html</code></p>\n<p>Protocol: <code>https://</code></p>\n<p>Username&amp;password:<code>Tony:tonytony</code></p>\n<p>Domain name:<code>www.must.icu</code></p>\n<p>Folder&amp;file:<code>menu/folder1/answer.html</code></p>\n<h6 id=\"what-is-the-operations-of-email-system-using-smtp-and-pop3\"><a class=\"markdownIt-Anchor\" href=\"#what-is-the-operations-of-email-system-using-smtp-and-pop3\"></a> What is the operations of email system using SMTP and POP3?</h6>\n<p>Client use SMTP Protocol to send packages to Server</p>\n<p>Server use POP3 Protocol to receive packages to Client</p>\n<p>Note that as long as the packages sent to the Server, Client will receive “send the E-mail successfully”, but actually we cannot guarantee that another has received the E-mail or not.</p>\n<hr>\n<p><img src=\"/2022/04/08/CN-6/image-20211207025902517.png\" alt=\"image-20211207025902517\"></p>\n<p>Domain name: <a href=\"http://www.must.edu.mo\">www.must.edu.mo</a></p>\n<p>Application protocol: HTTP (Note that the application protocol is only depend on <code>http://</code>)</p>\n<p>Transport protocol: TCP (just recite it)</p>\n"},{"title":"DFS简介","date":"2022-03-10T07:08:58.000Z","katex":true,"_content":"\n## DFS基本概念\n\n**深度优先搜索算法**（Depth First Search）：一种用于遍历或搜索树或图的算法。 沿着树的深度遍历树的节点，尽可能深的搜索树的分支。 属于盲目搜索,最糟糕的情况算法时间复杂度为$O(n^2)$。\n\n---\n\n## 经典例题\n\n### P1706全排列问题\n\n注：题目来源自[洛谷](https://www.luogu.com.cn/problem/P1706)。\n\n#### 题目描述\n\n输出自然数 1 到 n 所有不重复的排列，即 *n* 的全排列，要求所产生的任一数字序列中不允许出现重复的数字。\n\n#### 输入格式\n\n一个整数 n。\n\n#### 输出格式\n\n由1∼*n* 组成的所有不重复的数字序列，每行一个序列。\n\n每个数字保留 5 个场宽。\n\n#### 输入输出样例\n\n**输入 #1**\n\n```bash\n3\n```\n\n**输出 #1**\n\n```bash\n    1    2    3\n    1    3    2\n    2    1    3\n    2    3    1\n    3    1    2\n    3    2    1\n```\n\n#### 说明/提示\n\n$1≤n≤9$\n\n#### 答案解析\n\n```c\n#include <iostream>\nusing namespace std;\nbool vis[100];//标记数字是否出现\nint a[100];//全排列数组\nint n;\nvoid dfs(int x)\n{\n    if (x == n+1)\n    {\n        for (int i = 1;i <= n;i++)\n                printf (\"%5d\",a[i]);\n        cout<<endl;\n        return;\n    }\n    for (int i = 1;i <= n;i++)\n    {\n        if (vis[i]==0)\n        {\n            vis[i] = 1;\n            a[x] = i;\n            dfs(x+1);//递归\n            vis[i] = 0;//回溯\n        }\n    }\n}\nint main()\n{\n    cin>>n; \n    dfs(1);\n    return 0;\n}\n```\n\n------\n\n### P1238 走迷宫\n\n注：题目来源[洛谷](https://www.luogu.com.cn/problem/P1238)。\n\n#### 题目描述\n\n有一个 $m\\times n$ 格的迷宫(表示有 $m$ 行、$n$列)，其中有可走的也有不可走的，如果用 $1$ 表示可以走，$0$ 表示不可以走，文件读入这 $m\\times n$ 个数据和起始点、结束点（起始点和结束点都是用两个数据来描述的，分别表示这个点的行号和列号）。现在要你编程找出所有可行的道路，要求所走的路中没有重复的点，走时只能是上下左右四个方向。如果一条路都不可行，则输出相应信息（用 $-1$ 表示无路）。\n\n优先顺序：左上右下。**数据保证随机生成。**\n\n#### 输入格式\n\n第一行是两个数 $m,n(1<m,n<15)$，接下来是 $m$行 $n$ 列由$1$ 和$ 0$ 组成的数据，最后两行是起始点和结束点。\n\n#### 输出格式\n\n所有可行的路径，描述一个点时用 $(x,y)$ 的形式，除开始点外，其他的都要用 `->` 表示方向。\n\n如果没有一条可行的路则输出 $-1$。\n\n#### 输入输出样例\n\n**输入 #1**\n\n```bash\n5 6\n1 0 0 1 0 1\n1 1 1 1 1 1\n0 0 1 1 1 0\n1 1 1 1 1 0\n1 1 1 0 1 1\n1 1\n5 6\n```\n\n**输出 #1**\n\n```bash\n(1,1)->(2,1)->(2,2)->(2,3)->(2,4)->(2,5)->(3,5)->(3,4)->(3,3)->(4,3)->(4,4)->(4,5)->(5,5)->(5,6)\n(1,1)->(2,1)->(2,2)->(2,3)->(2,4)->(2,5)->(3,5)->(3,4)->(4,4)->(4,5)->(5,5)->(5,6)\n(1,1)->(2,1)->(2,2)->(2,3)->(2,4)->(2,5)->(3,5)->(4,5)->(5,5)->(5,6)\n(1,1)->(2,1)->(2,2)->(2,3)->(2,4)->(3,4)->(3,3)->(4,3)->(4,4)->(4,5)->(5,5)->(5,6)\n(1,1)->(2,1)->(2,2)->(2,3)->(2,4)->(3,4)->(3,5)->(4,5)->(5,5)->(5,6)\n(1,1)->(2,1)->(2,2)->(2,3)->(2,4)->(3,4)->(4,4)->(4,5)->(5,5)->(5,6)\n(1,1)->(2,1)->(2,2)->(2,3)->(3,3)->(3,4)->(2,4)->(2,5)->(3,5)->(4,5)->(5,5)->(5,6)\n(1,1)->(2,1)->(2,2)->(2,3)->(3,3)->(3,4)->(3,5)->(4,5)->(5,5)->(5,6)\n(1,1)->(2,1)->(2,2)->(2,3)->(3,3)->(3,4)->(4,4)->(4,5)->(5,5)->(5,6)\n(1,1)->(2,1)->(2,2)->(2,3)->(3,3)->(4,3)->(4,4)->(3,4)->(2,4)->(2,5)->(3,5)->(4,5)->(5,5)->(5,6)\n(1,1)->(2,1)->(2,2)->(2,3)->(3,3)->(4,3)->(4,4)->(3,4)->(3,5)->(4,5)->(5,5)->(5,6)\n(1,1)->(2,1)->(2,2)->(2,3)->(3,3)->(4,3)->(4,4)->(4,5)->(5,5)->(5,6)\n```\n\n#### 说明/提示\n\n数据保证随机生成。事实上，如果 $n=m=14$ 且每个位置都是 $1$的话，有 $69450664761521361664274701548907358996488$ 种路径。\n\n#### 答案解析\n\n```c\n#include<iostream>\n#include<cstdio>\nusing namespace std;\nconst int N = 1001;\nbool map[N][N];\nbool visited[N][N];\nint output[N * N];//stack\nint pointer;\nbool solution;\n//for example, m=5,n=6\n//(2,3)==>(2-1)*n+3=9\n//(5,6)==>(5-1)*n+6=30\n//therefore, (x,y)==>(x-1)*n+y\nvoid dfs(int x, int y);\nint m, n, start_x, start_y, end_x, end_y;\nint main()\n{\n\tcin >> m >> n;\n\tfor (int i = 1; i <= m; i++)\n\t\tfor (int j = 1; j <= n; j++)\n\t\t\tcin >> map[i][j];\n\tcin >> start_x >> start_y;\n\tcin >> end_x >> end_y;\n\tif (map[start_x][start_y] == 0)\n\t{\n\t\tcout << \"-1\";\n\t\treturn 0;\n\t}\t\n\telse if (map[end_x][end_y] == 0)\n\t{\n\t\tcout << \"-1\";\n\t\treturn 0;\n\t}\n\telse \n\t\tdfs(start_x,start_y);\n\tif (!solution)\n\t\tcout << \"-1\";\n\treturn 0;\n}\nvoid dfs(int x,int y)\n{\n\tif (x<1 || y<1 || x>m || y> n)\n\t\treturn;\n\tif (visited[x][y] || !map[x][y])\n\t\treturn;\n\tif (x == end_x && y == end_y)\n\t{\n\t\tsolution = 1;\n\t\tfor (int i = 0; i < pointer; i++)\n\t\t\tif (output[i] % n)\n\t\t\t\tcout << \"(\" << output[i] / n + 1 << \",\" << output[i] % n << \")\" << \"->\";\n\t\t\telse\n\t\t\t\tcout << \"(\" << output[i] / n  << \",\" << n << \")\" << \"->\";\n\t\tcout << \"(\" << end_x << \",\" << end_y << \")\" << endl;\n\t\treturn;\n\t}\n\n\t//++++++++++\n\tvisited[x][y] = true;\n\toutput[pointer] = (x - 1) * n + y;\n\tpointer++;\t\n\t//++++++++++\n\n\tif (map[x][y - 1] && !visited[x][y-1])\n\t\tdfs(x, y - 1);\n\tif (map[x - 1][y] && !visited[x-1][y])\n\t\tdfs(x - 1, y);\n\tif (map[x][y + 1] && !visited[x][y+1])\n\t\tdfs(x, y + 1);\n\tif (map[x + 1][y] && !visited[x+1][y])\n\t\tdfs(x + 1, y);\n\n\t//----------\n\toutput[pointer] = 0;\n\tpointer--;\n\tvisited[x][y] = false;\n\t//----------\n\n\n}\n```\n\n---\n\n### 连通块问题（floodfill）\n\n注：我忘了在哪找的题了。。。\n\n#### 题目描述\n\n一个$n \\times m$的方格图，一些格子被涂成了黑色，在方格图中被标为$1$，白色格子标为$0$。问有多少个四连通的黑色格子连通块。四连通的黑色格子连通块指的是一片由黑色格子组成的区域，其中的每个黑色格子能通过四连通的走法（上下左右），只走黑色格子，到达该联通块中的其它黑色格子。\n\n#### 输入输出样例\n\n**输入 #1**\n\n```bash\n1 1\n*\n3 5\n*@*@*\n**@**\n*@*@*\n1 8\n@@****@*\n5 5\n****@\n*@@*@\n*@**@\n@@@*@\n@@**@\n0 0\n```\n\n**输出 #1**\n\n```bash\n0\n1\n2\n2\n```\n\n#### 答案解析\n\n```c\n#include<bits/stdc++.h>\nusing namespace std;\n#define maxn 100+5\nchar pic[maxn][maxn];//存图\nint m,n,idx[maxn][maxn];\nvoid dfs(int r,int c,int id)\n{\n    if(r<0||r>=m||c<0||c>=n)\n        return ;//出界的格子\n    if(idx[r][c]>0||pic[r][c]!='@')\n        return ;//不是'@'或已经被访问过\n    idx[r][c]=id;//将点记录下来\n    for(int dr=-1;dr<=1;dr++)\n        for(int dc=-1;dc<=1;dc++)\n            if(dr!=0||dc!=0)\n                dfs(r+dr,c+dc,id);//向四个方向搜索·\n}\nint main()\n{\n    while(scanf(\"%d%d\",&m,&n)==2 && m && n)\n    {\n        for(int i=0;i<m;i++)\n            scanf(\"%s\",pic[i]);\n        memset(idx,0,sizeof(idx));\n        int cnt=0;\n        for(int i=0;i<m;i++)\n            for(int j=0;j<n;j++)//每一次扫描所有为id的方格\n                if(idx[i][j]==0&&pic[i][j]=='@')\n                    dfs(i,j,++cnt);\n        printf(\"%d\\n\",cnt);\n    }\n    return 0;\n}\n```\n\n---\n\n$$\nEND\n$$\n\n","source":"_posts/DFS.md","raw":"---\ntitle: DFS简介\ndate: 2022-03-10 15:08:58\ntags:\n\t- algorithm\n\t- DFS\ncategories:\n\t- algorithm\nkatex: true\n\n---\n\n## DFS基本概念\n\n**深度优先搜索算法**（Depth First Search）：一种用于遍历或搜索树或图的算法。 沿着树的深度遍历树的节点，尽可能深的搜索树的分支。 属于盲目搜索,最糟糕的情况算法时间复杂度为$O(n^2)$。\n\n---\n\n## 经典例题\n\n### P1706全排列问题\n\n注：题目来源自[洛谷](https://www.luogu.com.cn/problem/P1706)。\n\n#### 题目描述\n\n输出自然数 1 到 n 所有不重复的排列，即 *n* 的全排列，要求所产生的任一数字序列中不允许出现重复的数字。\n\n#### 输入格式\n\n一个整数 n。\n\n#### 输出格式\n\n由1∼*n* 组成的所有不重复的数字序列，每行一个序列。\n\n每个数字保留 5 个场宽。\n\n#### 输入输出样例\n\n**输入 #1**\n\n```bash\n3\n```\n\n**输出 #1**\n\n```bash\n    1    2    3\n    1    3    2\n    2    1    3\n    2    3    1\n    3    1    2\n    3    2    1\n```\n\n#### 说明/提示\n\n$1≤n≤9$\n\n#### 答案解析\n\n```c\n#include <iostream>\nusing namespace std;\nbool vis[100];//标记数字是否出现\nint a[100];//全排列数组\nint n;\nvoid dfs(int x)\n{\n    if (x == n+1)\n    {\n        for (int i = 1;i <= n;i++)\n                printf (\"%5d\",a[i]);\n        cout<<endl;\n        return;\n    }\n    for (int i = 1;i <= n;i++)\n    {\n        if (vis[i]==0)\n        {\n            vis[i] = 1;\n            a[x] = i;\n            dfs(x+1);//递归\n            vis[i] = 0;//回溯\n        }\n    }\n}\nint main()\n{\n    cin>>n; \n    dfs(1);\n    return 0;\n}\n```\n\n------\n\n### P1238 走迷宫\n\n注：题目来源[洛谷](https://www.luogu.com.cn/problem/P1238)。\n\n#### 题目描述\n\n有一个 $m\\times n$ 格的迷宫(表示有 $m$ 行、$n$列)，其中有可走的也有不可走的，如果用 $1$ 表示可以走，$0$ 表示不可以走，文件读入这 $m\\times n$ 个数据和起始点、结束点（起始点和结束点都是用两个数据来描述的，分别表示这个点的行号和列号）。现在要你编程找出所有可行的道路，要求所走的路中没有重复的点，走时只能是上下左右四个方向。如果一条路都不可行，则输出相应信息（用 $-1$ 表示无路）。\n\n优先顺序：左上右下。**数据保证随机生成。**\n\n#### 输入格式\n\n第一行是两个数 $m,n(1<m,n<15)$，接下来是 $m$行 $n$ 列由$1$ 和$ 0$ 组成的数据，最后两行是起始点和结束点。\n\n#### 输出格式\n\n所有可行的路径，描述一个点时用 $(x,y)$ 的形式，除开始点外，其他的都要用 `->` 表示方向。\n\n如果没有一条可行的路则输出 $-1$。\n\n#### 输入输出样例\n\n**输入 #1**\n\n```bash\n5 6\n1 0 0 1 0 1\n1 1 1 1 1 1\n0 0 1 1 1 0\n1 1 1 1 1 0\n1 1 1 0 1 1\n1 1\n5 6\n```\n\n**输出 #1**\n\n```bash\n(1,1)->(2,1)->(2,2)->(2,3)->(2,4)->(2,5)->(3,5)->(3,4)->(3,3)->(4,3)->(4,4)->(4,5)->(5,5)->(5,6)\n(1,1)->(2,1)->(2,2)->(2,3)->(2,4)->(2,5)->(3,5)->(3,4)->(4,4)->(4,5)->(5,5)->(5,6)\n(1,1)->(2,1)->(2,2)->(2,3)->(2,4)->(2,5)->(3,5)->(4,5)->(5,5)->(5,6)\n(1,1)->(2,1)->(2,2)->(2,3)->(2,4)->(3,4)->(3,3)->(4,3)->(4,4)->(4,5)->(5,5)->(5,6)\n(1,1)->(2,1)->(2,2)->(2,3)->(2,4)->(3,4)->(3,5)->(4,5)->(5,5)->(5,6)\n(1,1)->(2,1)->(2,2)->(2,3)->(2,4)->(3,4)->(4,4)->(4,5)->(5,5)->(5,6)\n(1,1)->(2,1)->(2,2)->(2,3)->(3,3)->(3,4)->(2,4)->(2,5)->(3,5)->(4,5)->(5,5)->(5,6)\n(1,1)->(2,1)->(2,2)->(2,3)->(3,3)->(3,4)->(3,5)->(4,5)->(5,5)->(5,6)\n(1,1)->(2,1)->(2,2)->(2,3)->(3,3)->(3,4)->(4,4)->(4,5)->(5,5)->(5,6)\n(1,1)->(2,1)->(2,2)->(2,3)->(3,3)->(4,3)->(4,4)->(3,4)->(2,4)->(2,5)->(3,5)->(4,5)->(5,5)->(5,6)\n(1,1)->(2,1)->(2,2)->(2,3)->(3,3)->(4,3)->(4,4)->(3,4)->(3,5)->(4,5)->(5,5)->(5,6)\n(1,1)->(2,1)->(2,2)->(2,3)->(3,3)->(4,3)->(4,4)->(4,5)->(5,5)->(5,6)\n```\n\n#### 说明/提示\n\n数据保证随机生成。事实上，如果 $n=m=14$ 且每个位置都是 $1$的话，有 $69450664761521361664274701548907358996488$ 种路径。\n\n#### 答案解析\n\n```c\n#include<iostream>\n#include<cstdio>\nusing namespace std;\nconst int N = 1001;\nbool map[N][N];\nbool visited[N][N];\nint output[N * N];//stack\nint pointer;\nbool solution;\n//for example, m=5,n=6\n//(2,3)==>(2-1)*n+3=9\n//(5,6)==>(5-1)*n+6=30\n//therefore, (x,y)==>(x-1)*n+y\nvoid dfs(int x, int y);\nint m, n, start_x, start_y, end_x, end_y;\nint main()\n{\n\tcin >> m >> n;\n\tfor (int i = 1; i <= m; i++)\n\t\tfor (int j = 1; j <= n; j++)\n\t\t\tcin >> map[i][j];\n\tcin >> start_x >> start_y;\n\tcin >> end_x >> end_y;\n\tif (map[start_x][start_y] == 0)\n\t{\n\t\tcout << \"-1\";\n\t\treturn 0;\n\t}\t\n\telse if (map[end_x][end_y] == 0)\n\t{\n\t\tcout << \"-1\";\n\t\treturn 0;\n\t}\n\telse \n\t\tdfs(start_x,start_y);\n\tif (!solution)\n\t\tcout << \"-1\";\n\treturn 0;\n}\nvoid dfs(int x,int y)\n{\n\tif (x<1 || y<1 || x>m || y> n)\n\t\treturn;\n\tif (visited[x][y] || !map[x][y])\n\t\treturn;\n\tif (x == end_x && y == end_y)\n\t{\n\t\tsolution = 1;\n\t\tfor (int i = 0; i < pointer; i++)\n\t\t\tif (output[i] % n)\n\t\t\t\tcout << \"(\" << output[i] / n + 1 << \",\" << output[i] % n << \")\" << \"->\";\n\t\t\telse\n\t\t\t\tcout << \"(\" << output[i] / n  << \",\" << n << \")\" << \"->\";\n\t\tcout << \"(\" << end_x << \",\" << end_y << \")\" << endl;\n\t\treturn;\n\t}\n\n\t//++++++++++\n\tvisited[x][y] = true;\n\toutput[pointer] = (x - 1) * n + y;\n\tpointer++;\t\n\t//++++++++++\n\n\tif (map[x][y - 1] && !visited[x][y-1])\n\t\tdfs(x, y - 1);\n\tif (map[x - 1][y] && !visited[x-1][y])\n\t\tdfs(x - 1, y);\n\tif (map[x][y + 1] && !visited[x][y+1])\n\t\tdfs(x, y + 1);\n\tif (map[x + 1][y] && !visited[x+1][y])\n\t\tdfs(x + 1, y);\n\n\t//----------\n\toutput[pointer] = 0;\n\tpointer--;\n\tvisited[x][y] = false;\n\t//----------\n\n\n}\n```\n\n---\n\n### 连通块问题（floodfill）\n\n注：我忘了在哪找的题了。。。\n\n#### 题目描述\n\n一个$n \\times m$的方格图，一些格子被涂成了黑色，在方格图中被标为$1$，白色格子标为$0$。问有多少个四连通的黑色格子连通块。四连通的黑色格子连通块指的是一片由黑色格子组成的区域，其中的每个黑色格子能通过四连通的走法（上下左右），只走黑色格子，到达该联通块中的其它黑色格子。\n\n#### 输入输出样例\n\n**输入 #1**\n\n```bash\n1 1\n*\n3 5\n*@*@*\n**@**\n*@*@*\n1 8\n@@****@*\n5 5\n****@\n*@@*@\n*@**@\n@@@*@\n@@**@\n0 0\n```\n\n**输出 #1**\n\n```bash\n0\n1\n2\n2\n```\n\n#### 答案解析\n\n```c\n#include<bits/stdc++.h>\nusing namespace std;\n#define maxn 100+5\nchar pic[maxn][maxn];//存图\nint m,n,idx[maxn][maxn];\nvoid dfs(int r,int c,int id)\n{\n    if(r<0||r>=m||c<0||c>=n)\n        return ;//出界的格子\n    if(idx[r][c]>0||pic[r][c]!='@')\n        return ;//不是'@'或已经被访问过\n    idx[r][c]=id;//将点记录下来\n    for(int dr=-1;dr<=1;dr++)\n        for(int dc=-1;dc<=1;dc++)\n            if(dr!=0||dc!=0)\n                dfs(r+dr,c+dc,id);//向四个方向搜索·\n}\nint main()\n{\n    while(scanf(\"%d%d\",&m,&n)==2 && m && n)\n    {\n        for(int i=0;i<m;i++)\n            scanf(\"%s\",pic[i]);\n        memset(idx,0,sizeof(idx));\n        int cnt=0;\n        for(int i=0;i<m;i++)\n            for(int j=0;j<n;j++)//每一次扫描所有为id的方格\n                if(idx[i][j]==0&&pic[i][j]=='@')\n                    dfs(i,j,++cnt);\n        printf(\"%d\\n\",cnt);\n    }\n    return 0;\n}\n```\n\n---\n\n$$\nEND\n$$\n\n","slug":"DFS","published":1,"updated":"2022-03-13T14:32:27.784Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1rj2n55000pgwcyc9uxe2sk","content":"<h2 id=\"dfs基本概念\"><a class=\"markdownIt-Anchor\" href=\"#dfs基本概念\"></a> DFS基本概念</h2>\n<p><strong>深度优先搜索算法</strong>（Depth First Search）：一种用于遍历或搜索树或图的算法。 沿着树的深度遍历树的节点，尽可能深的搜索树的分支。 属于盲目搜索,最糟糕的情况算法时间复杂度为<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>。</p>\n<hr>\n<h2 id=\"经典例题\"><a class=\"markdownIt-Anchor\" href=\"#经典例题\"></a> 经典例题</h2>\n<h3 id=\"p1706全排列问题\"><a class=\"markdownIt-Anchor\" href=\"#p1706全排列问题\"></a> P1706全排列问题</h3>\n<p>注：题目来源自<a href=\"https://www.luogu.com.cn/problem/P1706\">洛谷</a>。</p>\n<h4 id=\"题目描述\"><a class=\"markdownIt-Anchor\" href=\"#题目描述\"></a> 题目描述</h4>\n<p>输出自然数 1 到 n 所有不重复的排列，即 <em>n</em> 的全排列，要求所产生的任一数字序列中不允许出现重复的数字。</p>\n<h4 id=\"输入格式\"><a class=\"markdownIt-Anchor\" href=\"#输入格式\"></a> 输入格式</h4>\n<p>一个整数 n。</p>\n<h4 id=\"输出格式\"><a class=\"markdownIt-Anchor\" href=\"#输出格式\"></a> 输出格式</h4>\n<p>由1∼<em>n</em> 组成的所有不重复的数字序列，每行一个序列。</p>\n<p>每个数字保留 5 个场宽。</p>\n<h4 id=\"输入输出样例\"><a class=\"markdownIt-Anchor\" href=\"#输入输出样例\"></a> 输入输出样例</h4>\n<p><strong>输入 #1</strong></p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token number\">3</span></code></pre>\n<p><strong>输出 #1</strong></p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token number\">1</span>    <span class=\"token number\">2</span>    <span class=\"token number\">3</span>\n<span class=\"token number\">1</span>    <span class=\"token number\">3</span>    <span class=\"token number\">2</span>\n<span class=\"token number\">2</span>    <span class=\"token number\">1</span>    <span class=\"token number\">3</span>\n<span class=\"token number\">2</span>    <span class=\"token number\">3</span>    <span class=\"token number\">1</span>\n<span class=\"token number\">3</span>    <span class=\"token number\">1</span>    <span class=\"token number\">2</span>\n<span class=\"token number\">3</span>    <span class=\"token number\">2</span>    <span class=\"token number\">1</span></code></pre>\n<h4 id=\"说明提示\"><a class=\"markdownIt-Anchor\" href=\"#说明提示\"></a> 说明/提示</h4>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>1</mn><mo>≤</mo><mi>n</mi><mo>≤</mo><mn>9</mn></mrow><annotation encoding=\"application/x-tex\">1≤n≤9</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.78041em;vertical-align:-0.13597em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mord mathdefault\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">9</span></span></span></span></p>\n<h4 id=\"答案解析\"><a class=\"markdownIt-Anchor\" href=\"#答案解析\"></a> 答案解析</h4>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\nusing namespace std<span class=\"token punctuation\">;</span>\nbool vis<span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//标记数字是否出现</span>\n<span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//全排列数组</span>\n<span class=\"token keyword\">int</span> n<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">==</span> n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n                <span class=\"token function\">printf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"%5d\"</span><span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        cout<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>vis<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            vis<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            a<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n            <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//递归</span>\n            vis<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//回溯</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    cin<span class=\"token operator\">>></span>n<span class=\"token punctuation\">;</span> \n    <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<hr>\n<h3 id=\"p1238-走迷宫\"><a class=\"markdownIt-Anchor\" href=\"#p1238-走迷宫\"></a> P1238 走迷宫</h3>\n<p>注：题目来源<a href=\"https://www.luogu.com.cn/problem/P1238\">洛谷</a>。</p>\n<h4 id=\"题目描述-2\"><a class=\"markdownIt-Anchor\" href=\"#题目描述-2\"></a> 题目描述</h4>\n<p>有一个 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>m</mi><mo>×</mo><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">m\\times n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\">m</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">n</span></span></span></span> 格的迷宫(表示有 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">m</span></span></span></span> 行、<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">n</span></span></span></span>列)，其中有可走的也有不可走的，如果用 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span> 表示可以走，<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span> 表示不可以走，文件读入这 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>m</mi><mo>×</mo><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">m\\times n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\">m</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">n</span></span></span></span> 个数据和起始点、结束点（起始点和结束点都是用两个数据来描述的，分别表示这个点的行号和列号）。现在要你编程找出所有可行的道路，要求所走的路中没有重复的点，走时只能是上下左右四个方向。如果一条路都不可行，则输出相应信息（用 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">-1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">−</span><span class=\"mord\">1</span></span></span></span> 表示无路）。</p>\n<p>优先顺序：左上右下。<strong>数据保证随机生成。</strong></p>\n<h4 id=\"输入格式-2\"><a class=\"markdownIt-Anchor\" href=\"#输入格式-2\"></a> 输入格式</h4>\n<p>第一行是两个数 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>m</mi><mo separator=\"true\">,</mo><mi>n</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo>&lt;</mo><mi>m</mi><mo separator=\"true\">,</mo><mi>n</mi><mo>&lt;</mo><mn>15</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">m,n(1&lt;m,n&lt;15)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">m</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\">n</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7335400000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\">m</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mord\">5</span><span class=\"mclose\">)</span></span></span></span>，接下来是 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">m</span></span></span></span>行 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">n</span></span></span></span> 列由<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span> 和$ 0$ 组成的数据，最后两行是起始点和结束点。</p>\n<h4 id=\"输出格式-2\"><a class=\"markdownIt-Anchor\" href=\"#输出格式-2\"></a> 输出格式</h4>\n<p>所有可行的路径，描述一个点时用 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo stretchy=\"false\">(</mo><mi>x</mi><mo separator=\"true\">,</mo><mi>y</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(x,y)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span></span></span></span> 的形式，除开始点外，其他的都要用 <code>-&gt;</code> 表示方向。</p>\n<p>如果没有一条可行的路则输出 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">-1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">−</span><span class=\"mord\">1</span></span></span></span>。</p>\n<h4 id=\"输入输出样例-2\"><a class=\"markdownIt-Anchor\" href=\"#输入输出样例-2\"></a> 输入输出样例</h4>\n<p><strong>输入 #1</strong></p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token number\">5</span> <span class=\"token number\">6</span>\n<span class=\"token number\">1</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">1</span> <span class=\"token number\">0</span> <span class=\"token number\">1</span>\n<span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span>\n<span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">0</span>\n<span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">0</span>\n<span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">0</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span>\n<span class=\"token number\">1</span> <span class=\"token number\">1</span>\n<span class=\"token number\">5</span> <span class=\"token number\">6</span></code></pre>\n<p><strong>输出 #1</strong></p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">(</span><span class=\"token number\">1,1</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,1</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,2</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,3</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,4</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,5</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">3,5</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">3,4</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">3,3</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">4,3</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">4,4</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">4,5</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">5,5</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">5,6</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">1,1</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,1</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,2</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,3</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,4</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,5</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">3,5</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">3,4</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">4,4</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">4,5</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">5,5</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">5,6</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">1,1</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,1</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,2</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,3</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,4</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,5</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">3,5</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">4,5</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">5,5</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">5,6</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">1,1</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,1</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,2</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,3</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,4</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">3,4</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">3,3</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">4,3</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">4,4</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">4,5</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">5,5</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">5,6</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">1,1</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,1</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,2</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,3</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,4</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">3,4</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">3,5</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">4,5</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">5,5</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">5,6</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">1,1</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,1</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,2</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,3</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,4</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">3,4</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">4,4</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">4,5</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">5,5</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">5,6</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">1,1</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,1</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,2</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,3</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">3,3</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">3,4</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,4</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,5</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">3,5</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">4,5</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">5,5</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">5,6</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">1,1</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,1</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,2</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,3</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">3,3</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">3,4</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">3,5</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">4,5</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">5,5</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">5,6</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">1,1</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,1</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,2</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,3</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">3,3</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">3,4</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">4,4</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">4,5</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">5,5</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">5,6</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">1,1</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,1</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,2</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,3</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">3,3</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">4,3</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">4,4</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">3,4</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,4</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,5</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">3,5</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">4,5</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">5,5</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">5,6</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">1,1</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,1</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,2</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,3</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">3,3</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">4,3</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">4,4</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">3,4</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">3,5</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">4,5</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">5,5</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">5,6</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">1,1</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,1</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,2</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,3</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">3,3</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">4,3</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">4,4</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">4,5</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">5,5</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">5,6</span><span class=\"token punctuation\">)</span></code></pre>\n<h4 id=\"说明提示-2\"><a class=\"markdownIt-Anchor\" href=\"#说明提示-2\"></a> 说明/提示</h4>\n<p>数据保证随机生成。事实上，如果 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>n</mi><mo>=</mo><mi>m</mi><mo>=</mo><mn>14</mn></mrow><annotation encoding=\"application/x-tex\">n=m=14</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">m</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\">4</span></span></span></span> 且每个位置都是 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>的话，有 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>69450664761521361664274701548907358996488</mn></mrow><annotation encoding=\"application/x-tex\">69450664761521361664274701548907358996488</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">6</span><span class=\"mord\">9</span><span class=\"mord\">4</span><span class=\"mord\">5</span><span class=\"mord\">0</span><span class=\"mord\">6</span><span class=\"mord\">6</span><span class=\"mord\">4</span><span class=\"mord\">7</span><span class=\"mord\">6</span><span class=\"mord\">1</span><span class=\"mord\">5</span><span class=\"mord\">2</span><span class=\"mord\">1</span><span class=\"mord\">3</span><span class=\"mord\">6</span><span class=\"mord\">1</span><span class=\"mord\">6</span><span class=\"mord\">6</span><span class=\"mord\">4</span><span class=\"mord\">2</span><span class=\"mord\">7</span><span class=\"mord\">4</span><span class=\"mord\">7</span><span class=\"mord\">0</span><span class=\"mord\">1</span><span class=\"mord\">5</span><span class=\"mord\">4</span><span class=\"mord\">8</span><span class=\"mord\">9</span><span class=\"mord\">0</span><span class=\"mord\">7</span><span class=\"mord\">3</span><span class=\"mord\">5</span><span class=\"mord\">8</span><span class=\"mord\">9</span><span class=\"mord\">9</span><span class=\"mord\">6</span><span class=\"mord\">4</span><span class=\"mord\">8</span><span class=\"mord\">8</span></span></span></span> 种路径。</p>\n<h4 id=\"答案解析-2\"><a class=\"markdownIt-Anchor\" href=\"#答案解析-2\"></a> 答案解析</h4>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;cstdio></span></span>\nusing namespace std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> N <span class=\"token operator\">=</span> <span class=\"token number\">1001</span><span class=\"token punctuation\">;</span>\nbool map<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nbool visited<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> output<span class=\"token punctuation\">[</span>N <span class=\"token operator\">*</span> N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//stack</span>\n<span class=\"token keyword\">int</span> pointer<span class=\"token punctuation\">;</span>\nbool solution<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//for example, m=5,n=6</span>\n<span class=\"token comment\">//(2,3)==>(2-1)*n+3=9</span>\n<span class=\"token comment\">//(5,6)==>(5-1)*n+6=30</span>\n<span class=\"token comment\">//therefore, (x,y)==>(x-1)*n+y</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> m<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> start_x<span class=\"token punctuation\">,</span> start_y<span class=\"token punctuation\">,</span> end_x<span class=\"token punctuation\">,</span> end_y<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\tcin <span class=\"token operator\">>></span> m <span class=\"token operator\">>></span> n<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> m<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t\tcin <span class=\"token operator\">>></span> map<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\tcin <span class=\"token operator\">>></span> start_x <span class=\"token operator\">>></span> start_y<span class=\"token punctuation\">;</span>\n\tcin <span class=\"token operator\">>></span> end_x <span class=\"token operator\">>></span> end_y<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">[</span>start_x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>start_y<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"-1\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\t\n\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">[</span>end_x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>end_y<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"-1\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">else</span> \n\t\t<span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>start_x<span class=\"token punctuation\">,</span>start_y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>solution<span class=\"token punctuation\">)</span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"-1\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x<span class=\"token operator\">&lt;</span><span class=\"token number\">1</span> <span class=\"token operator\">||</span> y<span class=\"token operator\">&lt;</span><span class=\"token number\">1</span> <span class=\"token operator\">||</span> x<span class=\"token operator\">></span>m <span class=\"token operator\">||</span> y<span class=\"token operator\">></span> n<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>visited<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>map<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">==</span> end_x <span class=\"token operator\">&amp;&amp;</span> y <span class=\"token operator\">==</span> end_y<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\tsolution <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> pointer<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>output<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">%</span> n<span class=\"token punctuation\">)</span>\n\t\t\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"(\"</span> <span class=\"token operator\">&lt;&lt;</span> output<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">/</span> n <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\",\"</span> <span class=\"token operator\">&lt;&lt;</span> output<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">%</span> n <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\")\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"->\"</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">else</span>\n\t\t\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"(\"</span> <span class=\"token operator\">&lt;&lt;</span> output<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">/</span> n  <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\",\"</span> <span class=\"token operator\">&lt;&lt;</span> n <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\")\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"->\"</span><span class=\"token punctuation\">;</span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"(\"</span> <span class=\"token operator\">&lt;&lt;</span> end_x <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\",\"</span> <span class=\"token operator\">&lt;&lt;</span> end_y <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\")\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token comment\">//++++++++++</span>\n\tvisited<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> true<span class=\"token punctuation\">;</span>\n\toutput<span class=\"token punctuation\">[</span>pointer<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> n <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span>\n\tpointer<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\t\n\t<span class=\"token comment\">//++++++++++</span>\n\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>visited<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">[</span>x <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>visited<span class=\"token punctuation\">[</span>x<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>visited<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">[</span>x <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>visited<span class=\"token punctuation\">[</span>x<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">//----------</span>\n\toutput<span class=\"token punctuation\">[</span>pointer<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\tpointer<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n\tvisited<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> false<span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//----------</span>\n\n\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<hr>\n<h3 id=\"连通块问题floodfill\"><a class=\"markdownIt-Anchor\" href=\"#连通块问题floodfill\"></a> 连通块问题（floodfill）</h3>\n<p>注：我忘了在哪找的题了。。。</p>\n<h4 id=\"题目描述-3\"><a class=\"markdownIt-Anchor\" href=\"#题目描述-3\"></a> 题目描述</h4>\n<p>一个<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>n</mi><mo>×</mo><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">n \\times m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">m</span></span></span></span>的方格图，一些格子被涂成了黑色，在方格图中被标为<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>，白色格子标为<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span>。问有多少个四连通的黑色格子连通块。四连通的黑色格子连通块指的是一片由黑色格子组成的区域，其中的每个黑色格子能通过四连通的走法（上下左右），只走黑色格子，到达该联通块中的其它黑色格子。</p>\n<h4 id=\"输入输出样例-3\"><a class=\"markdownIt-Anchor\" href=\"#输入输出样例-3\"></a> 输入输出样例</h4>\n<p><strong>输入 #1</strong></p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token number\">1</span> <span class=\"token number\">1</span>\n*\n<span class=\"token number\">3</span> <span class=\"token number\">5</span>\n*@*@*\n**@**\n*@*@*\n<span class=\"token number\">1</span> <span class=\"token number\">8</span>\n@@****@*\n<span class=\"token number\">5</span> <span class=\"token number\">5</span>\n****@\n*@@*@\n*@**@\n@@@*@\n@@**@\n<span class=\"token number\">0</span> <span class=\"token number\">0</span></code></pre>\n<p><strong>输出 #1</strong></p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token number\">0</span>\n<span class=\"token number\">1</span>\n<span class=\"token number\">2</span>\n<span class=\"token number\">2</span></code></pre>\n<h4 id=\"答案解析-3\"><a class=\"markdownIt-Anchor\" href=\"#答案解析-3\"></a> 答案解析</h4>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;bits/stdc++.h></span></span>\nusing namespace std<span class=\"token punctuation\">;</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">maxn</span> <span class=\"token expression\"><span class=\"token number\">100</span><span class=\"token operator\">+</span><span class=\"token number\">5</span></span></span>\n<span class=\"token keyword\">char</span> pic<span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//存图</span>\n<span class=\"token keyword\">int</span> m<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">,</span>idx<span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> r<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> c<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> id<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>r<span class=\"token operator\">&lt;</span><span class=\"token number\">0</span><span class=\"token operator\">||</span>r<span class=\"token operator\">>=</span>m<span class=\"token operator\">||</span>c<span class=\"token operator\">&lt;</span><span class=\"token number\">0</span><span class=\"token operator\">||</span>c<span class=\"token operator\">>=</span>n<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">;</span><span class=\"token comment\">//出界的格子</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>idx<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">]</span><span class=\"token operator\">></span><span class=\"token number\">0</span><span class=\"token operator\">||</span>pic<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">]</span><span class=\"token operator\">!=</span><span class=\"token char\">'@'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">;</span><span class=\"token comment\">//不是'@'或已经被访问过</span>\n    idx<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>id<span class=\"token punctuation\">;</span><span class=\"token comment\">//将点记录下来</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> dr<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>dr<span class=\"token operator\">&lt;=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>dr<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> dc<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>dc<span class=\"token operator\">&lt;=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>dc<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>dr<span class=\"token operator\">!=</span><span class=\"token number\">0</span><span class=\"token operator\">||</span>dc<span class=\"token operator\">!=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n                <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>r<span class=\"token operator\">+</span>dr<span class=\"token punctuation\">,</span>c<span class=\"token operator\">+</span>dc<span class=\"token punctuation\">,</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//向四个方向搜索·</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>m<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token number\">2</span> <span class=\"token operator\">&amp;&amp;</span> m <span class=\"token operator\">&amp;&amp;</span> n<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>m<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n            <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\"</span><span class=\"token punctuation\">,</span>pic<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>idx<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>idx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> cnt<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>m<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//每一次扫描所有为id的方格</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>idx<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token operator\">&amp;&amp;</span>pic<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token char\">'@'</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">,</span><span class=\"token operator\">++</span>cnt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span>cnt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<hr>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>E</mi><mi>N</mi><mi>D</mi></mrow><annotation encoding=\"application/x-tex\">END\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">N</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">D</span></span></span></span></span></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"dfs基本概念\"><a class=\"markdownIt-Anchor\" href=\"#dfs基本概念\"></a> DFS基本概念</h2>\n<p><strong>深度优先搜索算法</strong>（Depth First Search）：一种用于遍历或搜索树或图的算法。 沿着树的深度遍历树的节点，尽可能深的搜索树的分支。 属于盲目搜索,最糟糕的情况算法时间复杂度为<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>。</p>\n<hr>\n<h2 id=\"经典例题\"><a class=\"markdownIt-Anchor\" href=\"#经典例题\"></a> 经典例题</h2>\n<h3 id=\"p1706全排列问题\"><a class=\"markdownIt-Anchor\" href=\"#p1706全排列问题\"></a> P1706全排列问题</h3>\n<p>注：题目来源自<a href=\"https://www.luogu.com.cn/problem/P1706\">洛谷</a>。</p>\n<h4 id=\"题目描述\"><a class=\"markdownIt-Anchor\" href=\"#题目描述\"></a> 题目描述</h4>\n<p>输出自然数 1 到 n 所有不重复的排列，即 <em>n</em> 的全排列，要求所产生的任一数字序列中不允许出现重复的数字。</p>\n<h4 id=\"输入格式\"><a class=\"markdownIt-Anchor\" href=\"#输入格式\"></a> 输入格式</h4>\n<p>一个整数 n。</p>\n<h4 id=\"输出格式\"><a class=\"markdownIt-Anchor\" href=\"#输出格式\"></a> 输出格式</h4>\n<p>由1∼<em>n</em> 组成的所有不重复的数字序列，每行一个序列。</p>\n<p>每个数字保留 5 个场宽。</p>\n<h4 id=\"输入输出样例\"><a class=\"markdownIt-Anchor\" href=\"#输入输出样例\"></a> 输入输出样例</h4>\n<p><strong>输入 #1</strong></p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token number\">3</span></code></pre>\n<p><strong>输出 #1</strong></p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token number\">1</span>    <span class=\"token number\">2</span>    <span class=\"token number\">3</span>\n<span class=\"token number\">1</span>    <span class=\"token number\">3</span>    <span class=\"token number\">2</span>\n<span class=\"token number\">2</span>    <span class=\"token number\">1</span>    <span class=\"token number\">3</span>\n<span class=\"token number\">2</span>    <span class=\"token number\">3</span>    <span class=\"token number\">1</span>\n<span class=\"token number\">3</span>    <span class=\"token number\">1</span>    <span class=\"token number\">2</span>\n<span class=\"token number\">3</span>    <span class=\"token number\">2</span>    <span class=\"token number\">1</span></code></pre>\n<h4 id=\"说明提示\"><a class=\"markdownIt-Anchor\" href=\"#说明提示\"></a> 说明/提示</h4>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>1</mn><mo>≤</mo><mi>n</mi><mo>≤</mo><mn>9</mn></mrow><annotation encoding=\"application/x-tex\">1≤n≤9</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.78041em;vertical-align:-0.13597em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mord mathdefault\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">9</span></span></span></span></p>\n<h4 id=\"答案解析\"><a class=\"markdownIt-Anchor\" href=\"#答案解析\"></a> 答案解析</h4>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\nusing namespace std<span class=\"token punctuation\">;</span>\nbool vis<span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//标记数字是否出现</span>\n<span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//全排列数组</span>\n<span class=\"token keyword\">int</span> n<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">==</span> n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n                <span class=\"token function\">printf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"%5d\"</span><span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        cout<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>vis<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            vis<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            a<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n            <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//递归</span>\n            vis<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//回溯</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    cin<span class=\"token operator\">>></span>n<span class=\"token punctuation\">;</span> \n    <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<hr>\n<h3 id=\"p1238-走迷宫\"><a class=\"markdownIt-Anchor\" href=\"#p1238-走迷宫\"></a> P1238 走迷宫</h3>\n<p>注：题目来源<a href=\"https://www.luogu.com.cn/problem/P1238\">洛谷</a>。</p>\n<h4 id=\"题目描述-2\"><a class=\"markdownIt-Anchor\" href=\"#题目描述-2\"></a> 题目描述</h4>\n<p>有一个 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>m</mi><mo>×</mo><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">m\\times n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\">m</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">n</span></span></span></span> 格的迷宫(表示有 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">m</span></span></span></span> 行、<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">n</span></span></span></span>列)，其中有可走的也有不可走的，如果用 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span> 表示可以走，<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span> 表示不可以走，文件读入这 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>m</mi><mo>×</mo><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">m\\times n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\">m</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">n</span></span></span></span> 个数据和起始点、结束点（起始点和结束点都是用两个数据来描述的，分别表示这个点的行号和列号）。现在要你编程找出所有可行的道路，要求所走的路中没有重复的点，走时只能是上下左右四个方向。如果一条路都不可行，则输出相应信息（用 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">-1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">−</span><span class=\"mord\">1</span></span></span></span> 表示无路）。</p>\n<p>优先顺序：左上右下。<strong>数据保证随机生成。</strong></p>\n<h4 id=\"输入格式-2\"><a class=\"markdownIt-Anchor\" href=\"#输入格式-2\"></a> 输入格式</h4>\n<p>第一行是两个数 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>m</mi><mo separator=\"true\">,</mo><mi>n</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo>&lt;</mo><mi>m</mi><mo separator=\"true\">,</mo><mi>n</mi><mo>&lt;</mo><mn>15</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">m,n(1&lt;m,n&lt;15)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">m</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\">n</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7335400000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\">m</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mord\">5</span><span class=\"mclose\">)</span></span></span></span>，接下来是 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">m</span></span></span></span>行 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">n</span></span></span></span> 列由<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span> 和$ 0$ 组成的数据，最后两行是起始点和结束点。</p>\n<h4 id=\"输出格式-2\"><a class=\"markdownIt-Anchor\" href=\"#输出格式-2\"></a> 输出格式</h4>\n<p>所有可行的路径，描述一个点时用 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo stretchy=\"false\">(</mo><mi>x</mi><mo separator=\"true\">,</mo><mi>y</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(x,y)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span></span></span></span> 的形式，除开始点外，其他的都要用 <code>-&gt;</code> 表示方向。</p>\n<p>如果没有一条可行的路则输出 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">-1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">−</span><span class=\"mord\">1</span></span></span></span>。</p>\n<h4 id=\"输入输出样例-2\"><a class=\"markdownIt-Anchor\" href=\"#输入输出样例-2\"></a> 输入输出样例</h4>\n<p><strong>输入 #1</strong></p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token number\">5</span> <span class=\"token number\">6</span>\n<span class=\"token number\">1</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">1</span> <span class=\"token number\">0</span> <span class=\"token number\">1</span>\n<span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span>\n<span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">0</span>\n<span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">0</span>\n<span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">0</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span>\n<span class=\"token number\">1</span> <span class=\"token number\">1</span>\n<span class=\"token number\">5</span> <span class=\"token number\">6</span></code></pre>\n<p><strong>输出 #1</strong></p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">(</span><span class=\"token number\">1,1</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,1</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,2</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,3</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,4</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,5</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">3,5</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">3,4</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">3,3</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">4,3</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">4,4</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">4,5</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">5,5</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">5,6</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">1,1</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,1</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,2</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,3</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,4</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,5</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">3,5</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">3,4</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">4,4</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">4,5</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">5,5</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">5,6</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">1,1</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,1</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,2</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,3</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,4</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,5</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">3,5</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">4,5</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">5,5</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">5,6</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">1,1</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,1</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,2</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,3</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,4</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">3,4</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">3,3</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">4,3</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">4,4</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">4,5</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">5,5</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">5,6</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">1,1</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,1</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,2</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,3</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,4</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">3,4</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">3,5</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">4,5</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">5,5</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">5,6</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">1,1</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,1</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,2</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,3</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,4</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">3,4</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">4,4</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">4,5</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">5,5</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">5,6</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">1,1</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,1</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,2</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,3</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">3,3</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">3,4</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,4</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,5</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">3,5</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">4,5</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">5,5</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">5,6</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">1,1</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,1</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,2</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,3</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">3,3</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">3,4</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">3,5</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">4,5</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">5,5</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">5,6</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">1,1</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,1</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,2</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,3</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">3,3</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">3,4</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">4,4</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">4,5</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">5,5</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">5,6</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">1,1</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,1</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,2</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,3</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">3,3</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">4,3</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">4,4</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">3,4</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,4</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,5</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">3,5</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">4,5</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">5,5</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">5,6</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">1,1</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,1</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,2</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,3</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">3,3</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">4,3</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">4,4</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">3,4</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">3,5</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">4,5</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">5,5</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">5,6</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">1,1</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,1</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,2</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,3</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">3,3</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">4,3</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">4,4</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">4,5</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">5,5</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">5,6</span><span class=\"token punctuation\">)</span></code></pre>\n<h4 id=\"说明提示-2\"><a class=\"markdownIt-Anchor\" href=\"#说明提示-2\"></a> 说明/提示</h4>\n<p>数据保证随机生成。事实上，如果 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>n</mi><mo>=</mo><mi>m</mi><mo>=</mo><mn>14</mn></mrow><annotation encoding=\"application/x-tex\">n=m=14</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">m</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\">4</span></span></span></span> 且每个位置都是 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>的话，有 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>69450664761521361664274701548907358996488</mn></mrow><annotation encoding=\"application/x-tex\">69450664761521361664274701548907358996488</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">6</span><span class=\"mord\">9</span><span class=\"mord\">4</span><span class=\"mord\">5</span><span class=\"mord\">0</span><span class=\"mord\">6</span><span class=\"mord\">6</span><span class=\"mord\">4</span><span class=\"mord\">7</span><span class=\"mord\">6</span><span class=\"mord\">1</span><span class=\"mord\">5</span><span class=\"mord\">2</span><span class=\"mord\">1</span><span class=\"mord\">3</span><span class=\"mord\">6</span><span class=\"mord\">1</span><span class=\"mord\">6</span><span class=\"mord\">6</span><span class=\"mord\">4</span><span class=\"mord\">2</span><span class=\"mord\">7</span><span class=\"mord\">4</span><span class=\"mord\">7</span><span class=\"mord\">0</span><span class=\"mord\">1</span><span class=\"mord\">5</span><span class=\"mord\">4</span><span class=\"mord\">8</span><span class=\"mord\">9</span><span class=\"mord\">0</span><span class=\"mord\">7</span><span class=\"mord\">3</span><span class=\"mord\">5</span><span class=\"mord\">8</span><span class=\"mord\">9</span><span class=\"mord\">9</span><span class=\"mord\">6</span><span class=\"mord\">4</span><span class=\"mord\">8</span><span class=\"mord\">8</span></span></span></span> 种路径。</p>\n<h4 id=\"答案解析-2\"><a class=\"markdownIt-Anchor\" href=\"#答案解析-2\"></a> 答案解析</h4>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;cstdio></span></span>\nusing namespace std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> N <span class=\"token operator\">=</span> <span class=\"token number\">1001</span><span class=\"token punctuation\">;</span>\nbool map<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nbool visited<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> output<span class=\"token punctuation\">[</span>N <span class=\"token operator\">*</span> N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//stack</span>\n<span class=\"token keyword\">int</span> pointer<span class=\"token punctuation\">;</span>\nbool solution<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//for example, m=5,n=6</span>\n<span class=\"token comment\">//(2,3)==>(2-1)*n+3=9</span>\n<span class=\"token comment\">//(5,6)==>(5-1)*n+6=30</span>\n<span class=\"token comment\">//therefore, (x,y)==>(x-1)*n+y</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> m<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> start_x<span class=\"token punctuation\">,</span> start_y<span class=\"token punctuation\">,</span> end_x<span class=\"token punctuation\">,</span> end_y<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\tcin <span class=\"token operator\">>></span> m <span class=\"token operator\">>></span> n<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> m<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t\tcin <span class=\"token operator\">>></span> map<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\tcin <span class=\"token operator\">>></span> start_x <span class=\"token operator\">>></span> start_y<span class=\"token punctuation\">;</span>\n\tcin <span class=\"token operator\">>></span> end_x <span class=\"token operator\">>></span> end_y<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">[</span>start_x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>start_y<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"-1\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\t\n\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">[</span>end_x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>end_y<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"-1\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">else</span> \n\t\t<span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>start_x<span class=\"token punctuation\">,</span>start_y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>solution<span class=\"token punctuation\">)</span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"-1\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x<span class=\"token operator\">&lt;</span><span class=\"token number\">1</span> <span class=\"token operator\">||</span> y<span class=\"token operator\">&lt;</span><span class=\"token number\">1</span> <span class=\"token operator\">||</span> x<span class=\"token operator\">></span>m <span class=\"token operator\">||</span> y<span class=\"token operator\">></span> n<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>visited<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>map<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">==</span> end_x <span class=\"token operator\">&amp;&amp;</span> y <span class=\"token operator\">==</span> end_y<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\tsolution <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> pointer<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>output<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">%</span> n<span class=\"token punctuation\">)</span>\n\t\t\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"(\"</span> <span class=\"token operator\">&lt;&lt;</span> output<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">/</span> n <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\",\"</span> <span class=\"token operator\">&lt;&lt;</span> output<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">%</span> n <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\")\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"->\"</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">else</span>\n\t\t\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"(\"</span> <span class=\"token operator\">&lt;&lt;</span> output<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">/</span> n  <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\",\"</span> <span class=\"token operator\">&lt;&lt;</span> n <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\")\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"->\"</span><span class=\"token punctuation\">;</span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"(\"</span> <span class=\"token operator\">&lt;&lt;</span> end_x <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\",\"</span> <span class=\"token operator\">&lt;&lt;</span> end_y <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\")\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token comment\">//++++++++++</span>\n\tvisited<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> true<span class=\"token punctuation\">;</span>\n\toutput<span class=\"token punctuation\">[</span>pointer<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> n <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span>\n\tpointer<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\t\n\t<span class=\"token comment\">//++++++++++</span>\n\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>visited<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">[</span>x <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>visited<span class=\"token punctuation\">[</span>x<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>visited<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">[</span>x <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>visited<span class=\"token punctuation\">[</span>x<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">//----------</span>\n\toutput<span class=\"token punctuation\">[</span>pointer<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\tpointer<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n\tvisited<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> false<span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//----------</span>\n\n\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<hr>\n<h3 id=\"连通块问题floodfill\"><a class=\"markdownIt-Anchor\" href=\"#连通块问题floodfill\"></a> 连通块问题（floodfill）</h3>\n<p>注：我忘了在哪找的题了。。。</p>\n<h4 id=\"题目描述-3\"><a class=\"markdownIt-Anchor\" href=\"#题目描述-3\"></a> 题目描述</h4>\n<p>一个<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>n</mi><mo>×</mo><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">n \\times m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">m</span></span></span></span>的方格图，一些格子被涂成了黑色，在方格图中被标为<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>，白色格子标为<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span>。问有多少个四连通的黑色格子连通块。四连通的黑色格子连通块指的是一片由黑色格子组成的区域，其中的每个黑色格子能通过四连通的走法（上下左右），只走黑色格子，到达该联通块中的其它黑色格子。</p>\n<h4 id=\"输入输出样例-3\"><a class=\"markdownIt-Anchor\" href=\"#输入输出样例-3\"></a> 输入输出样例</h4>\n<p><strong>输入 #1</strong></p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token number\">1</span> <span class=\"token number\">1</span>\n*\n<span class=\"token number\">3</span> <span class=\"token number\">5</span>\n*@*@*\n**@**\n*@*@*\n<span class=\"token number\">1</span> <span class=\"token number\">8</span>\n@@****@*\n<span class=\"token number\">5</span> <span class=\"token number\">5</span>\n****@\n*@@*@\n*@**@\n@@@*@\n@@**@\n<span class=\"token number\">0</span> <span class=\"token number\">0</span></code></pre>\n<p><strong>输出 #1</strong></p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token number\">0</span>\n<span class=\"token number\">1</span>\n<span class=\"token number\">2</span>\n<span class=\"token number\">2</span></code></pre>\n<h4 id=\"答案解析-3\"><a class=\"markdownIt-Anchor\" href=\"#答案解析-3\"></a> 答案解析</h4>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;bits/stdc++.h></span></span>\nusing namespace std<span class=\"token punctuation\">;</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">maxn</span> <span class=\"token expression\"><span class=\"token number\">100</span><span class=\"token operator\">+</span><span class=\"token number\">5</span></span></span>\n<span class=\"token keyword\">char</span> pic<span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//存图</span>\n<span class=\"token keyword\">int</span> m<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">,</span>idx<span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> r<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> c<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> id<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>r<span class=\"token operator\">&lt;</span><span class=\"token number\">0</span><span class=\"token operator\">||</span>r<span class=\"token operator\">>=</span>m<span class=\"token operator\">||</span>c<span class=\"token operator\">&lt;</span><span class=\"token number\">0</span><span class=\"token operator\">||</span>c<span class=\"token operator\">>=</span>n<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">;</span><span class=\"token comment\">//出界的格子</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>idx<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">]</span><span class=\"token operator\">></span><span class=\"token number\">0</span><span class=\"token operator\">||</span>pic<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">]</span><span class=\"token operator\">!=</span><span class=\"token char\">'@'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">;</span><span class=\"token comment\">//不是'@'或已经被访问过</span>\n    idx<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>id<span class=\"token punctuation\">;</span><span class=\"token comment\">//将点记录下来</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> dr<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>dr<span class=\"token operator\">&lt;=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>dr<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> dc<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>dc<span class=\"token operator\">&lt;=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>dc<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>dr<span class=\"token operator\">!=</span><span class=\"token number\">0</span><span class=\"token operator\">||</span>dc<span class=\"token operator\">!=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n                <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>r<span class=\"token operator\">+</span>dr<span class=\"token punctuation\">,</span>c<span class=\"token operator\">+</span>dc<span class=\"token punctuation\">,</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//向四个方向搜索·</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>m<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token number\">2</span> <span class=\"token operator\">&amp;&amp;</span> m <span class=\"token operator\">&amp;&amp;</span> n<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>m<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n            <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\"</span><span class=\"token punctuation\">,</span>pic<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>idx<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>idx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> cnt<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>m<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//每一次扫描所有为id的方格</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>idx<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token operator\">&amp;&amp;</span>pic<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token char\">'@'</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">,</span><span class=\"token operator\">++</span>cnt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span>cnt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<hr>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>E</mi><mi>N</mi><mi>D</mi></mrow><annotation encoding=\"application/x-tex\">END\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">N</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">D</span></span></span></span></span></p>\n"},{"title":"图的基础知识","date":"2022-03-09T04:51:45.000Z","author":"Tony","katex":true,"_content":"\n## 基础知识\n\n### 图的定义和分类\n\n- **图的定义** 是一个顶点集合V和一个顶点间关系的集合E组成，记G=(V,E) V：顶点的有限非空集合。 E：顶点间关系的有限集合（边集）。\n\n- **无向图** (graph)在G=(V,E)中，如果对于任意的结点a,b∈V，当(a,b)∈E时，必有(b,a)∈E（即关系R对称），如图二。\n  $$\n  V={1,2,3,4,5}\\\\ \n  E={(1,2),(1,3),(1,4),(2,3),(2,5),(3,5),(4,5)}\n  $$\n  \n- **有向图** (digraph)在G=(V,E)中，如果对于任意的结点a,b∈V，当(a,b)∈E时，(b,a)∈E未必成立，如图三。 \n  $$\n  V={1,2,3,4,5}\\\\\n  E={<1,2>,<1,4>,<2,3>,<2,5>,<3,1>,<5,3>,<5,4>}\n  $$\n\n![img](Graph-search/image-1.png)\n\n- **带权图** 一般的图边上没有数字，边仅表示两个顶点间相连接关系 ，如图四。\n- **连通图**图中任意两个顶点都是连通的，称为连通图；否则为非连通图，如图五。\n\n![img](Graph-search/image-2.png)\n\n### 邻接矩阵和邻接表\n\n- **邻接矩阵**\n\n邻接矩阵的优势是方便定义，只需要一个二维矩阵就可以解决；缺点也显而易见，浪费空间。\n\n![img](Graph-search/v2-9e2643ca5d96f86a391c36de4d3bd48d_720w.jpg)\n\n- **邻接表**\n\n邻接表的优势自然就是尽可能的节省更多的空间，但是与之相对应的就是定义起来很麻烦，需要用链表或者vector来实现。\n\n![img](Graph-search/v2-4a4d37df348f283649e2aecc74d959b5_720w.jpg)\n\n*(图是网上抄的，看水印，如有侵权，请联系我)\n\n## 图的遍历(DFS&&BFS)\n\n------\n\n好了，上面我们学习了图的概念以及如何存图，接下来就是重头戏了。\n\n接下来便是如何实现图的搜索，首先我们来看这样一个有向图， 我们不妨设从1号顶点起始。\n\n![img](Graph-search/image-3.png)\n\n在搜索过程中，我们维护一个布尔数组bool visited[N+1]，这个数组用来表示每个顶点是不是已经遍历过了。\n\n接下来，从1号开始进行DFS，遍历过的节点就在`visited[]`中标注。visited[i] == true表示顶点i已经遍历过了，visited[i] == false表示i还没有遍历过。DFS的具体方法可以用递归实现，直到所有节点都被遍历过结束。如果采用邻接矩阵，伪代码如下：\n\n```python\nVisited[]={0}\nDFS(x):\n\tVisited[x]=true\n\tfor(i=1;i<=N;i++):\n\t\tif(!Visited[i] && map[x][i]):\n\t\t\tDFS(i)\n```\n\n## 代码实现\n\n------\n\n### DFS递归实现\n\n```c++\n#include <iostream>\n#define N 5\nusing namespace std;\nint maze[N][N] = {\n    { 0, 1, 1, 0, 0 },\n    { 0, 0, 1, 0, 1 },\n    { 0, 0, 1, 0, 0 },\n    { 1, 1, 0, 0, 1 },\n    { 0, 0, 1, 0, 0 }\n};\nbool visited[N + 1];\nvoid DFS(int start)\n{\n    visited[start] = true;\n    for (int i = 1; i <= N; i++)\n        if (!visited[i] && maze[start - 1][i - 1] == 1)\n            DFS(i);\n    cout << start << \" \";\n}\nint main()\n{\n    for (int i = 1; i <= N; i++)\n    {\n        if (visited[i])\n            continue;\n        DFS(i);\n    }\n    return 0;\n}\n```\n\n### DFS非递归实现\n\n```c++\n#include <iostream>\n#include <stack>\n#define N 5\nusing namespace std;\nint maze[N][N] = {\n    { 0, 1, 1, 0, 0 },\n    { 0, 0, 1, 0, 1 },\n    { 0, 0, 1, 0, 0 },\n    { 1, 1, 0, 0, 1 },\n    { 0, 0, 1, 0, 0 }\n};\nbool visited[N + 1];\nvoid DFS(int start)\n{\n    stack<int> s;\n    s.push(start);\n    visited[start] = true;\n    bool is_push = false;\n    while (!s.empty())\n    {\n        is_push = false;\n        int v = s.top();\n        for (int i = 1; i <= N; i++)\n        {\n            if (maze[v - 1][i - 1] == 1 && !visited[i])\n            {\n                visited[i] = true;\n                s.push(i);\n                is_push = true;\n                break;\n            }\n        }\n        if (!is_push)\n        {\n            cout << v << \" \";\n            s.pop();\n        }\n    }\n}\nint main()\n{\n    for (int i = 1; i <= N; i++)\n    {\n        if (visited[i])\n            continue;\n        DFS(i);\n    }\n    return 0;\n}\n```\n\n### BFS实现\n\n```c++\n#include <iostream>\n#include <queue>\n#define N 5\nusing namespace std;\nint maze[N][N] = {\n    { 0, 1, 1, 0, 0 },\n    { 0, 0, 1, 1, 0 },\n    { 0, 1, 1, 1, 0 },\n    { 1, 0, 0, 0, 0 },\n    { 0, 0, 1, 1, 0 }\n};\nbool visited[N + 1];\nvoid BFS(int start)\n{\n    queue<int> Q;\n    Q.push(start);\n    visited[start] = true;\n    while (!Q.empty())\n    {\n        int front = Q.front();\n        cout << front << \" \";\n        Q.pop();\n        for (int i = 1; i <= N; i++)\n            if (!visited[i] && maze[front - 1][i - 1] == 1)\n            {\n                visited[i] = true;\n                Q.push(i);\n            }\n    }\n}\nint main()\n{\n    for (int i = 1; i <= N; i++)\n    {\n        if (visited[i])\n            continue;\n        BFS(i);\n    }\n    return 0;\n}\n```\n","source":"_posts/Graph-search.md","raw":"---\ntitle: 图的基础知识\ndate: 2022-03-09 12:51:45\nauthor: Tony\nkatex: true\ncategories:\n  - algorithm\ntags:\n  - algorithm\n  - Graph\n  - DFS\n  - BFS\n\n---\n\n## 基础知识\n\n### 图的定义和分类\n\n- **图的定义** 是一个顶点集合V和一个顶点间关系的集合E组成，记G=(V,E) V：顶点的有限非空集合。 E：顶点间关系的有限集合（边集）。\n\n- **无向图** (graph)在G=(V,E)中，如果对于任意的结点a,b∈V，当(a,b)∈E时，必有(b,a)∈E（即关系R对称），如图二。\n  $$\n  V={1,2,3,4,5}\\\\ \n  E={(1,2),(1,3),(1,4),(2,3),(2,5),(3,5),(4,5)}\n  $$\n  \n- **有向图** (digraph)在G=(V,E)中，如果对于任意的结点a,b∈V，当(a,b)∈E时，(b,a)∈E未必成立，如图三。 \n  $$\n  V={1,2,3,4,5}\\\\\n  E={<1,2>,<1,4>,<2,3>,<2,5>,<3,1>,<5,3>,<5,4>}\n  $$\n\n![img](Graph-search/image-1.png)\n\n- **带权图** 一般的图边上没有数字，边仅表示两个顶点间相连接关系 ，如图四。\n- **连通图**图中任意两个顶点都是连通的，称为连通图；否则为非连通图，如图五。\n\n![img](Graph-search/image-2.png)\n\n### 邻接矩阵和邻接表\n\n- **邻接矩阵**\n\n邻接矩阵的优势是方便定义，只需要一个二维矩阵就可以解决；缺点也显而易见，浪费空间。\n\n![img](Graph-search/v2-9e2643ca5d96f86a391c36de4d3bd48d_720w.jpg)\n\n- **邻接表**\n\n邻接表的优势自然就是尽可能的节省更多的空间，但是与之相对应的就是定义起来很麻烦，需要用链表或者vector来实现。\n\n![img](Graph-search/v2-4a4d37df348f283649e2aecc74d959b5_720w.jpg)\n\n*(图是网上抄的，看水印，如有侵权，请联系我)\n\n## 图的遍历(DFS&&BFS)\n\n------\n\n好了，上面我们学习了图的概念以及如何存图，接下来就是重头戏了。\n\n接下来便是如何实现图的搜索，首先我们来看这样一个有向图， 我们不妨设从1号顶点起始。\n\n![img](Graph-search/image-3.png)\n\n在搜索过程中，我们维护一个布尔数组bool visited[N+1]，这个数组用来表示每个顶点是不是已经遍历过了。\n\n接下来，从1号开始进行DFS，遍历过的节点就在`visited[]`中标注。visited[i] == true表示顶点i已经遍历过了，visited[i] == false表示i还没有遍历过。DFS的具体方法可以用递归实现，直到所有节点都被遍历过结束。如果采用邻接矩阵，伪代码如下：\n\n```python\nVisited[]={0}\nDFS(x):\n\tVisited[x]=true\n\tfor(i=1;i<=N;i++):\n\t\tif(!Visited[i] && map[x][i]):\n\t\t\tDFS(i)\n```\n\n## 代码实现\n\n------\n\n### DFS递归实现\n\n```c++\n#include <iostream>\n#define N 5\nusing namespace std;\nint maze[N][N] = {\n    { 0, 1, 1, 0, 0 },\n    { 0, 0, 1, 0, 1 },\n    { 0, 0, 1, 0, 0 },\n    { 1, 1, 0, 0, 1 },\n    { 0, 0, 1, 0, 0 }\n};\nbool visited[N + 1];\nvoid DFS(int start)\n{\n    visited[start] = true;\n    for (int i = 1; i <= N; i++)\n        if (!visited[i] && maze[start - 1][i - 1] == 1)\n            DFS(i);\n    cout << start << \" \";\n}\nint main()\n{\n    for (int i = 1; i <= N; i++)\n    {\n        if (visited[i])\n            continue;\n        DFS(i);\n    }\n    return 0;\n}\n```\n\n### DFS非递归实现\n\n```c++\n#include <iostream>\n#include <stack>\n#define N 5\nusing namespace std;\nint maze[N][N] = {\n    { 0, 1, 1, 0, 0 },\n    { 0, 0, 1, 0, 1 },\n    { 0, 0, 1, 0, 0 },\n    { 1, 1, 0, 0, 1 },\n    { 0, 0, 1, 0, 0 }\n};\nbool visited[N + 1];\nvoid DFS(int start)\n{\n    stack<int> s;\n    s.push(start);\n    visited[start] = true;\n    bool is_push = false;\n    while (!s.empty())\n    {\n        is_push = false;\n        int v = s.top();\n        for (int i = 1; i <= N; i++)\n        {\n            if (maze[v - 1][i - 1] == 1 && !visited[i])\n            {\n                visited[i] = true;\n                s.push(i);\n                is_push = true;\n                break;\n            }\n        }\n        if (!is_push)\n        {\n            cout << v << \" \";\n            s.pop();\n        }\n    }\n}\nint main()\n{\n    for (int i = 1; i <= N; i++)\n    {\n        if (visited[i])\n            continue;\n        DFS(i);\n    }\n    return 0;\n}\n```\n\n### BFS实现\n\n```c++\n#include <iostream>\n#include <queue>\n#define N 5\nusing namespace std;\nint maze[N][N] = {\n    { 0, 1, 1, 0, 0 },\n    { 0, 0, 1, 1, 0 },\n    { 0, 1, 1, 1, 0 },\n    { 1, 0, 0, 0, 0 },\n    { 0, 0, 1, 1, 0 }\n};\nbool visited[N + 1];\nvoid BFS(int start)\n{\n    queue<int> Q;\n    Q.push(start);\n    visited[start] = true;\n    while (!Q.empty())\n    {\n        int front = Q.front();\n        cout << front << \" \";\n        Q.pop();\n        for (int i = 1; i <= N; i++)\n            if (!visited[i] && maze[front - 1][i - 1] == 1)\n            {\n                visited[i] = true;\n                Q.push(i);\n            }\n    }\n}\nint main()\n{\n    for (int i = 1; i <= N; i++)\n    {\n        if (visited[i])\n            continue;\n        BFS(i);\n    }\n    return 0;\n}\n```\n","slug":"Graph-search","published":1,"updated":"2022-03-13T14:32:27.784Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1rj2n56000rgwcye66n3ugw","content":"<h2 id=\"基础知识\"><a class=\"markdownIt-Anchor\" href=\"#基础知识\"></a> 基础知识</h2>\n<h3 id=\"图的定义和分类\"><a class=\"markdownIt-Anchor\" href=\"#图的定义和分类\"></a> 图的定义和分类</h3>\n<ul>\n<li>\n<p><strong>图的定义</strong> 是一个顶点集合V和一个顶点间关系的集合E组成，记G=(V,E) V：顶点的有限非空集合。 E：顶点间关系的有限集合（边集）。</p>\n</li>\n<li>\n<p><strong>无向图</strong> (graph)在G=(V,E)中，如果对于任意的结点a,b∈V，当(a,b)∈E时，必有(b,a)∈E（即关系R对称），如图二。</p>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>V</mi><mo>=</mo><mrow><mn>1</mn><mo separator=\"true\">,</mo><mn>2</mn><mo separator=\"true\">,</mo><mn>3</mn><mo separator=\"true\">,</mo><mn>4</mn><mo separator=\"true\">,</mo><mn>5</mn></mrow><mspace linebreak=\"newline\"></mspace><mi>E</mi><mo>=</mo><mrow><mo stretchy=\"false\">(</mo><mn>1</mn><mo separator=\"true\">,</mo><mn>2</mn><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mo stretchy=\"false\">(</mo><mn>1</mn><mo separator=\"true\">,</mo><mn>3</mn><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mo stretchy=\"false\">(</mo><mn>1</mn><mo separator=\"true\">,</mo><mn>4</mn><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mo stretchy=\"false\">(</mo><mn>2</mn><mo separator=\"true\">,</mo><mn>3</mn><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mo stretchy=\"false\">(</mo><mn>2</mn><mo separator=\"true\">,</mo><mn>5</mn><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mo stretchy=\"false\">(</mo><mn>3</mn><mo separator=\"true\">,</mo><mn>5</mn><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mo stretchy=\"false\">(</mo><mn>4</mn><mo separator=\"true\">,</mo><mn>5</mn><mo stretchy=\"false\">)</mo></mrow></mrow><annotation encoding=\"application/x-tex\">V={1,2,3,4,5}\\\\ \nE={(1,2),(1,3),(1,4),(2,3),(2,5),(3,5),(4,5)}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.22222em;\">V</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8388800000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">2</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">3</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">4</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">5</span></span></span><span class=\"mspace newline\"></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">E</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">2</span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">3</span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">4</span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">2</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">3</span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">2</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">5</span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">3</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">5</span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">4</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">5</span><span class=\"mclose\">)</span></span></span></span></span></span></p>\n</li>\n<li>\n<p><strong>有向图</strong> (digraph)在G=(V,E)中，如果对于任意的结点a,b∈V，当(a,b)∈E时，(b,a)∈E未必成立，如图三。</p>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>V</mi><mo>=</mo><mrow><mn>1</mn><mo separator=\"true\">,</mo><mn>2</mn><mo separator=\"true\">,</mo><mn>3</mn><mo separator=\"true\">,</mo><mn>4</mn><mo separator=\"true\">,</mo><mn>5</mn></mrow><mspace linebreak=\"newline\"></mspace><mi>E</mi><mo>=</mo><mrow><mo>&lt;</mo><mn>1</mn><mo separator=\"true\">,</mo><mn>2</mn><mo>&gt;</mo><mo separator=\"true\">,</mo><mo>&lt;</mo><mn>1</mn><mo separator=\"true\">,</mo><mn>4</mn><mo>&gt;</mo><mo separator=\"true\">,</mo><mo>&lt;</mo><mn>2</mn><mo separator=\"true\">,</mo><mn>3</mn><mo>&gt;</mo><mo separator=\"true\">,</mo><mo>&lt;</mo><mn>2</mn><mo separator=\"true\">,</mo><mn>5</mn><mo>&gt;</mo><mo separator=\"true\">,</mo><mo>&lt;</mo><mn>3</mn><mo separator=\"true\">,</mo><mn>1</mn><mo>&gt;</mo><mo separator=\"true\">,</mo><mo>&lt;</mo><mn>5</mn><mo separator=\"true\">,</mo><mn>3</mn><mo>&gt;</mo><mo separator=\"true\">,</mo><mo>&lt;</mo><mn>5</mn><mo separator=\"true\">,</mo><mn>4</mn><mo>&gt;</mo></mrow></mrow><annotation encoding=\"application/x-tex\">V={1,2,3,4,5}\\\\\nE={&lt;1,2&gt;,&lt;1,4&gt;,&lt;2,3&gt;,&lt;2,5&gt;,&lt;3,1&gt;,&lt;5,3&gt;,&lt;5,4&gt;}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.22222em;\">V</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8388800000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">2</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">3</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">4</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">5</span></span></span><span class=\"mspace newline\"></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">E</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8388800000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">4</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord\">2</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">3</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord\">2</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">5</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord\">3</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord\">5</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">3</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord\">5</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">4</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&gt;</span></span></span></span></span></span></p>\n</li>\n</ul>\n<p><img src=\"/2022/03/09/Graph-search/image-1.png\" alt=\"img\" loading=\"lazy\"></p>\n<ul>\n<li><strong>带权图</strong> 一般的图边上没有数字，边仅表示两个顶点间相连接关系 ，如图四。</li>\n<li><strong>连通图</strong>图中任意两个顶点都是连通的，称为连通图；否则为非连通图，如图五。</li>\n</ul>\n<p><img src=\"/2022/03/09/Graph-search/image-2.png\" alt=\"img\" loading=\"lazy\"></p>\n<h3 id=\"邻接矩阵和邻接表\"><a class=\"markdownIt-Anchor\" href=\"#邻接矩阵和邻接表\"></a> 邻接矩阵和邻接表</h3>\n<ul>\n<li><strong>邻接矩阵</strong></li>\n</ul>\n<p>邻接矩阵的优势是方便定义，只需要一个二维矩阵就可以解决；缺点也显而易见，浪费空间。</p>\n<p><img src=\"/2022/03/09/Graph-search/v2-9e2643ca5d96f86a391c36de4d3bd48d_720w.jpg\" alt=\"img\" loading=\"lazy\"></p>\n<ul>\n<li><strong>邻接表</strong></li>\n</ul>\n<p>邻接表的优势自然就是尽可能的节省更多的空间，但是与之相对应的就是定义起来很麻烦，需要用链表或者vector来实现。</p>\n<p><img src=\"/2022/03/09/Graph-search/v2-4a4d37df348f283649e2aecc74d959b5_720w.jpg\" alt=\"img\" loading=\"lazy\"></p>\n<p>*(图是网上抄的，看水印，如有侵权，请联系我)</p>\n<h2 id=\"图的遍历dfsbfs\"><a class=\"markdownIt-Anchor\" href=\"#图的遍历dfsbfs\"></a> 图的遍历(DFS&amp;&amp;BFS)</h2>\n<hr>\n<p>好了，上面我们学习了图的概念以及如何存图，接下来就是重头戏了。</p>\n<p>接下来便是如何实现图的搜索，首先我们来看这样一个有向图， 我们不妨设从1号顶点起始。</p>\n<p><img src=\"/2022/03/09/Graph-search/image-3.png\" alt=\"img\" loading=\"lazy\"></p>\n<p>在搜索过程中，我们维护一个布尔数组bool visited[N+1]，这个数组用来表示每个顶点是不是已经遍历过了。</p>\n<p>接下来，从1号开始进行DFS，遍历过的节点就在<code>visited[]</code>中标注。visited[i] == true表示顶点i已经遍历过了，visited[i] == false表示i还没有遍历过。DFS的具体方法可以用递归实现，直到所有节点都被遍历过结束。如果采用邻接矩阵，伪代码如下：</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">Visited<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span>\nDFS<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\tVisited<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>true\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>N<span class=\"token punctuation\">;</span>i<span class=\"token operator\">+</span><span class=\"token operator\">+</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>!Visited<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;</span><span class=\"token operator\">&amp;</span> <span class=\"token builtin\">map</span><span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\t\tDFS<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span></code></pre>\n<h2 id=\"代码实现\"><a class=\"markdownIt-Anchor\" href=\"#代码实现\"></a> 代码实现</h2>\n<hr>\n<h3 id=\"dfs递归实现\"><a class=\"markdownIt-Anchor\" href=\"#dfs递归实现\"></a> DFS递归实现</h3>\n<pre class=\"language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include &lt;iostream&gt;\n#define N 5\nusing namespace std;\nint maze[N][N] &#x3D; &#123;\n    &#123; 0, 1, 1, 0, 0 &#125;,\n    &#123; 0, 0, 1, 0, 1 &#125;,\n    &#123; 0, 0, 1, 0, 0 &#125;,\n    &#123; 1, 1, 0, 0, 1 &#125;,\n    &#123; 0, 0, 1, 0, 0 &#125;\n&#125;;\nbool visited[N + 1];\nvoid DFS(int start)\n&#123;\n    visited[start] &#x3D; true;\n    for (int i &#x3D; 1; i &lt;&#x3D; N; i++)\n        if (!visited[i] &amp;&amp; maze[start - 1][i - 1] &#x3D;&#x3D; 1)\n            DFS(i);\n    cout &lt;&lt; start &lt;&lt; &quot; &quot;;\n&#125;\nint main()\n&#123;\n    for (int i &#x3D; 1; i &lt;&#x3D; N; i++)\n    &#123;\n        if (visited[i])\n            continue;\n        DFS(i);\n    &#125;\n    return 0;\n&#125;</code></pre>\n<h3 id=\"dfs非递归实现\"><a class=\"markdownIt-Anchor\" href=\"#dfs非递归实现\"></a> DFS非递归实现</h3>\n<pre class=\"language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include &lt;iostream&gt;\n#include &lt;stack&gt;\n#define N 5\nusing namespace std;\nint maze[N][N] &#x3D; &#123;\n    &#123; 0, 1, 1, 0, 0 &#125;,\n    &#123; 0, 0, 1, 0, 1 &#125;,\n    &#123; 0, 0, 1, 0, 0 &#125;,\n    &#123; 1, 1, 0, 0, 1 &#125;,\n    &#123; 0, 0, 1, 0, 0 &#125;\n&#125;;\nbool visited[N + 1];\nvoid DFS(int start)\n&#123;\n    stack&lt;int&gt; s;\n    s.push(start);\n    visited[start] &#x3D; true;\n    bool is_push &#x3D; false;\n    while (!s.empty())\n    &#123;\n        is_push &#x3D; false;\n        int v &#x3D; s.top();\n        for (int i &#x3D; 1; i &lt;&#x3D; N; i++)\n        &#123;\n            if (maze[v - 1][i - 1] &#x3D;&#x3D; 1 &amp;&amp; !visited[i])\n            &#123;\n                visited[i] &#x3D; true;\n                s.push(i);\n                is_push &#x3D; true;\n                break;\n            &#125;\n        &#125;\n        if (!is_push)\n        &#123;\n            cout &lt;&lt; v &lt;&lt; &quot; &quot;;\n            s.pop();\n        &#125;\n    &#125;\n&#125;\nint main()\n&#123;\n    for (int i &#x3D; 1; i &lt;&#x3D; N; i++)\n    &#123;\n        if (visited[i])\n            continue;\n        DFS(i);\n    &#125;\n    return 0;\n&#125;</code></pre>\n<h3 id=\"bfs实现\"><a class=\"markdownIt-Anchor\" href=\"#bfs实现\"></a> BFS实现</h3>\n<pre class=\"language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include &lt;iostream&gt;\n#include &lt;queue&gt;\n#define N 5\nusing namespace std;\nint maze[N][N] &#x3D; &#123;\n    &#123; 0, 1, 1, 0, 0 &#125;,\n    &#123; 0, 0, 1, 1, 0 &#125;,\n    &#123; 0, 1, 1, 1, 0 &#125;,\n    &#123; 1, 0, 0, 0, 0 &#125;,\n    &#123; 0, 0, 1, 1, 0 &#125;\n&#125;;\nbool visited[N + 1];\nvoid BFS(int start)\n&#123;\n    queue&lt;int&gt; Q;\n    Q.push(start);\n    visited[start] &#x3D; true;\n    while (!Q.empty())\n    &#123;\n        int front &#x3D; Q.front();\n        cout &lt;&lt; front &lt;&lt; &quot; &quot;;\n        Q.pop();\n        for (int i &#x3D; 1; i &lt;&#x3D; N; i++)\n            if (!visited[i] &amp;&amp; maze[front - 1][i - 1] &#x3D;&#x3D; 1)\n            &#123;\n                visited[i] &#x3D; true;\n                Q.push(i);\n            &#125;\n    &#125;\n&#125;\nint main()\n&#123;\n    for (int i &#x3D; 1; i &lt;&#x3D; N; i++)\n    &#123;\n        if (visited[i])\n            continue;\n        BFS(i);\n    &#125;\n    return 0;\n&#125;</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"基础知识\"><a class=\"markdownIt-Anchor\" href=\"#基础知识\"></a> 基础知识</h2>\n<h3 id=\"图的定义和分类\"><a class=\"markdownIt-Anchor\" href=\"#图的定义和分类\"></a> 图的定义和分类</h3>\n<ul>\n<li>\n<p><strong>图的定义</strong> 是一个顶点集合V和一个顶点间关系的集合E组成，记G=(V,E) V：顶点的有限非空集合。 E：顶点间关系的有限集合（边集）。</p>\n</li>\n<li>\n<p><strong>无向图</strong> (graph)在G=(V,E)中，如果对于任意的结点a,b∈V，当(a,b)∈E时，必有(b,a)∈E（即关系R对称），如图二。</p>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>V</mi><mo>=</mo><mrow><mn>1</mn><mo separator=\"true\">,</mo><mn>2</mn><mo separator=\"true\">,</mo><mn>3</mn><mo separator=\"true\">,</mo><mn>4</mn><mo separator=\"true\">,</mo><mn>5</mn></mrow><mspace linebreak=\"newline\"></mspace><mi>E</mi><mo>=</mo><mrow><mo stretchy=\"false\">(</mo><mn>1</mn><mo separator=\"true\">,</mo><mn>2</mn><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mo stretchy=\"false\">(</mo><mn>1</mn><mo separator=\"true\">,</mo><mn>3</mn><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mo stretchy=\"false\">(</mo><mn>1</mn><mo separator=\"true\">,</mo><mn>4</mn><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mo stretchy=\"false\">(</mo><mn>2</mn><mo separator=\"true\">,</mo><mn>3</mn><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mo stretchy=\"false\">(</mo><mn>2</mn><mo separator=\"true\">,</mo><mn>5</mn><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mo stretchy=\"false\">(</mo><mn>3</mn><mo separator=\"true\">,</mo><mn>5</mn><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mo stretchy=\"false\">(</mo><mn>4</mn><mo separator=\"true\">,</mo><mn>5</mn><mo stretchy=\"false\">)</mo></mrow></mrow><annotation encoding=\"application/x-tex\">V={1,2,3,4,5}\\\\ \nE={(1,2),(1,3),(1,4),(2,3),(2,5),(3,5),(4,5)}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.22222em;\">V</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8388800000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">2</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">3</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">4</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">5</span></span></span><span class=\"mspace newline\"></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">E</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">2</span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">3</span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">4</span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">2</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">3</span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">2</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">5</span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">3</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">5</span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">4</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">5</span><span class=\"mclose\">)</span></span></span></span></span></span></p>\n</li>\n<li>\n<p><strong>有向图</strong> (digraph)在G=(V,E)中，如果对于任意的结点a,b∈V，当(a,b)∈E时，(b,a)∈E未必成立，如图三。</p>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>V</mi><mo>=</mo><mrow><mn>1</mn><mo separator=\"true\">,</mo><mn>2</mn><mo separator=\"true\">,</mo><mn>3</mn><mo separator=\"true\">,</mo><mn>4</mn><mo separator=\"true\">,</mo><mn>5</mn></mrow><mspace linebreak=\"newline\"></mspace><mi>E</mi><mo>=</mo><mrow><mo>&lt;</mo><mn>1</mn><mo separator=\"true\">,</mo><mn>2</mn><mo>&gt;</mo><mo separator=\"true\">,</mo><mo>&lt;</mo><mn>1</mn><mo separator=\"true\">,</mo><mn>4</mn><mo>&gt;</mo><mo separator=\"true\">,</mo><mo>&lt;</mo><mn>2</mn><mo separator=\"true\">,</mo><mn>3</mn><mo>&gt;</mo><mo separator=\"true\">,</mo><mo>&lt;</mo><mn>2</mn><mo separator=\"true\">,</mo><mn>5</mn><mo>&gt;</mo><mo separator=\"true\">,</mo><mo>&lt;</mo><mn>3</mn><mo separator=\"true\">,</mo><mn>1</mn><mo>&gt;</mo><mo separator=\"true\">,</mo><mo>&lt;</mo><mn>5</mn><mo separator=\"true\">,</mo><mn>3</mn><mo>&gt;</mo><mo separator=\"true\">,</mo><mo>&lt;</mo><mn>5</mn><mo separator=\"true\">,</mo><mn>4</mn><mo>&gt;</mo></mrow></mrow><annotation encoding=\"application/x-tex\">V={1,2,3,4,5}\\\\\nE={&lt;1,2&gt;,&lt;1,4&gt;,&lt;2,3&gt;,&lt;2,5&gt;,&lt;3,1&gt;,&lt;5,3&gt;,&lt;5,4&gt;}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.22222em;\">V</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8388800000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">2</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">3</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">4</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">5</span></span></span><span class=\"mspace newline\"></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">E</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8388800000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">4</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord\">2</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">3</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord\">2</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">5</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord\">3</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord\">5</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">3</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord\">5</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">4</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&gt;</span></span></span></span></span></span></p>\n</li>\n</ul>\n<p><img src=\"/2022/03/09/Graph-search/image-1.png\" alt=\"img\"></p>\n<ul>\n<li><strong>带权图</strong> 一般的图边上没有数字，边仅表示两个顶点间相连接关系 ，如图四。</li>\n<li><strong>连通图</strong>图中任意两个顶点都是连通的，称为连通图；否则为非连通图，如图五。</li>\n</ul>\n<p><img src=\"/2022/03/09/Graph-search/image-2.png\" alt=\"img\"></p>\n<h3 id=\"邻接矩阵和邻接表\"><a class=\"markdownIt-Anchor\" href=\"#邻接矩阵和邻接表\"></a> 邻接矩阵和邻接表</h3>\n<ul>\n<li><strong>邻接矩阵</strong></li>\n</ul>\n<p>邻接矩阵的优势是方便定义，只需要一个二维矩阵就可以解决；缺点也显而易见，浪费空间。</p>\n<p><img src=\"/2022/03/09/Graph-search/v2-9e2643ca5d96f86a391c36de4d3bd48d_720w.jpg\" alt=\"img\"></p>\n<ul>\n<li><strong>邻接表</strong></li>\n</ul>\n<p>邻接表的优势自然就是尽可能的节省更多的空间，但是与之相对应的就是定义起来很麻烦，需要用链表或者vector来实现。</p>\n<p><img src=\"/2022/03/09/Graph-search/v2-4a4d37df348f283649e2aecc74d959b5_720w.jpg\" alt=\"img\"></p>\n<p>*(图是网上抄的，看水印，如有侵权，请联系我)</p>\n<h2 id=\"图的遍历dfsbfs\"><a class=\"markdownIt-Anchor\" href=\"#图的遍历dfsbfs\"></a> 图的遍历(DFS&amp;&amp;BFS)</h2>\n<hr>\n<p>好了，上面我们学习了图的概念以及如何存图，接下来就是重头戏了。</p>\n<p>接下来便是如何实现图的搜索，首先我们来看这样一个有向图， 我们不妨设从1号顶点起始。</p>\n<p><img src=\"/2022/03/09/Graph-search/image-3.png\" alt=\"img\"></p>\n<p>在搜索过程中，我们维护一个布尔数组bool visited[N+1]，这个数组用来表示每个顶点是不是已经遍历过了。</p>\n<p>接下来，从1号开始进行DFS，遍历过的节点就在<code>visited[]</code>中标注。visited[i] == true表示顶点i已经遍历过了，visited[i] == false表示i还没有遍历过。DFS的具体方法可以用递归实现，直到所有节点都被遍历过结束。如果采用邻接矩阵，伪代码如下：</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">Visited<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span>\nDFS<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\tVisited<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>true\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>N<span class=\"token punctuation\">;</span>i<span class=\"token operator\">+</span><span class=\"token operator\">+</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>!Visited<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;</span><span class=\"token operator\">&amp;</span> <span class=\"token builtin\">map</span><span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\t\tDFS<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span></code></pre>\n<h2 id=\"代码实现\"><a class=\"markdownIt-Anchor\" href=\"#代码实现\"></a> 代码实现</h2>\n<hr>\n<h3 id=\"dfs递归实现\"><a class=\"markdownIt-Anchor\" href=\"#dfs递归实现\"></a> DFS递归实现</h3>\n<pre class=\"language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include &lt;iostream&gt;\n#define N 5\nusing namespace std;\nint maze[N][N] &#x3D; &#123;\n    &#123; 0, 1, 1, 0, 0 &#125;,\n    &#123; 0, 0, 1, 0, 1 &#125;,\n    &#123; 0, 0, 1, 0, 0 &#125;,\n    &#123; 1, 1, 0, 0, 1 &#125;,\n    &#123; 0, 0, 1, 0, 0 &#125;\n&#125;;\nbool visited[N + 1];\nvoid DFS(int start)\n&#123;\n    visited[start] &#x3D; true;\n    for (int i &#x3D; 1; i &lt;&#x3D; N; i++)\n        if (!visited[i] &amp;&amp; maze[start - 1][i - 1] &#x3D;&#x3D; 1)\n            DFS(i);\n    cout &lt;&lt; start &lt;&lt; &quot; &quot;;\n&#125;\nint main()\n&#123;\n    for (int i &#x3D; 1; i &lt;&#x3D; N; i++)\n    &#123;\n        if (visited[i])\n            continue;\n        DFS(i);\n    &#125;\n    return 0;\n&#125;</code></pre>\n<h3 id=\"dfs非递归实现\"><a class=\"markdownIt-Anchor\" href=\"#dfs非递归实现\"></a> DFS非递归实现</h3>\n<pre class=\"language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include &lt;iostream&gt;\n#include &lt;stack&gt;\n#define N 5\nusing namespace std;\nint maze[N][N] &#x3D; &#123;\n    &#123; 0, 1, 1, 0, 0 &#125;,\n    &#123; 0, 0, 1, 0, 1 &#125;,\n    &#123; 0, 0, 1, 0, 0 &#125;,\n    &#123; 1, 1, 0, 0, 1 &#125;,\n    &#123; 0, 0, 1, 0, 0 &#125;\n&#125;;\nbool visited[N + 1];\nvoid DFS(int start)\n&#123;\n    stack&lt;int&gt; s;\n    s.push(start);\n    visited[start] &#x3D; true;\n    bool is_push &#x3D; false;\n    while (!s.empty())\n    &#123;\n        is_push &#x3D; false;\n        int v &#x3D; s.top();\n        for (int i &#x3D; 1; i &lt;&#x3D; N; i++)\n        &#123;\n            if (maze[v - 1][i - 1] &#x3D;&#x3D; 1 &amp;&amp; !visited[i])\n            &#123;\n                visited[i] &#x3D; true;\n                s.push(i);\n                is_push &#x3D; true;\n                break;\n            &#125;\n        &#125;\n        if (!is_push)\n        &#123;\n            cout &lt;&lt; v &lt;&lt; &quot; &quot;;\n            s.pop();\n        &#125;\n    &#125;\n&#125;\nint main()\n&#123;\n    for (int i &#x3D; 1; i &lt;&#x3D; N; i++)\n    &#123;\n        if (visited[i])\n            continue;\n        DFS(i);\n    &#125;\n    return 0;\n&#125;</code></pre>\n<h3 id=\"bfs实现\"><a class=\"markdownIt-Anchor\" href=\"#bfs实现\"></a> BFS实现</h3>\n<pre class=\"language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include &lt;iostream&gt;\n#include &lt;queue&gt;\n#define N 5\nusing namespace std;\nint maze[N][N] &#x3D; &#123;\n    &#123; 0, 1, 1, 0, 0 &#125;,\n    &#123; 0, 0, 1, 1, 0 &#125;,\n    &#123; 0, 1, 1, 1, 0 &#125;,\n    &#123; 1, 0, 0, 0, 0 &#125;,\n    &#123; 0, 0, 1, 1, 0 &#125;\n&#125;;\nbool visited[N + 1];\nvoid BFS(int start)\n&#123;\n    queue&lt;int&gt; Q;\n    Q.push(start);\n    visited[start] &#x3D; true;\n    while (!Q.empty())\n    &#123;\n        int front &#x3D; Q.front();\n        cout &lt;&lt; front &lt;&lt; &quot; &quot;;\n        Q.pop();\n        for (int i &#x3D; 1; i &lt;&#x3D; N; i++)\n            if (!visited[i] &amp;&amp; maze[front - 1][i - 1] &#x3D;&#x3D; 1)\n            &#123;\n                visited[i] &#x3D; true;\n                Q.push(i);\n            &#125;\n    &#125;\n&#125;\nint main()\n&#123;\n    for (int i &#x3D; 1; i &lt;&#x3D; N; i++)\n    &#123;\n        if (visited[i])\n            continue;\n        BFS(i);\n    &#125;\n    return 0;\n&#125;</code></pre>\n"},{"title":"Hexo多电脑同步指南","date":"2022-03-08T08:51:28.000Z","author":"Tony","_content":"\n## 如何实现同步\n\nHexo的同步本质上很简单，使用`git`命令push一下，然后在另一台电脑pull一下就OK。但是我在实际的同步过程中却遇到了各种的报错，这篇文章同样也记录一下我遇到的问题，也为了后期我再次换电脑，或者再次遇到奇奇怪怪的报错做参考。\n\n我现在在家里使用**台式电脑**，在外使用轻薄的商务本（以下简称**笔记本**），所以就以此为例，介绍如何实现两个设备间的同步问题。\n\n首先，我的本地blog储存在台式电脑上面，我们需要将这个blog上传到GitHub上，准确的说是你的GitHub的分支上。我们的目的就是在你的GitHub仓库建一个分支，然后把这个分支当作一个中介，存储我们的源文件，当在A电脑上修改过后直接上传（push）到分支上，然后在B电脑上下载（pull）该分支的所有文件，这样就实现了多设备同步。\n\n### 首次从台式电脑上传本地文件到GitHub\n\n*注意所有命令都要在Hexo项目的目录下执行。\n\n```bash\ngit init # 首先要在台式电脑上初始化git\ngit remote add origin https://github.com/username/username.github.io.git # 添加Github上的仓库地址\n# username是你的GitHub的用户名\ngit checkout -b branch_name # 新建分支并切换到新建的分支\n# branch_name随便起名字，不过最好简单一点，比如Hexo\ngit add . # 添加所有本地文件到本地的git\ngit commit -m \"This is the first time to syn!\" # 提交备注\n# “这里的内容随便写，不过这句代码一定不要省略，后面会出问题！”\ngit push origin branch_name # 本地文件上传到hexo分支\n```\n\n### 首次从笔记本下载工程文件\n\n*注意另一台电脑上要部署好所有的环境，如git，Nodejs，SSH等，详情参考：[Hexo 网站搭建指南](https://tonylsx611.github.io/2022/02/24/Hexo_creation/)\n\n*注意所有命令都要在Hexo项目的目录下执行，没有目录的话找个地方新建一个。\n\n```bash\ngit clone -b branch_name https://github.com/username/username.github.io\n# 克隆分支到本地的博客文件夹\nsudo npm install -g hexo-cli # install hexo\nsudo npm install # 安装依赖库\nsudo npm install hexo-deployer-git # git部署相关配置\n```\n\n### 首次用笔记本更新文件\n\n```bash\nhexo clean && hexo d && hexo g && hexo s #更新Github中的master文件\n# 如果上面这部成功部署，就可以更新分支文件了\ngit add .\ngit commit -m \"...\"\ngit push origin branch_name\n```\n\n### 返回台式电脑进行编辑\n\n```bash\ngit pull origin branch_name # 从Github同步数据到台式电脑\n# 或者直接git pull也可以\n\n\n# 修改或者更新文章。。。\n\n\nhexo clean && hexo d && hexo g && hexo s #更新Github中的master文件\n# 如果上面这部成功部署，就可以更新分支文件了\ngit add .\ngit commit -m \"...\"\ngit push origin branch_name\n#有没有发现，跟上面的代码一样了，没错，这样就形成了循环！\n```\n\n完成首次同步之后的任何设备都可以使用上面的代码进行同步和更新。\n\n## 同步过程中遇到的问题\n\n### git pull文件冲突报错\n\n![Screenshot 2022-03-08 161552](Hexo-synchronization/Screenshot%202022-03-08%20161552.png)\n\n报错信息：\n\n`error: Your local changes to the following files would be overwritten by merge`\n\n报错原因：\n\n在同步的时候出现两个相同文件名内容不同的文件，导致冲突；比如笔记本修改了之前的某个文章，在台式机`pull` 的时候就会产生这样的错误。\n\n解决方法：\n\n```bash\ngit stash # 备份工作区内容\ngit pull origin branch_name # 下载分支内容\ngit stash pop # 恢复工作区内容\n```\n\n### Clone后首次部署报错\n\n![image-20220310172557250](Hexo-synchronization/image-20220310172557250.png)\n\n报错信息：\n\n```bash\nfatal: in unpopulated submodule '.deploy.git'\nFATAL:{\n\terror: Error: Spawn failed\n\t\t...\n}\n```\n\n报错原因：\n\n克隆远程分支到本地电脑的时候，把`.deploy.git`也一并克隆了过来，这个文件夹是部署到master的临时缓存文件夹，是另一个电脑部署用的，因此会产生冲突。\n\n解决方法：\n\n删掉本地的`.deploy.git`文件夹，重新部署。如果还有问题，可能是你开了多个命令行，多个terminal会产生冲突，全部关掉，重开一个来部署。\n\n### 本地未关联远程分支报错\n\n报错信息：\n\n```bash\nThere is no tracking information for the current branch.\nPlease specify which branch you want to merge with.\nSee git-pull(1) for details.\n\ngit pull <remote> <branch>\n\nIf you wish to set tracking information for this branch you can do so with:\n\ngit branch --set-upstream-to=origin/<branch> release\n```\n\n报错原因：\n\n在建立新的本地分支后，未与GitHub分支关联，通常出现在首次添加新的电脑时报错。\n\n解决方法：\n\n他不是说的明明白白的嘛，你就按照他的提示加一行代码，关联上就完了！这里的`remote_branch`就是GitHub上的远程分支，`your branch`就是你的本地分支。\n\n```bash\ngit branch --set-upstream-to=origin/remote_branch your_branch\n```\n\n### 变更远程分支名字导致的报错\n\n报错信息：\n\n```bash\nerror: src refspec master does not match any.\nerror: failed to push some refs to 'git@github.com:username/username.github.io'\n```\n\n报错原因：\n\n这个报错原因就很多了，可能是忘记在``git add .``后面加`commit`了，也可能是没有输入正确的分支名，也可能是别的。不过如果你玩了一定时间的hexo了，觉得刚开始设置的那个远程分支名太复杂了，然后手欠的改了名字，那么恭喜你，和我一样。\n\n解决方法：\n\n![image-20220315180411753](Hexo-synchronization/image-20220315180411753.png)\n\n我尝试了网上各种的解决办法，由简入繁，你可以试着删掉`.git`文件夹（这是个隐藏的文件夹），然后重新上传到远程分支，看看可不可以解决问题，反正我是没解决掉。\n\n最后我觉得最简单也是最有效的方法是把整个blog的文件夹复制一份做备份，然后全部删掉，重新clone，解决了所有问题，也不算麻烦。\n\n---\n\n注：本文部分内容参考自[Hexo博客的安装部署及多电脑同步](https://cloud.tencent.com/developer/article/1046404)，如有侵权，请联系我。\n","source":"_posts/Hexo-synchronization.md","raw":"---\ntitle: Hexo多电脑同步指南\ndate: 2022-03-08 16:51:28\nauthor: Tony\ntags: \n\t- Hexo\ncategories:\n\t- Hexo搭建\n---\n\n## 如何实现同步\n\nHexo的同步本质上很简单，使用`git`命令push一下，然后在另一台电脑pull一下就OK。但是我在实际的同步过程中却遇到了各种的报错，这篇文章同样也记录一下我遇到的问题，也为了后期我再次换电脑，或者再次遇到奇奇怪怪的报错做参考。\n\n我现在在家里使用**台式电脑**，在外使用轻薄的商务本（以下简称**笔记本**），所以就以此为例，介绍如何实现两个设备间的同步问题。\n\n首先，我的本地blog储存在台式电脑上面，我们需要将这个blog上传到GitHub上，准确的说是你的GitHub的分支上。我们的目的就是在你的GitHub仓库建一个分支，然后把这个分支当作一个中介，存储我们的源文件，当在A电脑上修改过后直接上传（push）到分支上，然后在B电脑上下载（pull）该分支的所有文件，这样就实现了多设备同步。\n\n### 首次从台式电脑上传本地文件到GitHub\n\n*注意所有命令都要在Hexo项目的目录下执行。\n\n```bash\ngit init # 首先要在台式电脑上初始化git\ngit remote add origin https://github.com/username/username.github.io.git # 添加Github上的仓库地址\n# username是你的GitHub的用户名\ngit checkout -b branch_name # 新建分支并切换到新建的分支\n# branch_name随便起名字，不过最好简单一点，比如Hexo\ngit add . # 添加所有本地文件到本地的git\ngit commit -m \"This is the first time to syn!\" # 提交备注\n# “这里的内容随便写，不过这句代码一定不要省略，后面会出问题！”\ngit push origin branch_name # 本地文件上传到hexo分支\n```\n\n### 首次从笔记本下载工程文件\n\n*注意另一台电脑上要部署好所有的环境，如git，Nodejs，SSH等，详情参考：[Hexo 网站搭建指南](https://tonylsx611.github.io/2022/02/24/Hexo_creation/)\n\n*注意所有命令都要在Hexo项目的目录下执行，没有目录的话找个地方新建一个。\n\n```bash\ngit clone -b branch_name https://github.com/username/username.github.io\n# 克隆分支到本地的博客文件夹\nsudo npm install -g hexo-cli # install hexo\nsudo npm install # 安装依赖库\nsudo npm install hexo-deployer-git # git部署相关配置\n```\n\n### 首次用笔记本更新文件\n\n```bash\nhexo clean && hexo d && hexo g && hexo s #更新Github中的master文件\n# 如果上面这部成功部署，就可以更新分支文件了\ngit add .\ngit commit -m \"...\"\ngit push origin branch_name\n```\n\n### 返回台式电脑进行编辑\n\n```bash\ngit pull origin branch_name # 从Github同步数据到台式电脑\n# 或者直接git pull也可以\n\n\n# 修改或者更新文章。。。\n\n\nhexo clean && hexo d && hexo g && hexo s #更新Github中的master文件\n# 如果上面这部成功部署，就可以更新分支文件了\ngit add .\ngit commit -m \"...\"\ngit push origin branch_name\n#有没有发现，跟上面的代码一样了，没错，这样就形成了循环！\n```\n\n完成首次同步之后的任何设备都可以使用上面的代码进行同步和更新。\n\n## 同步过程中遇到的问题\n\n### git pull文件冲突报错\n\n![Screenshot 2022-03-08 161552](Hexo-synchronization/Screenshot%202022-03-08%20161552.png)\n\n报错信息：\n\n`error: Your local changes to the following files would be overwritten by merge`\n\n报错原因：\n\n在同步的时候出现两个相同文件名内容不同的文件，导致冲突；比如笔记本修改了之前的某个文章，在台式机`pull` 的时候就会产生这样的错误。\n\n解决方法：\n\n```bash\ngit stash # 备份工作区内容\ngit pull origin branch_name # 下载分支内容\ngit stash pop # 恢复工作区内容\n```\n\n### Clone后首次部署报错\n\n![image-20220310172557250](Hexo-synchronization/image-20220310172557250.png)\n\n报错信息：\n\n```bash\nfatal: in unpopulated submodule '.deploy.git'\nFATAL:{\n\terror: Error: Spawn failed\n\t\t...\n}\n```\n\n报错原因：\n\n克隆远程分支到本地电脑的时候，把`.deploy.git`也一并克隆了过来，这个文件夹是部署到master的临时缓存文件夹，是另一个电脑部署用的，因此会产生冲突。\n\n解决方法：\n\n删掉本地的`.deploy.git`文件夹，重新部署。如果还有问题，可能是你开了多个命令行，多个terminal会产生冲突，全部关掉，重开一个来部署。\n\n### 本地未关联远程分支报错\n\n报错信息：\n\n```bash\nThere is no tracking information for the current branch.\nPlease specify which branch you want to merge with.\nSee git-pull(1) for details.\n\ngit pull <remote> <branch>\n\nIf you wish to set tracking information for this branch you can do so with:\n\ngit branch --set-upstream-to=origin/<branch> release\n```\n\n报错原因：\n\n在建立新的本地分支后，未与GitHub分支关联，通常出现在首次添加新的电脑时报错。\n\n解决方法：\n\n他不是说的明明白白的嘛，你就按照他的提示加一行代码，关联上就完了！这里的`remote_branch`就是GitHub上的远程分支，`your branch`就是你的本地分支。\n\n```bash\ngit branch --set-upstream-to=origin/remote_branch your_branch\n```\n\n### 变更远程分支名字导致的报错\n\n报错信息：\n\n```bash\nerror: src refspec master does not match any.\nerror: failed to push some refs to 'git@github.com:username/username.github.io'\n```\n\n报错原因：\n\n这个报错原因就很多了，可能是忘记在``git add .``后面加`commit`了，也可能是没有输入正确的分支名，也可能是别的。不过如果你玩了一定时间的hexo了，觉得刚开始设置的那个远程分支名太复杂了，然后手欠的改了名字，那么恭喜你，和我一样。\n\n解决方法：\n\n![image-20220315180411753](Hexo-synchronization/image-20220315180411753.png)\n\n我尝试了网上各种的解决办法，由简入繁，你可以试着删掉`.git`文件夹（这是个隐藏的文件夹），然后重新上传到远程分支，看看可不可以解决问题，反正我是没解决掉。\n\n最后我觉得最简单也是最有效的方法是把整个blog的文件夹复制一份做备份，然后全部删掉，重新clone，解决了所有问题，也不算麻烦。\n\n---\n\n注：本文部分内容参考自[Hexo博客的安装部署及多电脑同步](https://cloud.tencent.com/developer/article/1046404)，如有侵权，请联系我。\n","slug":"Hexo-synchronization","published":1,"updated":"2022-03-16T14:42:39.644Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1rj2n57000ugwcy554n5xp7","content":"<h2 id=\"如何实现同步\"><a class=\"markdownIt-Anchor\" href=\"#如何实现同步\"></a> 如何实现同步</h2>\n<p>Hexo的同步本质上很简单，使用<code>git</code>命令push一下，然后在另一台电脑pull一下就OK。但是我在实际的同步过程中却遇到了各种的报错，这篇文章同样也记录一下我遇到的问题，也为了后期我再次换电脑，或者再次遇到奇奇怪怪的报错做参考。</p>\n<p>我现在在家里使用<strong>台式电脑</strong>，在外使用轻薄的商务本（以下简称<strong>笔记本</strong>），所以就以此为例，介绍如何实现两个设备间的同步问题。</p>\n<p>首先，我的本地blog储存在台式电脑上面，我们需要将这个blog上传到GitHub上，准确的说是你的GitHub的分支上。我们的目的就是在你的GitHub仓库建一个分支，然后把这个分支当作一个中介，存储我们的源文件，当在A电脑上修改过后直接上传（push）到分支上，然后在B电脑上下载（pull）该分支的所有文件，这样就实现了多设备同步。</p>\n<h3 id=\"首次从台式电脑上传本地文件到github\"><a class=\"markdownIt-Anchor\" href=\"#首次从台式电脑上传本地文件到github\"></a> 首次从台式电脑上传本地文件到GitHub</h3>\n<p>*注意所有命令都要在Hexo项目的目录下执行。</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> init <span class=\"token comment\"># 首先要在台式电脑上初始化git</span>\n<span class=\"token function\">git</span> remote <span class=\"token function\">add</span> origin https://github.com/username/username.github.io.git <span class=\"token comment\"># 添加Github上的仓库地址</span>\n<span class=\"token comment\"># username是你的GitHub的用户名</span>\n<span class=\"token function\">git</span> checkout -b branch_name <span class=\"token comment\"># 新建分支并切换到新建的分支</span>\n<span class=\"token comment\"># branch_name随便起名字，不过最好简单一点，比如Hexo</span>\n<span class=\"token function\">git</span> <span class=\"token function\">add</span> <span class=\"token builtin class-name\">.</span> <span class=\"token comment\"># 添加所有本地文件到本地的git</span>\n<span class=\"token function\">git</span> commit -m <span class=\"token string\">\"This is the first time to syn!\"</span> <span class=\"token comment\"># 提交备注</span>\n<span class=\"token comment\"># “这里的内容随便写，不过这句代码一定不要省略，后面会出问题！”</span>\n<span class=\"token function\">git</span> push origin branch_name <span class=\"token comment\"># 本地文件上传到hexo分支</span></code></pre>\n<h3 id=\"首次从笔记本下载工程文件\"><a class=\"markdownIt-Anchor\" href=\"#首次从笔记本下载工程文件\"></a> 首次从笔记本下载工程文件</h3>\n<p>*注意另一台电脑上要部署好所有的环境，如git，Nodejs，SSH等，详情参考：<a href=\"https://tonylsx611.github.io/2022/02/24/Hexo_creation/\">Hexo 网站搭建指南</a></p>\n<p>*注意所有命令都要在Hexo项目的目录下执行，没有目录的话找个地方新建一个。</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> clone -b branch_name https://github.com/username/username.github.io\n<span class=\"token comment\"># 克隆分支到本地的博客文件夹</span>\n<span class=\"token function\">sudo</span> <span class=\"token function\">npm</span> <span class=\"token function\">install</span> -g hexo-cli <span class=\"token comment\"># install hexo</span>\n<span class=\"token function\">sudo</span> <span class=\"token function\">npm</span> <span class=\"token function\">install</span> <span class=\"token comment\"># 安装依赖库</span>\n<span class=\"token function\">sudo</span> <span class=\"token function\">npm</span> <span class=\"token function\">install</span> hexo-deployer-git <span class=\"token comment\"># git部署相关配置</span></code></pre>\n<h3 id=\"首次用笔记本更新文件\"><a class=\"markdownIt-Anchor\" href=\"#首次用笔记本更新文件\"></a> 首次用笔记本更新文件</h3>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">hexo clean <span class=\"token operator\">&amp;&amp;</span> hexo d <span class=\"token operator\">&amp;&amp;</span> hexo g <span class=\"token operator\">&amp;&amp;</span> hexo s <span class=\"token comment\">#更新Github中的master文件</span>\n<span class=\"token comment\"># 如果上面这部成功部署，就可以更新分支文件了</span>\n<span class=\"token function\">git</span> <span class=\"token function\">add</span> <span class=\"token builtin class-name\">.</span>\n<span class=\"token function\">git</span> commit -m <span class=\"token string\">\"...\"</span>\n<span class=\"token function\">git</span> push origin branch_name</code></pre>\n<h3 id=\"返回台式电脑进行编辑\"><a class=\"markdownIt-Anchor\" href=\"#返回台式电脑进行编辑\"></a> 返回台式电脑进行编辑</h3>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> pull origin branch_name <span class=\"token comment\"># 从Github同步数据到台式电脑</span>\n<span class=\"token comment\"># 或者直接git pull也可以</span>\n\n\n<span class=\"token comment\"># 修改或者更新文章。。。</span>\n\n\nhexo clean <span class=\"token operator\">&amp;&amp;</span> hexo d <span class=\"token operator\">&amp;&amp;</span> hexo g <span class=\"token operator\">&amp;&amp;</span> hexo s <span class=\"token comment\">#更新Github中的master文件</span>\n<span class=\"token comment\"># 如果上面这部成功部署，就可以更新分支文件了</span>\n<span class=\"token function\">git</span> <span class=\"token function\">add</span> <span class=\"token builtin class-name\">.</span>\n<span class=\"token function\">git</span> commit -m <span class=\"token string\">\"...\"</span>\n<span class=\"token function\">git</span> push origin branch_name\n<span class=\"token comment\">#有没有发现，跟上面的代码一样了，没错，这样就形成了循环！</span></code></pre>\n<p>完成首次同步之后的任何设备都可以使用上面的代码进行同步和更新。</p>\n<h2 id=\"同步过程中遇到的问题\"><a class=\"markdownIt-Anchor\" href=\"#同步过程中遇到的问题\"></a> 同步过程中遇到的问题</h2>\n<h3 id=\"git-pull文件冲突报错\"><a class=\"markdownIt-Anchor\" href=\"#git-pull文件冲突报错\"></a> git pull文件冲突报错</h3>\n<p><img src=\"/2022/03/08/Hexo-synchronization/Screenshot%202022-03-08%20161552.png\" alt=\"Screenshot 2022-03-08 161552\" loading=\"lazy\"></p>\n<p>报错信息：</p>\n<p><code>error: Your local changes to the following files would be overwritten by merge</code></p>\n<p>报错原因：</p>\n<p>在同步的时候出现两个相同文件名内容不同的文件，导致冲突；比如笔记本修改了之前的某个文章，在台式机<code>pull</code> 的时候就会产生这样的错误。</p>\n<p>解决方法：</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> stash <span class=\"token comment\"># 备份工作区内容</span>\n<span class=\"token function\">git</span> pull origin branch_name <span class=\"token comment\"># 下载分支内容</span>\n<span class=\"token function\">git</span> stash pop <span class=\"token comment\"># 恢复工作区内容</span></code></pre>\n<h3 id=\"clone后首次部署报错\"><a class=\"markdownIt-Anchor\" href=\"#clone后首次部署报错\"></a> Clone后首次部署报错</h3>\n<p><img src=\"/2022/03/08/Hexo-synchronization/image-20220310172557250.png\" alt=\"image-20220310172557250\" loading=\"lazy\"></p>\n<p>报错信息：</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">fatal: <span class=\"token keyword\">in</span> unpopulated submodule <span class=\"token string\">'.deploy.git'</span>\nFATAL:<span class=\"token punctuation\">&#123;</span>\n\terror: Error: Spawn failed\n\t\t<span class=\"token punctuation\">..</span>.\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<p>报错原因：</p>\n<p>克隆远程分支到本地电脑的时候，把<code>.deploy.git</code>也一并克隆了过来，这个文件夹是部署到master的临时缓存文件夹，是另一个电脑部署用的，因此会产生冲突。</p>\n<p>解决方法：</p>\n<p>删掉本地的<code>.deploy.git</code>文件夹，重新部署。如果还有问题，可能是你开了多个命令行，多个terminal会产生冲突，全部关掉，重开一个来部署。</p>\n<h3 id=\"本地未关联远程分支报错\"><a class=\"markdownIt-Anchor\" href=\"#本地未关联远程分支报错\"></a> 本地未关联远程分支报错</h3>\n<p>报错信息：</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">There is no tracking information <span class=\"token keyword\">for</span> the current branch.\nPlease specify <span class=\"token function\">which</span> branch you want to merge with.\nSee git-pull<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> details.\n\n<span class=\"token function\">git</span> pull <span class=\"token operator\">&lt;</span>remote<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>branch<span class=\"token operator\">></span>\n\nIf you wish to <span class=\"token builtin class-name\">set</span> tracking information <span class=\"token keyword\">for</span> this branch you can <span class=\"token keyword\">do</span> so with:\n\n<span class=\"token function\">git</span> branch --set-upstream-to<span class=\"token operator\">=</span>origin/<span class=\"token operator\">&lt;</span>branch<span class=\"token operator\">></span> release</code></pre>\n<p>报错原因：</p>\n<p>在建立新的本地分支后，未与GitHub分支关联，通常出现在首次添加新的电脑时报错。</p>\n<p>解决方法：</p>\n<p>他不是说的明明白白的嘛，你就按照他的提示加一行代码，关联上就完了！这里的<code>remote_branch</code>就是GitHub上的远程分支，<code>your branch</code>就是你的本地分支。</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> branch --set-upstream-to<span class=\"token operator\">=</span>origin/remote_branch your_branch</code></pre>\n<h3 id=\"变更远程分支名字导致的报错\"><a class=\"markdownIt-Anchor\" href=\"#变更远程分支名字导致的报错\"></a> 变更远程分支名字导致的报错</h3>\n<p>报错信息：</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">error: src refspec master does not match any.\nerror: failed to push some refs to <span class=\"token string\">'git@github.com:username/username.github.io'</span></code></pre>\n<p>报错原因：</p>\n<p>这个报错原因就很多了，可能是忘记在<code>git add .</code>后面加<code>commit</code>了，也可能是没有输入正确的分支名，也可能是别的。不过如果你玩了一定时间的hexo了，觉得刚开始设置的那个远程分支名太复杂了，然后手欠的改了名字，那么恭喜你，和我一样。</p>\n<p>解决方法：</p>\n<p><img src=\"/2022/03/08/Hexo-synchronization/image-20220315180411753.png\" alt=\"image-20220315180411753\" loading=\"lazy\"></p>\n<p>我尝试了网上各种的解决办法，由简入繁，你可以试着删掉<code>.git</code>文件夹（这是个隐藏的文件夹），然后重新上传到远程分支，看看可不可以解决问题，反正我是没解决掉。</p>\n<p>最后我觉得最简单也是最有效的方法是把整个blog的文件夹复制一份做备份，然后全部删掉，重新clone，解决了所有问题，也不算麻烦。</p>\n<hr>\n<p>注：本文部分内容参考自<a href=\"https://cloud.tencent.com/developer/article/1046404\">Hexo博客的安装部署及多电脑同步</a>，如有侵权，请联系我。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"如何实现同步\"><a class=\"markdownIt-Anchor\" href=\"#如何实现同步\"></a> 如何实现同步</h2>\n<p>Hexo的同步本质上很简单，使用<code>git</code>命令push一下，然后在另一台电脑pull一下就OK。但是我在实际的同步过程中却遇到了各种的报错，这篇文章同样也记录一下我遇到的问题，也为了后期我再次换电脑，或者再次遇到奇奇怪怪的报错做参考。</p>\n<p>我现在在家里使用<strong>台式电脑</strong>，在外使用轻薄的商务本（以下简称<strong>笔记本</strong>），所以就以此为例，介绍如何实现两个设备间的同步问题。</p>\n<p>首先，我的本地blog储存在台式电脑上面，我们需要将这个blog上传到GitHub上，准确的说是你的GitHub的分支上。我们的目的就是在你的GitHub仓库建一个分支，然后把这个分支当作一个中介，存储我们的源文件，当在A电脑上修改过后直接上传（push）到分支上，然后在B电脑上下载（pull）该分支的所有文件，这样就实现了多设备同步。</p>\n<h3 id=\"首次从台式电脑上传本地文件到github\"><a class=\"markdownIt-Anchor\" href=\"#首次从台式电脑上传本地文件到github\"></a> 首次从台式电脑上传本地文件到GitHub</h3>\n<p>*注意所有命令都要在Hexo项目的目录下执行。</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> init <span class=\"token comment\"># 首先要在台式电脑上初始化git</span>\n<span class=\"token function\">git</span> remote <span class=\"token function\">add</span> origin https://github.com/username/username.github.io.git <span class=\"token comment\"># 添加Github上的仓库地址</span>\n<span class=\"token comment\"># username是你的GitHub的用户名</span>\n<span class=\"token function\">git</span> checkout -b branch_name <span class=\"token comment\"># 新建分支并切换到新建的分支</span>\n<span class=\"token comment\"># branch_name随便起名字，不过最好简单一点，比如Hexo</span>\n<span class=\"token function\">git</span> <span class=\"token function\">add</span> <span class=\"token builtin class-name\">.</span> <span class=\"token comment\"># 添加所有本地文件到本地的git</span>\n<span class=\"token function\">git</span> commit -m <span class=\"token string\">\"This is the first time to syn!\"</span> <span class=\"token comment\"># 提交备注</span>\n<span class=\"token comment\"># “这里的内容随便写，不过这句代码一定不要省略，后面会出问题！”</span>\n<span class=\"token function\">git</span> push origin branch_name <span class=\"token comment\"># 本地文件上传到hexo分支</span></code></pre>\n<h3 id=\"首次从笔记本下载工程文件\"><a class=\"markdownIt-Anchor\" href=\"#首次从笔记本下载工程文件\"></a> 首次从笔记本下载工程文件</h3>\n<p>*注意另一台电脑上要部署好所有的环境，如git，Nodejs，SSH等，详情参考：<a href=\"https://tonylsx611.github.io/2022/02/24/Hexo_creation/\">Hexo 网站搭建指南</a></p>\n<p>*注意所有命令都要在Hexo项目的目录下执行，没有目录的话找个地方新建一个。</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> clone -b branch_name https://github.com/username/username.github.io\n<span class=\"token comment\"># 克隆分支到本地的博客文件夹</span>\n<span class=\"token function\">sudo</span> <span class=\"token function\">npm</span> <span class=\"token function\">install</span> -g hexo-cli <span class=\"token comment\"># install hexo</span>\n<span class=\"token function\">sudo</span> <span class=\"token function\">npm</span> <span class=\"token function\">install</span> <span class=\"token comment\"># 安装依赖库</span>\n<span class=\"token function\">sudo</span> <span class=\"token function\">npm</span> <span class=\"token function\">install</span> hexo-deployer-git <span class=\"token comment\"># git部署相关配置</span></code></pre>\n<h3 id=\"首次用笔记本更新文件\"><a class=\"markdownIt-Anchor\" href=\"#首次用笔记本更新文件\"></a> 首次用笔记本更新文件</h3>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">hexo clean <span class=\"token operator\">&amp;&amp;</span> hexo d <span class=\"token operator\">&amp;&amp;</span> hexo g <span class=\"token operator\">&amp;&amp;</span> hexo s <span class=\"token comment\">#更新Github中的master文件</span>\n<span class=\"token comment\"># 如果上面这部成功部署，就可以更新分支文件了</span>\n<span class=\"token function\">git</span> <span class=\"token function\">add</span> <span class=\"token builtin class-name\">.</span>\n<span class=\"token function\">git</span> commit -m <span class=\"token string\">\"...\"</span>\n<span class=\"token function\">git</span> push origin branch_name</code></pre>\n<h3 id=\"返回台式电脑进行编辑\"><a class=\"markdownIt-Anchor\" href=\"#返回台式电脑进行编辑\"></a> 返回台式电脑进行编辑</h3>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> pull origin branch_name <span class=\"token comment\"># 从Github同步数据到台式电脑</span>\n<span class=\"token comment\"># 或者直接git pull也可以</span>\n\n\n<span class=\"token comment\"># 修改或者更新文章。。。</span>\n\n\nhexo clean <span class=\"token operator\">&amp;&amp;</span> hexo d <span class=\"token operator\">&amp;&amp;</span> hexo g <span class=\"token operator\">&amp;&amp;</span> hexo s <span class=\"token comment\">#更新Github中的master文件</span>\n<span class=\"token comment\"># 如果上面这部成功部署，就可以更新分支文件了</span>\n<span class=\"token function\">git</span> <span class=\"token function\">add</span> <span class=\"token builtin class-name\">.</span>\n<span class=\"token function\">git</span> commit -m <span class=\"token string\">\"...\"</span>\n<span class=\"token function\">git</span> push origin branch_name\n<span class=\"token comment\">#有没有发现，跟上面的代码一样了，没错，这样就形成了循环！</span></code></pre>\n<p>完成首次同步之后的任何设备都可以使用上面的代码进行同步和更新。</p>\n<h2 id=\"同步过程中遇到的问题\"><a class=\"markdownIt-Anchor\" href=\"#同步过程中遇到的问题\"></a> 同步过程中遇到的问题</h2>\n<h3 id=\"git-pull文件冲突报错\"><a class=\"markdownIt-Anchor\" href=\"#git-pull文件冲突报错\"></a> git pull文件冲突报错</h3>\n<p><img src=\"/2022/03/08/Hexo-synchronization/Screenshot%202022-03-08%20161552.png\" alt=\"Screenshot 2022-03-08 161552\"></p>\n<p>报错信息：</p>\n<p><code>error: Your local changes to the following files would be overwritten by merge</code></p>\n<p>报错原因：</p>\n<p>在同步的时候出现两个相同文件名内容不同的文件，导致冲突；比如笔记本修改了之前的某个文章，在台式机<code>pull</code> 的时候就会产生这样的错误。</p>\n<p>解决方法：</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> stash <span class=\"token comment\"># 备份工作区内容</span>\n<span class=\"token function\">git</span> pull origin branch_name <span class=\"token comment\"># 下载分支内容</span>\n<span class=\"token function\">git</span> stash pop <span class=\"token comment\"># 恢复工作区内容</span></code></pre>\n<h3 id=\"clone后首次部署报错\"><a class=\"markdownIt-Anchor\" href=\"#clone后首次部署报错\"></a> Clone后首次部署报错</h3>\n<p><img src=\"/2022/03/08/Hexo-synchronization/image-20220310172557250.png\" alt=\"image-20220310172557250\"></p>\n<p>报错信息：</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">fatal: <span class=\"token keyword\">in</span> unpopulated submodule <span class=\"token string\">'.deploy.git'</span>\nFATAL:<span class=\"token punctuation\">&#123;</span>\n\terror: Error: Spawn failed\n\t\t<span class=\"token punctuation\">..</span>.\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<p>报错原因：</p>\n<p>克隆远程分支到本地电脑的时候，把<code>.deploy.git</code>也一并克隆了过来，这个文件夹是部署到master的临时缓存文件夹，是另一个电脑部署用的，因此会产生冲突。</p>\n<p>解决方法：</p>\n<p>删掉本地的<code>.deploy.git</code>文件夹，重新部署。如果还有问题，可能是你开了多个命令行，多个terminal会产生冲突，全部关掉，重开一个来部署。</p>\n<h3 id=\"本地未关联远程分支报错\"><a class=\"markdownIt-Anchor\" href=\"#本地未关联远程分支报错\"></a> 本地未关联远程分支报错</h3>\n<p>报错信息：</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">There is no tracking information <span class=\"token keyword\">for</span> the current branch.\nPlease specify <span class=\"token function\">which</span> branch you want to merge with.\nSee git-pull<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> details.\n\n<span class=\"token function\">git</span> pull <span class=\"token operator\">&lt;</span>remote<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>branch<span class=\"token operator\">></span>\n\nIf you wish to <span class=\"token builtin class-name\">set</span> tracking information <span class=\"token keyword\">for</span> this branch you can <span class=\"token keyword\">do</span> so with:\n\n<span class=\"token function\">git</span> branch --set-upstream-to<span class=\"token operator\">=</span>origin/<span class=\"token operator\">&lt;</span>branch<span class=\"token operator\">></span> release</code></pre>\n<p>报错原因：</p>\n<p>在建立新的本地分支后，未与GitHub分支关联，通常出现在首次添加新的电脑时报错。</p>\n<p>解决方法：</p>\n<p>他不是说的明明白白的嘛，你就按照他的提示加一行代码，关联上就完了！这里的<code>remote_branch</code>就是GitHub上的远程分支，<code>your branch</code>就是你的本地分支。</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> branch --set-upstream-to<span class=\"token operator\">=</span>origin/remote_branch your_branch</code></pre>\n<h3 id=\"变更远程分支名字导致的报错\"><a class=\"markdownIt-Anchor\" href=\"#变更远程分支名字导致的报错\"></a> 变更远程分支名字导致的报错</h3>\n<p>报错信息：</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">error: src refspec master does not match any.\nerror: failed to push some refs to <span class=\"token string\">'git@github.com:username/username.github.io'</span></code></pre>\n<p>报错原因：</p>\n<p>这个报错原因就很多了，可能是忘记在<code>git add .</code>后面加<code>commit</code>了，也可能是没有输入正确的分支名，也可能是别的。不过如果你玩了一定时间的hexo了，觉得刚开始设置的那个远程分支名太复杂了，然后手欠的改了名字，那么恭喜你，和我一样。</p>\n<p>解决方法：</p>\n<p><img src=\"/2022/03/08/Hexo-synchronization/image-20220315180411753.png\" alt=\"image-20220315180411753\"></p>\n<p>我尝试了网上各种的解决办法，由简入繁，你可以试着删掉<code>.git</code>文件夹（这是个隐藏的文件夹），然后重新上传到远程分支，看看可不可以解决问题，反正我是没解决掉。</p>\n<p>最后我觉得最简单也是最有效的方法是把整个blog的文件夹复制一份做备份，然后全部删掉，重新clone，解决了所有问题，也不算麻烦。</p>\n<hr>\n<p>注：本文部分内容参考自<a href=\"https://cloud.tencent.com/developer/article/1046404\">Hexo博客的安装部署及多电脑同步</a>，如有侵权，请联系我。</p>\n"},{"title":"Hexo文章发布指南","date":"2022-02-19T16:34:49.000Z","author":"Tony","katex":true,"_content":"\n## Upload your first article\n\n### Create a new post\n\n``` bash\nhexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\nhexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\nhexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\nhexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n\n### Advanced Settings\n\n​\t\tCreate a bat format file (e.g. `start.bat`) in the root folder of your blog.\n\n```bash\nhexo clean & hexo d & hexo g & hexo s\npause\n```\n\n​\t\tThen every time you uploaded a file or change any settings, you can just double click the .bat file to update your blog, which is very convenience.\n\n## Hexo发布类型样例\n\n### Title\n\n在md下直接使用 # 进行新建标题，左侧菜单栏会自动生成H1-H6的标题，very nice!\n\n<img src=\"Hexo_article/image-20220308162506034.png\" alt=\"image-20220308162506034\" style=\"zoom:50%;\" />\n\n### 头部字段\n\n在文章的第一行使用三个`-`（就是分割线）来创建头部字段。\n\n- 格式如下：\n\n```\ntitle: Hexo文章发布指南\ndate: 2077-02-20 00:34:49\nauthor: Tony\ncategories:\n\t- Hexo搭建\ntags: \n\t- tag1\n\t- tag2\nkatex: true\n```\n\n其中，`categories`在一篇文章中建议只设置一个，而`tags`可以设置很多个。这样可以防止文章分类混乱，在左侧菜单栏中可以很方便的访问。\n\n![image-20220308162715529](Hexo_article/image-20220308162715529.png)\n\n### 数学公式\n\n行内公式使用 $\\$$ 将数学公式括起来就好，行间公式使用两个$\\$\\$$，这跟md的格式是一样的。\n\n需要注意的是，如果文章中需要使用数学公式，最好在头部字段前添加`katex: true`的字样。\n\n- 数学公式样例：\n\n我是行内公式：$x=x^{45}+3$，我还可以接着写。。。\n$$\nx_1=x_3+2\\times x^6\\\\\n\\alpha：我是行间公式\\\\\n\\left[\n\\begin{matrix}\n1 & 2 & 3\\\\\n4 & 5 & 6\\\\\n7 & 8 & 9\\\\\n\\end{matrix}\n\\right]\n$$\n\n### 图片\n\n只需要将图片拖入md文档中即可，md会自动创建一个与文件名相同的文件夹以储存所有的图片素材，并会自动将图片复制到该文件夹中，因此所有的图片只需要输入相对路径即可。\n\n比如，本文章的名字为test，那么只需要这样写：`![IMG_1479](test/IMG_1479.jpg)`\n\n注：Hexo支持GIF格式的图片哦！\n\n![IMG_1479](Hexo_article/IMG_1479.jpg)\n\n![2d6f869662e83398f06070e2a14f838](Hexo_article/2d6f869662e83398f06070e2a14f838.jpg)\n\n![traffic-light](Hexo_article/traffic-light.gif)\n\n### 代码\n\n主题中默认代码有些会很丑，建议修改`_config.yml`中的指令把代码前面的行号取消，这样或许会变得好看一些，个人建议仅供参考。\n\n```c++\n#include<iostream>\nusing namespace std;\nint main()\n{\n\tint a,b,c;\n\tcin>>a>>c;\n\tfor(int i=0;i<a;i++)\n\t\tcout<<c*a<<endl;\n\treturn 0;\n}\n```\n\n### 文字\n\n- 高亮语法：==Highlight==ing （==）\n- 加粗：**Bold** （\\*\\*）\n- 斜体：*Wall*（\\*）\n- 删除线：~~请给我打钱~~（~~）\n\n### 音频及视频\n\n暂不支持。。。\n\n（正在努力开发中。。。）\n\n\n```html\n<video src='test/DSC_7412.MOV' \n       type='video/mp4' \n       controls='controls'  \n       preload=\"auto\"\n       width='100%' \n       height='100%'>\n</video>\n```\n\n$$\nEND\n$$\n","source":"_posts/Hexo_article.md","raw":"---\n\ntitle: Hexo文章发布指南\ndate: 2022-02-20 00:34:49\nauthor: Tony\ncategories:\n\t- Hexo搭建\ntags: \n\t- Hexo\nkatex: true\n---\n\n## Upload your first article\n\n### Create a new post\n\n``` bash\nhexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\nhexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\nhexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\nhexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n\n### Advanced Settings\n\n​\t\tCreate a bat format file (e.g. `start.bat`) in the root folder of your blog.\n\n```bash\nhexo clean & hexo d & hexo g & hexo s\npause\n```\n\n​\t\tThen every time you uploaded a file or change any settings, you can just double click the .bat file to update your blog, which is very convenience.\n\n## Hexo发布类型样例\n\n### Title\n\n在md下直接使用 # 进行新建标题，左侧菜单栏会自动生成H1-H6的标题，very nice!\n\n<img src=\"Hexo_article/image-20220308162506034.png\" alt=\"image-20220308162506034\" style=\"zoom:50%;\" />\n\n### 头部字段\n\n在文章的第一行使用三个`-`（就是分割线）来创建头部字段。\n\n- 格式如下：\n\n```\ntitle: Hexo文章发布指南\ndate: 2077-02-20 00:34:49\nauthor: Tony\ncategories:\n\t- Hexo搭建\ntags: \n\t- tag1\n\t- tag2\nkatex: true\n```\n\n其中，`categories`在一篇文章中建议只设置一个，而`tags`可以设置很多个。这样可以防止文章分类混乱，在左侧菜单栏中可以很方便的访问。\n\n![image-20220308162715529](Hexo_article/image-20220308162715529.png)\n\n### 数学公式\n\n行内公式使用 $\\$$ 将数学公式括起来就好，行间公式使用两个$\\$\\$$，这跟md的格式是一样的。\n\n需要注意的是，如果文章中需要使用数学公式，最好在头部字段前添加`katex: true`的字样。\n\n- 数学公式样例：\n\n我是行内公式：$x=x^{45}+3$，我还可以接着写。。。\n$$\nx_1=x_3+2\\times x^6\\\\\n\\alpha：我是行间公式\\\\\n\\left[\n\\begin{matrix}\n1 & 2 & 3\\\\\n4 & 5 & 6\\\\\n7 & 8 & 9\\\\\n\\end{matrix}\n\\right]\n$$\n\n### 图片\n\n只需要将图片拖入md文档中即可，md会自动创建一个与文件名相同的文件夹以储存所有的图片素材，并会自动将图片复制到该文件夹中，因此所有的图片只需要输入相对路径即可。\n\n比如，本文章的名字为test，那么只需要这样写：`![IMG_1479](test/IMG_1479.jpg)`\n\n注：Hexo支持GIF格式的图片哦！\n\n![IMG_1479](Hexo_article/IMG_1479.jpg)\n\n![2d6f869662e83398f06070e2a14f838](Hexo_article/2d6f869662e83398f06070e2a14f838.jpg)\n\n![traffic-light](Hexo_article/traffic-light.gif)\n\n### 代码\n\n主题中默认代码有些会很丑，建议修改`_config.yml`中的指令把代码前面的行号取消，这样或许会变得好看一些，个人建议仅供参考。\n\n```c++\n#include<iostream>\nusing namespace std;\nint main()\n{\n\tint a,b,c;\n\tcin>>a>>c;\n\tfor(int i=0;i<a;i++)\n\t\tcout<<c*a<<endl;\n\treturn 0;\n}\n```\n\n### 文字\n\n- 高亮语法：==Highlight==ing （==）\n- 加粗：**Bold** （\\*\\*）\n- 斜体：*Wall*（\\*）\n- 删除线：~~请给我打钱~~（~~）\n\n### 音频及视频\n\n暂不支持。。。\n\n（正在努力开发中。。。）\n\n\n```html\n<video src='test/DSC_7412.MOV' \n       type='video/mp4' \n       controls='controls'  \n       preload=\"auto\"\n       width='100%' \n       height='100%'>\n</video>\n```\n\n$$\nEND\n$$\n","slug":"Hexo_article","published":1,"updated":"2022-03-13T14:32:27.789Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1rj2n58000wgwcy8oa12fid","content":"<h2 id=\"upload-your-first-article\"><a class=\"markdownIt-Anchor\" href=\"#upload-your-first-article\"></a> Upload your first article</h2>\n<h3 id=\"create-a-new-post\"><a class=\"markdownIt-Anchor\" href=\"#create-a-new-post\"></a> Create a new post</h3>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">hexo new <span class=\"token string\">\"My New Post\"</span></code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"run-server\"><a class=\"markdownIt-Anchor\" href=\"#run-server\"></a> Run server</h3>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">hexo server</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"generate-static-files\"><a class=\"markdownIt-Anchor\" href=\"#generate-static-files\"></a> Generate static files</h3>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">hexo generate</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"deploy-to-remote-sites\"><a class=\"markdownIt-Anchor\" href=\"#deploy-to-remote-sites\"></a> Deploy to remote sites</h3>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">hexo deploy</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n<h3 id=\"advanced-settings\"><a class=\"markdownIt-Anchor\" href=\"#advanced-settings\"></a> Advanced Settings</h3>\n<p>​\t\tCreate a bat format file (e.g. <code>start.bat</code>) in the root folder of your blog.</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">hexo clean <span class=\"token operator\">&amp;</span> hexo d <span class=\"token operator\">&amp;</span> hexo g <span class=\"token operator\">&amp;</span> hexo s\npause</code></pre>\n<p>​\t\tThen every time you uploaded a file or change any settings, you can just double click the .bat file to update your blog, which is very convenience.</p>\n<h2 id=\"hexo发布类型样例\"><a class=\"markdownIt-Anchor\" href=\"#hexo发布类型样例\"></a> Hexo发布类型样例</h2>\n<h3 id=\"title\"><a class=\"markdownIt-Anchor\" href=\"#title\"></a> Title</h3>\n<p>在md下直接使用 # 进行新建标题，左侧菜单栏会自动生成H1-H6的标题，very nice!</p>\n<img src=\"/2022/02/20/Hexo_article/image-20220308162506034.png\" alt=\"image-20220308162506034\" style=\"zoom:50%;\" loading=\"lazy\">\n<h3 id=\"头部字段\"><a class=\"markdownIt-Anchor\" href=\"#头部字段\"></a> 头部字段</h3>\n<p>在文章的第一行使用三个<code>-</code>（就是分割线）来创建头部字段。</p>\n<ul>\n<li>格式如下：</li>\n</ul>\n<pre class=\"language-none\"><code class=\"language-none\">title: Hexo文章发布指南\ndate: 2077-02-20 00:34:49\nauthor: Tony\ncategories:\n\t- Hexo搭建\ntags: \n\t- tag1\n\t- tag2\nkatex: true</code></pre>\n<p>其中，<code>categories</code>在一篇文章中建议只设置一个，而<code>tags</code>可以设置很多个。这样可以防止文章分类混乱，在左侧菜单栏中可以很方便的访问。</p>\n<p><img src=\"/2022/02/20/Hexo_article/image-20220308162715529.png\" alt=\"image-20220308162715529\" loading=\"lazy\"></p>\n<h3 id=\"数学公式\"><a class=\"markdownIt-Anchor\" href=\"#数学公式\"></a> 数学公式</h3>\n<p>行内公式使用 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi mathvariant=\"normal\">$</mi></mrow><annotation encoding=\"application/x-tex\">\\$</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.80556em;vertical-align:-0.05556em;\"></span><span class=\"mord\">$</span></span></span></span> 将数学公式括起来就好，行间公式使用两个<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi mathvariant=\"normal\">$</mi><mi mathvariant=\"normal\">$</mi></mrow><annotation encoding=\"application/x-tex\">\\$\\$</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.80556em;vertical-align:-0.05556em;\"></span><span class=\"mord\">$</span><span class=\"mord\">$</span></span></span></span>，这跟md的格式是一样的。</p>\n<p>需要注意的是，如果文章中需要使用数学公式，最好在头部字段前添加<code>katex: true</code>的字样。</p>\n<ul>\n<li>数学公式样例：</li>\n</ul>\n<p>我是行内公式：<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>x</mi><mo>=</mo><msup><mi>x</mi><mn>45</mn></msup><mo>+</mo><mn>3</mn></mrow><annotation encoding=\"application/x-tex\">x=x^{45}+3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.897438em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">4</span><span class=\"mord mtight\">5</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">3</span></span></span></span>，我还可以接着写。。。</p>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>x</mi><mn>1</mn></msub><mo>=</mo><msub><mi>x</mi><mn>3</mn></msub><mo>+</mo><mn>2</mn><mo>×</mo><msup><mi>x</mi><mn>6</mn></msup><mspace linebreak=\"newline\"></mspace><mi>α</mi><mi mathvariant=\"normal\">：</mi><mi mathvariant=\"normal\">我</mi><mi mathvariant=\"normal\">是</mi><mi mathvariant=\"normal\">行</mi><mi mathvariant=\"normal\">间</mi><mi mathvariant=\"normal\">公</mi><mi mathvariant=\"normal\">式</mi><mspace linebreak=\"newline\"></mspace><mrow><mo fence=\"true\">[</mo><mtable rowspacing=\"0.15999999999999992em\" columnspacing=\"1em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>2</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>3</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>4</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>5</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>6</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>7</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>8</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>9</mn></mstyle></mtd></mtr></mtable><mo fence=\"true\">]</mo></mrow></mrow><annotation encoding=\"application/x-tex\">x_1=x_3+2\\times x^6\\\\\n\\alpha：我是行间公式\\\\\n\\left[\n\\begin{matrix}\n1 &amp; 2 &amp; 3\\\\\n4 &amp; 5 &amp; 6\\\\\n7 &amp; 8 &amp; 9\\\\\n\\end{matrix}\n\\right]\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.73333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8641079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641079999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">6</span></span></span></span></span></span></span></span></span><span class=\"mspace newline\"></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.0037em;\">α</span><span class=\"mord cjk_fallback\">：</span><span class=\"mord cjk_fallback\">我</span><span class=\"mord cjk_fallback\">是</span><span class=\"mord cjk_fallback\">行</span><span class=\"mord cjk_fallback\">间</span><span class=\"mord cjk_fallback\">公</span><span class=\"mord cjk_fallback\">式</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span></span><span class=\"mspace newline\"></span><span class=\"base\"><span class=\"strut\" style=\"height:3.60004em;vertical-align:-1.55002em;\"></span><span class=\"minner\"><span class=\"mopen\"><span class=\"delimsizing mult\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.05002em;\"><span style=\"top:-2.2500000000000004em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎣</span></span></span><span style=\"top:-4.05002em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎡</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.55002em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.05em;\"><span style=\"top:-4.21em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span><span style=\"top:-3.0099999999999993em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">4</span></span></span><span style=\"top:-1.8099999999999994em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">7</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.5500000000000007em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.05em;\"><span style=\"top:-4.21em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">2</span></span></span><span style=\"top:-3.0099999999999993em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">5</span></span></span><span style=\"top:-1.8099999999999994em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">8</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.5500000000000007em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.05em;\"><span style=\"top:-4.21em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">3</span></span></span><span style=\"top:-3.0099999999999993em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">6</span></span></span><span style=\"top:-1.8099999999999994em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">9</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.5500000000000007em;\"><span></span></span></span></span></span></span></span><span class=\"mclose\"><span class=\"delimsizing mult\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.05002em;\"><span style=\"top:-2.2500000000000004em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎦</span></span></span><span style=\"top:-4.05002em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎤</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.55002em;\"><span></span></span></span></span></span></span></span></span></span></span></span></p>\n<h3 id=\"图片\"><a class=\"markdownIt-Anchor\" href=\"#图片\"></a> 图片</h3>\n<p>只需要将图片拖入md文档中即可，md会自动创建一个与文件名相同的文件夹以储存所有的图片素材，并会自动将图片复制到该文件夹中，因此所有的图片只需要输入相对路径即可。</p>\n<p>比如，本文章的名字为test，那么只需要这样写：<code>![IMG_1479](test/IMG_1479.jpg)</code></p>\n<p>注：Hexo支持GIF格式的图片哦！</p>\n<p><img src=\"/2022/02/20/Hexo_article/IMG_1479.jpg\" alt=\"IMG_1479\" loading=\"lazy\"></p>\n<p><img src=\"/2022/02/20/Hexo_article/2d6f869662e83398f06070e2a14f838.jpg\" alt=\"2d6f869662e83398f06070e2a14f838\" loading=\"lazy\"></p>\n<p><img src=\"/2022/02/20/Hexo_article/traffic-light.gif\" alt=\"traffic-light\" loading=\"lazy\"></p>\n<h3 id=\"代码\"><a class=\"markdownIt-Anchor\" href=\"#代码\"></a> 代码</h3>\n<p>主题中默认代码有些会很丑，建议修改<code>_config.yml</code>中的指令把代码前面的行号取消，这样或许会变得好看一些，个人建议仅供参考。</p>\n<pre class=\"language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include&lt;iostream&gt;\nusing namespace std;\nint main()\n&#123;\n\tint a,b,c;\n\tcin&gt;&gt;a&gt;&gt;c;\n\tfor(int i&#x3D;0;i&lt;a;i++)\n\t\tcout&lt;&lt;c*a&lt;&lt;endl;\n\treturn 0;\n&#125;</code></pre>\n<h3 id=\"文字\"><a class=\"markdownIt-Anchor\" href=\"#文字\"></a> 文字</h3>\n<ul>\n<li>高亮语法：<mark>Highlight</mark>ing （==）</li>\n<li>加粗：<strong>Bold</strong> （**）</li>\n<li>斜体：<em>Wall</em>（*）</li>\n<li>删除线：<s>请给我打钱</s>（~~）</li>\n</ul>\n<h3 id=\"音频及视频\"><a class=\"markdownIt-Anchor\" href=\"#音频及视频\"></a> 音频及视频</h3>\n<p>暂不支持。。。</p>\n<p>（正在努力开发中。。。）</p>\n<pre class=\"language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>video</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>test/DSC_7412.MOV<span class=\"token punctuation\">'</span></span> \n       <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>video/mp4<span class=\"token punctuation\">'</span></span> \n       <span class=\"token attr-name\">controls</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>controls<span class=\"token punctuation\">'</span></span>  \n       <span class=\"token attr-name\">preload</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>auto<span class=\"token punctuation\">\"</span></span>\n       <span class=\"token attr-name\">width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>100%<span class=\"token punctuation\">'</span></span> \n       <span class=\"token attr-name\">height</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>100%<span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>video</span><span class=\"token punctuation\">></span></span></code></pre>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>E</mi><mi>N</mi><mi>D</mi></mrow><annotation encoding=\"application/x-tex\">END\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">N</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">D</span></span></span></span></span></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"upload-your-first-article\"><a class=\"markdownIt-Anchor\" href=\"#upload-your-first-article\"></a> Upload your first article</h2>\n<h3 id=\"create-a-new-post\"><a class=\"markdownIt-Anchor\" href=\"#create-a-new-post\"></a> Create a new post</h3>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">hexo new <span class=\"token string\">\"My New Post\"</span></code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"run-server\"><a class=\"markdownIt-Anchor\" href=\"#run-server\"></a> Run server</h3>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">hexo server</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"generate-static-files\"><a class=\"markdownIt-Anchor\" href=\"#generate-static-files\"></a> Generate static files</h3>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">hexo generate</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"deploy-to-remote-sites\"><a class=\"markdownIt-Anchor\" href=\"#deploy-to-remote-sites\"></a> Deploy to remote sites</h3>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">hexo deploy</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n<h3 id=\"advanced-settings\"><a class=\"markdownIt-Anchor\" href=\"#advanced-settings\"></a> Advanced Settings</h3>\n<p>​\t\tCreate a bat format file (e.g. <code>start.bat</code>) in the root folder of your blog.</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">hexo clean <span class=\"token operator\">&amp;</span> hexo d <span class=\"token operator\">&amp;</span> hexo g <span class=\"token operator\">&amp;</span> hexo s\npause</code></pre>\n<p>​\t\tThen every time you uploaded a file or change any settings, you can just double click the .bat file to update your blog, which is very convenience.</p>\n<h2 id=\"hexo发布类型样例\"><a class=\"markdownIt-Anchor\" href=\"#hexo发布类型样例\"></a> Hexo发布类型样例</h2>\n<h3 id=\"title\"><a class=\"markdownIt-Anchor\" href=\"#title\"></a> Title</h3>\n<p>在md下直接使用 # 进行新建标题，左侧菜单栏会自动生成H1-H6的标题，very nice!</p>\n<img src=\"/2022/02/20/Hexo_article/image-20220308162506034.png\" alt=\"image-20220308162506034\" style=\"zoom:50%;\">\n<h3 id=\"头部字段\"><a class=\"markdownIt-Anchor\" href=\"#头部字段\"></a> 头部字段</h3>\n<p>在文章的第一行使用三个<code>-</code>（就是分割线）来创建头部字段。</p>\n<ul>\n<li>格式如下：</li>\n</ul>\n<pre class=\"language-none\"><code class=\"language-none\">title: Hexo文章发布指南\ndate: 2077-02-20 00:34:49\nauthor: Tony\ncategories:\n\t- Hexo搭建\ntags: \n\t- tag1\n\t- tag2\nkatex: true</code></pre>\n<p>其中，<code>categories</code>在一篇文章中建议只设置一个，而<code>tags</code>可以设置很多个。这样可以防止文章分类混乱，在左侧菜单栏中可以很方便的访问。</p>\n<p><img src=\"/2022/02/20/Hexo_article/image-20220308162715529.png\" alt=\"image-20220308162715529\"></p>\n<h3 id=\"数学公式\"><a class=\"markdownIt-Anchor\" href=\"#数学公式\"></a> 数学公式</h3>\n<p>行内公式使用 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi mathvariant=\"normal\">$</mi></mrow><annotation encoding=\"application/x-tex\">\\$</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.80556em;vertical-align:-0.05556em;\"></span><span class=\"mord\">$</span></span></span></span> 将数学公式括起来就好，行间公式使用两个<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi mathvariant=\"normal\">$</mi><mi mathvariant=\"normal\">$</mi></mrow><annotation encoding=\"application/x-tex\">\\$\\$</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.80556em;vertical-align:-0.05556em;\"></span><span class=\"mord\">$</span><span class=\"mord\">$</span></span></span></span>，这跟md的格式是一样的。</p>\n<p>需要注意的是，如果文章中需要使用数学公式，最好在头部字段前添加<code>katex: true</code>的字样。</p>\n<ul>\n<li>数学公式样例：</li>\n</ul>\n<p>我是行内公式：<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>x</mi><mo>=</mo><msup><mi>x</mi><mn>45</mn></msup><mo>+</mo><mn>3</mn></mrow><annotation encoding=\"application/x-tex\">x=x^{45}+3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.897438em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">4</span><span class=\"mord mtight\">5</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">3</span></span></span></span>，我还可以接着写。。。</p>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>x</mi><mn>1</mn></msub><mo>=</mo><msub><mi>x</mi><mn>3</mn></msub><mo>+</mo><mn>2</mn><mo>×</mo><msup><mi>x</mi><mn>6</mn></msup><mspace linebreak=\"newline\"></mspace><mi>α</mi><mi mathvariant=\"normal\">：</mi><mi mathvariant=\"normal\">我</mi><mi mathvariant=\"normal\">是</mi><mi mathvariant=\"normal\">行</mi><mi mathvariant=\"normal\">间</mi><mi mathvariant=\"normal\">公</mi><mi mathvariant=\"normal\">式</mi><mspace linebreak=\"newline\"></mspace><mrow><mo fence=\"true\">[</mo><mtable rowspacing=\"0.15999999999999992em\" columnspacing=\"1em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>2</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>3</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>4</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>5</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>6</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>7</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>8</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>9</mn></mstyle></mtd></mtr></mtable><mo fence=\"true\">]</mo></mrow></mrow><annotation encoding=\"application/x-tex\">x_1=x_3+2\\times x^6\\\\\n\\alpha：我是行间公式\\\\\n\\left[\n\\begin{matrix}\n1 &amp; 2 &amp; 3\\\\\n4 &amp; 5 &amp; 6\\\\\n7 &amp; 8 &amp; 9\\\\\n\\end{matrix}\n\\right]\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.73333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8641079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641079999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">6</span></span></span></span></span></span></span></span></span><span class=\"mspace newline\"></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.0037em;\">α</span><span class=\"mord cjk_fallback\">：</span><span class=\"mord cjk_fallback\">我</span><span class=\"mord cjk_fallback\">是</span><span class=\"mord cjk_fallback\">行</span><span class=\"mord cjk_fallback\">间</span><span class=\"mord cjk_fallback\">公</span><span class=\"mord cjk_fallback\">式</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span></span><span class=\"mspace newline\"></span><span class=\"base\"><span class=\"strut\" style=\"height:3.60004em;vertical-align:-1.55002em;\"></span><span class=\"minner\"><span class=\"mopen\"><span class=\"delimsizing mult\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.05002em;\"><span style=\"top:-2.2500000000000004em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎣</span></span></span><span style=\"top:-4.05002em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎡</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.55002em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.05em;\"><span style=\"top:-4.21em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span><span style=\"top:-3.0099999999999993em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">4</span></span></span><span style=\"top:-1.8099999999999994em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">7</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.5500000000000007em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.05em;\"><span style=\"top:-4.21em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">2</span></span></span><span style=\"top:-3.0099999999999993em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">5</span></span></span><span style=\"top:-1.8099999999999994em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">8</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.5500000000000007em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.05em;\"><span style=\"top:-4.21em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">3</span></span></span><span style=\"top:-3.0099999999999993em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">6</span></span></span><span style=\"top:-1.8099999999999994em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">9</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.5500000000000007em;\"><span></span></span></span></span></span></span></span><span class=\"mclose\"><span class=\"delimsizing mult\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.05002em;\"><span style=\"top:-2.2500000000000004em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎦</span></span></span><span style=\"top:-4.05002em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎤</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.55002em;\"><span></span></span></span></span></span></span></span></span></span></span></span></p>\n<h3 id=\"图片\"><a class=\"markdownIt-Anchor\" href=\"#图片\"></a> 图片</h3>\n<p>只需要将图片拖入md文档中即可，md会自动创建一个与文件名相同的文件夹以储存所有的图片素材，并会自动将图片复制到该文件夹中，因此所有的图片只需要输入相对路径即可。</p>\n<p>比如，本文章的名字为test，那么只需要这样写：<code>![IMG_1479](test/IMG_1479.jpg)</code></p>\n<p>注：Hexo支持GIF格式的图片哦！</p>\n<p><img src=\"/2022/02/20/Hexo_article/IMG_1479.jpg\" alt=\"IMG_1479\"></p>\n<p><img src=\"/2022/02/20/Hexo_article/2d6f869662e83398f06070e2a14f838.jpg\" alt=\"2d6f869662e83398f06070e2a14f838\"></p>\n<p><img src=\"/2022/02/20/Hexo_article/traffic-light.gif\" alt=\"traffic-light\"></p>\n<h3 id=\"代码\"><a class=\"markdownIt-Anchor\" href=\"#代码\"></a> 代码</h3>\n<p>主题中默认代码有些会很丑，建议修改<code>_config.yml</code>中的指令把代码前面的行号取消，这样或许会变得好看一些，个人建议仅供参考。</p>\n<pre class=\"language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include&lt;iostream&gt;\nusing namespace std;\nint main()\n&#123;\n\tint a,b,c;\n\tcin&gt;&gt;a&gt;&gt;c;\n\tfor(int i&#x3D;0;i&lt;a;i++)\n\t\tcout&lt;&lt;c*a&lt;&lt;endl;\n\treturn 0;\n&#125;</code></pre>\n<h3 id=\"文字\"><a class=\"markdownIt-Anchor\" href=\"#文字\"></a> 文字</h3>\n<ul>\n<li>高亮语法：<mark>Highlight</mark>ing （==）</li>\n<li>加粗：<strong>Bold</strong> （**）</li>\n<li>斜体：<em>Wall</em>（*）</li>\n<li>删除线：<s>请给我打钱</s>（~~）</li>\n</ul>\n<h3 id=\"音频及视频\"><a class=\"markdownIt-Anchor\" href=\"#音频及视频\"></a> 音频及视频</h3>\n<p>暂不支持。。。</p>\n<p>（正在努力开发中。。。）</p>\n<pre class=\"language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>video</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>test/DSC_7412.MOV<span class=\"token punctuation\">'</span></span> \n       <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>video/mp4<span class=\"token punctuation\">'</span></span> \n       <span class=\"token attr-name\">controls</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>controls<span class=\"token punctuation\">'</span></span>  \n       <span class=\"token attr-name\">preload</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>auto<span class=\"token punctuation\">\"</span></span>\n       <span class=\"token attr-name\">width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>100%<span class=\"token punctuation\">'</span></span> \n       <span class=\"token attr-name\">height</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>100%<span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>video</span><span class=\"token punctuation\">></span></span></code></pre>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>E</mi><mi>N</mi><mi>D</mi></mrow><annotation encoding=\"application/x-tex\">END\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">N</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">D</span></span></span></span></span></p>\n"},{"title":"PERT","date":"2022-03-12T17:49:43.000Z","author":"Tony","katex":true,"_content":"\nPERT: Program Evaluation and Review Technique\n\n## 1. Tasks\n\nTry to write source code to implement the REPT process, i.e., identifying critical activities and critical path, and calculating the time to complete this software project. The following requirements should be satisfied:\n\n1. Upload all source code files (non including some compiling files, configuration files, etc.).\n2. Given a example (the example in the slide or your another example) as an input of your source code, show the result of your source code by screenshot.\n3. You choose use a file folder to include all these files, and the compress it into a compressed file for submission.\n\n## 2. Basic Algorithms to solve this issue\n\n### 2.0 Variables and its meaning\n\n- EST: Earliest Start Time\n- EFT: Earliest Finish Time\n- LST: Latest Start Time\n- LFT: Latest Finish Time\n- PRT: Project Time Usage (of each activity)\n\n### 2.1 Store data into adjacency matrix\n\nIn a PRET example, firstly we need to know how many activities should we solve, namely, input num as the total of PRET activities. Next, we need to build an array to storage the time usage in each of the task, namely, PRT.\n\nThe most difficult task, relatively speaking compared with the following input, is to storage the immediate predecessors of each activities. We can either use adjacency matrix or adjacency linked list to storage the predecessors, in my program, I will use matrix instead of linked list since the value num is not too large.\n\n### 2.2 Topological sort\n\nAs we all know, topological sort algorithm is useful and convenient to solve the dependency resolution which is extremely similar to PREP, hence I will use topological sort algorithm to implement the **Earliest Start Time** of each node. And the key formula to get EST is\n\n```\nEST[j] = max(EST[i] + PRT[i],EST[j])\n```\n\n**Earliest Finish Time** is simple to achieve when we know the EST since\n`EFT = EST+PRT`\n\nThe rest of two arrays **Latest Start Time** and **Latest Finish Time** is harder to find out. Actually, we can find out either of the two values and the other is easy to know since\n`LST=LFT-PRT`\n\nWhat I need to do is reverse all the arrows in PREP, that is, change the last activity to the first activity and change the first activity to the last one, and reverse all the activities and immediate predecessors. Using the same method with solving the EST, we can find out the LFT in the same way. Just Transpose the adjacency matrix, and use the key formula\n`LST[j]=min(LFT[i]-PRT[i],LFT[j])`\n\n### 2.3 Solutions\n\nAfter Getting four arrays EST, EFT, LST, LFT, we can easily find the Critical activities and Critical paths by Slacks, and the formula is\n`Slack = LST-EST=LFT-EFT`\n\nIf Slack is not zero, then this activity is a critical activity and those slacks can contribute to the critical path.\n\n## 3. Example and Results\n\nWhile using the example given below, we can create a graph and given it into adjacency matrix.\n\n| ACTIVIEY CODE | IMMEDIATE PREDCESSORS | TIME USAGE |\n| :------------ | :-------------------- | :--------- |\n| 1             | –                     | 2          |\n| 2             | 1                     | 4          |\n| 3             | 2                     | 10         |\n| 4             | 3                     | 6          |\n| 5             | 3                     | 4          |\n| 6             | 5                     | 5          |\n| 7             | 4                     | 7          |\n| 8             | 5 7                   | 9          |\n| 9             | 3                     | 7          |\n| 10            | 6 9                   | 8          |\n| 11            | 10                    | 4          |\n| 12            | 10                    | 5          |\n| 13            | 8                     | 2          |\n| 14            | 11 12                 | 6          |\n\nThe input in the program is shown below:\n\n![img](PERT/image-20210926121305734.png)\n\nAnd the graph is shown in the graph into a matrix.\n\n![img](PERT/image-20210926121433312.png)\n\n![img](PERT/image-20210926121452437.png)\n\nFinally we can get the solutions using topological sort algorithm.\n\n![img](PERT/image-20210926121557824.png)\n\nAnd the solution is shown below.\n\n![img](PERT/image-20210926125842698.png)\n\n## 4. Code\n\n```c\n#include<iostream>\n#include<vector>\n#include<sstream>\n#include<string>\n#include<iomanip>\n#include<fstream>\n#include<stack>\nusing namespace std;\nifstream fin(\"data.txt\");\nint num;\nint main()\n{\n\t//******************* Read Datas *******************\n\tcout << \"Please input the number of total projects:\";\n\tfin >> num;\n\tcout << num << endl;\n\tint* pro_time = new int[num + 2];//Project time usage\n\tvector<vector<int>> map(num + 2, vector<int>(num + 2));//adjacency matrix\n\n\tfor (int i = 1; i <= num; i++)\n\t\tfor (int j = 1; j <= num; j++)\n\t\t\tmap[i][j] = 0;\n\n\tfor (int i = 1; i <= num; i++)\n\t{\n\t\tcout << \"Please input the time that Project \" << i << \" should be used:\";\n\t\tfin >> pro_time[i];\n\t\tcout << pro_time[i] << endl;\n\t\tcout << \"Please input which project(s) should be done before Project \" << i << \":\";\n\n\t\tvector<int> temp;\n\t\tfin.get();\n\t\tstring str;\n\t\tgetline(fin, str);\n\t\tint tt;\n\t\tstringstream ss(str);\n\t\twhile (ss >> tt)\n\t\t\ttemp.push_back(tt);\n\t\t\n\t\tcout << str << endl;\n\t\tif (temp.empty())\n\t\t\tcontinue;\n\t\telse\n\t\t\tfor (auto tt : temp)\n\t\t\t\tmap[tt][i] = pro_time[i];\n\t}\n\n\t//******************* EST and EFT *******************\n\tint* Earliset_Start = new int[num + 2];\n\tfor (int i = 1; i <= num; i++)\n\t\tEarliset_Start[i] = 0;\n\n\t//******************* Topological Sort *******************\n\tstack<int> stk;\n\tstk.push(1);\n\twhile (!stk.empty())\n\t{\n\t\tint i = stk.top();\n\t\tstk.pop();\n\t\tfor (int j = i + 1; j <= num; j++)\n\t\t\tif (map[i][j] != 0)\n\t\t\t{\n\t\t\t\tstk.push(j);\n\t\t\t\tEarliset_Start[j] = max(Earliset_Start[i] + pro_time[i], Earliset_Start[j]);\n\t\t\t}\n\t}\n\n\t//Earliset Finish\n\tint* Earliset_Finish = new int[num + 2];\n\tfor (int i = 1; i <= num; i++)\n\t\tEarliset_Finish[i] = Earliset_Start[i] + pro_time[i];\n\n\t//******************* LST and LFT **************************\n\tfor (int i = 1; i <= num; i++)\n\t\tfor (int j = i; j <= num; j++)\n\t\t\tif (map[i][j] != 0)\n\t\t\t{\n\t\t\t\tmap[j][i] = map[i][j];\n\t\t\t\tmap[i][j] = 0;\n\t\t\t}\n\n\tint* Latest_Finish = new int[num + 2];\n\tint Finish_time = Earliset_Finish[num];\n\tfor (int i = 1; i <= num; i++)\n\t\tLatest_Finish[i] = Finish_time;\n\t//******************* Topological Sort *******************\n\t\n\tstk.push(num);//need to optimize...\n\tstk.push(num - 1);//need to optimize...\n\twhile (!stk.empty())\n\t{\n\t\tint i = stk.top();\n\t\tstk.pop();\n\t\tfor (int j = 1; j < i; j++)\n\t\t\tif (map[i][j] != 0)\n\t\t\t{\n\t\t\t\tstk.push(j);\n\t\t\t\tLatest_Finish[j] = min(Latest_Finish[i] - pro_time[i], Latest_Finish[j]);\t\n\t\t\t}\n\t}\n\n\tint* Latest_Start = new int[num + 2];\n\tfor (int i = 1; i <= num; i++)\n\t\tLatest_Start[i] = Latest_Finish[i] - pro_time[i];\n\n\t//Critical Activities\n\tbool* Critical_Activities = new bool[num + 2];\n\tfor (int i = 1; i <= num; i++)\n\t\tif (Latest_Start[i] - Earliset_Start[i] != 0)\n\t\t\tCritical_Activities[i] = false;\n\t\telse\n\t\t\tCritical_Activities[i] = true;\n\n\t//******************* Solutions *******************\n\tprintf(\"________________________________________________\\n\");\n\tfor (int i = 1; i <= num; i++)\n\t{\n\t\tfor (int j = 1; j <= num; j++)\n\t\t\tcout << setw(2) << map[i][j] << \" \";\n\t\tcout << endl;\n\t}\n\tprintf(\"________________________________________________\\n\");\n\tcout << \"pro_time:\";\n\tfor (int i = 1; i <= num; i++)\n\t\tcout << pro_time[i] << \" \";\n\tprintf(\"\\n________________________________________________\\n\");\n\tcout << \"Earest Start:\";\n\tfor (int i = 1; i <= num; i++)\n\t\tcout << Earliset_Start[i] << \" \";\n\tprintf(\"\\n________________________________________________\\n\");\n\tcout << \"Earest Finish:\";\n\tfor (int i = 1; i <= num; i++)\n\t\tcout << Earliset_Finish[i] << \" \";\n\tprintf(\"\\n________________________________________________\\n\");\n\tcout << \"Latest Start:\";\n\tfor (int i = 1; i <= num; i++)\n\t\tcout << Latest_Start[i] << \" \";\n\tprintf(\"\\n________________________________________________\\n\");\n\tcout << \"Latest Finish:\";\n\tfor (int i = 1; i <= num; i++)\n\t\tcout << Latest_Finish[i] << \" \";\n\tprintf(\"\\n________________________________________________\\n\");\n\tcout << \"Critical Activities:\";\n\tfor (int i = 1; i <= num; i++)\n\t\tcout << Critical_Activities[i] << \" \";\n\tprintf(\"\\n________________________________________________\\n\");\n\tcout << \"Critical Paths: A\";\n\tfor (int i = 2; i <= num; i++)\n\t\tif (Critical_Activities[i])\n\t\t\tcout << \"->\" << char(i + 64);\n\n\treturn 0;\n}\n```","source":"_posts/PERT.md","raw":"---\ntitle: PERT\ndate: 2022-03-13 01:49:43\nauthor: Tony\ntags:\n\t- algorithm\n\t- PERT\ncategories:\n\t- algorithm\nkatex: true\n---\n\nPERT: Program Evaluation and Review Technique\n\n## 1. Tasks\n\nTry to write source code to implement the REPT process, i.e., identifying critical activities and critical path, and calculating the time to complete this software project. The following requirements should be satisfied:\n\n1. Upload all source code files (non including some compiling files, configuration files, etc.).\n2. Given a example (the example in the slide or your another example) as an input of your source code, show the result of your source code by screenshot.\n3. You choose use a file folder to include all these files, and the compress it into a compressed file for submission.\n\n## 2. Basic Algorithms to solve this issue\n\n### 2.0 Variables and its meaning\n\n- EST: Earliest Start Time\n- EFT: Earliest Finish Time\n- LST: Latest Start Time\n- LFT: Latest Finish Time\n- PRT: Project Time Usage (of each activity)\n\n### 2.1 Store data into adjacency matrix\n\nIn a PRET example, firstly we need to know how many activities should we solve, namely, input num as the total of PRET activities. Next, we need to build an array to storage the time usage in each of the task, namely, PRT.\n\nThe most difficult task, relatively speaking compared with the following input, is to storage the immediate predecessors of each activities. We can either use adjacency matrix or adjacency linked list to storage the predecessors, in my program, I will use matrix instead of linked list since the value num is not too large.\n\n### 2.2 Topological sort\n\nAs we all know, topological sort algorithm is useful and convenient to solve the dependency resolution which is extremely similar to PREP, hence I will use topological sort algorithm to implement the **Earliest Start Time** of each node. And the key formula to get EST is\n\n```\nEST[j] = max(EST[i] + PRT[i],EST[j])\n```\n\n**Earliest Finish Time** is simple to achieve when we know the EST since\n`EFT = EST+PRT`\n\nThe rest of two arrays **Latest Start Time** and **Latest Finish Time** is harder to find out. Actually, we can find out either of the two values and the other is easy to know since\n`LST=LFT-PRT`\n\nWhat I need to do is reverse all the arrows in PREP, that is, change the last activity to the first activity and change the first activity to the last one, and reverse all the activities and immediate predecessors. Using the same method with solving the EST, we can find out the LFT in the same way. Just Transpose the adjacency matrix, and use the key formula\n`LST[j]=min(LFT[i]-PRT[i],LFT[j])`\n\n### 2.3 Solutions\n\nAfter Getting four arrays EST, EFT, LST, LFT, we can easily find the Critical activities and Critical paths by Slacks, and the formula is\n`Slack = LST-EST=LFT-EFT`\n\nIf Slack is not zero, then this activity is a critical activity and those slacks can contribute to the critical path.\n\n## 3. Example and Results\n\nWhile using the example given below, we can create a graph and given it into adjacency matrix.\n\n| ACTIVIEY CODE | IMMEDIATE PREDCESSORS | TIME USAGE |\n| :------------ | :-------------------- | :--------- |\n| 1             | –                     | 2          |\n| 2             | 1                     | 4          |\n| 3             | 2                     | 10         |\n| 4             | 3                     | 6          |\n| 5             | 3                     | 4          |\n| 6             | 5                     | 5          |\n| 7             | 4                     | 7          |\n| 8             | 5 7                   | 9          |\n| 9             | 3                     | 7          |\n| 10            | 6 9                   | 8          |\n| 11            | 10                    | 4          |\n| 12            | 10                    | 5          |\n| 13            | 8                     | 2          |\n| 14            | 11 12                 | 6          |\n\nThe input in the program is shown below:\n\n![img](PERT/image-20210926121305734.png)\n\nAnd the graph is shown in the graph into a matrix.\n\n![img](PERT/image-20210926121433312.png)\n\n![img](PERT/image-20210926121452437.png)\n\nFinally we can get the solutions using topological sort algorithm.\n\n![img](PERT/image-20210926121557824.png)\n\nAnd the solution is shown below.\n\n![img](PERT/image-20210926125842698.png)\n\n## 4. Code\n\n```c\n#include<iostream>\n#include<vector>\n#include<sstream>\n#include<string>\n#include<iomanip>\n#include<fstream>\n#include<stack>\nusing namespace std;\nifstream fin(\"data.txt\");\nint num;\nint main()\n{\n\t//******************* Read Datas *******************\n\tcout << \"Please input the number of total projects:\";\n\tfin >> num;\n\tcout << num << endl;\n\tint* pro_time = new int[num + 2];//Project time usage\n\tvector<vector<int>> map(num + 2, vector<int>(num + 2));//adjacency matrix\n\n\tfor (int i = 1; i <= num; i++)\n\t\tfor (int j = 1; j <= num; j++)\n\t\t\tmap[i][j] = 0;\n\n\tfor (int i = 1; i <= num; i++)\n\t{\n\t\tcout << \"Please input the time that Project \" << i << \" should be used:\";\n\t\tfin >> pro_time[i];\n\t\tcout << pro_time[i] << endl;\n\t\tcout << \"Please input which project(s) should be done before Project \" << i << \":\";\n\n\t\tvector<int> temp;\n\t\tfin.get();\n\t\tstring str;\n\t\tgetline(fin, str);\n\t\tint tt;\n\t\tstringstream ss(str);\n\t\twhile (ss >> tt)\n\t\t\ttemp.push_back(tt);\n\t\t\n\t\tcout << str << endl;\n\t\tif (temp.empty())\n\t\t\tcontinue;\n\t\telse\n\t\t\tfor (auto tt : temp)\n\t\t\t\tmap[tt][i] = pro_time[i];\n\t}\n\n\t//******************* EST and EFT *******************\n\tint* Earliset_Start = new int[num + 2];\n\tfor (int i = 1; i <= num; i++)\n\t\tEarliset_Start[i] = 0;\n\n\t//******************* Topological Sort *******************\n\tstack<int> stk;\n\tstk.push(1);\n\twhile (!stk.empty())\n\t{\n\t\tint i = stk.top();\n\t\tstk.pop();\n\t\tfor (int j = i + 1; j <= num; j++)\n\t\t\tif (map[i][j] != 0)\n\t\t\t{\n\t\t\t\tstk.push(j);\n\t\t\t\tEarliset_Start[j] = max(Earliset_Start[i] + pro_time[i], Earliset_Start[j]);\n\t\t\t}\n\t}\n\n\t//Earliset Finish\n\tint* Earliset_Finish = new int[num + 2];\n\tfor (int i = 1; i <= num; i++)\n\t\tEarliset_Finish[i] = Earliset_Start[i] + pro_time[i];\n\n\t//******************* LST and LFT **************************\n\tfor (int i = 1; i <= num; i++)\n\t\tfor (int j = i; j <= num; j++)\n\t\t\tif (map[i][j] != 0)\n\t\t\t{\n\t\t\t\tmap[j][i] = map[i][j];\n\t\t\t\tmap[i][j] = 0;\n\t\t\t}\n\n\tint* Latest_Finish = new int[num + 2];\n\tint Finish_time = Earliset_Finish[num];\n\tfor (int i = 1; i <= num; i++)\n\t\tLatest_Finish[i] = Finish_time;\n\t//******************* Topological Sort *******************\n\t\n\tstk.push(num);//need to optimize...\n\tstk.push(num - 1);//need to optimize...\n\twhile (!stk.empty())\n\t{\n\t\tint i = stk.top();\n\t\tstk.pop();\n\t\tfor (int j = 1; j < i; j++)\n\t\t\tif (map[i][j] != 0)\n\t\t\t{\n\t\t\t\tstk.push(j);\n\t\t\t\tLatest_Finish[j] = min(Latest_Finish[i] - pro_time[i], Latest_Finish[j]);\t\n\t\t\t}\n\t}\n\n\tint* Latest_Start = new int[num + 2];\n\tfor (int i = 1; i <= num; i++)\n\t\tLatest_Start[i] = Latest_Finish[i] - pro_time[i];\n\n\t//Critical Activities\n\tbool* Critical_Activities = new bool[num + 2];\n\tfor (int i = 1; i <= num; i++)\n\t\tif (Latest_Start[i] - Earliset_Start[i] != 0)\n\t\t\tCritical_Activities[i] = false;\n\t\telse\n\t\t\tCritical_Activities[i] = true;\n\n\t//******************* Solutions *******************\n\tprintf(\"________________________________________________\\n\");\n\tfor (int i = 1; i <= num; i++)\n\t{\n\t\tfor (int j = 1; j <= num; j++)\n\t\t\tcout << setw(2) << map[i][j] << \" \";\n\t\tcout << endl;\n\t}\n\tprintf(\"________________________________________________\\n\");\n\tcout << \"pro_time:\";\n\tfor (int i = 1; i <= num; i++)\n\t\tcout << pro_time[i] << \" \";\n\tprintf(\"\\n________________________________________________\\n\");\n\tcout << \"Earest Start:\";\n\tfor (int i = 1; i <= num; i++)\n\t\tcout << Earliset_Start[i] << \" \";\n\tprintf(\"\\n________________________________________________\\n\");\n\tcout << \"Earest Finish:\";\n\tfor (int i = 1; i <= num; i++)\n\t\tcout << Earliset_Finish[i] << \" \";\n\tprintf(\"\\n________________________________________________\\n\");\n\tcout << \"Latest Start:\";\n\tfor (int i = 1; i <= num; i++)\n\t\tcout << Latest_Start[i] << \" \";\n\tprintf(\"\\n________________________________________________\\n\");\n\tcout << \"Latest Finish:\";\n\tfor (int i = 1; i <= num; i++)\n\t\tcout << Latest_Finish[i] << \" \";\n\tprintf(\"\\n________________________________________________\\n\");\n\tcout << \"Critical Activities:\";\n\tfor (int i = 1; i <= num; i++)\n\t\tcout << Critical_Activities[i] << \" \";\n\tprintf(\"\\n________________________________________________\\n\");\n\tcout << \"Critical Paths: A\";\n\tfor (int i = 2; i <= num; i++)\n\t\tif (Critical_Activities[i])\n\t\t\tcout << \"->\" << char(i + 64);\n\n\treturn 0;\n}\n```","slug":"PERT","published":1,"updated":"2022-03-13T14:32:27.865Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1rj2n580010gwcyeijqcvmo","content":"<p>PERT: Program Evaluation and Review Technique</p>\n<h2 id=\"1-tasks\"><a class=\"markdownIt-Anchor\" href=\"#1-tasks\"></a> 1. Tasks</h2>\n<p>Try to write source code to implement the REPT process, i.e., identifying critical activities and critical path, and calculating the time to complete this software project. The following requirements should be satisfied:</p>\n<ol>\n<li>Upload all source code files (non including some compiling files, configuration files, etc.).</li>\n<li>Given a example (the example in the slide or your another example) as an input of your source code, show the result of your source code by screenshot.</li>\n<li>You choose use a file folder to include all these files, and the compress it into a compressed file for submission.</li>\n</ol>\n<h2 id=\"2-basic-algorithms-to-solve-this-issue\"><a class=\"markdownIt-Anchor\" href=\"#2-basic-algorithms-to-solve-this-issue\"></a> 2. Basic Algorithms to solve this issue</h2>\n<h3 id=\"20-variables-and-its-meaning\"><a class=\"markdownIt-Anchor\" href=\"#20-variables-and-its-meaning\"></a> 2.0 Variables and its meaning</h3>\n<ul>\n<li>EST: Earliest Start Time</li>\n<li>EFT: Earliest Finish Time</li>\n<li>LST: Latest Start Time</li>\n<li>LFT: Latest Finish Time</li>\n<li>PRT: Project Time Usage (of each activity)</li>\n</ul>\n<h3 id=\"21-store-data-into-adjacency-matrix\"><a class=\"markdownIt-Anchor\" href=\"#21-store-data-into-adjacency-matrix\"></a> 2.1 Store data into adjacency matrix</h3>\n<p>In a PRET example, firstly we need to know how many activities should we solve, namely, input num as the total of PRET activities. Next, we need to build an array to storage the time usage in each of the task, namely, PRT.</p>\n<p>The most difficult task, relatively speaking compared with the following input, is to storage the immediate predecessors of each activities. We can either use adjacency matrix or adjacency linked list to storage the predecessors, in my program, I will use matrix instead of linked list since the value num is not too large.</p>\n<h3 id=\"22-topological-sort\"><a class=\"markdownIt-Anchor\" href=\"#22-topological-sort\"></a> 2.2 Topological sort</h3>\n<p>As we all know, topological sort algorithm is useful and convenient to solve the dependency resolution which is extremely similar to PREP, hence I will use topological sort algorithm to implement the <strong>Earliest Start Time</strong> of each node. And the key formula to get EST is</p>\n<pre class=\"language-none\"><code class=\"language-none\">EST[j] &#x3D; max(EST[i] + PRT[i],EST[j])</code></pre>\n<p><strong>Earliest Finish Time</strong> is simple to achieve when we know the EST since<br>\n<code>EFT = EST+PRT</code></p>\n<p>The rest of two arrays <strong>Latest Start Time</strong> and <strong>Latest Finish Time</strong> is harder to find out. Actually, we can find out either of the two values and the other is easy to know since<br>\n<code>LST=LFT-PRT</code></p>\n<p>What I need to do is reverse all the arrows in PREP, that is, change the last activity to the first activity and change the first activity to the last one, and reverse all the activities and immediate predecessors. Using the same method with solving the EST, we can find out the LFT in the same way. Just Transpose the adjacency matrix, and use the key formula<br>\n<code>LST[j]=min(LFT[i]-PRT[i],LFT[j])</code></p>\n<h3 id=\"23-solutions\"><a class=\"markdownIt-Anchor\" href=\"#23-solutions\"></a> 2.3 Solutions</h3>\n<p>After Getting four arrays EST, EFT, LST, LFT, we can easily find the Critical activities and Critical paths by Slacks, and the formula is<br>\n<code>Slack = LST-EST=LFT-EFT</code></p>\n<p>If Slack is not zero, then this activity is a critical activity and those slacks can contribute to the critical path.</p>\n<h2 id=\"3-example-and-results\"><a class=\"markdownIt-Anchor\" href=\"#3-example-and-results\"></a> 3. Example and Results</h2>\n<p>While using the example given below, we can create a graph and given it into adjacency matrix.</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">ACTIVIEY CODE</th>\n<th style=\"text-align:left\">IMMEDIATE PREDCESSORS</th>\n<th style=\"text-align:left\">TIME USAGE</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">1</td>\n<td style=\"text-align:left\">–</td>\n<td style=\"text-align:left\">2</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">2</td>\n<td style=\"text-align:left\">1</td>\n<td style=\"text-align:left\">4</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">3</td>\n<td style=\"text-align:left\">2</td>\n<td style=\"text-align:left\">10</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">4</td>\n<td style=\"text-align:left\">3</td>\n<td style=\"text-align:left\">6</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">5</td>\n<td style=\"text-align:left\">3</td>\n<td style=\"text-align:left\">4</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">6</td>\n<td style=\"text-align:left\">5</td>\n<td style=\"text-align:left\">5</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">7</td>\n<td style=\"text-align:left\">4</td>\n<td style=\"text-align:left\">7</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">8</td>\n<td style=\"text-align:left\">5 7</td>\n<td style=\"text-align:left\">9</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">9</td>\n<td style=\"text-align:left\">3</td>\n<td style=\"text-align:left\">7</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">10</td>\n<td style=\"text-align:left\">6 9</td>\n<td style=\"text-align:left\">8</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">11</td>\n<td style=\"text-align:left\">10</td>\n<td style=\"text-align:left\">4</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">12</td>\n<td style=\"text-align:left\">10</td>\n<td style=\"text-align:left\">5</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">13</td>\n<td style=\"text-align:left\">8</td>\n<td style=\"text-align:left\">2</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">14</td>\n<td style=\"text-align:left\">11 12</td>\n<td style=\"text-align:left\">6</td>\n</tr>\n</tbody>\n</table>\n<p>The input in the program is shown below:</p>\n<p><img src=\"/2022/03/13/PERT/image-20210926121305734.png\" alt=\"img\" loading=\"lazy\"></p>\n<p>And the graph is shown in the graph into a matrix.</p>\n<p><img src=\"/2022/03/13/PERT/image-20210926121433312.png\" alt=\"img\" loading=\"lazy\"></p>\n<p><img src=\"/2022/03/13/PERT/image-20210926121452437.png\" alt=\"img\" loading=\"lazy\"></p>\n<p>Finally we can get the solutions using topological sort algorithm.</p>\n<p><img src=\"/2022/03/13/PERT/image-20210926121557824.png\" alt=\"img\" loading=\"lazy\"></p>\n<p>And the solution is shown below.</p>\n<p><img src=\"/2022/03/13/PERT/image-20210926125842698.png\" alt=\"img\" loading=\"lazy\"></p>\n<h2 id=\"4-code\"><a class=\"markdownIt-Anchor\" href=\"#4-code\"></a> 4. Code</h2>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;vector></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;sstream></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;string></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iomanip></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;fstream></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stack></span></span>\nusing namespace std<span class=\"token punctuation\">;</span>\nifstream <span class=\"token function\">fin</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"data.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> num<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">//******************* Read Datas *******************</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Please input the number of total projects:\"</span><span class=\"token punctuation\">;</span>\n\tfin <span class=\"token operator\">>></span> num<span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> num <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> pro_time <span class=\"token operator\">=</span> new <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>num <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//Project time usage</span>\n\tvector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">>></span> <span class=\"token function\">map</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//adjacency matrix</span>\n\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> num<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> num<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t\tmap<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> num<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Please input the time that Project \"</span> <span class=\"token operator\">&lt;&lt;</span> i <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" should be used:\"</span><span class=\"token punctuation\">;</span>\n\t\tfin <span class=\"token operator\">>></span> pro_time<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> pro_time<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Please input which project(s) should be done before Project \"</span> <span class=\"token operator\">&lt;&lt;</span> i <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\":\"</span><span class=\"token punctuation\">;</span>\n\n\t\tvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> temp<span class=\"token punctuation\">;</span>\n\t\tfin<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tstring str<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">getline</span><span class=\"token punctuation\">(</span>fin<span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">int</span> tt<span class=\"token punctuation\">;</span>\n\t\tstringstream <span class=\"token function\">ss</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>ss <span class=\"token operator\">>></span> tt<span class=\"token punctuation\">)</span>\n\t\t\ttemp<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>tt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> str <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">else</span>\n\t\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> tt <span class=\"token operator\">:</span> temp<span class=\"token punctuation\">)</span>\n\t\t\t\tmap<span class=\"token punctuation\">[</span>tt<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> pro_time<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token comment\">//******************* EST and EFT *******************</span>\n\t<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> Earliset_Start <span class=\"token operator\">=</span> new <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>num <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> num<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\tEarliset_Start<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">//******************* Topological Sort *******************</span>\n\tstack<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> stk<span class=\"token punctuation\">;</span>\n\tstk<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>stk<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> stk<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tstk<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> num<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t\tstk<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\tEarliset_Start<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>Earliset_Start<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> pro_time<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> Earliset_Start<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token comment\">//Earliset Finish</span>\n\t<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> Earliset_Finish <span class=\"token operator\">=</span> new <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>num <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> num<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\tEarliset_Finish<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Earliset_Start<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> pro_time<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">//******************* LST and LFT **************************</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> num<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> num<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t\tmap<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> map<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t\tmap<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> Latest_Finish <span class=\"token operator\">=</span> new <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>num <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> Finish_time <span class=\"token operator\">=</span> Earliset_Finish<span class=\"token punctuation\">[</span>num<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> num<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\tLatest_Finish<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Finish_time<span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//******************* Topological Sort *******************</span>\n\t\n\tstk<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//need to optimize...</span>\n\tstk<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//need to optimize...</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>stk<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> stk<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tstk<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> i<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t\tstk<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\tLatest_Finish<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span>Latest_Finish<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> pro_time<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> Latest_Finish<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> Latest_Start <span class=\"token operator\">=</span> new <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>num <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> num<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\tLatest_Start<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Latest_Finish<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> pro_time<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">//Critical Activities</span>\n\tbool<span class=\"token operator\">*</span> Critical_Activities <span class=\"token operator\">=</span> new bool<span class=\"token punctuation\">[</span>num <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> num<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Latest_Start<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> Earliset_Start<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t\tCritical_Activities<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> false<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">else</span>\n\t\t\tCritical_Activities<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> true<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">//******************* Solutions *******************</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"________________________________________________\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> num<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> num<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">setw</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> map<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"________________________________________________\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"pro_time:\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> num<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> pro_time<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n________________________________________________\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Earest Start:\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> num<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> Earliset_Start<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n________________________________________________\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Earest Finish:\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> num<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> Earliset_Finish<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n________________________________________________\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Latest Start:\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> num<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> Latest_Start<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n________________________________________________\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Latest Finish:\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> num<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> Latest_Finish<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n________________________________________________\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Critical Activities:\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> num<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> Critical_Activities<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n________________________________________________\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Critical Paths: A\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> num<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Critical_Activities<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\t\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"->\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">64</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>","site":{"data":{}},"excerpt":"","more":"<p>PERT: Program Evaluation and Review Technique</p>\n<h2 id=\"1-tasks\"><a class=\"markdownIt-Anchor\" href=\"#1-tasks\"></a> 1. Tasks</h2>\n<p>Try to write source code to implement the REPT process, i.e., identifying critical activities and critical path, and calculating the time to complete this software project. The following requirements should be satisfied:</p>\n<ol>\n<li>Upload all source code files (non including some compiling files, configuration files, etc.).</li>\n<li>Given a example (the example in the slide or your another example) as an input of your source code, show the result of your source code by screenshot.</li>\n<li>You choose use a file folder to include all these files, and the compress it into a compressed file for submission.</li>\n</ol>\n<h2 id=\"2-basic-algorithms-to-solve-this-issue\"><a class=\"markdownIt-Anchor\" href=\"#2-basic-algorithms-to-solve-this-issue\"></a> 2. Basic Algorithms to solve this issue</h2>\n<h3 id=\"20-variables-and-its-meaning\"><a class=\"markdownIt-Anchor\" href=\"#20-variables-and-its-meaning\"></a> 2.0 Variables and its meaning</h3>\n<ul>\n<li>EST: Earliest Start Time</li>\n<li>EFT: Earliest Finish Time</li>\n<li>LST: Latest Start Time</li>\n<li>LFT: Latest Finish Time</li>\n<li>PRT: Project Time Usage (of each activity)</li>\n</ul>\n<h3 id=\"21-store-data-into-adjacency-matrix\"><a class=\"markdownIt-Anchor\" href=\"#21-store-data-into-adjacency-matrix\"></a> 2.1 Store data into adjacency matrix</h3>\n<p>In a PRET example, firstly we need to know how many activities should we solve, namely, input num as the total of PRET activities. Next, we need to build an array to storage the time usage in each of the task, namely, PRT.</p>\n<p>The most difficult task, relatively speaking compared with the following input, is to storage the immediate predecessors of each activities. We can either use adjacency matrix or adjacency linked list to storage the predecessors, in my program, I will use matrix instead of linked list since the value num is not too large.</p>\n<h3 id=\"22-topological-sort\"><a class=\"markdownIt-Anchor\" href=\"#22-topological-sort\"></a> 2.2 Topological sort</h3>\n<p>As we all know, topological sort algorithm is useful and convenient to solve the dependency resolution which is extremely similar to PREP, hence I will use topological sort algorithm to implement the <strong>Earliest Start Time</strong> of each node. And the key formula to get EST is</p>\n<pre class=\"language-none\"><code class=\"language-none\">EST[j] &#x3D; max(EST[i] + PRT[i],EST[j])</code></pre>\n<p><strong>Earliest Finish Time</strong> is simple to achieve when we know the EST since<br>\n<code>EFT = EST+PRT</code></p>\n<p>The rest of two arrays <strong>Latest Start Time</strong> and <strong>Latest Finish Time</strong> is harder to find out. Actually, we can find out either of the two values and the other is easy to know since<br>\n<code>LST=LFT-PRT</code></p>\n<p>What I need to do is reverse all the arrows in PREP, that is, change the last activity to the first activity and change the first activity to the last one, and reverse all the activities and immediate predecessors. Using the same method with solving the EST, we can find out the LFT in the same way. Just Transpose the adjacency matrix, and use the key formula<br>\n<code>LST[j]=min(LFT[i]-PRT[i],LFT[j])</code></p>\n<h3 id=\"23-solutions\"><a class=\"markdownIt-Anchor\" href=\"#23-solutions\"></a> 2.3 Solutions</h3>\n<p>After Getting four arrays EST, EFT, LST, LFT, we can easily find the Critical activities and Critical paths by Slacks, and the formula is<br>\n<code>Slack = LST-EST=LFT-EFT</code></p>\n<p>If Slack is not zero, then this activity is a critical activity and those slacks can contribute to the critical path.</p>\n<h2 id=\"3-example-and-results\"><a class=\"markdownIt-Anchor\" href=\"#3-example-and-results\"></a> 3. Example and Results</h2>\n<p>While using the example given below, we can create a graph and given it into adjacency matrix.</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">ACTIVIEY CODE</th>\n<th style=\"text-align:left\">IMMEDIATE PREDCESSORS</th>\n<th style=\"text-align:left\">TIME USAGE</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">1</td>\n<td style=\"text-align:left\">–</td>\n<td style=\"text-align:left\">2</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">2</td>\n<td style=\"text-align:left\">1</td>\n<td style=\"text-align:left\">4</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">3</td>\n<td style=\"text-align:left\">2</td>\n<td style=\"text-align:left\">10</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">4</td>\n<td style=\"text-align:left\">3</td>\n<td style=\"text-align:left\">6</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">5</td>\n<td style=\"text-align:left\">3</td>\n<td style=\"text-align:left\">4</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">6</td>\n<td style=\"text-align:left\">5</td>\n<td style=\"text-align:left\">5</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">7</td>\n<td style=\"text-align:left\">4</td>\n<td style=\"text-align:left\">7</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">8</td>\n<td style=\"text-align:left\">5 7</td>\n<td style=\"text-align:left\">9</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">9</td>\n<td style=\"text-align:left\">3</td>\n<td style=\"text-align:left\">7</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">10</td>\n<td style=\"text-align:left\">6 9</td>\n<td style=\"text-align:left\">8</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">11</td>\n<td style=\"text-align:left\">10</td>\n<td style=\"text-align:left\">4</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">12</td>\n<td style=\"text-align:left\">10</td>\n<td style=\"text-align:left\">5</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">13</td>\n<td style=\"text-align:left\">8</td>\n<td style=\"text-align:left\">2</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">14</td>\n<td style=\"text-align:left\">11 12</td>\n<td style=\"text-align:left\">6</td>\n</tr>\n</tbody>\n</table>\n<p>The input in the program is shown below:</p>\n<p><img src=\"/2022/03/13/PERT/image-20210926121305734.png\" alt=\"img\"></p>\n<p>And the graph is shown in the graph into a matrix.</p>\n<p><img src=\"/2022/03/13/PERT/image-20210926121433312.png\" alt=\"img\"></p>\n<p><img src=\"/2022/03/13/PERT/image-20210926121452437.png\" alt=\"img\"></p>\n<p>Finally we can get the solutions using topological sort algorithm.</p>\n<p><img src=\"/2022/03/13/PERT/image-20210926121557824.png\" alt=\"img\"></p>\n<p>And the solution is shown below.</p>\n<p><img src=\"/2022/03/13/PERT/image-20210926125842698.png\" alt=\"img\"></p>\n<h2 id=\"4-code\"><a class=\"markdownIt-Anchor\" href=\"#4-code\"></a> 4. Code</h2>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;vector></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;sstream></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;string></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iomanip></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;fstream></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stack></span></span>\nusing namespace std<span class=\"token punctuation\">;</span>\nifstream <span class=\"token function\">fin</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"data.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> num<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">//******************* Read Datas *******************</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Please input the number of total projects:\"</span><span class=\"token punctuation\">;</span>\n\tfin <span class=\"token operator\">>></span> num<span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> num <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> pro_time <span class=\"token operator\">=</span> new <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>num <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//Project time usage</span>\n\tvector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">>></span> <span class=\"token function\">map</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//adjacency matrix</span>\n\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> num<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> num<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t\tmap<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> num<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Please input the time that Project \"</span> <span class=\"token operator\">&lt;&lt;</span> i <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" should be used:\"</span><span class=\"token punctuation\">;</span>\n\t\tfin <span class=\"token operator\">>></span> pro_time<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> pro_time<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Please input which project(s) should be done before Project \"</span> <span class=\"token operator\">&lt;&lt;</span> i <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\":\"</span><span class=\"token punctuation\">;</span>\n\n\t\tvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> temp<span class=\"token punctuation\">;</span>\n\t\tfin<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tstring str<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">getline</span><span class=\"token punctuation\">(</span>fin<span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">int</span> tt<span class=\"token punctuation\">;</span>\n\t\tstringstream <span class=\"token function\">ss</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>ss <span class=\"token operator\">>></span> tt<span class=\"token punctuation\">)</span>\n\t\t\ttemp<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>tt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> str <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">else</span>\n\t\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> tt <span class=\"token operator\">:</span> temp<span class=\"token punctuation\">)</span>\n\t\t\t\tmap<span class=\"token punctuation\">[</span>tt<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> pro_time<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token comment\">//******************* EST and EFT *******************</span>\n\t<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> Earliset_Start <span class=\"token operator\">=</span> new <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>num <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> num<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\tEarliset_Start<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">//******************* Topological Sort *******************</span>\n\tstack<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> stk<span class=\"token punctuation\">;</span>\n\tstk<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>stk<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> stk<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tstk<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> num<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t\tstk<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\tEarliset_Start<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>Earliset_Start<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> pro_time<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> Earliset_Start<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token comment\">//Earliset Finish</span>\n\t<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> Earliset_Finish <span class=\"token operator\">=</span> new <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>num <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> num<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\tEarliset_Finish<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Earliset_Start<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> pro_time<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">//******************* LST and LFT **************************</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> num<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> num<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t\tmap<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> map<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t\tmap<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> Latest_Finish <span class=\"token operator\">=</span> new <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>num <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> Finish_time <span class=\"token operator\">=</span> Earliset_Finish<span class=\"token punctuation\">[</span>num<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> num<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\tLatest_Finish<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Finish_time<span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//******************* Topological Sort *******************</span>\n\t\n\tstk<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//need to optimize...</span>\n\tstk<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//need to optimize...</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>stk<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> stk<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tstk<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> i<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t\tstk<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\tLatest_Finish<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span>Latest_Finish<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> pro_time<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> Latest_Finish<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> Latest_Start <span class=\"token operator\">=</span> new <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>num <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> num<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\tLatest_Start<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Latest_Finish<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> pro_time<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">//Critical Activities</span>\n\tbool<span class=\"token operator\">*</span> Critical_Activities <span class=\"token operator\">=</span> new bool<span class=\"token punctuation\">[</span>num <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> num<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Latest_Start<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> Earliset_Start<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t\tCritical_Activities<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> false<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">else</span>\n\t\t\tCritical_Activities<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> true<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">//******************* Solutions *******************</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"________________________________________________\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> num<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> num<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">setw</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> map<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"________________________________________________\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"pro_time:\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> num<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> pro_time<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n________________________________________________\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Earest Start:\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> num<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> Earliset_Start<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n________________________________________________\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Earest Finish:\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> num<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> Earliset_Finish<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n________________________________________________\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Latest Start:\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> num<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> Latest_Start<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n________________________________________________\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Latest Finish:\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> num<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> Latest_Finish<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n________________________________________________\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Critical Activities:\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> num<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> Critical_Activities<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n________________________________________________\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Critical Paths: A\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> num<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Critical_Activities<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\t\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"->\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">64</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>"},{"title":"R2S家庭组网实操","date":"2022-02-26T12:16:48.000Z","author":"Tony","_content":"\n## 前言\n\n本文授权转载自[R2S家庭组网实操 – Orange Tien](https://www.bytedance.fit/?p=1051)，作者：Orange Tien，在此基础上略加修改，~~并不会定期更新~~。\n\n本文主要介绍R2S的基本使用方法，目前本人（Tony）也在原作者（Orange Tien）的怂恿下在两个地方分别搭建了两个R2S，看起来很简单，其实不是一帆风顺；因此也会把实际组网中遇到的问题列到最后供大家参考。\n\n## 确定所需物理设备\n\n- 一台R2S软路由以及它的电源线\n- 两根用不着太长的网线一张TF卡（作为R2S的系统盘）以及一个读写TF卡的读卡器\n- 一台可以插网线的电脑\n- 交换机（可选）\n- 插排（某些时候插座不够用）\n\n## 烧录OpenWrt系统\n\n烧录软件：[BalenaEtcher](https://www.balena.io/etcher/)\n\n软路由系统：\n\n[OpenWrt-R2S-dongdong](https://bigdongdong.cowtransfer.com/s/a3420546d30343)\n\n[OpenWrt-R2S-esir](https://bigdongdong.cowtransfer.com/s/9a349ee597aa4f)\n\n第一个链接比较新，界面比较好看一些，推荐选择这个下载；第二个系统是eSir大人写的2020版本，已经很旧了；~~奈何暂时没找到别的系统~~，如果自行找到更好的系统也可以不用这俩链接。注意系统是要支持Arm架构的，因为Openwrt不是x86架构下的产物。\n\n##  开始烧录系统至TF卡\n\n打开BalenaEtcher，选择Flash from file，然后将OpenWrt系统烧录到TF卡中即可。\n\n![img](R2S_build/image-1.png)\n\n注意：选择文件时只选择镜像文件，不要把那些七七八八的文档说明也选进去。选择`.gz`(`.img`)文件来烧录即可，烧录完成后直接拔掉读卡器；系统会提示格式化，此时千万**不要**格式化！！！（~~否则，就重来一遍吧~~）\n\n##  登入R2S后台\n\n把烧录好固件的TF卡插入R2S，然后给它插上电源，WAN口可以不接，将R2S的LAN口连接电脑的网口，根据所刷入的固件（软路由系统）的不同来决定后台地址，一般来说，软路由后台是`192.168.X.1` ，本文的系统后台是`192.168.22.1`，所以说我们在电脑浏览器内输入`192.168.5.1`(`192.168.22.1`)以进入后台。后台账号是root，默认密码基本都是password（若下载本文的系统，密码则为空），具体操作链接里面写的很清楚。\n\n## 拨号或者DHCP客户端\n\n### 光猫拨号\n\n如果你家里的组网方式是通过光猫拨号（通常都是光猫拨号），那么设置方法如下：\n\n选择 网络-接口， 然后选择 修改WAN口设置\n\n![img](R2S_build/image-2-1024x507.png)\n\n将WAN口设置成DHCP客户端，然后保存应用即可，此外无须做其他任何设置。\n\n![img](R2S_build/image-3-1024x485.png)\n\n### R2S拨号\n\n如果你的光猫是桥接，那么就由路由器来拨号（通常来说，哪个网络设备配置更好，就誰来拨号，由于R2S的稳定性远不如光猫，所以这里选择光猫拨号更好），设置方法如下：\n\n![img](R2S_build/image-5.png)\n\n同样，选择修改WAN口，协议设置成PPPoE, PAP/CHAP，账号密码就是光猫的账号密码。比如电信宽带就是以`@163.gd`结尾的，密码如果忘记的话直接拨打10000（10086）重置就好，省时省力。\n\n![img](R2S_build/image-2-1024x507.png)\n\n接下来，需要用超级管理员账号登陆到光猫的IP中（`192.168.1.1`）,各大运营商的超级管理员账号和密码可以自行搜索。选择 网络-协议，然后设置成DHCP客户端。\n\n### 小结\n\n用什么拨号，什么就选择PPPoE，然后其它设备就都设置成DHCP。\n\n用光猫拨号，光猫的设置里面就选择PPPoE，软路由以及其它路由器就选择DHCP客户端；\n\n用R2S拨号，光猫和其它路由设备的设置里面就选择DHCP客户端，软路由选择PPPoE。\n\n## 各设备接入网络\n\n将软路由的WAN口与光猫的千兆口相连，然后断开软路由的LAN口与电脑网口的连接，此时软路由的LAN口根据各人组网要求的不同选择接不同的设备，可以接交换机，也可以接一台路由器（路由器设置为有线中继模式，也就是无线AP模式）\n\n如果家中设备比较多，或者很多屋子都需要连网线的话，可以买一个最便宜的千兆交换机放到弱电箱中，然后吧R2S接到交换机与光猫中间，这样就可以实现整个局域网都接入到软路由中来。（我来草草的画个图）\n\n![image-20220305212846426](R2S_build/image-20220305212846426.png)\n\n## 利用插件设置科学上网\n\n根据前面的步骤，如果你的设备能够正常访问网络了，就可以开始探索OpenWrt的各类插件了。关于科学上网，常见的插件有PassWall, ShadowScoksR++, OpenClash，由于OpenClash具备强大的分流策略机制（根据你访问的域名或者IP的不同决定走不同的节点），我们在此以OpenCalsh为例设置科学上网\n\n![img](R2S_build/image-7.png)\n\n首先，在服务菜单中找到OpenClash，然后选择配置文件订阅，选择添加配置文件\n\n![img](R2S_build/image-8.png)\n\n配置文件名随便写，用途是给用户自己区分的，订阅地址填上机场给你的订阅地址，其余地方无需设置，直接应用并保存即可。然后回到OpenClash主页，配置文件区域发送了变化。\n\n![img](R2S_build/image-9-1024x194.png)\n\n最后点击左下角的启动按钮，等待服务器上线运行即可。\n\n![img](R2S_build/image-10.png)\n\n如果你设置后无法正常科学上网，原因是有很多的，需要你自己慢慢排查。\n\n## 更多（原作者的话）\n\n[NanoPi R2S WIKI](https://wiki.friendlyarm.com/wiki/index.php/NanoPi_R2S/zh)\n\n上面的链接是R2S的WIKI书，上面详细记录了R2S的配置以及实际测速情况，也有如何编译系统等教程。\n\n个人使用R2S两年，从大一到大三都在用这个，感觉就是到千兆不太行，500M是瓶颈了，然后连久了没那么稳定，官网手册上宣传它是又稳定又能达到千兆的，这个听听就好，R2S本来是适合入门的，但是现在价格炒的太高了，没这个必要去买它，目前有很多更具有性价比的软路由可供选择。\n\n此外向大家推荐软路由界的大佬: [JackStone的Youtube主页](https://youtube.com/c/jackstone) ，人称老白，做了很多小主机的视频，如果想选购更具性价比的设备，可以看他的合集，比如2021软路由选购建议这些。\n\n## 组网时遇到过的问题（我的话）\n\n1. 组网的过程中可能出现无法自动分配IP地址的问题，比如说小米的路由器默认会分配`192.168.31.XXX`；如果你会手动配置的话可以试试，不过最简单的办法就是等，去洗个澡回来就好了。如果还没好，那么可以考虑RESET一下路由器。\n2. OpenClash插件在首次启动的时候，可能会启动失败，他会提示需要你选择编译架构，按照他的提示，选择Arm-v8架构即可。\n3. 网线通常插上马上就会亮灯，5s左右就能ping通，不过不要太相信科学。~~我有一次ping了10多分钟。~~真的，不通的话不一定是没插紧，也不一定是插错了，**很有可能是因为你没给我微信或者支付宝赞赏**。\n4. R2S是很基础的一款软路由，稳定性可能不会太好，不过最有可能导致网络不稳定的还是机场的选择，如果选择廉价机场的话，要做好不知道什么时候突然断网10分钟的准备。\n5. 计算机网络这门学科是玄学的一个分支。\n\n","source":"_posts/R2S_build.md","raw":"---\ntitle: R2S家庭组网实操\ndate: 2022-02-26 20:16:48\nauthor: Tony\ncategories:\n\t- 计算机网络\ntags:\n\t- R2S\n\t- Computer Network\n\t- 软路由\n\t- 科学上网\n---\n\n## 前言\n\n本文授权转载自[R2S家庭组网实操 – Orange Tien](https://www.bytedance.fit/?p=1051)，作者：Orange Tien，在此基础上略加修改，~~并不会定期更新~~。\n\n本文主要介绍R2S的基本使用方法，目前本人（Tony）也在原作者（Orange Tien）的怂恿下在两个地方分别搭建了两个R2S，看起来很简单，其实不是一帆风顺；因此也会把实际组网中遇到的问题列到最后供大家参考。\n\n## 确定所需物理设备\n\n- 一台R2S软路由以及它的电源线\n- 两根用不着太长的网线一张TF卡（作为R2S的系统盘）以及一个读写TF卡的读卡器\n- 一台可以插网线的电脑\n- 交换机（可选）\n- 插排（某些时候插座不够用）\n\n## 烧录OpenWrt系统\n\n烧录软件：[BalenaEtcher](https://www.balena.io/etcher/)\n\n软路由系统：\n\n[OpenWrt-R2S-dongdong](https://bigdongdong.cowtransfer.com/s/a3420546d30343)\n\n[OpenWrt-R2S-esir](https://bigdongdong.cowtransfer.com/s/9a349ee597aa4f)\n\n第一个链接比较新，界面比较好看一些，推荐选择这个下载；第二个系统是eSir大人写的2020版本，已经很旧了；~~奈何暂时没找到别的系统~~，如果自行找到更好的系统也可以不用这俩链接。注意系统是要支持Arm架构的，因为Openwrt不是x86架构下的产物。\n\n##  开始烧录系统至TF卡\n\n打开BalenaEtcher，选择Flash from file，然后将OpenWrt系统烧录到TF卡中即可。\n\n![img](R2S_build/image-1.png)\n\n注意：选择文件时只选择镜像文件，不要把那些七七八八的文档说明也选进去。选择`.gz`(`.img`)文件来烧录即可，烧录完成后直接拔掉读卡器；系统会提示格式化，此时千万**不要**格式化！！！（~~否则，就重来一遍吧~~）\n\n##  登入R2S后台\n\n把烧录好固件的TF卡插入R2S，然后给它插上电源，WAN口可以不接，将R2S的LAN口连接电脑的网口，根据所刷入的固件（软路由系统）的不同来决定后台地址，一般来说，软路由后台是`192.168.X.1` ，本文的系统后台是`192.168.22.1`，所以说我们在电脑浏览器内输入`192.168.5.1`(`192.168.22.1`)以进入后台。后台账号是root，默认密码基本都是password（若下载本文的系统，密码则为空），具体操作链接里面写的很清楚。\n\n## 拨号或者DHCP客户端\n\n### 光猫拨号\n\n如果你家里的组网方式是通过光猫拨号（通常都是光猫拨号），那么设置方法如下：\n\n选择 网络-接口， 然后选择 修改WAN口设置\n\n![img](R2S_build/image-2-1024x507.png)\n\n将WAN口设置成DHCP客户端，然后保存应用即可，此外无须做其他任何设置。\n\n![img](R2S_build/image-3-1024x485.png)\n\n### R2S拨号\n\n如果你的光猫是桥接，那么就由路由器来拨号（通常来说，哪个网络设备配置更好，就誰来拨号，由于R2S的稳定性远不如光猫，所以这里选择光猫拨号更好），设置方法如下：\n\n![img](R2S_build/image-5.png)\n\n同样，选择修改WAN口，协议设置成PPPoE, PAP/CHAP，账号密码就是光猫的账号密码。比如电信宽带就是以`@163.gd`结尾的，密码如果忘记的话直接拨打10000（10086）重置就好，省时省力。\n\n![img](R2S_build/image-2-1024x507.png)\n\n接下来，需要用超级管理员账号登陆到光猫的IP中（`192.168.1.1`）,各大运营商的超级管理员账号和密码可以自行搜索。选择 网络-协议，然后设置成DHCP客户端。\n\n### 小结\n\n用什么拨号，什么就选择PPPoE，然后其它设备就都设置成DHCP。\n\n用光猫拨号，光猫的设置里面就选择PPPoE，软路由以及其它路由器就选择DHCP客户端；\n\n用R2S拨号，光猫和其它路由设备的设置里面就选择DHCP客户端，软路由选择PPPoE。\n\n## 各设备接入网络\n\n将软路由的WAN口与光猫的千兆口相连，然后断开软路由的LAN口与电脑网口的连接，此时软路由的LAN口根据各人组网要求的不同选择接不同的设备，可以接交换机，也可以接一台路由器（路由器设置为有线中继模式，也就是无线AP模式）\n\n如果家中设备比较多，或者很多屋子都需要连网线的话，可以买一个最便宜的千兆交换机放到弱电箱中，然后吧R2S接到交换机与光猫中间，这样就可以实现整个局域网都接入到软路由中来。（我来草草的画个图）\n\n![image-20220305212846426](R2S_build/image-20220305212846426.png)\n\n## 利用插件设置科学上网\n\n根据前面的步骤，如果你的设备能够正常访问网络了，就可以开始探索OpenWrt的各类插件了。关于科学上网，常见的插件有PassWall, ShadowScoksR++, OpenClash，由于OpenClash具备强大的分流策略机制（根据你访问的域名或者IP的不同决定走不同的节点），我们在此以OpenCalsh为例设置科学上网\n\n![img](R2S_build/image-7.png)\n\n首先，在服务菜单中找到OpenClash，然后选择配置文件订阅，选择添加配置文件\n\n![img](R2S_build/image-8.png)\n\n配置文件名随便写，用途是给用户自己区分的，订阅地址填上机场给你的订阅地址，其余地方无需设置，直接应用并保存即可。然后回到OpenClash主页，配置文件区域发送了变化。\n\n![img](R2S_build/image-9-1024x194.png)\n\n最后点击左下角的启动按钮，等待服务器上线运行即可。\n\n![img](R2S_build/image-10.png)\n\n如果你设置后无法正常科学上网，原因是有很多的，需要你自己慢慢排查。\n\n## 更多（原作者的话）\n\n[NanoPi R2S WIKI](https://wiki.friendlyarm.com/wiki/index.php/NanoPi_R2S/zh)\n\n上面的链接是R2S的WIKI书，上面详细记录了R2S的配置以及实际测速情况，也有如何编译系统等教程。\n\n个人使用R2S两年，从大一到大三都在用这个，感觉就是到千兆不太行，500M是瓶颈了，然后连久了没那么稳定，官网手册上宣传它是又稳定又能达到千兆的，这个听听就好，R2S本来是适合入门的，但是现在价格炒的太高了，没这个必要去买它，目前有很多更具有性价比的软路由可供选择。\n\n此外向大家推荐软路由界的大佬: [JackStone的Youtube主页](https://youtube.com/c/jackstone) ，人称老白，做了很多小主机的视频，如果想选购更具性价比的设备，可以看他的合集，比如2021软路由选购建议这些。\n\n## 组网时遇到过的问题（我的话）\n\n1. 组网的过程中可能出现无法自动分配IP地址的问题，比如说小米的路由器默认会分配`192.168.31.XXX`；如果你会手动配置的话可以试试，不过最简单的办法就是等，去洗个澡回来就好了。如果还没好，那么可以考虑RESET一下路由器。\n2. OpenClash插件在首次启动的时候，可能会启动失败，他会提示需要你选择编译架构，按照他的提示，选择Arm-v8架构即可。\n3. 网线通常插上马上就会亮灯，5s左右就能ping通，不过不要太相信科学。~~我有一次ping了10多分钟。~~真的，不通的话不一定是没插紧，也不一定是插错了，**很有可能是因为你没给我微信或者支付宝赞赏**。\n4. R2S是很基础的一款软路由，稳定性可能不会太好，不过最有可能导致网络不稳定的还是机场的选择，如果选择廉价机场的话，要做好不知道什么时候突然断网10分钟的准备。\n5. 计算机网络这门学科是玄学的一个分支。\n\n","slug":"R2S_build","published":1,"updated":"2022-03-13T14:32:27.867Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1rj2n590014gwcyefiqg007","content":"<h2 id=\"前言\"><a class=\"markdownIt-Anchor\" href=\"#前言\"></a> 前言</h2>\n<p>本文授权转载自<a href=\"https://www.bytedance.fit/?p=1051\">R2S家庭组网实操 – Orange Tien</a>，作者：Orange Tien，在此基础上略加修改，<s>并不会定期更新</s>。</p>\n<p>本文主要介绍R2S的基本使用方法，目前本人（Tony）也在原作者（Orange Tien）的怂恿下在两个地方分别搭建了两个R2S，看起来很简单，其实不是一帆风顺；因此也会把实际组网中遇到的问题列到最后供大家参考。</p>\n<h2 id=\"确定所需物理设备\"><a class=\"markdownIt-Anchor\" href=\"#确定所需物理设备\"></a> 确定所需物理设备</h2>\n<ul>\n<li>一台R2S软路由以及它的电源线</li>\n<li>两根用不着太长的网线一张TF卡（作为R2S的系统盘）以及一个读写TF卡的读卡器</li>\n<li>一台可以插网线的电脑</li>\n<li>交换机（可选）</li>\n<li>插排（某些时候插座不够用）</li>\n</ul>\n<h2 id=\"烧录openwrt系统\"><a class=\"markdownIt-Anchor\" href=\"#烧录openwrt系统\"></a> 烧录OpenWrt系统</h2>\n<p>烧录软件：<a href=\"https://www.balena.io/etcher/\">BalenaEtcher</a></p>\n<p>软路由系统：</p>\n<p><a href=\"https://bigdongdong.cowtransfer.com/s/a3420546d30343\">OpenWrt-R2S-dongdong</a></p>\n<p><a href=\"https://bigdongdong.cowtransfer.com/s/9a349ee597aa4f\">OpenWrt-R2S-esir</a></p>\n<p>第一个链接比较新，界面比较好看一些，推荐选择这个下载；第二个系统是eSir大人写的2020版本，已经很旧了；<s>奈何暂时没找到别的系统</s>，如果自行找到更好的系统也可以不用这俩链接。注意系统是要支持Arm架构的，因为Openwrt不是x86架构下的产物。</p>\n<h2 id=\"开始烧录系统至tf卡\"><a class=\"markdownIt-Anchor\" href=\"#开始烧录系统至tf卡\"></a> 开始烧录系统至TF卡</h2>\n<p>打开BalenaEtcher，选择Flash from file，然后将OpenWrt系统烧录到TF卡中即可。</p>\n<p><img src=\"/2022/02/26/R2S_build/image-1.png\" alt=\"img\" loading=\"lazy\"></p>\n<p>注意：选择文件时只选择镜像文件，不要把那些七七八八的文档说明也选进去。选择<code>.gz</code>(<code>.img</code>)文件来烧录即可，烧录完成后直接拔掉读卡器；系统会提示格式化，此时千万<strong>不要</strong>格式化！！！（<s>否则，就重来一遍吧</s>）</p>\n<h2 id=\"登入r2s后台\"><a class=\"markdownIt-Anchor\" href=\"#登入r2s后台\"></a> 登入R2S后台</h2>\n<p>把烧录好固件的TF卡插入R2S，然后给它插上电源，WAN口可以不接，将R2S的LAN口连接电脑的网口，根据所刷入的固件（软路由系统）的不同来决定后台地址，一般来说，软路由后台是<code>192.168.X.1</code> ，本文的系统后台是<code>192.168.22.1</code>，所以说我们在电脑浏览器内输入<code>192.168.5.1</code>(<code>192.168.22.1</code>)以进入后台。后台账号是root，默认密码基本都是password（若下载本文的系统，密码则为空），具体操作链接里面写的很清楚。</p>\n<h2 id=\"拨号或者dhcp客户端\"><a class=\"markdownIt-Anchor\" href=\"#拨号或者dhcp客户端\"></a> 拨号或者DHCP客户端</h2>\n<h3 id=\"光猫拨号\"><a class=\"markdownIt-Anchor\" href=\"#光猫拨号\"></a> 光猫拨号</h3>\n<p>如果你家里的组网方式是通过光猫拨号（通常都是光猫拨号），那么设置方法如下：</p>\n<p>选择 网络-接口， 然后选择 修改WAN口设置</p>\n<p><img src=\"/2022/02/26/R2S_build/image-2-1024x507.png\" alt=\"img\" loading=\"lazy\"></p>\n<p>将WAN口设置成DHCP客户端，然后保存应用即可，此外无须做其他任何设置。</p>\n<p><img src=\"/2022/02/26/R2S_build/image-3-1024x485.png\" alt=\"img\" loading=\"lazy\"></p>\n<h3 id=\"r2s拨号\"><a class=\"markdownIt-Anchor\" href=\"#r2s拨号\"></a> R2S拨号</h3>\n<p>如果你的光猫是桥接，那么就由路由器来拨号（通常来说，哪个网络设备配置更好，就誰来拨号，由于R2S的稳定性远不如光猫，所以这里选择光猫拨号更好），设置方法如下：</p>\n<p><img src=\"/2022/02/26/R2S_build/image-5.png\" alt=\"img\" loading=\"lazy\"></p>\n<p>同样，选择修改WAN口，协议设置成PPPoE, PAP/CHAP，账号密码就是光猫的账号密码。比如电信宽带就是以<code>@163.gd</code>结尾的，密码如果忘记的话直接拨打10000（10086）重置就好，省时省力。</p>\n<p><img src=\"/2022/02/26/R2S_build/image-2-1024x507.png\" alt=\"img\" loading=\"lazy\"></p>\n<p>接下来，需要用超级管理员账号登陆到光猫的IP中（<code>192.168.1.1</code>）,各大运营商的超级管理员账号和密码可以自行搜索。选择 网络-协议，然后设置成DHCP客户端。</p>\n<h3 id=\"小结\"><a class=\"markdownIt-Anchor\" href=\"#小结\"></a> 小结</h3>\n<p>用什么拨号，什么就选择PPPoE，然后其它设备就都设置成DHCP。</p>\n<p>用光猫拨号，光猫的设置里面就选择PPPoE，软路由以及其它路由器就选择DHCP客户端；</p>\n<p>用R2S拨号，光猫和其它路由设备的设置里面就选择DHCP客户端，软路由选择PPPoE。</p>\n<h2 id=\"各设备接入网络\"><a class=\"markdownIt-Anchor\" href=\"#各设备接入网络\"></a> 各设备接入网络</h2>\n<p>将软路由的WAN口与光猫的千兆口相连，然后断开软路由的LAN口与电脑网口的连接，此时软路由的LAN口根据各人组网要求的不同选择接不同的设备，可以接交换机，也可以接一台路由器（路由器设置为有线中继模式，也就是无线AP模式）</p>\n<p>如果家中设备比较多，或者很多屋子都需要连网线的话，可以买一个最便宜的千兆交换机放到弱电箱中，然后吧R2S接到交换机与光猫中间，这样就可以实现整个局域网都接入到软路由中来。（我来草草的画个图）</p>\n<p><img src=\"/2022/02/26/R2S_build/image-20220305212846426.png\" alt=\"image-20220305212846426\" loading=\"lazy\"></p>\n<h2 id=\"利用插件设置科学上网\"><a class=\"markdownIt-Anchor\" href=\"#利用插件设置科学上网\"></a> 利用插件设置科学上网</h2>\n<p>根据前面的步骤，如果你的设备能够正常访问网络了，就可以开始探索OpenWrt的各类插件了。关于科学上网，常见的插件有PassWall, ShadowScoksR++, OpenClash，由于OpenClash具备强大的分流策略机制（根据你访问的域名或者IP的不同决定走不同的节点），我们在此以OpenCalsh为例设置科学上网</p>\n<p><img src=\"/2022/02/26/R2S_build/image-7.png\" alt=\"img\" loading=\"lazy\"></p>\n<p>首先，在服务菜单中找到OpenClash，然后选择配置文件订阅，选择添加配置文件</p>\n<p><img src=\"/2022/02/26/R2S_build/image-8.png\" alt=\"img\" loading=\"lazy\"></p>\n<p>配置文件名随便写，用途是给用户自己区分的，订阅地址填上机场给你的订阅地址，其余地方无需设置，直接应用并保存即可。然后回到OpenClash主页，配置文件区域发送了变化。</p>\n<p><img src=\"/2022/02/26/R2S_build/image-9-1024x194.png\" alt=\"img\" loading=\"lazy\"></p>\n<p>最后点击左下角的启动按钮，等待服务器上线运行即可。</p>\n<p><img src=\"/2022/02/26/R2S_build/image-10.png\" alt=\"img\" loading=\"lazy\"></p>\n<p>如果你设置后无法正常科学上网，原因是有很多的，需要你自己慢慢排查。</p>\n<h2 id=\"更多原作者的话\"><a class=\"markdownIt-Anchor\" href=\"#更多原作者的话\"></a> 更多（原作者的话）</h2>\n<p><a href=\"https://wiki.friendlyarm.com/wiki/index.php/NanoPi_R2S/zh\">NanoPi R2S WIKI</a></p>\n<p>上面的链接是R2S的WIKI书，上面详细记录了R2S的配置以及实际测速情况，也有如何编译系统等教程。</p>\n<p>个人使用R2S两年，从大一到大三都在用这个，感觉就是到千兆不太行，500M是瓶颈了，然后连久了没那么稳定，官网手册上宣传它是又稳定又能达到千兆的，这个听听就好，R2S本来是适合入门的，但是现在价格炒的太高了，没这个必要去买它，目前有很多更具有性价比的软路由可供选择。</p>\n<p>此外向大家推荐软路由界的大佬: <a href=\"https://youtube.com/c/jackstone\">JackStone的Youtube主页</a> ，人称老白，做了很多小主机的视频，如果想选购更具性价比的设备，可以看他的合集，比如2021软路由选购建议这些。</p>\n<h2 id=\"组网时遇到过的问题我的话\"><a class=\"markdownIt-Anchor\" href=\"#组网时遇到过的问题我的话\"></a> 组网时遇到过的问题（我的话）</h2>\n<ol>\n<li>组网的过程中可能出现无法自动分配IP地址的问题，比如说小米的路由器默认会分配<code>192.168.31.XXX</code>；如果你会手动配置的话可以试试，不过最简单的办法就是等，去洗个澡回来就好了。如果还没好，那么可以考虑RESET一下路由器。</li>\n<li>OpenClash插件在首次启动的时候，可能会启动失败，他会提示需要你选择编译架构，按照他的提示，选择Arm-v8架构即可。</li>\n<li>网线通常插上马上就会亮灯，5s左右就能ping通，不过不要太相信科学。~~我有一次ping了10多分钟。~~真的，不通的话不一定是没插紧，也不一定是插错了，<strong>很有可能是因为你没给我微信或者支付宝赞赏</strong>。</li>\n<li>R2S是很基础的一款软路由，稳定性可能不会太好，不过最有可能导致网络不稳定的还是机场的选择，如果选择廉价机场的话，要做好不知道什么时候突然断网10分钟的准备。</li>\n<li>计算机网络这门学科是玄学的一个分支。</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a class=\"markdownIt-Anchor\" href=\"#前言\"></a> 前言</h2>\n<p>本文授权转载自<a href=\"https://www.bytedance.fit/?p=1051\">R2S家庭组网实操 – Orange Tien</a>，作者：Orange Tien，在此基础上略加修改，<s>并不会定期更新</s>。</p>\n<p>本文主要介绍R2S的基本使用方法，目前本人（Tony）也在原作者（Orange Tien）的怂恿下在两个地方分别搭建了两个R2S，看起来很简单，其实不是一帆风顺；因此也会把实际组网中遇到的问题列到最后供大家参考。</p>\n<h2 id=\"确定所需物理设备\"><a class=\"markdownIt-Anchor\" href=\"#确定所需物理设备\"></a> 确定所需物理设备</h2>\n<ul>\n<li>一台R2S软路由以及它的电源线</li>\n<li>两根用不着太长的网线一张TF卡（作为R2S的系统盘）以及一个读写TF卡的读卡器</li>\n<li>一台可以插网线的电脑</li>\n<li>交换机（可选）</li>\n<li>插排（某些时候插座不够用）</li>\n</ul>\n<h2 id=\"烧录openwrt系统\"><a class=\"markdownIt-Anchor\" href=\"#烧录openwrt系统\"></a> 烧录OpenWrt系统</h2>\n<p>烧录软件：<a href=\"https://www.balena.io/etcher/\">BalenaEtcher</a></p>\n<p>软路由系统：</p>\n<p><a href=\"https://bigdongdong.cowtransfer.com/s/a3420546d30343\">OpenWrt-R2S-dongdong</a></p>\n<p><a href=\"https://bigdongdong.cowtransfer.com/s/9a349ee597aa4f\">OpenWrt-R2S-esir</a></p>\n<p>第一个链接比较新，界面比较好看一些，推荐选择这个下载；第二个系统是eSir大人写的2020版本，已经很旧了；<s>奈何暂时没找到别的系统</s>，如果自行找到更好的系统也可以不用这俩链接。注意系统是要支持Arm架构的，因为Openwrt不是x86架构下的产物。</p>\n<h2 id=\"开始烧录系统至tf卡\"><a class=\"markdownIt-Anchor\" href=\"#开始烧录系统至tf卡\"></a> 开始烧录系统至TF卡</h2>\n<p>打开BalenaEtcher，选择Flash from file，然后将OpenWrt系统烧录到TF卡中即可。</p>\n<p><img src=\"/2022/02/26/R2S_build/image-1.png\" alt=\"img\"></p>\n<p>注意：选择文件时只选择镜像文件，不要把那些七七八八的文档说明也选进去。选择<code>.gz</code>(<code>.img</code>)文件来烧录即可，烧录完成后直接拔掉读卡器；系统会提示格式化，此时千万<strong>不要</strong>格式化！！！（<s>否则，就重来一遍吧</s>）</p>\n<h2 id=\"登入r2s后台\"><a class=\"markdownIt-Anchor\" href=\"#登入r2s后台\"></a> 登入R2S后台</h2>\n<p>把烧录好固件的TF卡插入R2S，然后给它插上电源，WAN口可以不接，将R2S的LAN口连接电脑的网口，根据所刷入的固件（软路由系统）的不同来决定后台地址，一般来说，软路由后台是<code>192.168.X.1</code> ，本文的系统后台是<code>192.168.22.1</code>，所以说我们在电脑浏览器内输入<code>192.168.5.1</code>(<code>192.168.22.1</code>)以进入后台。后台账号是root，默认密码基本都是password（若下载本文的系统，密码则为空），具体操作链接里面写的很清楚。</p>\n<h2 id=\"拨号或者dhcp客户端\"><a class=\"markdownIt-Anchor\" href=\"#拨号或者dhcp客户端\"></a> 拨号或者DHCP客户端</h2>\n<h3 id=\"光猫拨号\"><a class=\"markdownIt-Anchor\" href=\"#光猫拨号\"></a> 光猫拨号</h3>\n<p>如果你家里的组网方式是通过光猫拨号（通常都是光猫拨号），那么设置方法如下：</p>\n<p>选择 网络-接口， 然后选择 修改WAN口设置</p>\n<p><img src=\"/2022/02/26/R2S_build/image-2-1024x507.png\" alt=\"img\"></p>\n<p>将WAN口设置成DHCP客户端，然后保存应用即可，此外无须做其他任何设置。</p>\n<p><img src=\"/2022/02/26/R2S_build/image-3-1024x485.png\" alt=\"img\"></p>\n<h3 id=\"r2s拨号\"><a class=\"markdownIt-Anchor\" href=\"#r2s拨号\"></a> R2S拨号</h3>\n<p>如果你的光猫是桥接，那么就由路由器来拨号（通常来说，哪个网络设备配置更好，就誰来拨号，由于R2S的稳定性远不如光猫，所以这里选择光猫拨号更好），设置方法如下：</p>\n<p><img src=\"/2022/02/26/R2S_build/image-5.png\" alt=\"img\"></p>\n<p>同样，选择修改WAN口，协议设置成PPPoE, PAP/CHAP，账号密码就是光猫的账号密码。比如电信宽带就是以<code>@163.gd</code>结尾的，密码如果忘记的话直接拨打10000（10086）重置就好，省时省力。</p>\n<p><img src=\"/2022/02/26/R2S_build/image-2-1024x507.png\" alt=\"img\"></p>\n<p>接下来，需要用超级管理员账号登陆到光猫的IP中（<code>192.168.1.1</code>）,各大运营商的超级管理员账号和密码可以自行搜索。选择 网络-协议，然后设置成DHCP客户端。</p>\n<h3 id=\"小结\"><a class=\"markdownIt-Anchor\" href=\"#小结\"></a> 小结</h3>\n<p>用什么拨号，什么就选择PPPoE，然后其它设备就都设置成DHCP。</p>\n<p>用光猫拨号，光猫的设置里面就选择PPPoE，软路由以及其它路由器就选择DHCP客户端；</p>\n<p>用R2S拨号，光猫和其它路由设备的设置里面就选择DHCP客户端，软路由选择PPPoE。</p>\n<h2 id=\"各设备接入网络\"><a class=\"markdownIt-Anchor\" href=\"#各设备接入网络\"></a> 各设备接入网络</h2>\n<p>将软路由的WAN口与光猫的千兆口相连，然后断开软路由的LAN口与电脑网口的连接，此时软路由的LAN口根据各人组网要求的不同选择接不同的设备，可以接交换机，也可以接一台路由器（路由器设置为有线中继模式，也就是无线AP模式）</p>\n<p>如果家中设备比较多，或者很多屋子都需要连网线的话，可以买一个最便宜的千兆交换机放到弱电箱中，然后吧R2S接到交换机与光猫中间，这样就可以实现整个局域网都接入到软路由中来。（我来草草的画个图）</p>\n<p><img src=\"/2022/02/26/R2S_build/image-20220305212846426.png\" alt=\"image-20220305212846426\"></p>\n<h2 id=\"利用插件设置科学上网\"><a class=\"markdownIt-Anchor\" href=\"#利用插件设置科学上网\"></a> 利用插件设置科学上网</h2>\n<p>根据前面的步骤，如果你的设备能够正常访问网络了，就可以开始探索OpenWrt的各类插件了。关于科学上网，常见的插件有PassWall, ShadowScoksR++, OpenClash，由于OpenClash具备强大的分流策略机制（根据你访问的域名或者IP的不同决定走不同的节点），我们在此以OpenCalsh为例设置科学上网</p>\n<p><img src=\"/2022/02/26/R2S_build/image-7.png\" alt=\"img\"></p>\n<p>首先，在服务菜单中找到OpenClash，然后选择配置文件订阅，选择添加配置文件</p>\n<p><img src=\"/2022/02/26/R2S_build/image-8.png\" alt=\"img\"></p>\n<p>配置文件名随便写，用途是给用户自己区分的，订阅地址填上机场给你的订阅地址，其余地方无需设置，直接应用并保存即可。然后回到OpenClash主页，配置文件区域发送了变化。</p>\n<p><img src=\"/2022/02/26/R2S_build/image-9-1024x194.png\" alt=\"img\"></p>\n<p>最后点击左下角的启动按钮，等待服务器上线运行即可。</p>\n<p><img src=\"/2022/02/26/R2S_build/image-10.png\" alt=\"img\"></p>\n<p>如果你设置后无法正常科学上网，原因是有很多的，需要你自己慢慢排查。</p>\n<h2 id=\"更多原作者的话\"><a class=\"markdownIt-Anchor\" href=\"#更多原作者的话\"></a> 更多（原作者的话）</h2>\n<p><a href=\"https://wiki.friendlyarm.com/wiki/index.php/NanoPi_R2S/zh\">NanoPi R2S WIKI</a></p>\n<p>上面的链接是R2S的WIKI书，上面详细记录了R2S的配置以及实际测速情况，也有如何编译系统等教程。</p>\n<p>个人使用R2S两年，从大一到大三都在用这个，感觉就是到千兆不太行，500M是瓶颈了，然后连久了没那么稳定，官网手册上宣传它是又稳定又能达到千兆的，这个听听就好，R2S本来是适合入门的，但是现在价格炒的太高了，没这个必要去买它，目前有很多更具有性价比的软路由可供选择。</p>\n<p>此外向大家推荐软路由界的大佬: <a href=\"https://youtube.com/c/jackstone\">JackStone的Youtube主页</a> ，人称老白，做了很多小主机的视频，如果想选购更具性价比的设备，可以看他的合集，比如2021软路由选购建议这些。</p>\n<h2 id=\"组网时遇到过的问题我的话\"><a class=\"markdownIt-Anchor\" href=\"#组网时遇到过的问题我的话\"></a> 组网时遇到过的问题（我的话）</h2>\n<ol>\n<li>组网的过程中可能出现无法自动分配IP地址的问题，比如说小米的路由器默认会分配<code>192.168.31.XXX</code>；如果你会手动配置的话可以试试，不过最简单的办法就是等，去洗个澡回来就好了。如果还没好，那么可以考虑RESET一下路由器。</li>\n<li>OpenClash插件在首次启动的时候，可能会启动失败，他会提示需要你选择编译架构，按照他的提示，选择Arm-v8架构即可。</li>\n<li>网线通常插上马上就会亮灯，5s左右就能ping通，不过不要太相信科学。~~我有一次ping了10多分钟。~~真的，不通的话不一定是没插紧，也不一定是插错了，<strong>很有可能是因为你没给我微信或者支付宝赞赏</strong>。</li>\n<li>R2S是很基础的一款软路由，稳定性可能不会太好，不过最有可能导致网络不稳定的还是机场的选择，如果选择廉价机场的话，要做好不知道什么时候突然断网10分钟的准备。</li>\n<li>计算机网络这门学科是玄学的一个分支。</li>\n</ol>\n"},{"title":"Internet Protocol Security","date":"2022-04-08T09:27:26.000Z","author":"Tony","katex":true,"_content":"\n# Secure Tunnel\n\n## Tunneling\n\n隧道是一种用于将数据安全地从一个网络传输到另一个网络的协议。\n\nTunneling is the technology to establish a logical connection between two end-points.\n\n当数据通过隧道传输时，它在穿过隧道时被分成称为*数据包的*更小部分。数据包通过隧道加密，并发生另一个称为*封装的*过程。对于传输，私有网络数据和协议细节被封装在公共网络传输单元中。这些单位具有公共数据的外观，允许它们通过互联网发送。封装使数据包能够到达其预定目的地。解封装和解密发生在最终目的地。\n\nAt the sending site, the original packet is encapsulated with a new outer header, then the tunneled packet is routed to the destination according to the information in the outer header, and finally the outer header is de-encapsulated at the receiving side. The original packet can be continued being routed according to the information in the inner header.\n\n![image-20220408173945688](IPsec/image-20220408173945688.png)\n\n## Tunneling protocols\n\n$$\nTunnel\\ Protocols \n\\left\\{\n\\begin{matrix}\n\tunsecure\n\t\\left\\{\n\t\\begin{matrix}\n\t\tLayer\\ 2\\ Tunneling\\ Protocol\\ (L2TP)\\\\\n\t\tGeneric\\ Routing\\ Encapsulation\\ (GRE)\\\\\n\t\\end{matrix}\n\t\\right.\n\t\\\\\n\tsecure\\to\n\n\t\\begin{matrix}\n\t\tInternet\\ Protocol\\ Security\\ (IPsec)\n\t\\end{matrix}\n\n\\end{matrix}\n\\right.\n$$\n\nInternet Protocol Security (IPsec) is a framework that can protect IP traffic on the network layer with the following features:\n\n- Confidentiality 机密性\n- Integrity 数据完整性\n- Authentication 源鉴别\n- Anti-reply 重放攻击防护\n\n## IPsec sub-protocols\n\n$$\nIPsec\n\\left\\{\n\\begin{matrix}\n\tAuthentication\\ Header\\ (AH)\n\t\\left\\{\n\t\\begin{matrix}\n\t\tMD5\\\\\n\t\tSHA\\\\\n\t\\end{matrix}\n\t\\right.\n\t\\\\\n\tEncapsulated\\ Security\\ Payload\\ (ESP)\n\t\\left\\{\n\t\\begin{matrix}\n\t\tDES\\\\\n\t\t3DES\\\\\n\t\tAES\\\\\n\t\\end{matrix}\n\t\\right.\n\t\\\\\n\\end{matrix}\n\\right.\n$$\n\n\n\nAH协议提供源鉴别和数据完整性服务，但不提供机密性服务。\n\nESP协议提供源鉴别，数据完整性和机密性服务； 因此ESP协议应用更为广泛。\n\nAH protocol produce Integrity and Authentication services, but do not produce Confidentiality.\n\nESP protocol produce Confidentiality, Authentication and Integrity; therefore ESP protocol has a broader application.\n\n## IPsec Datagram\n\n$$\nIPsec\n\\left\\{\n\\begin{matrix}\n\ttunnel\\ mode\\to\n\t2\\ routers, router\\ and\\ host, 2\\ hosts\n\t\\\\\n\ttransport\\ mode\\to\n\t2\\ hosts\\ only\n\t\\\\\n\\end{matrix}\n\\right.\n$$\n\nIPsec supports two modes of operation:\n\nThe **Transport Mode** is most commonly used to protect the communication between two hosts. \n\nThe **Tunnel Mode** is most commonly used to protect the communication between two routers by building a secure tunnel, commonly known as a **VPN**.\n\n## Authentication Header Protocol\n\nLayer 3 protocol\n\n**Transport mode**: an AH header after the IP header. The entire IP packet will be authenticated.\n\n![image-20220408182745880](IPsec/image-20220408182745880.png)\n\n**Tunnel mode**: a new IP header is added on top of the original IP packet. \n\n![image-20220408182806622](IPsec/image-20220408182806622.png)\n\n## Encapsulating Security Payload Protocol\n\nLayer 3 protocol\n\n**Transport mode**: the original IP header is used, and an ESP header and trailer are added. The transport layer (TCP for example) and payload will be encrypted. It also offers authentication but unlike AH, it’s not for the entire IP packet. \n\n![image-20220408182852006](IPsec/image-20220408182852006.png)\n\n**Tunnel mode**: a new header is added, and the original IP header is now also encrypted.\n\n![image-20220408182902202](IPsec/image-20220408182902202.png)\n\n# Virtual Private Network\n\nA Virtual private network (VPN) is a private network that securely connects two or more remote sites across a public network such as the Internet. Instead of using dedicated physical connections between networks, VPNs use virtual connections (secure tunnel) routed through public networks. \n\n![image-20220408183423694](IPsec/image-20220408183423694.png)\n\n## VPN Security\n\n- Data confidentiality: DES, 3DES, AES (ESP of IPsec)\n- Data integrity: MD5, SHA (AH of IPsec)\n- Data origin authentication: PSK, RSA.\n\n**IPsec VPN** consists of set of standards used to establish a VPN connection. Within the VPN implementation, IPsec is applied in tunnel mode, which supports the **Encapsulating Security Payload** **(ESP)** and **Authentication Header (AH)** protocols.\n\n## Types of VPN\n\n![image-20220408183817734](IPsec/image-20220408183817734.png)\n\n## Security Associations\n\nIPsec datagram在两个实体之间发送(e.g. router-router, router-host, host-host)，在datagram发送之前，两者创建了一个网络层的逻辑连接，我们将这个逻辑连接称为安全关联( Security Association, SA)。\n\n一个SA是一个单工逻辑链接，也就是说，如果两个设备之间要互相发送datagram，那么至少要创建2个SA，每个方向至少创建一个。\n\nA Security Associations (SA) is a unidirectional agreement between the VPN participants that specify the security parameter index (SPI), destination IP address, and security protocol to use in securing a  communication channel. \n\nFull bidirectional communication requires at least two SAs, one for each direction.\n\n## IPsec VPN operations\n\n1. Interesting traffic initiates the IPsec process\n2. IKE phase 1 - generate the IKE SA for IKE phase 2.\n3.  IKE phase 2 - generate the IPsec SA for data transfer.\n4. Data transfer between IPsec peers \n5. IPsec tunnel termination.\n\n*more info of IKE: [IPSec VPN之IKE协议详解 | 曹世宏的博客 (cshihong.github.io)](https://cshihong.github.io/2019/04/03/IPSec-VPN之IKE协议详解/)","source":"_posts/IPsec.md","raw":"---\ntitle: Internet Protocol Security\ndate: 2022-04-08 17:27:26\nauthor: Tony\ntags:\n\t- VPN\n\t- IPsec\n\t- Computer Network\ncategories:\n\t- 计算机网络\nkatex: true\n---\n\n# Secure Tunnel\n\n## Tunneling\n\n隧道是一种用于将数据安全地从一个网络传输到另一个网络的协议。\n\nTunneling is the technology to establish a logical connection between two end-points.\n\n当数据通过隧道传输时，它在穿过隧道时被分成称为*数据包的*更小部分。数据包通过隧道加密，并发生另一个称为*封装的*过程。对于传输，私有网络数据和协议细节被封装在公共网络传输单元中。这些单位具有公共数据的外观，允许它们通过互联网发送。封装使数据包能够到达其预定目的地。解封装和解密发生在最终目的地。\n\nAt the sending site, the original packet is encapsulated with a new outer header, then the tunneled packet is routed to the destination according to the information in the outer header, and finally the outer header is de-encapsulated at the receiving side. The original packet can be continued being routed according to the information in the inner header.\n\n![image-20220408173945688](IPsec/image-20220408173945688.png)\n\n## Tunneling protocols\n\n$$\nTunnel\\ Protocols \n\\left\\{\n\\begin{matrix}\n\tunsecure\n\t\\left\\{\n\t\\begin{matrix}\n\t\tLayer\\ 2\\ Tunneling\\ Protocol\\ (L2TP)\\\\\n\t\tGeneric\\ Routing\\ Encapsulation\\ (GRE)\\\\\n\t\\end{matrix}\n\t\\right.\n\t\\\\\n\tsecure\\to\n\n\t\\begin{matrix}\n\t\tInternet\\ Protocol\\ Security\\ (IPsec)\n\t\\end{matrix}\n\n\\end{matrix}\n\\right.\n$$\n\nInternet Protocol Security (IPsec) is a framework that can protect IP traffic on the network layer with the following features:\n\n- Confidentiality 机密性\n- Integrity 数据完整性\n- Authentication 源鉴别\n- Anti-reply 重放攻击防护\n\n## IPsec sub-protocols\n\n$$\nIPsec\n\\left\\{\n\\begin{matrix}\n\tAuthentication\\ Header\\ (AH)\n\t\\left\\{\n\t\\begin{matrix}\n\t\tMD5\\\\\n\t\tSHA\\\\\n\t\\end{matrix}\n\t\\right.\n\t\\\\\n\tEncapsulated\\ Security\\ Payload\\ (ESP)\n\t\\left\\{\n\t\\begin{matrix}\n\t\tDES\\\\\n\t\t3DES\\\\\n\t\tAES\\\\\n\t\\end{matrix}\n\t\\right.\n\t\\\\\n\\end{matrix}\n\\right.\n$$\n\n\n\nAH协议提供源鉴别和数据完整性服务，但不提供机密性服务。\n\nESP协议提供源鉴别，数据完整性和机密性服务； 因此ESP协议应用更为广泛。\n\nAH protocol produce Integrity and Authentication services, but do not produce Confidentiality.\n\nESP protocol produce Confidentiality, Authentication and Integrity; therefore ESP protocol has a broader application.\n\n## IPsec Datagram\n\n$$\nIPsec\n\\left\\{\n\\begin{matrix}\n\ttunnel\\ mode\\to\n\t2\\ routers, router\\ and\\ host, 2\\ hosts\n\t\\\\\n\ttransport\\ mode\\to\n\t2\\ hosts\\ only\n\t\\\\\n\\end{matrix}\n\\right.\n$$\n\nIPsec supports two modes of operation:\n\nThe **Transport Mode** is most commonly used to protect the communication between two hosts. \n\nThe **Tunnel Mode** is most commonly used to protect the communication between two routers by building a secure tunnel, commonly known as a **VPN**.\n\n## Authentication Header Protocol\n\nLayer 3 protocol\n\n**Transport mode**: an AH header after the IP header. The entire IP packet will be authenticated.\n\n![image-20220408182745880](IPsec/image-20220408182745880.png)\n\n**Tunnel mode**: a new IP header is added on top of the original IP packet. \n\n![image-20220408182806622](IPsec/image-20220408182806622.png)\n\n## Encapsulating Security Payload Protocol\n\nLayer 3 protocol\n\n**Transport mode**: the original IP header is used, and an ESP header and trailer are added. The transport layer (TCP for example) and payload will be encrypted. It also offers authentication but unlike AH, it’s not for the entire IP packet. \n\n![image-20220408182852006](IPsec/image-20220408182852006.png)\n\n**Tunnel mode**: a new header is added, and the original IP header is now also encrypted.\n\n![image-20220408182902202](IPsec/image-20220408182902202.png)\n\n# Virtual Private Network\n\nA Virtual private network (VPN) is a private network that securely connects two or more remote sites across a public network such as the Internet. Instead of using dedicated physical connections between networks, VPNs use virtual connections (secure tunnel) routed through public networks. \n\n![image-20220408183423694](IPsec/image-20220408183423694.png)\n\n## VPN Security\n\n- Data confidentiality: DES, 3DES, AES (ESP of IPsec)\n- Data integrity: MD5, SHA (AH of IPsec)\n- Data origin authentication: PSK, RSA.\n\n**IPsec VPN** consists of set of standards used to establish a VPN connection. Within the VPN implementation, IPsec is applied in tunnel mode, which supports the **Encapsulating Security Payload** **(ESP)** and **Authentication Header (AH)** protocols.\n\n## Types of VPN\n\n![image-20220408183817734](IPsec/image-20220408183817734.png)\n\n## Security Associations\n\nIPsec datagram在两个实体之间发送(e.g. router-router, router-host, host-host)，在datagram发送之前，两者创建了一个网络层的逻辑连接，我们将这个逻辑连接称为安全关联( Security Association, SA)。\n\n一个SA是一个单工逻辑链接，也就是说，如果两个设备之间要互相发送datagram，那么至少要创建2个SA，每个方向至少创建一个。\n\nA Security Associations (SA) is a unidirectional agreement between the VPN participants that specify the security parameter index (SPI), destination IP address, and security protocol to use in securing a  communication channel. \n\nFull bidirectional communication requires at least two SAs, one for each direction.\n\n## IPsec VPN operations\n\n1. Interesting traffic initiates the IPsec process\n2. IKE phase 1 - generate the IKE SA for IKE phase 2.\n3.  IKE phase 2 - generate the IPsec SA for data transfer.\n4. Data transfer between IPsec peers \n5. IPsec tunnel termination.\n\n*more info of IKE: [IPSec VPN之IKE协议详解 | 曹世宏的博客 (cshihong.github.io)](https://cshihong.github.io/2019/04/03/IPSec-VPN之IKE协议详解/)","slug":"IPsec","published":1,"updated":"2022-04-09T07:10:27.657Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1rj2n5a0018gwcy9ut2aykz","content":"<h1 id=\"secure-tunnel\"><a class=\"markdownIt-Anchor\" href=\"#secure-tunnel\"></a> Secure Tunnel</h1>\n<h2 id=\"tunneling\"><a class=\"markdownIt-Anchor\" href=\"#tunneling\"></a> Tunneling</h2>\n<p>隧道是一种用于将数据安全地从一个网络传输到另一个网络的协议。</p>\n<p>Tunneling is the technology to establish a logical connection between two end-points.</p>\n<p>当数据通过隧道传输时，它在穿过隧道时被分成称为<em>数据包的</em>更小部分。数据包通过隧道加密，并发生另一个称为<em>封装的</em>过程。对于传输，私有网络数据和协议细节被封装在公共网络传输单元中。这些单位具有公共数据的外观，允许它们通过互联网发送。封装使数据包能够到达其预定目的地。解封装和解密发生在最终目的地。</p>\n<p>At the sending site, the original packet is encapsulated with a new outer header, then the tunneled packet is routed to the destination according to the information in the outer header, and finally the outer header is de-encapsulated at the receiving side. The original packet can be continued being routed according to the information in the inner header.</p>\n<p><img src=\"/2022/04/08/IPsec/image-20220408173945688.png\" alt=\"image-20220408173945688\" loading=\"lazy\"></p>\n<h2 id=\"tunneling-protocols\"><a class=\"markdownIt-Anchor\" href=\"#tunneling-protocols\"></a> Tunneling protocols</h2>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>T</mi><mi>u</mi><mi>n</mi><mi>n</mi><mi>e</mi><mi>l</mi><mtext> </mtext><mi>P</mi><mi>r</mi><mi>o</mi><mi>t</mi><mi>o</mi><mi>c</mi><mi>o</mi><mi>l</mi><mi>s</mi><mrow><mo fence=\"true\">{</mo><mtable rowspacing=\"0.15999999999999992em\" columnspacing=\"1em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mi>u</mi><mi>n</mi><mi>s</mi><mi>e</mi><mi>c</mi><mi>u</mi><mi>r</mi><mi>e</mi><mrow><mo fence=\"true\">{</mo><mtable rowspacing=\"0.15999999999999992em\" columnspacing=\"1em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mi>L</mi><mi>a</mi><mi>y</mi><mi>e</mi><mi>r</mi><mtext> </mtext><mn>2</mn><mtext> </mtext><mi>T</mi><mi>u</mi><mi>n</mi><mi>n</mi><mi>e</mi><mi>l</mi><mi>i</mi><mi>n</mi><mi>g</mi><mtext> </mtext><mi>P</mi><mi>r</mi><mi>o</mi><mi>t</mi><mi>o</mi><mi>c</mi><mi>o</mi><mi>l</mi><mtext> </mtext><mo stretchy=\"false\">(</mo><mi>L</mi><mn>2</mn><mi>T</mi><mi>P</mi><mo stretchy=\"false\">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mi>G</mi><mi>e</mi><mi>n</mi><mi>e</mi><mi>r</mi><mi>i</mi><mi>c</mi><mtext> </mtext><mi>R</mi><mi>o</mi><mi>u</mi><mi>t</mi><mi>i</mi><mi>n</mi><mi>g</mi><mtext> </mtext><mi>E</mi><mi>n</mi><mi>c</mi><mi>a</mi><mi>p</mi><mi>s</mi><mi>u</mi><mi>l</mi><mi>a</mi><mi>t</mi><mi>i</mi><mi>o</mi><mi>n</mi><mtext> </mtext><mo stretchy=\"false\">(</mo><mi>G</mi><mi>R</mi><mi>E</mi><mo stretchy=\"false\">)</mo></mrow></mstyle></mtd></mtr></mtable></mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mi>s</mi><mi>e</mi><mi>c</mi><mi>u</mi><mi>r</mi><mi>e</mi><mo>→</mo><mtable rowspacing=\"0.15999999999999992em\" columnspacing=\"1em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mi>I</mi><mi>n</mi><mi>t</mi><mi>e</mi><mi>r</mi><mi>n</mi><mi>e</mi><mi>t</mi><mtext> </mtext><mi>P</mi><mi>r</mi><mi>o</mi><mi>t</mi><mi>o</mi><mi>c</mi><mi>o</mi><mi>l</mi><mtext> </mtext><mi>S</mi><mi>e</mi><mi>c</mi><mi>u</mi><mi>r</mi><mi>i</mi><mi>t</mi><mi>y</mi><mtext> </mtext><mo stretchy=\"false\">(</mo><mi>I</mi><mi>P</mi><mi>s</mi><mi>e</mi><mi>c</mi><mo stretchy=\"false\">)</mo></mrow></mstyle></mtd></mtr></mtable></mrow></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding=\"application/x-tex\">Tunnel\\ Protocols \n\\left\\{\n\\begin{matrix}\n\tunsecure\n\t\\left\\{\n\t\\begin{matrix}\n\t\tLayer\\ 2\\ Tunneling\\ Protocol\\ (L2TP)\\\\\n\t\tGeneric\\ Routing\\ Encapsulation\\ (GRE)\\\\\n\t\\end{matrix}\n\t\\right.\n\t\\\\\n\tsecure\\to\n\n\t\\begin{matrix}\n\t\tInternet\\ Protocol\\ Security\\ (IPsec)\n\t\\end{matrix}\n\n\\end{matrix}\n\\right.\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:3.61003em;vertical-align:-1.555015em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"mord mathdefault\">u</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mspace\"> </span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">P</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">c</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathdefault\">s</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\"><span class=\"mopen\"><span class=\"delimsizing mult\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.05002em;\"><span style=\"top:-2.49999em;\"><span class=\"pstrut\" style=\"height:3.15em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎩</span></span></span><span style=\"top:-3.15001em;\"><span class=\"pstrut\" style=\"height:3.15em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎨</span></span></span><span style=\"top:-4.30002em;\"><span class=\"pstrut\" style=\"height:3.15em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎧</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.55002em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.055015em;\"><span style=\"top:-4.055015em;\"><span class=\"pstrut\" style=\"height:3.45em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">u</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\">c</span><span class=\"mord mathdefault\">u</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">e</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size3\">{</span></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.45em;\"><span style=\"top:-3.61em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">L</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mspace\"> </span><span class=\"mord\">2</span><span class=\"mspace\"> </span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"mord mathdefault\">u</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span><span class=\"mspace\"> </span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">P</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">c</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mspace\"> </span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">L</span><span class=\"mord\">2</span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">P</span><span class=\"mclose\">)</span></span></span><span style=\"top:-2.4099999999999997em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">G</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">c</span><span class=\"mspace\"> </span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">u</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span><span class=\"mspace\"> </span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\">c</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">p</span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">u</span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">n</span><span class=\"mspace\"> </span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">G</span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">E</span><span class=\"mclose\">)</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9500000000000004em;\"><span></span></span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span><span style=\"top:-2.254985em;\"><span class=\"pstrut\" style=\"height:3.45em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\">c</span><span class=\"mord mathdefault\">u</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">e</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8500000000000001em;\"><span style=\"top:-3.01em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">I</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\">t</span><span class=\"mspace\"> </span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">P</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">c</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mspace\"> </span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\">c</span><span class=\"mord mathdefault\">u</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\"> </span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">I</span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">P</span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\">c</span><span class=\"mclose\">)</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.35000000000000003em;\"><span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.555015em;\"><span></span></span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span></p>\n<p>Internet Protocol Security (IPsec) is a framework that can protect IP traffic on the network layer with the following features:</p>\n<ul>\n<li>Confidentiality 机密性</li>\n<li>Integrity 数据完整性</li>\n<li>Authentication 源鉴别</li>\n<li>Anti-reply 重放攻击防护</li>\n</ul>\n<h2 id=\"ipsec-sub-protocols\"><a class=\"markdownIt-Anchor\" href=\"#ipsec-sub-protocols\"></a> IPsec sub-protocols</h2>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>I</mi><mi>P</mi><mi>s</mi><mi>e</mi><mi>c</mi><mrow><mo fence=\"true\">{</mo><mtable rowspacing=\"0.15999999999999992em\" columnspacing=\"1em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mi>A</mi><mi>u</mi><mi>t</mi><mi>h</mi><mi>e</mi><mi>n</mi><mi>t</mi><mi>i</mi><mi>c</mi><mi>a</mi><mi>t</mi><mi>i</mi><mi>o</mi><mi>n</mi><mtext> </mtext><mi>H</mi><mi>e</mi><mi>a</mi><mi>d</mi><mi>e</mi><mi>r</mi><mtext> </mtext><mo stretchy=\"false\">(</mo><mi>A</mi><mi>H</mi><mo stretchy=\"false\">)</mo><mrow><mo fence=\"true\">{</mo><mtable rowspacing=\"0.15999999999999992em\" columnspacing=\"1em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mi>M</mi><mi>D</mi><mn>5</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mi>S</mi><mi>H</mi><mi>A</mi></mrow></mstyle></mtd></mtr></mtable></mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mi>E</mi><mi>n</mi><mi>c</mi><mi>a</mi><mi>p</mi><mi>s</mi><mi>u</mi><mi>l</mi><mi>a</mi><mi>t</mi><mi>e</mi><mi>d</mi><mtext> </mtext><mi>S</mi><mi>e</mi><mi>c</mi><mi>u</mi><mi>r</mi><mi>i</mi><mi>t</mi><mi>y</mi><mtext> </mtext><mi>P</mi><mi>a</mi><mi>y</mi><mi>l</mi><mi>o</mi><mi>a</mi><mi>d</mi><mtext> </mtext><mo stretchy=\"false\">(</mo><mi>E</mi><mi>S</mi><mi>P</mi><mo stretchy=\"false\">)</mo><mrow><mo fence=\"true\">{</mo><mtable rowspacing=\"0.15999999999999992em\" columnspacing=\"1em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mi>D</mi><mi>E</mi><mi>S</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mn>3</mn><mi>D</mi><mi>E</mi><mi>S</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mi>A</mi><mi>E</mi><mi>S</mi></mrow></mstyle></mtd></mtr></mtable></mrow></mrow></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding=\"application/x-tex\">IPsec\n\\left\\{\n\\begin{matrix}\n\tAuthentication\\ Header\\ (AH)\n\t\\left\\{\n\t\\begin{matrix}\n\t\tMD5\\\\\n\t\tSHA\\\\\n\t\\end{matrix}\n\t\\right.\n\t\\\\\n\tEncapsulated\\ Security\\ Payload\\ (ESP)\n\t\\left\\{\n\t\\begin{matrix}\n\t\tDES\\\\\n\t\t3DES\\\\\n\t\tAES\\\\\n\t\\end{matrix}\n\t\\right.\n\t\\\\\n\\end{matrix}\n\\right.\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:6.00007em;vertical-align:-2.750035em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">I</span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">P</span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\">c</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\"><span class=\"mopen\"><span class=\"delimsizing mult\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.2500199999999997em;\"><span style=\"top:-1.2999899999999998em;\"><span class=\"pstrut\" style=\"height:3.15em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎩</span></span></span><span style=\"top:-1.2999899999999998em;\"><span class=\"pstrut\" style=\"height:3.15em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎪</span></span></span><span style=\"top:-1.5999899999999998em;\"><span class=\"pstrut\" style=\"height:3.15em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎪</span></span></span><span style=\"top:-1.8999899999999998em;\"><span class=\"pstrut\" style=\"height:3.15em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎪</span></span></span><span style=\"top:-2.1999899999999997em;\"><span class=\"pstrut\" style=\"height:3.15em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎪</span></span></span><span style=\"top:-3.15001em;\"><span class=\"pstrut\" style=\"height:3.15em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎨</span></span></span><span style=\"top:-4.30001em;\"><span class=\"pstrut\" style=\"height:3.15em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎪</span></span></span><span style=\"top:-4.60001em;\"><span class=\"pstrut\" style=\"height:3.15em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎪</span></span></span><span style=\"top:-4.90001em;\"><span class=\"pstrut\" style=\"height:3.15em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎪</span></span></span><span style=\"top:-5.20001em;\"><span class=\"pstrut\" style=\"height:3.15em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎪</span></span></span><span style=\"top:-5.500019999999999em;\"><span class=\"pstrut\" style=\"height:3.15em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎧</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.75002em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.250035em;\"><span style=\"top:-5.850055em;\"><span class=\"pstrut\" style=\"height:4.05002em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">A</span><span class=\"mord mathdefault\">u</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">h</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">c</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">n</span><span class=\"mspace\"> </span><span class=\"mord mathdefault\" style=\"margin-right:0.08125em;\">H</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mspace\"> </span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">A</span><span class=\"mord mathdefault\" style=\"margin-right:0.08125em;\">H</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size3\">{</span></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.45em;\"><span style=\"top:-3.61em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">M</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">D</span><span class=\"mord\">5</span></span></span><span style=\"top:-2.4099999999999997em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathdefault\" style=\"margin-right:0.08125em;\">H</span><span class=\"mord mathdefault\">A</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9500000000000004em;\"><span></span></span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span><span style=\"top:-2.850005em;\"><span class=\"pstrut\" style=\"height:4.05002em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\">c</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">p</span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">u</span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\">d</span><span class=\"mspace\"> </span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\">c</span><span class=\"mord mathdefault\">u</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\"> </span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">P</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">d</span><span class=\"mspace\"> </span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">P</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\"><span class=\"mopen\"><span class=\"delimsizing mult\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.05002em;\"><span style=\"top:-2.49999em;\"><span class=\"pstrut\" style=\"height:3.15em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎩</span></span></span><span style=\"top:-3.15001em;\"><span class=\"pstrut\" style=\"height:3.15em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎨</span></span></span><span style=\"top:-4.30002em;\"><span class=\"pstrut\" style=\"height:3.15em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎧</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.55002em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.05em;\"><span style=\"top:-4.21em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">D</span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span></span></span><span style=\"top:-3.0099999999999993em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">3</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">D</span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span></span></span><span style=\"top:-1.8099999999999994em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">A</span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.5500000000000007em;\"><span></span></span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.750035em;\"><span></span></span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span></p>\n<p>AH协议提供源鉴别和数据完整性服务，但不提供机密性服务。</p>\n<p>ESP协议提供源鉴别，数据完整性和机密性服务； 因此ESP协议应用更为广泛。</p>\n<p>AH protocol produce Integrity and Authentication services, but do not produce Confidentiality.</p>\n<p>ESP protocol produce Confidentiality, Authentication and Integrity; therefore ESP protocol has a broader application.</p>\n<h2 id=\"ipsec-datagram\"><a class=\"markdownIt-Anchor\" href=\"#ipsec-datagram\"></a> IPsec Datagram</h2>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>I</mi><mi>P</mi><mi>s</mi><mi>e</mi><mi>c</mi><mrow><mo fence=\"true\">{</mo><mtable rowspacing=\"0.15999999999999992em\" columnspacing=\"1em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mi>t</mi><mi>u</mi><mi>n</mi><mi>n</mi><mi>e</mi><mi>l</mi><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mi>e</mi><mo>→</mo><mn>2</mn><mtext> </mtext><mi>r</mi><mi>o</mi><mi>u</mi><mi>t</mi><mi>e</mi><mi>r</mi><mi>s</mi><mo separator=\"true\">,</mo><mi>r</mi><mi>o</mi><mi>u</mi><mi>t</mi><mi>e</mi><mi>r</mi><mtext> </mtext><mi>a</mi><mi>n</mi><mi>d</mi><mtext> </mtext><mi>h</mi><mi>o</mi><mi>s</mi><mi>t</mi><mo separator=\"true\">,</mo><mn>2</mn><mtext> </mtext><mi>h</mi><mi>o</mi><mi>s</mi><mi>t</mi><mi>s</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mi>t</mi><mi>r</mi><mi>a</mi><mi>n</mi><mi>s</mi><mi>p</mi><mi>o</mi><mi>r</mi><mi>t</mi><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mi>e</mi><mo>→</mo><mn>2</mn><mtext> </mtext><mi>h</mi><mi>o</mi><mi>s</mi><mi>t</mi><mi>s</mi><mtext> </mtext><mi>o</mi><mi>n</mi><mi>l</mi><mi>y</mi></mrow></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding=\"application/x-tex\">IPsec\n\\left\\{\n\\begin{matrix}\n\ttunnel\\ mode\\to\n\t2\\ routers, router\\ and\\ host, 2\\ hosts\n\t\\\\\n\ttransport\\ mode\\to\n\t2\\ hosts\\ only\n\t\\\\\n\\end{matrix}\n\\right.\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:2.40003em;vertical-align:-0.95003em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">I</span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">P</span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\">c</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size3\">{</span></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.45em;\"><span style=\"top:-3.61em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">u</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mspace\"> </span><span class=\"mord mathdefault\">m</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\">e</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord\">2</span><span class=\"mspace\"> </span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">u</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">s</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">u</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mspace\"> </span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\">d</span><span class=\"mspace\"> </span><span class=\"mord mathdefault\">h</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">t</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">2</span><span class=\"mspace\"> </span><span class=\"mord mathdefault\">h</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">s</span></span></span><span style=\"top:-2.4099999999999997em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">p</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">t</span><span class=\"mspace\"> </span><span class=\"mord mathdefault\">m</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\">e</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord\">2</span><span class=\"mspace\"> </span><span class=\"mord mathdefault\">h</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">s</span><span class=\"mspace\"> </span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9500000000000004em;\"><span></span></span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span></p>\n<p>IPsec supports two modes of operation:</p>\n<p>The <strong>Transport Mode</strong> is most commonly used to protect the communication between two hosts.</p>\n<p>The <strong>Tunnel Mode</strong> is most commonly used to protect the communication between two routers by building a secure tunnel, commonly known as a <strong>VPN</strong>.</p>\n<h2 id=\"authentication-header-protocol\"><a class=\"markdownIt-Anchor\" href=\"#authentication-header-protocol\"></a> Authentication Header Protocol</h2>\n<p>Layer 3 protocol</p>\n<p><strong>Transport mode</strong>: an AH header after the IP header. The entire IP packet will be authenticated.</p>\n<p><img src=\"/2022/04/08/IPsec/image-20220408182745880.png\" alt=\"image-20220408182745880\" loading=\"lazy\"></p>\n<p><strong>Tunnel mode</strong>: a new IP header is added on top of the original IP packet.</p>\n<p><img src=\"/2022/04/08/IPsec/image-20220408182806622.png\" alt=\"image-20220408182806622\" loading=\"lazy\"></p>\n<h2 id=\"encapsulating-security-payload-protocol\"><a class=\"markdownIt-Anchor\" href=\"#encapsulating-security-payload-protocol\"></a> Encapsulating Security Payload Protocol</h2>\n<p>Layer 3 protocol</p>\n<p><strong>Transport mode</strong>: the original IP header is used, and an ESP header and trailer are added. The transport layer (TCP for example) and payload will be encrypted. It also offers authentication but unlike AH, it’s not for the entire IP packet.</p>\n<p><img src=\"/2022/04/08/IPsec/image-20220408182852006.png\" alt=\"image-20220408182852006\" loading=\"lazy\"></p>\n<p><strong>Tunnel mode</strong>: a new header is added, and the original IP header is now also encrypted.</p>\n<p><img src=\"/2022/04/08/IPsec/image-20220408182902202.png\" alt=\"image-20220408182902202\" loading=\"lazy\"></p>\n<h1 id=\"virtual-private-network\"><a class=\"markdownIt-Anchor\" href=\"#virtual-private-network\"></a> Virtual Private Network</h1>\n<p>A Virtual private network (VPN) is a private network that securely connects two or more remote sites across a public network such as the Internet. Instead of using dedicated physical connections between networks, VPNs use virtual connections (secure tunnel) routed through public networks.</p>\n<p><img src=\"/2022/04/08/IPsec/image-20220408183423694.png\" alt=\"image-20220408183423694\" loading=\"lazy\"></p>\n<h2 id=\"vpn-security\"><a class=\"markdownIt-Anchor\" href=\"#vpn-security\"></a> VPN Security</h2>\n<ul>\n<li>Data confidentiality: DES, 3DES, AES (ESP of IPsec)</li>\n<li>Data integrity: MD5, SHA (AH of IPsec)</li>\n<li>Data origin authentication: PSK, RSA.</li>\n</ul>\n<p><strong>IPsec VPN</strong> consists of set of standards used to establish a VPN connection. Within the VPN implementation, IPsec is applied in tunnel mode, which supports the <strong>Encapsulating Security Payload</strong> <strong>(ESP)</strong> and <strong>Authentication Header (AH)</strong> protocols.</p>\n<h2 id=\"types-of-vpn\"><a class=\"markdownIt-Anchor\" href=\"#types-of-vpn\"></a> Types of VPN</h2>\n<p><img src=\"/2022/04/08/IPsec/image-20220408183817734.png\" alt=\"image-20220408183817734\" loading=\"lazy\"></p>\n<h2 id=\"security-associations\"><a class=\"markdownIt-Anchor\" href=\"#security-associations\"></a> Security Associations</h2>\n<p>IPsec datagram在两个实体之间发送(e.g. router-router, router-host, host-host)，在datagram发送之前，两者创建了一个网络层的逻辑连接，我们将这个逻辑连接称为安全关联( Security Association, SA)。</p>\n<p>一个SA是一个单工逻辑链接，也就是说，如果两个设备之间要互相发送datagram，那么至少要创建2个SA，每个方向至少创建一个。</p>\n<p>A Security Associations (SA) is a unidirectional agreement between the VPN participants that specify the security parameter index (SPI), destination IP address, and security protocol to use in securing a  communication channel.</p>\n<p>Full bidirectional communication requires at least two SAs, one for each direction.</p>\n<h2 id=\"ipsec-vpn-operations\"><a class=\"markdownIt-Anchor\" href=\"#ipsec-vpn-operations\"></a> IPsec VPN operations</h2>\n<ol>\n<li>Interesting traffic initiates the IPsec process</li>\n<li>IKE phase 1 - generate the IKE SA for IKE phase 2.</li>\n<li>IKE phase 2 - generate the IPsec SA for data transfer.</li>\n<li>Data transfer between IPsec peers</li>\n<li>IPsec tunnel termination.</li>\n</ol>\n<p>*more info of IKE: <a href=\"https://cshihong.github.io/2019/04/03/IPSec-VPN%E4%B9%8BIKE%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3/\">IPSec VPN之IKE协议详解 | 曹世宏的博客 (cshihong.github.io)</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"secure-tunnel\"><a class=\"markdownIt-Anchor\" href=\"#secure-tunnel\"></a> Secure Tunnel</h1>\n<h2 id=\"tunneling\"><a class=\"markdownIt-Anchor\" href=\"#tunneling\"></a> Tunneling</h2>\n<p>隧道是一种用于将数据安全地从一个网络传输到另一个网络的协议。</p>\n<p>Tunneling is the technology to establish a logical connection between two end-points.</p>\n<p>当数据通过隧道传输时，它在穿过隧道时被分成称为<em>数据包的</em>更小部分。数据包通过隧道加密，并发生另一个称为<em>封装的</em>过程。对于传输，私有网络数据和协议细节被封装在公共网络传输单元中。这些单位具有公共数据的外观，允许它们通过互联网发送。封装使数据包能够到达其预定目的地。解封装和解密发生在最终目的地。</p>\n<p>At the sending site, the original packet is encapsulated with a new outer header, then the tunneled packet is routed to the destination according to the information in the outer header, and finally the outer header is de-encapsulated at the receiving side. The original packet can be continued being routed according to the information in the inner header.</p>\n<p><img src=\"/2022/04/08/IPsec/image-20220408173945688.png\" alt=\"image-20220408173945688\"></p>\n<h2 id=\"tunneling-protocols\"><a class=\"markdownIt-Anchor\" href=\"#tunneling-protocols\"></a> Tunneling protocols</h2>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>T</mi><mi>u</mi><mi>n</mi><mi>n</mi><mi>e</mi><mi>l</mi><mtext> </mtext><mi>P</mi><mi>r</mi><mi>o</mi><mi>t</mi><mi>o</mi><mi>c</mi><mi>o</mi><mi>l</mi><mi>s</mi><mrow><mo fence=\"true\">{</mo><mtable rowspacing=\"0.15999999999999992em\" columnspacing=\"1em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mi>u</mi><mi>n</mi><mi>s</mi><mi>e</mi><mi>c</mi><mi>u</mi><mi>r</mi><mi>e</mi><mrow><mo fence=\"true\">{</mo><mtable rowspacing=\"0.15999999999999992em\" columnspacing=\"1em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mi>L</mi><mi>a</mi><mi>y</mi><mi>e</mi><mi>r</mi><mtext> </mtext><mn>2</mn><mtext> </mtext><mi>T</mi><mi>u</mi><mi>n</mi><mi>n</mi><mi>e</mi><mi>l</mi><mi>i</mi><mi>n</mi><mi>g</mi><mtext> </mtext><mi>P</mi><mi>r</mi><mi>o</mi><mi>t</mi><mi>o</mi><mi>c</mi><mi>o</mi><mi>l</mi><mtext> </mtext><mo stretchy=\"false\">(</mo><mi>L</mi><mn>2</mn><mi>T</mi><mi>P</mi><mo stretchy=\"false\">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mi>G</mi><mi>e</mi><mi>n</mi><mi>e</mi><mi>r</mi><mi>i</mi><mi>c</mi><mtext> </mtext><mi>R</mi><mi>o</mi><mi>u</mi><mi>t</mi><mi>i</mi><mi>n</mi><mi>g</mi><mtext> </mtext><mi>E</mi><mi>n</mi><mi>c</mi><mi>a</mi><mi>p</mi><mi>s</mi><mi>u</mi><mi>l</mi><mi>a</mi><mi>t</mi><mi>i</mi><mi>o</mi><mi>n</mi><mtext> </mtext><mo stretchy=\"false\">(</mo><mi>G</mi><mi>R</mi><mi>E</mi><mo stretchy=\"false\">)</mo></mrow></mstyle></mtd></mtr></mtable></mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mi>s</mi><mi>e</mi><mi>c</mi><mi>u</mi><mi>r</mi><mi>e</mi><mo>→</mo><mtable rowspacing=\"0.15999999999999992em\" columnspacing=\"1em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mi>I</mi><mi>n</mi><mi>t</mi><mi>e</mi><mi>r</mi><mi>n</mi><mi>e</mi><mi>t</mi><mtext> </mtext><mi>P</mi><mi>r</mi><mi>o</mi><mi>t</mi><mi>o</mi><mi>c</mi><mi>o</mi><mi>l</mi><mtext> </mtext><mi>S</mi><mi>e</mi><mi>c</mi><mi>u</mi><mi>r</mi><mi>i</mi><mi>t</mi><mi>y</mi><mtext> </mtext><mo stretchy=\"false\">(</mo><mi>I</mi><mi>P</mi><mi>s</mi><mi>e</mi><mi>c</mi><mo stretchy=\"false\">)</mo></mrow></mstyle></mtd></mtr></mtable></mrow></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding=\"application/x-tex\">Tunnel\\ Protocols \n\\left\\{\n\\begin{matrix}\n\tunsecure\n\t\\left\\{\n\t\\begin{matrix}\n\t\tLayer\\ 2\\ Tunneling\\ Protocol\\ (L2TP)\\\\\n\t\tGeneric\\ Routing\\ Encapsulation\\ (GRE)\\\\\n\t\\end{matrix}\n\t\\right.\n\t\\\\\n\tsecure\\to\n\n\t\\begin{matrix}\n\t\tInternet\\ Protocol\\ Security\\ (IPsec)\n\t\\end{matrix}\n\n\\end{matrix}\n\\right.\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:3.61003em;vertical-align:-1.555015em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"mord mathdefault\">u</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mspace\"> </span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">P</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">c</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathdefault\">s</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\"><span class=\"mopen\"><span class=\"delimsizing mult\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.05002em;\"><span style=\"top:-2.49999em;\"><span class=\"pstrut\" style=\"height:3.15em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎩</span></span></span><span style=\"top:-3.15001em;\"><span class=\"pstrut\" style=\"height:3.15em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎨</span></span></span><span style=\"top:-4.30002em;\"><span class=\"pstrut\" style=\"height:3.15em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎧</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.55002em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.055015em;\"><span style=\"top:-4.055015em;\"><span class=\"pstrut\" style=\"height:3.45em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">u</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\">c</span><span class=\"mord mathdefault\">u</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">e</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size3\">{</span></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.45em;\"><span style=\"top:-3.61em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">L</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mspace\"> </span><span class=\"mord\">2</span><span class=\"mspace\"> </span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"mord mathdefault\">u</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span><span class=\"mspace\"> </span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">P</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">c</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mspace\"> </span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">L</span><span class=\"mord\">2</span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">P</span><span class=\"mclose\">)</span></span></span><span style=\"top:-2.4099999999999997em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">G</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">c</span><span class=\"mspace\"> </span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">u</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span><span class=\"mspace\"> </span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\">c</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">p</span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">u</span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">n</span><span class=\"mspace\"> </span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">G</span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">E</span><span class=\"mclose\">)</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9500000000000004em;\"><span></span></span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span><span style=\"top:-2.254985em;\"><span class=\"pstrut\" style=\"height:3.45em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\">c</span><span class=\"mord mathdefault\">u</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">e</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8500000000000001em;\"><span style=\"top:-3.01em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">I</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\">t</span><span class=\"mspace\"> </span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">P</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">c</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mspace\"> </span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\">c</span><span class=\"mord mathdefault\">u</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\"> </span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">I</span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">P</span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\">c</span><span class=\"mclose\">)</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.35000000000000003em;\"><span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.555015em;\"><span></span></span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span></p>\n<p>Internet Protocol Security (IPsec) is a framework that can protect IP traffic on the network layer with the following features:</p>\n<ul>\n<li>Confidentiality 机密性</li>\n<li>Integrity 数据完整性</li>\n<li>Authentication 源鉴别</li>\n<li>Anti-reply 重放攻击防护</li>\n</ul>\n<h2 id=\"ipsec-sub-protocols\"><a class=\"markdownIt-Anchor\" href=\"#ipsec-sub-protocols\"></a> IPsec sub-protocols</h2>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>I</mi><mi>P</mi><mi>s</mi><mi>e</mi><mi>c</mi><mrow><mo fence=\"true\">{</mo><mtable rowspacing=\"0.15999999999999992em\" columnspacing=\"1em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mi>A</mi><mi>u</mi><mi>t</mi><mi>h</mi><mi>e</mi><mi>n</mi><mi>t</mi><mi>i</mi><mi>c</mi><mi>a</mi><mi>t</mi><mi>i</mi><mi>o</mi><mi>n</mi><mtext> </mtext><mi>H</mi><mi>e</mi><mi>a</mi><mi>d</mi><mi>e</mi><mi>r</mi><mtext> </mtext><mo stretchy=\"false\">(</mo><mi>A</mi><mi>H</mi><mo stretchy=\"false\">)</mo><mrow><mo fence=\"true\">{</mo><mtable rowspacing=\"0.15999999999999992em\" columnspacing=\"1em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mi>M</mi><mi>D</mi><mn>5</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mi>S</mi><mi>H</mi><mi>A</mi></mrow></mstyle></mtd></mtr></mtable></mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mi>E</mi><mi>n</mi><mi>c</mi><mi>a</mi><mi>p</mi><mi>s</mi><mi>u</mi><mi>l</mi><mi>a</mi><mi>t</mi><mi>e</mi><mi>d</mi><mtext> </mtext><mi>S</mi><mi>e</mi><mi>c</mi><mi>u</mi><mi>r</mi><mi>i</mi><mi>t</mi><mi>y</mi><mtext> </mtext><mi>P</mi><mi>a</mi><mi>y</mi><mi>l</mi><mi>o</mi><mi>a</mi><mi>d</mi><mtext> </mtext><mo stretchy=\"false\">(</mo><mi>E</mi><mi>S</mi><mi>P</mi><mo stretchy=\"false\">)</mo><mrow><mo fence=\"true\">{</mo><mtable rowspacing=\"0.15999999999999992em\" columnspacing=\"1em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mi>D</mi><mi>E</mi><mi>S</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mn>3</mn><mi>D</mi><mi>E</mi><mi>S</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mi>A</mi><mi>E</mi><mi>S</mi></mrow></mstyle></mtd></mtr></mtable></mrow></mrow></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding=\"application/x-tex\">IPsec\n\\left\\{\n\\begin{matrix}\n\tAuthentication\\ Header\\ (AH)\n\t\\left\\{\n\t\\begin{matrix}\n\t\tMD5\\\\\n\t\tSHA\\\\\n\t\\end{matrix}\n\t\\right.\n\t\\\\\n\tEncapsulated\\ Security\\ Payload\\ (ESP)\n\t\\left\\{\n\t\\begin{matrix}\n\t\tDES\\\\\n\t\t3DES\\\\\n\t\tAES\\\\\n\t\\end{matrix}\n\t\\right.\n\t\\\\\n\\end{matrix}\n\\right.\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:6.00007em;vertical-align:-2.750035em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">I</span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">P</span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\">c</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\"><span class=\"mopen\"><span class=\"delimsizing mult\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.2500199999999997em;\"><span style=\"top:-1.2999899999999998em;\"><span class=\"pstrut\" style=\"height:3.15em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎩</span></span></span><span style=\"top:-1.2999899999999998em;\"><span class=\"pstrut\" style=\"height:3.15em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎪</span></span></span><span style=\"top:-1.5999899999999998em;\"><span class=\"pstrut\" style=\"height:3.15em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎪</span></span></span><span style=\"top:-1.8999899999999998em;\"><span class=\"pstrut\" style=\"height:3.15em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎪</span></span></span><span style=\"top:-2.1999899999999997em;\"><span class=\"pstrut\" style=\"height:3.15em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎪</span></span></span><span style=\"top:-3.15001em;\"><span class=\"pstrut\" style=\"height:3.15em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎨</span></span></span><span style=\"top:-4.30001em;\"><span class=\"pstrut\" style=\"height:3.15em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎪</span></span></span><span style=\"top:-4.60001em;\"><span class=\"pstrut\" style=\"height:3.15em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎪</span></span></span><span style=\"top:-4.90001em;\"><span class=\"pstrut\" style=\"height:3.15em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎪</span></span></span><span style=\"top:-5.20001em;\"><span class=\"pstrut\" style=\"height:3.15em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎪</span></span></span><span style=\"top:-5.500019999999999em;\"><span class=\"pstrut\" style=\"height:3.15em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎧</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.75002em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.250035em;\"><span style=\"top:-5.850055em;\"><span class=\"pstrut\" style=\"height:4.05002em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">A</span><span class=\"mord mathdefault\">u</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">h</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">c</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">n</span><span class=\"mspace\"> </span><span class=\"mord mathdefault\" style=\"margin-right:0.08125em;\">H</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mspace\"> </span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">A</span><span class=\"mord mathdefault\" style=\"margin-right:0.08125em;\">H</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size3\">{</span></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.45em;\"><span style=\"top:-3.61em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">M</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">D</span><span class=\"mord\">5</span></span></span><span style=\"top:-2.4099999999999997em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathdefault\" style=\"margin-right:0.08125em;\">H</span><span class=\"mord mathdefault\">A</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9500000000000004em;\"><span></span></span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span><span style=\"top:-2.850005em;\"><span class=\"pstrut\" style=\"height:4.05002em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\">c</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">p</span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">u</span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\">d</span><span class=\"mspace\"> </span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\">c</span><span class=\"mord mathdefault\">u</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\"> </span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">P</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">d</span><span class=\"mspace\"> </span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">P</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\"><span class=\"mopen\"><span class=\"delimsizing mult\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.05002em;\"><span style=\"top:-2.49999em;\"><span class=\"pstrut\" style=\"height:3.15em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎩</span></span></span><span style=\"top:-3.15001em;\"><span class=\"pstrut\" style=\"height:3.15em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎨</span></span></span><span style=\"top:-4.30002em;\"><span class=\"pstrut\" style=\"height:3.15em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎧</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.55002em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.05em;\"><span style=\"top:-4.21em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">D</span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span></span></span><span style=\"top:-3.0099999999999993em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">3</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">D</span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span></span></span><span style=\"top:-1.8099999999999994em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">A</span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.5500000000000007em;\"><span></span></span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.750035em;\"><span></span></span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span></p>\n<p>AH协议提供源鉴别和数据完整性服务，但不提供机密性服务。</p>\n<p>ESP协议提供源鉴别，数据完整性和机密性服务； 因此ESP协议应用更为广泛。</p>\n<p>AH protocol produce Integrity and Authentication services, but do not produce Confidentiality.</p>\n<p>ESP protocol produce Confidentiality, Authentication and Integrity; therefore ESP protocol has a broader application.</p>\n<h2 id=\"ipsec-datagram\"><a class=\"markdownIt-Anchor\" href=\"#ipsec-datagram\"></a> IPsec Datagram</h2>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>I</mi><mi>P</mi><mi>s</mi><mi>e</mi><mi>c</mi><mrow><mo fence=\"true\">{</mo><mtable rowspacing=\"0.15999999999999992em\" columnspacing=\"1em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mi>t</mi><mi>u</mi><mi>n</mi><mi>n</mi><mi>e</mi><mi>l</mi><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mi>e</mi><mo>→</mo><mn>2</mn><mtext> </mtext><mi>r</mi><mi>o</mi><mi>u</mi><mi>t</mi><mi>e</mi><mi>r</mi><mi>s</mi><mo separator=\"true\">,</mo><mi>r</mi><mi>o</mi><mi>u</mi><mi>t</mi><mi>e</mi><mi>r</mi><mtext> </mtext><mi>a</mi><mi>n</mi><mi>d</mi><mtext> </mtext><mi>h</mi><mi>o</mi><mi>s</mi><mi>t</mi><mo separator=\"true\">,</mo><mn>2</mn><mtext> </mtext><mi>h</mi><mi>o</mi><mi>s</mi><mi>t</mi><mi>s</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mi>t</mi><mi>r</mi><mi>a</mi><mi>n</mi><mi>s</mi><mi>p</mi><mi>o</mi><mi>r</mi><mi>t</mi><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mi>e</mi><mo>→</mo><mn>2</mn><mtext> </mtext><mi>h</mi><mi>o</mi><mi>s</mi><mi>t</mi><mi>s</mi><mtext> </mtext><mi>o</mi><mi>n</mi><mi>l</mi><mi>y</mi></mrow></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding=\"application/x-tex\">IPsec\n\\left\\{\n\\begin{matrix}\n\ttunnel\\ mode\\to\n\t2\\ routers, router\\ and\\ host, 2\\ hosts\n\t\\\\\n\ttransport\\ mode\\to\n\t2\\ hosts\\ only\n\t\\\\\n\\end{matrix}\n\\right.\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:2.40003em;vertical-align:-0.95003em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">I</span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">P</span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\">c</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size3\">{</span></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.45em;\"><span style=\"top:-3.61em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">u</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mspace\"> </span><span class=\"mord mathdefault\">m</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\">e</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord\">2</span><span class=\"mspace\"> </span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">u</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">s</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">u</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mspace\"> </span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\">d</span><span class=\"mspace\"> </span><span class=\"mord mathdefault\">h</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">t</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">2</span><span class=\"mspace\"> </span><span class=\"mord mathdefault\">h</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">s</span></span></span><span style=\"top:-2.4099999999999997em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">p</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">t</span><span class=\"mspace\"> </span><span class=\"mord mathdefault\">m</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\">e</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord\">2</span><span class=\"mspace\"> </span><span class=\"mord mathdefault\">h</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">s</span><span class=\"mspace\"> </span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9500000000000004em;\"><span></span></span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span></p>\n<p>IPsec supports two modes of operation:</p>\n<p>The <strong>Transport Mode</strong> is most commonly used to protect the communication between two hosts.</p>\n<p>The <strong>Tunnel Mode</strong> is most commonly used to protect the communication between two routers by building a secure tunnel, commonly known as a <strong>VPN</strong>.</p>\n<h2 id=\"authentication-header-protocol\"><a class=\"markdownIt-Anchor\" href=\"#authentication-header-protocol\"></a> Authentication Header Protocol</h2>\n<p>Layer 3 protocol</p>\n<p><strong>Transport mode</strong>: an AH header after the IP header. The entire IP packet will be authenticated.</p>\n<p><img src=\"/2022/04/08/IPsec/image-20220408182745880.png\" alt=\"image-20220408182745880\"></p>\n<p><strong>Tunnel mode</strong>: a new IP header is added on top of the original IP packet.</p>\n<p><img src=\"/2022/04/08/IPsec/image-20220408182806622.png\" alt=\"image-20220408182806622\"></p>\n<h2 id=\"encapsulating-security-payload-protocol\"><a class=\"markdownIt-Anchor\" href=\"#encapsulating-security-payload-protocol\"></a> Encapsulating Security Payload Protocol</h2>\n<p>Layer 3 protocol</p>\n<p><strong>Transport mode</strong>: the original IP header is used, and an ESP header and trailer are added. The transport layer (TCP for example) and payload will be encrypted. It also offers authentication but unlike AH, it’s not for the entire IP packet.</p>\n<p><img src=\"/2022/04/08/IPsec/image-20220408182852006.png\" alt=\"image-20220408182852006\"></p>\n<p><strong>Tunnel mode</strong>: a new header is added, and the original IP header is now also encrypted.</p>\n<p><img src=\"/2022/04/08/IPsec/image-20220408182902202.png\" alt=\"image-20220408182902202\"></p>\n<h1 id=\"virtual-private-network\"><a class=\"markdownIt-Anchor\" href=\"#virtual-private-network\"></a> Virtual Private Network</h1>\n<p>A Virtual private network (VPN) is a private network that securely connects two or more remote sites across a public network such as the Internet. Instead of using dedicated physical connections between networks, VPNs use virtual connections (secure tunnel) routed through public networks.</p>\n<p><img src=\"/2022/04/08/IPsec/image-20220408183423694.png\" alt=\"image-20220408183423694\"></p>\n<h2 id=\"vpn-security\"><a class=\"markdownIt-Anchor\" href=\"#vpn-security\"></a> VPN Security</h2>\n<ul>\n<li>Data confidentiality: DES, 3DES, AES (ESP of IPsec)</li>\n<li>Data integrity: MD5, SHA (AH of IPsec)</li>\n<li>Data origin authentication: PSK, RSA.</li>\n</ul>\n<p><strong>IPsec VPN</strong> consists of set of standards used to establish a VPN connection. Within the VPN implementation, IPsec is applied in tunnel mode, which supports the <strong>Encapsulating Security Payload</strong> <strong>(ESP)</strong> and <strong>Authentication Header (AH)</strong> protocols.</p>\n<h2 id=\"types-of-vpn\"><a class=\"markdownIt-Anchor\" href=\"#types-of-vpn\"></a> Types of VPN</h2>\n<p><img src=\"/2022/04/08/IPsec/image-20220408183817734.png\" alt=\"image-20220408183817734\"></p>\n<h2 id=\"security-associations\"><a class=\"markdownIt-Anchor\" href=\"#security-associations\"></a> Security Associations</h2>\n<p>IPsec datagram在两个实体之间发送(e.g. router-router, router-host, host-host)，在datagram发送之前，两者创建了一个网络层的逻辑连接，我们将这个逻辑连接称为安全关联( Security Association, SA)。</p>\n<p>一个SA是一个单工逻辑链接，也就是说，如果两个设备之间要互相发送datagram，那么至少要创建2个SA，每个方向至少创建一个。</p>\n<p>A Security Associations (SA) is a unidirectional agreement between the VPN participants that specify the security parameter index (SPI), destination IP address, and security protocol to use in securing a  communication channel.</p>\n<p>Full bidirectional communication requires at least two SAs, one for each direction.</p>\n<h2 id=\"ipsec-vpn-operations\"><a class=\"markdownIt-Anchor\" href=\"#ipsec-vpn-operations\"></a> IPsec VPN operations</h2>\n<ol>\n<li>Interesting traffic initiates the IPsec process</li>\n<li>IKE phase 1 - generate the IKE SA for IKE phase 2.</li>\n<li>IKE phase 2 - generate the IPsec SA for data transfer.</li>\n<li>Data transfer between IPsec peers</li>\n<li>IPsec tunnel termination.</li>\n</ol>\n<p>*more info of IKE: <a href=\"https://cshihong.github.io/2019/04/03/IPSec-VPN%E4%B9%8BIKE%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3/\">IPSec VPN之IKE协议详解 | 曹世宏的博客 (cshihong.github.io)</a></p>\n"},{"title":"链式二叉树简介","date":"2022-02-25T08:01:11.000Z","author":"Tony","katex":true,"_content":"\n\n\n## 前言\n\n> 人为什么难做选择？\n\n**选择意味着放弃**\n\n你选择一方，也就意味着放弃了另一方。摆在你面前的选择项越接近，你的选择就会越困难，因为放弃其中任何一个选择项都不容易。如果摆在你面前的选择项对比明显，那么选择起来就会轻松许多，大家几乎都会毫不犹豫的选择“好”的选择项，放弃掉“差”的选择项。\n\n**选择永远都不是完美的**\n\n选择永远都不可能十全十美，只可能满足尽量多的侧重点。选择的时候想满足越多的侧重点，可能就会越难做出选择。所以在选择上不要过于追求完美。\n\n警惕**逃避性选择**——不知道自己要去哪儿，还要选择离开。\n\n有一种选择是对现状不满，想逃离这种现状，但是却不知道去哪里。举个例子，可能目前的公司有各种问题，比如开发流程不规范等，如果因为这些问题离开，可能就会从一个坑跳到另外一个更大的坑。当决定离开的时候，一定是自己有明确的目标，很清楚自己想要什么。\n\n## 二叉树的定义\n\n二叉树要么为空，要么由根节点（root），左子树（left subtree）和右子树（right subtree）组成，而且左子树和右子树分别是一棵二叉树。说白了就是，二叉树的任何一个节点，**有且只能有0，1，2棵子树**。\n\n![二叉树示意图](binary_tree_1/2-1Q226195I0M1.gif)\n\n## 二叉树的实现\n\n二叉树的实现方式大致分两种，一种是以数组形式储存，另一种是以链表形式储存。以数组形式储存的好处是实现起来极其便捷，但是数组只能储存完全二叉树，就是二叉树的任何一个父节点（除了叶子节点）都要有两颗子树，如图所示：\n\n![满二叉树示意图](binary_tree_1/2-1Q226195949495.gif)\n\n我们这里使用链表的方法维护一个二叉树，一个是这样能够实现更宽泛的二叉树形式，减少内存开销；另外以链表形式实现二叉树可以让我们更加深入理解二叉树的本质。\n\n![二叉树链式存储结构示意图](binary_tree_1/2-1Q22R035341H.gif)\n\n### 头文件\n\n```c\n#pragma once\n#ifndef BST_H\n#define BST_H\n\nstruct TreeNode\n{\n\tElementType Node;\n\tTreeNode* L_Child;\n\tTreeNode* R_Child;\n};\ntypedef int ElementType;\ntypedef struct TreeNode* PtrToNode;\ntypedef struct TreeNode* Position;\ntypedef struct TreeNode* SearchTree;\n\nSearchTree MakeEmpty(SearchTree T);//initialize\nPosition Find(ElementType X, SearchTree T);\nPosition FindMin(SearchTree T);\nPosition FindMax(SearchTree T);\nSearchTree Insert(SearchTree T, ElementType X);\nSearchTree Delete(SearchTree T, ElementType X);\nElementType Retrieve(Position P);//Output\n\nvoid PreOrderTraverse(SearchTree T);\nvoid InOrderTraverse(SearchTree T);\nvoid PostOrderTraverse(SearchTree T);\n\n#endif\n```\n\n### 创建二叉树\n\n```c\nSearchTree MakeEmpty(SearchTree T)\n{\n\tif (T != NULL)\n\t{\n\t\tMakeEmpty(T->L_Child);\n\t\tMakeEmpty(T->R_Child);\n\t\tfree(T);\n\t}\n\treturn NULL;\n}\n```\n\n### 二叉树查找元素\n\n```c\nPosition Find(ElementType X, SearchTree T)\n{\n\tif(T == NULL)\n\t\treturn NULL;\n\tif (X < T->Node)\n\t\tFind(X, T->L_Child);\n\telse if (X > T->Node)\n\t\tFind(X, T->R_Child);\n\telse\n\t\treturn T;\n}\n```\n\n### 查找最大最小值\n\n```c\nPosition FindMin(SearchTree T)//递归写法\n{\n\tif (T == NULL)\n\t\treturn NULL;\n\telse if (T->L_Child == NULL)\n\t\treturn T;\n\telse\n\t\treturn FindMin(T->L_Child);\n}\nPosition FindMax(SearchTree T)//while循环写法\n{\n\tif (T == NULL)\n\t\treturn NULL;\n\telse\n\t{\n\t\twhile(T->R_Child != NULL)\n\t\t\tT=T->R_Child;\n\t\treturn T;\n\t}\n}\n```\n\n### 二叉树插入元素\n\n```c\nSearchTree Insert(SearchTree T, ElementType X)\n{\n\tif (T==NULL)// the fist element\n\t{\n\t\tT = new TreeNode;\n\t\tT->L_Child = NULL;\n\t\tT->R_Child = NULL;\n\t\tT->Node = X;\n\t}\n\telse\n\t{\n\t\tif (X < T->Node)//put X on the left\n\t\t\tT->L_Child=Insert(T->L_Child, X);\n\t\telse             //put X on the right\n\t\t\tT->R_Child = Insert(T->R_Child, X);\n\t}\n\treturn T;\n}\n```\n\n### 二叉树删除元素\n\n```c\nSearchTree Delete(SearchTree T, ElementType X)\n{\n\tif (T == NULL)\n\t\treturn NULL;\n\tif (X < T->Node)\n\t{\n\t\tT->L_Child= Delete(T->L_Child, X);\n\t}\n\telse if (X > T->Node)\n\t{\n\t\tT->R_Child=Delete(T->R_Child, X);\n\t}\n\telse\n\t{\n\t\tif (T->L_Child && T->R_Child) // 2  children\n\t\t{\n\t\t\tPosition minn = FindMin(T->R_Child);\n\t\t\tT->Node = minn->Node;\n\t\t\tT->R_Child = Delete(T->R_Child, T->Node);\n\n\t\t}\n\t\telse           // 1  or  0 child\n\t\t{\n\t\t\tPosition temp = T;\n\t\t\tif (T->L_Child == NULL)\n\t\t\t\tT = T->R_Child;\n\t\t\telse if (T->R_Child == NULL)\n\t\t\t\tT = T->L_Child;\n\t\t\tfree(temp);\n\t\t}\n\t}\n\treturn T;\n}\n```\n\n\n\n## 二叉树的遍历\n\n- 先序遍历$PreOrder(T)=Root(T)+PreOrder(left subT)+PreOrder(right subT)$\n- 中序遍历$InOrder(T)=InOrder(left subT)+Root(T)+InOrder(right subT)$\n- 后序遍历$PostOrder(T)=PostOrder(left subT)+PostOrder(Right subT)+Root(T)$\n\n![img](binary_tree_1/image.png)\n\n\n\n### 先序遍历\n\n1. 递归实现\n\n```c\nvoid PreOrderTraverse(SearchTree T)\n{\n\tif (T == NULL)\n\t\treturn;\n\tcout << Retrieve(T)<<\" \";\n\tPreOrderTraverse(T->L_Child);\n\tPreOrderTraverse(T->R_Child);\n}\n```\n\n2. 迭代实现\n\n```c\nvoid PreOrder(BiTree Root)\n{\n    stack <BiTree> s;\n    if (root) //如果根节点不为空\n        s.push(root); //则令根节点入栈\n    while (!s.empty()) //在栈变空之前反复循环\n    { \n        root = s.pop(); \n        cout << root->data; //弹出并访问当前节点\n        //下面左右孩子的顺序不能颠倒\n        //必须先让右孩子先入栈，再让左孩子入栈。\n        if (root->RChild)\n            s.push(root->RChild); //右孩子先入后出\n        if (root->LChild)\n            s.push(root->LChild); //左孩子后入先出\n    }\n}\n```\n\n我们通过一个实例来了解一下该迭代版本是如何工作的 :\n\n![img](binary_tree_1/v2-0ccba83c7b3dbf7b89964c04021025d9_720w.jpg)\n\n### 中序遍历\n\n1. 递归实现\n\n```c\nvoid InOrderTraverse(SearchTree T)\n{\n\tif (T == NULL)\n\t\treturn;\n\tInOrderTraverse(T->L_Child);\n\tcout << Retrieve(T) << \" \";\n\tInOrderTraverse(T->R_Child);\n}\n```\n\n2. 迭代实现\n\n```c\nvoid InOrderTraverse(BiTree root)\n{\n   Stack<BiTree> S; //辅助栈\n   while (true)\n      if (root) \n      {\n         S.push (root); //根节点进栈\n         root = root->LChild; //深入遍历左子树\n      } \n      else if (!S.empty()) \n      {\n         root = S.pop(); //尚未访问的最低祖先节点退栈\n         cout << root->data; //访问该祖先节点\n         root = root->RChild; //遍历祖先的右子树\n      } \n      else\n         break; //遍历完成\n}\n```\n\n### 后序遍历\n\n1. 递归实现\n\n```c\nvoid PostOrderTraverse(SearchTree T)\n{\n\tif (T == NULL)\n\t\treturn;\n\tPostOrderTraverse(T->L_Child);\n\tPostOrderTraverse(T->R_Child);\n\tcout << T->Node << \" \";\n}\n```\n\n2. 迭代实现\n\n```c\n#define A !cur->Lchild && !cur->Rchild\n//如果P不存在左孩子和右孩子，则可以直接访问它；\n#define B pre==cur->Lchild || pre==cur->Rchild\n//P存在左孩子或者右孩子，但是其左孩子和右孩子都已被访问过了;\nvoid PostOrder(BiTree Root)\n{\n    if (!Root)\n        return;\n    stack <BiTree> s;//辅助栈\n    BiTree cur=Root,pre=NULL;\n    s.push(Root);//根节点进栈\n    while (!s.empty())\n    {\n        cur=s.top();\n        if (A || B)\n        {\n            cout << cur->data;\n            s.pop();\n            pre=cur;\n        }\n        else\n        {\n            if (cur->Rchild)\n                s.push(cur->Rchild);\n            if (cur->Lchild)\n                s.push(cur->Lchild);\n        }\n    }\n}\n\n```\n\n## main()函数\n\n```c\nint main()\n{\n\tSearchTree My_Tree = NULL;\n\tMy_Tree = MakeEmpty(My_Tree);\n\tMy_Tree = Insert(My_Tree, 3);\n\tMy_Tree = Insert(My_Tree, 2);\n\tMy_Tree = Insert(My_Tree, 6);\n\tMy_Tree = Insert(My_Tree, 5);\n\tMy_Tree = Insert(My_Tree, 4);\n\tif (!Find(1, My_Tree))\n\t\tMy_Tree = Insert(My_Tree, 1);\n\tMy_Tree = Delete(My_Tree, 1);\n\tSearchTree min = FindMin(My_Tree);\n\tcout << Retrieve(min) << endl;\n\tPreOrderTraverse(My_Tree);\n\tInOrderTraverse(My_Tree);\n\tPostOrderTraverse(My_Tree);\n\treturn 0;\n}\n```\n\n\n\n下一篇文章：[数组与链式二叉树之间的转换 | Tony (tonylsx611.github.io)](https://tonylsx611.github.io/2022/02/24/binary_tree_2/)\n\n注：本文图片部分选自http://data.biancheng.net/；如有侵权，请联系我。","source":"_posts/binary_tree_1.md","raw":"---\ntitle: 链式二叉树简介\ndate: 2022-02-25 16:01:11\nauthor: Tony\ncategories:\n\t- algorithm\ntags: \n\t- Binary-tree\n\t- algorithm\nkatex: true\n---\n\n\n\n## 前言\n\n> 人为什么难做选择？\n\n**选择意味着放弃**\n\n你选择一方，也就意味着放弃了另一方。摆在你面前的选择项越接近，你的选择就会越困难，因为放弃其中任何一个选择项都不容易。如果摆在你面前的选择项对比明显，那么选择起来就会轻松许多，大家几乎都会毫不犹豫的选择“好”的选择项，放弃掉“差”的选择项。\n\n**选择永远都不是完美的**\n\n选择永远都不可能十全十美，只可能满足尽量多的侧重点。选择的时候想满足越多的侧重点，可能就会越难做出选择。所以在选择上不要过于追求完美。\n\n警惕**逃避性选择**——不知道自己要去哪儿，还要选择离开。\n\n有一种选择是对现状不满，想逃离这种现状，但是却不知道去哪里。举个例子，可能目前的公司有各种问题，比如开发流程不规范等，如果因为这些问题离开，可能就会从一个坑跳到另外一个更大的坑。当决定离开的时候，一定是自己有明确的目标，很清楚自己想要什么。\n\n## 二叉树的定义\n\n二叉树要么为空，要么由根节点（root），左子树（left subtree）和右子树（right subtree）组成，而且左子树和右子树分别是一棵二叉树。说白了就是，二叉树的任何一个节点，**有且只能有0，1，2棵子树**。\n\n![二叉树示意图](binary_tree_1/2-1Q226195I0M1.gif)\n\n## 二叉树的实现\n\n二叉树的实现方式大致分两种，一种是以数组形式储存，另一种是以链表形式储存。以数组形式储存的好处是实现起来极其便捷，但是数组只能储存完全二叉树，就是二叉树的任何一个父节点（除了叶子节点）都要有两颗子树，如图所示：\n\n![满二叉树示意图](binary_tree_1/2-1Q226195949495.gif)\n\n我们这里使用链表的方法维护一个二叉树，一个是这样能够实现更宽泛的二叉树形式，减少内存开销；另外以链表形式实现二叉树可以让我们更加深入理解二叉树的本质。\n\n![二叉树链式存储结构示意图](binary_tree_1/2-1Q22R035341H.gif)\n\n### 头文件\n\n```c\n#pragma once\n#ifndef BST_H\n#define BST_H\n\nstruct TreeNode\n{\n\tElementType Node;\n\tTreeNode* L_Child;\n\tTreeNode* R_Child;\n};\ntypedef int ElementType;\ntypedef struct TreeNode* PtrToNode;\ntypedef struct TreeNode* Position;\ntypedef struct TreeNode* SearchTree;\n\nSearchTree MakeEmpty(SearchTree T);//initialize\nPosition Find(ElementType X, SearchTree T);\nPosition FindMin(SearchTree T);\nPosition FindMax(SearchTree T);\nSearchTree Insert(SearchTree T, ElementType X);\nSearchTree Delete(SearchTree T, ElementType X);\nElementType Retrieve(Position P);//Output\n\nvoid PreOrderTraverse(SearchTree T);\nvoid InOrderTraverse(SearchTree T);\nvoid PostOrderTraverse(SearchTree T);\n\n#endif\n```\n\n### 创建二叉树\n\n```c\nSearchTree MakeEmpty(SearchTree T)\n{\n\tif (T != NULL)\n\t{\n\t\tMakeEmpty(T->L_Child);\n\t\tMakeEmpty(T->R_Child);\n\t\tfree(T);\n\t}\n\treturn NULL;\n}\n```\n\n### 二叉树查找元素\n\n```c\nPosition Find(ElementType X, SearchTree T)\n{\n\tif(T == NULL)\n\t\treturn NULL;\n\tif (X < T->Node)\n\t\tFind(X, T->L_Child);\n\telse if (X > T->Node)\n\t\tFind(X, T->R_Child);\n\telse\n\t\treturn T;\n}\n```\n\n### 查找最大最小值\n\n```c\nPosition FindMin(SearchTree T)//递归写法\n{\n\tif (T == NULL)\n\t\treturn NULL;\n\telse if (T->L_Child == NULL)\n\t\treturn T;\n\telse\n\t\treturn FindMin(T->L_Child);\n}\nPosition FindMax(SearchTree T)//while循环写法\n{\n\tif (T == NULL)\n\t\treturn NULL;\n\telse\n\t{\n\t\twhile(T->R_Child != NULL)\n\t\t\tT=T->R_Child;\n\t\treturn T;\n\t}\n}\n```\n\n### 二叉树插入元素\n\n```c\nSearchTree Insert(SearchTree T, ElementType X)\n{\n\tif (T==NULL)// the fist element\n\t{\n\t\tT = new TreeNode;\n\t\tT->L_Child = NULL;\n\t\tT->R_Child = NULL;\n\t\tT->Node = X;\n\t}\n\telse\n\t{\n\t\tif (X < T->Node)//put X on the left\n\t\t\tT->L_Child=Insert(T->L_Child, X);\n\t\telse             //put X on the right\n\t\t\tT->R_Child = Insert(T->R_Child, X);\n\t}\n\treturn T;\n}\n```\n\n### 二叉树删除元素\n\n```c\nSearchTree Delete(SearchTree T, ElementType X)\n{\n\tif (T == NULL)\n\t\treturn NULL;\n\tif (X < T->Node)\n\t{\n\t\tT->L_Child= Delete(T->L_Child, X);\n\t}\n\telse if (X > T->Node)\n\t{\n\t\tT->R_Child=Delete(T->R_Child, X);\n\t}\n\telse\n\t{\n\t\tif (T->L_Child && T->R_Child) // 2  children\n\t\t{\n\t\t\tPosition minn = FindMin(T->R_Child);\n\t\t\tT->Node = minn->Node;\n\t\t\tT->R_Child = Delete(T->R_Child, T->Node);\n\n\t\t}\n\t\telse           // 1  or  0 child\n\t\t{\n\t\t\tPosition temp = T;\n\t\t\tif (T->L_Child == NULL)\n\t\t\t\tT = T->R_Child;\n\t\t\telse if (T->R_Child == NULL)\n\t\t\t\tT = T->L_Child;\n\t\t\tfree(temp);\n\t\t}\n\t}\n\treturn T;\n}\n```\n\n\n\n## 二叉树的遍历\n\n- 先序遍历$PreOrder(T)=Root(T)+PreOrder(left subT)+PreOrder(right subT)$\n- 中序遍历$InOrder(T)=InOrder(left subT)+Root(T)+InOrder(right subT)$\n- 后序遍历$PostOrder(T)=PostOrder(left subT)+PostOrder(Right subT)+Root(T)$\n\n![img](binary_tree_1/image.png)\n\n\n\n### 先序遍历\n\n1. 递归实现\n\n```c\nvoid PreOrderTraverse(SearchTree T)\n{\n\tif (T == NULL)\n\t\treturn;\n\tcout << Retrieve(T)<<\" \";\n\tPreOrderTraverse(T->L_Child);\n\tPreOrderTraverse(T->R_Child);\n}\n```\n\n2. 迭代实现\n\n```c\nvoid PreOrder(BiTree Root)\n{\n    stack <BiTree> s;\n    if (root) //如果根节点不为空\n        s.push(root); //则令根节点入栈\n    while (!s.empty()) //在栈变空之前反复循环\n    { \n        root = s.pop(); \n        cout << root->data; //弹出并访问当前节点\n        //下面左右孩子的顺序不能颠倒\n        //必须先让右孩子先入栈，再让左孩子入栈。\n        if (root->RChild)\n            s.push(root->RChild); //右孩子先入后出\n        if (root->LChild)\n            s.push(root->LChild); //左孩子后入先出\n    }\n}\n```\n\n我们通过一个实例来了解一下该迭代版本是如何工作的 :\n\n![img](binary_tree_1/v2-0ccba83c7b3dbf7b89964c04021025d9_720w.jpg)\n\n### 中序遍历\n\n1. 递归实现\n\n```c\nvoid InOrderTraverse(SearchTree T)\n{\n\tif (T == NULL)\n\t\treturn;\n\tInOrderTraverse(T->L_Child);\n\tcout << Retrieve(T) << \" \";\n\tInOrderTraverse(T->R_Child);\n}\n```\n\n2. 迭代实现\n\n```c\nvoid InOrderTraverse(BiTree root)\n{\n   Stack<BiTree> S; //辅助栈\n   while (true)\n      if (root) \n      {\n         S.push (root); //根节点进栈\n         root = root->LChild; //深入遍历左子树\n      } \n      else if (!S.empty()) \n      {\n         root = S.pop(); //尚未访问的最低祖先节点退栈\n         cout << root->data; //访问该祖先节点\n         root = root->RChild; //遍历祖先的右子树\n      } \n      else\n         break; //遍历完成\n}\n```\n\n### 后序遍历\n\n1. 递归实现\n\n```c\nvoid PostOrderTraverse(SearchTree T)\n{\n\tif (T == NULL)\n\t\treturn;\n\tPostOrderTraverse(T->L_Child);\n\tPostOrderTraverse(T->R_Child);\n\tcout << T->Node << \" \";\n}\n```\n\n2. 迭代实现\n\n```c\n#define A !cur->Lchild && !cur->Rchild\n//如果P不存在左孩子和右孩子，则可以直接访问它；\n#define B pre==cur->Lchild || pre==cur->Rchild\n//P存在左孩子或者右孩子，但是其左孩子和右孩子都已被访问过了;\nvoid PostOrder(BiTree Root)\n{\n    if (!Root)\n        return;\n    stack <BiTree> s;//辅助栈\n    BiTree cur=Root,pre=NULL;\n    s.push(Root);//根节点进栈\n    while (!s.empty())\n    {\n        cur=s.top();\n        if (A || B)\n        {\n            cout << cur->data;\n            s.pop();\n            pre=cur;\n        }\n        else\n        {\n            if (cur->Rchild)\n                s.push(cur->Rchild);\n            if (cur->Lchild)\n                s.push(cur->Lchild);\n        }\n    }\n}\n\n```\n\n## main()函数\n\n```c\nint main()\n{\n\tSearchTree My_Tree = NULL;\n\tMy_Tree = MakeEmpty(My_Tree);\n\tMy_Tree = Insert(My_Tree, 3);\n\tMy_Tree = Insert(My_Tree, 2);\n\tMy_Tree = Insert(My_Tree, 6);\n\tMy_Tree = Insert(My_Tree, 5);\n\tMy_Tree = Insert(My_Tree, 4);\n\tif (!Find(1, My_Tree))\n\t\tMy_Tree = Insert(My_Tree, 1);\n\tMy_Tree = Delete(My_Tree, 1);\n\tSearchTree min = FindMin(My_Tree);\n\tcout << Retrieve(min) << endl;\n\tPreOrderTraverse(My_Tree);\n\tInOrderTraverse(My_Tree);\n\tPostOrderTraverse(My_Tree);\n\treturn 0;\n}\n```\n\n\n\n下一篇文章：[数组与链式二叉树之间的转换 | Tony (tonylsx611.github.io)](https://tonylsx611.github.io/2022/02/24/binary_tree_2/)\n\n注：本文图片部分选自http://data.biancheng.net/；如有侵权，请联系我。","slug":"binary_tree_1","published":1,"updated":"2022-03-13T16:09:07.491Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1rj2n5b001bgwcyaka20m90","content":"<h2 id=\"前言\"><a class=\"markdownIt-Anchor\" href=\"#前言\"></a> 前言</h2>\n<blockquote>\n<p>人为什么难做选择？</p>\n</blockquote>\n<p><strong>选择意味着放弃</strong></p>\n<p>你选择一方，也就意味着放弃了另一方。摆在你面前的选择项越接近，你的选择就会越困难，因为放弃其中任何一个选择项都不容易。如果摆在你面前的选择项对比明显，那么选择起来就会轻松许多，大家几乎都会毫不犹豫的选择“好”的选择项，放弃掉“差”的选择项。</p>\n<p><strong>选择永远都不是完美的</strong></p>\n<p>选择永远都不可能十全十美，只可能满足尽量多的侧重点。选择的时候想满足越多的侧重点，可能就会越难做出选择。所以在选择上不要过于追求完美。</p>\n<p>警惕<strong>逃避性选择</strong>——不知道自己要去哪儿，还要选择离开。</p>\n<p>有一种选择是对现状不满，想逃离这种现状，但是却不知道去哪里。举个例子，可能目前的公司有各种问题，比如开发流程不规范等，如果因为这些问题离开，可能就会从一个坑跳到另外一个更大的坑。当决定离开的时候，一定是自己有明确的目标，很清楚自己想要什么。</p>\n<h2 id=\"二叉树的定义\"><a class=\"markdownIt-Anchor\" href=\"#二叉树的定义\"></a> 二叉树的定义</h2>\n<p>二叉树要么为空，要么由根节点（root），左子树（left subtree）和右子树（right subtree）组成，而且左子树和右子树分别是一棵二叉树。说白了就是，二叉树的任何一个节点，<strong>有且只能有0，1，2棵子树</strong>。</p>\n<p><img src=\"/2022/02/25/binary_tree_1/2-1Q226195I0M1.gif\" alt=\"二叉树示意图\" loading=\"lazy\"></p>\n<h2 id=\"二叉树的实现\"><a class=\"markdownIt-Anchor\" href=\"#二叉树的实现\"></a> 二叉树的实现</h2>\n<p>二叉树的实现方式大致分两种，一种是以数组形式储存，另一种是以链表形式储存。以数组形式储存的好处是实现起来极其便捷，但是数组只能储存完全二叉树，就是二叉树的任何一个父节点（除了叶子节点）都要有两颗子树，如图所示：</p>\n<p><img src=\"/2022/02/25/binary_tree_1/2-1Q226195949495.gif\" alt=\"满二叉树示意图\" loading=\"lazy\"></p>\n<p>我们这里使用链表的方法维护一个二叉树，一个是这样能够实现更宽泛的二叉树形式，减少内存开销；另外以链表形式实现二叉树可以让我们更加深入理解二叉树的本质。</p>\n<p><img src=\"/2022/02/25/binary_tree_1/2-1Q22R035341H.gif\" alt=\"二叉树链式存储结构示意图\" loading=\"lazy\"></p>\n<h3 id=\"头文件\"><a class=\"markdownIt-Anchor\" href=\"#头文件\"></a> 头文件</h3>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\">once</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifndef</span> <span class=\"token expression\">BST_H</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">BST_H</span></span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">TreeNode</span>\n<span class=\"token punctuation\">&#123;</span>\n\tElementType Node<span class=\"token punctuation\">;</span>\n\tTreeNode<span class=\"token operator\">*</span> L_Child<span class=\"token punctuation\">;</span>\n\tTreeNode<span class=\"token operator\">*</span> R_Child<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">int</span> ElementType<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">TreeNode</span><span class=\"token operator\">*</span> PtrToNode<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">TreeNode</span><span class=\"token operator\">*</span> Position<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">TreeNode</span><span class=\"token operator\">*</span> SearchTree<span class=\"token punctuation\">;</span>\n\nSearchTree <span class=\"token function\">MakeEmpty</span><span class=\"token punctuation\">(</span>SearchTree T<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//initialize</span>\nPosition <span class=\"token function\">Find</span><span class=\"token punctuation\">(</span>ElementType X<span class=\"token punctuation\">,</span> SearchTree T<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nPosition <span class=\"token function\">FindMin</span><span class=\"token punctuation\">(</span>SearchTree T<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nPosition <span class=\"token function\">FindMax</span><span class=\"token punctuation\">(</span>SearchTree T<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nSearchTree <span class=\"token function\">Insert</span><span class=\"token punctuation\">(</span>SearchTree T<span class=\"token punctuation\">,</span> ElementType X<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nSearchTree <span class=\"token function\">Delete</span><span class=\"token punctuation\">(</span>SearchTree T<span class=\"token punctuation\">,</span> ElementType X<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nElementType <span class=\"token function\">Retrieve</span><span class=\"token punctuation\">(</span>Position P<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//Output</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">PreOrderTraverse</span><span class=\"token punctuation\">(</span>SearchTree T<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">InOrderTraverse</span><span class=\"token punctuation\">(</span>SearchTree T<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">PostOrderTraverse</span><span class=\"token punctuation\">(</span>SearchTree T<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></code></pre>\n<h3 id=\"创建二叉树\"><a class=\"markdownIt-Anchor\" href=\"#创建二叉树\"></a> 创建二叉树</h3>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\">SearchTree <span class=\"token function\">MakeEmpty</span><span class=\"token punctuation\">(</span>SearchTree T<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>T <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">MakeEmpty</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">-></span>L_Child<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">MakeEmpty</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">-></span>R_Child<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<h3 id=\"二叉树查找元素\"><a class=\"markdownIt-Anchor\" href=\"#二叉树查找元素\"></a> 二叉树查找元素</h3>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\">Position <span class=\"token function\">Find</span><span class=\"token punctuation\">(</span>ElementType X<span class=\"token punctuation\">,</span> SearchTree T<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>T <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>X <span class=\"token operator\">&lt;</span> T<span class=\"token operator\">-></span>Node<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token function\">Find</span><span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">,</span> T<span class=\"token operator\">-></span>L_Child<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>X <span class=\"token operator\">></span> T<span class=\"token operator\">-></span>Node<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token function\">Find</span><span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">,</span> T<span class=\"token operator\">-></span>R_Child<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">else</span>\n\t\t<span class=\"token keyword\">return</span> T<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<h3 id=\"查找最大最小值\"><a class=\"markdownIt-Anchor\" href=\"#查找最大最小值\"></a> 查找最大最小值</h3>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\">Position <span class=\"token function\">FindMin</span><span class=\"token punctuation\">(</span>SearchTree T<span class=\"token punctuation\">)</span><span class=\"token comment\">//递归写法</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>T <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>T<span class=\"token operator\">-></span>L_Child <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> T<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">else</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">FindMin</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">-></span>L_Child<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\nPosition <span class=\"token function\">FindMax</span><span class=\"token punctuation\">(</span>SearchTree T<span class=\"token punctuation\">)</span><span class=\"token comment\">//while循环写法</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>T <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">else</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">-></span>R_Child <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n\t\t\tT<span class=\"token operator\">=</span>T<span class=\"token operator\">-></span>R_Child<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> T<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<h3 id=\"二叉树插入元素\"><a class=\"markdownIt-Anchor\" href=\"#二叉树插入元素\"></a> 二叉树插入元素</h3>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\">SearchTree <span class=\"token function\">Insert</span><span class=\"token punctuation\">(</span>SearchTree T<span class=\"token punctuation\">,</span> ElementType X<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>T<span class=\"token operator\">==</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token comment\">// the fist element</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\tT <span class=\"token operator\">=</span> new TreeNode<span class=\"token punctuation\">;</span>\n\t\tT<span class=\"token operator\">-></span>L_Child <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\t\tT<span class=\"token operator\">-></span>R_Child <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\t\tT<span class=\"token operator\">-></span>Node <span class=\"token operator\">=</span> X<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">else</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>X <span class=\"token operator\">&lt;</span> T<span class=\"token operator\">-></span>Node<span class=\"token punctuation\">)</span><span class=\"token comment\">//put X on the left</span>\n\t\t\tT<span class=\"token operator\">-></span>L_Child<span class=\"token operator\">=</span><span class=\"token function\">Insert</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">-></span>L_Child<span class=\"token punctuation\">,</span> X<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">else</span>             <span class=\"token comment\">//put X on the right</span>\n\t\t\tT<span class=\"token operator\">-></span>R_Child <span class=\"token operator\">=</span> <span class=\"token function\">Insert</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">-></span>R_Child<span class=\"token punctuation\">,</span> X<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> T<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<h3 id=\"二叉树删除元素\"><a class=\"markdownIt-Anchor\" href=\"#二叉树删除元素\"></a> 二叉树删除元素</h3>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\">SearchTree <span class=\"token function\">Delete</span><span class=\"token punctuation\">(</span>SearchTree T<span class=\"token punctuation\">,</span> ElementType X<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>T <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>X <span class=\"token operator\">&lt;</span> T<span class=\"token operator\">-></span>Node<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\tT<span class=\"token operator\">-></span>L_Child<span class=\"token operator\">=</span> <span class=\"token function\">Delete</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">-></span>L_Child<span class=\"token punctuation\">,</span> X<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>X <span class=\"token operator\">></span> T<span class=\"token operator\">-></span>Node<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\tT<span class=\"token operator\">-></span>R_Child<span class=\"token operator\">=</span><span class=\"token function\">Delete</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">-></span>R_Child<span class=\"token punctuation\">,</span> X<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">else</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>T<span class=\"token operator\">-></span>L_Child <span class=\"token operator\">&amp;&amp;</span> T<span class=\"token operator\">-></span>R_Child<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 2  children</span>\n\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\tPosition minn <span class=\"token operator\">=</span> <span class=\"token function\">FindMin</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">-></span>R_Child<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tT<span class=\"token operator\">-></span>Node <span class=\"token operator\">=</span> minn<span class=\"token operator\">-></span>Node<span class=\"token punctuation\">;</span>\n\t\t\tT<span class=\"token operator\">-></span>R_Child <span class=\"token operator\">=</span> <span class=\"token function\">Delete</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">-></span>R_Child<span class=\"token punctuation\">,</span> T<span class=\"token operator\">-></span>Node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token keyword\">else</span>           <span class=\"token comment\">// 1  or  0 child</span>\n\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\tPosition temp <span class=\"token operator\">=</span> T<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>T<span class=\"token operator\">-></span>L_Child <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n\t\t\t\tT <span class=\"token operator\">=</span> T<span class=\"token operator\">-></span>R_Child<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>T<span class=\"token operator\">-></span>R_Child <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n\t\t\t\tT <span class=\"token operator\">=</span> T<span class=\"token operator\">-></span>L_Child<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> T<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<h2 id=\"二叉树的遍历\"><a class=\"markdownIt-Anchor\" href=\"#二叉树的遍历\"></a> 二叉树的遍历</h2>\n<ul>\n<li>先序遍历<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>P</mi><mi>r</mi><mi>e</mi><mi>O</mi><mi>r</mi><mi>d</mi><mi>e</mi><mi>r</mi><mo stretchy=\"false\">(</mo><mi>T</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>R</mi><mi>o</mi><mi>o</mi><mi>t</mi><mo stretchy=\"false\">(</mo><mi>T</mi><mo stretchy=\"false\">)</mo><mo>+</mo><mi>P</mi><mi>r</mi><mi>e</mi><mi>O</mi><mi>r</mi><mi>d</mi><mi>e</mi><mi>r</mi><mo stretchy=\"false\">(</mo><mi>l</mi><mi>e</mi><mi>f</mi><mi>t</mi><mi>s</mi><mi>u</mi><mi>b</mi><mi>T</mi><mo stretchy=\"false\">)</mo><mo>+</mo><mi>P</mi><mi>r</mi><mi>e</mi><mi>O</mi><mi>r</mi><mi>d</mi><mi>e</mi><mi>r</mi><mo stretchy=\"false\">(</mo><mi>r</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi><mi>s</mi><mi>u</mi><mi>b</mi><mi>T</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">PreOrder(T)=Root(T)+PreOrder(left subT)+PreOrder(right subT)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">P</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">t</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">P</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">u</span><span class=\"mord mathdefault\">b</span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">P</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathdefault\">h</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">u</span><span class=\"mord mathdefault\">b</span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"mclose\">)</span></span></span></span></li>\n<li>中序遍历<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>I</mi><mi>n</mi><mi>O</mi><mi>r</mi><mi>d</mi><mi>e</mi><mi>r</mi><mo stretchy=\"false\">(</mo><mi>T</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>I</mi><mi>n</mi><mi>O</mi><mi>r</mi><mi>d</mi><mi>e</mi><mi>r</mi><mo stretchy=\"false\">(</mo><mi>l</mi><mi>e</mi><mi>f</mi><mi>t</mi><mi>s</mi><mi>u</mi><mi>b</mi><mi>T</mi><mo stretchy=\"false\">)</mo><mo>+</mo><mi>R</mi><mi>o</mi><mi>o</mi><mi>t</mi><mo stretchy=\"false\">(</mo><mi>T</mi><mo stretchy=\"false\">)</mo><mo>+</mo><mi>I</mi><mi>n</mi><mi>O</mi><mi>r</mi><mi>d</mi><mi>e</mi><mi>r</mi><mo stretchy=\"false\">(</mo><mi>r</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi><mi>s</mi><mi>u</mi><mi>b</mi><mi>T</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">InOrder(T)=InOrder(left subT)+Root(T)+InOrder(right subT)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">I</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">I</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">u</span><span class=\"mord mathdefault\">b</span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">t</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">I</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathdefault\">h</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">u</span><span class=\"mord mathdefault\">b</span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"mclose\">)</span></span></span></span></li>\n<li>后序遍历<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>P</mi><mi>o</mi><mi>s</mi><mi>t</mi><mi>O</mi><mi>r</mi><mi>d</mi><mi>e</mi><mi>r</mi><mo stretchy=\"false\">(</mo><mi>T</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>P</mi><mi>o</mi><mi>s</mi><mi>t</mi><mi>O</mi><mi>r</mi><mi>d</mi><mi>e</mi><mi>r</mi><mo stretchy=\"false\">(</mo><mi>l</mi><mi>e</mi><mi>f</mi><mi>t</mi><mi>s</mi><mi>u</mi><mi>b</mi><mi>T</mi><mo stretchy=\"false\">)</mo><mo>+</mo><mi>P</mi><mi>o</mi><mi>s</mi><mi>t</mi><mi>O</mi><mi>r</mi><mi>d</mi><mi>e</mi><mi>r</mi><mo stretchy=\"false\">(</mo><mi>R</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi><mi>s</mi><mi>u</mi><mi>b</mi><mi>T</mi><mo stretchy=\"false\">)</mo><mo>+</mo><mi>R</mi><mi>o</mi><mi>o</mi><mi>t</mi><mo stretchy=\"false\">(</mo><mi>T</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">PostOrder(T)=PostOrder(left subT)+PostOrder(Right subT)+Root(T)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">P</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">P</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">u</span><span class=\"mord mathdefault\">b</span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">P</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathdefault\">h</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">u</span><span class=\"mord mathdefault\">b</span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">t</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"mclose\">)</span></span></span></span></li>\n</ul>\n<p><img src=\"/2022/02/25/binary_tree_1/image.png\" alt=\"img\" loading=\"lazy\"></p>\n<h3 id=\"先序遍历\"><a class=\"markdownIt-Anchor\" href=\"#先序遍历\"></a> 先序遍历</h3>\n<ol>\n<li>递归实现</li>\n</ol>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">PreOrderTraverse</span><span class=\"token punctuation\">(</span>SearchTree T<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>T <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">Retrieve</span><span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">PreOrderTraverse</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">-></span>L_Child<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">PreOrderTraverse</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">-></span>R_Child<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<ol start=\"2\">\n<li>迭代实现</li>\n</ol>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">PreOrder</span><span class=\"token punctuation\">(</span>BiTree Root<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    stack <span class=\"token operator\">&lt;</span>BiTree<span class=\"token operator\">></span> s<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span> <span class=\"token comment\">//如果根节点不为空</span>\n        s<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//则令根节点入栈</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//在栈变空之前反复循环</span>\n    <span class=\"token punctuation\">&#123;</span> \n        root <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n        cout <span class=\"token operator\">&lt;&lt;</span> root<span class=\"token operator\">-></span>data<span class=\"token punctuation\">;</span> <span class=\"token comment\">//弹出并访问当前节点</span>\n        <span class=\"token comment\">//下面左右孩子的顺序不能颠倒</span>\n        <span class=\"token comment\">//必须先让右孩子先入栈，再让左孩子入栈。</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root<span class=\"token operator\">-></span>RChild<span class=\"token punctuation\">)</span>\n            s<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">-></span>RChild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//右孩子先入后出</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root<span class=\"token operator\">-></span>LChild<span class=\"token punctuation\">)</span>\n            s<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">-></span>LChild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//左孩子后入先出</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<p>我们通过一个实例来了解一下该迭代版本是如何工作的 :</p>\n<p><img src=\"/2022/02/25/binary_tree_1/v2-0ccba83c7b3dbf7b89964c04021025d9_720w.jpg\" alt=\"img\" loading=\"lazy\"></p>\n<h3 id=\"中序遍历\"><a class=\"markdownIt-Anchor\" href=\"#中序遍历\"></a> 中序遍历</h3>\n<ol>\n<li>递归实现</li>\n</ol>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">InOrderTraverse</span><span class=\"token punctuation\">(</span>SearchTree T<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>T <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">InOrderTraverse</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">-></span>L_Child<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">Retrieve</span><span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">InOrderTraverse</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">-></span>R_Child<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<ol start=\"2\">\n<li>迭代实现</li>\n</ol>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">InOrderTraverse</span><span class=\"token punctuation\">(</span>BiTree root<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n   Stack<span class=\"token operator\">&lt;</span>BiTree<span class=\"token operator\">></span> S<span class=\"token punctuation\">;</span> <span class=\"token comment\">//辅助栈</span>\n   <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>true<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span> \n      <span class=\"token punctuation\">&#123;</span>\n         S<span class=\"token punctuation\">.</span><span class=\"token function\">push</span> <span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//根节点进栈</span>\n         root <span class=\"token operator\">=</span> root<span class=\"token operator\">-></span>LChild<span class=\"token punctuation\">;</span> <span class=\"token comment\">//深入遍历左子树</span>\n      <span class=\"token punctuation\">&#125;</span> \n      <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>S<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> \n      <span class=\"token punctuation\">&#123;</span>\n         root <span class=\"token operator\">=</span> S<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//尚未访问的最低祖先节点退栈</span>\n         cout <span class=\"token operator\">&lt;&lt;</span> root<span class=\"token operator\">-></span>data<span class=\"token punctuation\">;</span> <span class=\"token comment\">//访问该祖先节点</span>\n         root <span class=\"token operator\">=</span> root<span class=\"token operator\">-></span>RChild<span class=\"token punctuation\">;</span> <span class=\"token comment\">//遍历祖先的右子树</span>\n      <span class=\"token punctuation\">&#125;</span> \n      <span class=\"token keyword\">else</span>\n         <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//遍历完成</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<h3 id=\"后序遍历\"><a class=\"markdownIt-Anchor\" href=\"#后序遍历\"></a> 后序遍历</h3>\n<ol>\n<li>递归实现</li>\n</ol>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">PostOrderTraverse</span><span class=\"token punctuation\">(</span>SearchTree T<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>T <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">PostOrderTraverse</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">-></span>L_Child<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">PostOrderTraverse</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">-></span>R_Child<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> T<span class=\"token operator\">-></span>Node <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<ol start=\"2\">\n<li>迭代实现</li>\n</ol>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">A</span> <span class=\"token expression\"><span class=\"token operator\">!</span>cur<span class=\"token operator\">-></span>Lchild <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>cur<span class=\"token operator\">-></span>Rchild</span></span>\n<span class=\"token comment\">//如果P不存在左孩子和右孩子，则可以直接访问它；</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">B</span> <span class=\"token expression\">pre<span class=\"token operator\">==</span>cur<span class=\"token operator\">-></span>Lchild <span class=\"token operator\">||</span> pre<span class=\"token operator\">==</span>cur<span class=\"token operator\">-></span>Rchild</span></span>\n<span class=\"token comment\">//P存在左孩子或者右孩子，但是其左孩子和右孩子都已被访问过了;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">PostOrder</span><span class=\"token punctuation\">(</span>BiTree Root<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>Root<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    stack <span class=\"token operator\">&lt;</span>BiTree<span class=\"token operator\">></span> s<span class=\"token punctuation\">;</span><span class=\"token comment\">//辅助栈</span>\n    BiTree cur<span class=\"token operator\">=</span>Root<span class=\"token punctuation\">,</span>pre<span class=\"token operator\">=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    s<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>Root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//根节点进栈</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        cur<span class=\"token operator\">=</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>A <span class=\"token operator\">||</span> B<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            cout <span class=\"token operator\">&lt;&lt;</span> cur<span class=\"token operator\">-></span>data<span class=\"token punctuation\">;</span>\n            s<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            pre<span class=\"token operator\">=</span>cur<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">else</span>\n        <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cur<span class=\"token operator\">-></span>Rchild<span class=\"token punctuation\">)</span>\n                s<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>cur<span class=\"token operator\">-></span>Rchild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cur<span class=\"token operator\">-></span>Lchild<span class=\"token punctuation\">)</span>\n                s<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>cur<span class=\"token operator\">-></span>Lchild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n</code></pre>\n<h2 id=\"main函数\"><a class=\"markdownIt-Anchor\" href=\"#main函数\"></a> main()函数</h2>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\tSearchTree My_Tree <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\tMy_Tree <span class=\"token operator\">=</span> <span class=\"token function\">MakeEmpty</span><span class=\"token punctuation\">(</span>My_Tree<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tMy_Tree <span class=\"token operator\">=</span> <span class=\"token function\">Insert</span><span class=\"token punctuation\">(</span>My_Tree<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tMy_Tree <span class=\"token operator\">=</span> <span class=\"token function\">Insert</span><span class=\"token punctuation\">(</span>My_Tree<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tMy_Tree <span class=\"token operator\">=</span> <span class=\"token function\">Insert</span><span class=\"token punctuation\">(</span>My_Tree<span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tMy_Tree <span class=\"token operator\">=</span> <span class=\"token function\">Insert</span><span class=\"token punctuation\">(</span>My_Tree<span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tMy_Tree <span class=\"token operator\">=</span> <span class=\"token function\">Insert</span><span class=\"token punctuation\">(</span>My_Tree<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">Find</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> My_Tree<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\tMy_Tree <span class=\"token operator\">=</span> <span class=\"token function\">Insert</span><span class=\"token punctuation\">(</span>My_Tree<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tMy_Tree <span class=\"token operator\">=</span> <span class=\"token function\">Delete</span><span class=\"token punctuation\">(</span>My_Tree<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tSearchTree min <span class=\"token operator\">=</span> <span class=\"token function\">FindMin</span><span class=\"token punctuation\">(</span>My_Tree<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">Retrieve</span><span class=\"token punctuation\">(</span>min<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">PreOrderTraverse</span><span class=\"token punctuation\">(</span>My_Tree<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">InOrderTraverse</span><span class=\"token punctuation\">(</span>My_Tree<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">PostOrderTraverse</span><span class=\"token punctuation\">(</span>My_Tree<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<p>下一篇文章：<a href=\"https://tonylsx611.github.io/2022/02/24/binary_tree_2/\">数组与链式二叉树之间的转换 | Tony (tonylsx611.github.io)</a></p>\n<p>注：本文图片部分选自http://data.biancheng.net/；如有侵权，请联系我。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a class=\"markdownIt-Anchor\" href=\"#前言\"></a> 前言</h2>\n<blockquote>\n<p>人为什么难做选择？</p>\n</blockquote>\n<p><strong>选择意味着放弃</strong></p>\n<p>你选择一方，也就意味着放弃了另一方。摆在你面前的选择项越接近，你的选择就会越困难，因为放弃其中任何一个选择项都不容易。如果摆在你面前的选择项对比明显，那么选择起来就会轻松许多，大家几乎都会毫不犹豫的选择“好”的选择项，放弃掉“差”的选择项。</p>\n<p><strong>选择永远都不是完美的</strong></p>\n<p>选择永远都不可能十全十美，只可能满足尽量多的侧重点。选择的时候想满足越多的侧重点，可能就会越难做出选择。所以在选择上不要过于追求完美。</p>\n<p>警惕<strong>逃避性选择</strong>——不知道自己要去哪儿，还要选择离开。</p>\n<p>有一种选择是对现状不满，想逃离这种现状，但是却不知道去哪里。举个例子，可能目前的公司有各种问题，比如开发流程不规范等，如果因为这些问题离开，可能就会从一个坑跳到另外一个更大的坑。当决定离开的时候，一定是自己有明确的目标，很清楚自己想要什么。</p>\n<h2 id=\"二叉树的定义\"><a class=\"markdownIt-Anchor\" href=\"#二叉树的定义\"></a> 二叉树的定义</h2>\n<p>二叉树要么为空，要么由根节点（root），左子树（left subtree）和右子树（right subtree）组成，而且左子树和右子树分别是一棵二叉树。说白了就是，二叉树的任何一个节点，<strong>有且只能有0，1，2棵子树</strong>。</p>\n<p><img src=\"/2022/02/25/binary_tree_1/2-1Q226195I0M1.gif\" alt=\"二叉树示意图\"></p>\n<h2 id=\"二叉树的实现\"><a class=\"markdownIt-Anchor\" href=\"#二叉树的实现\"></a> 二叉树的实现</h2>\n<p>二叉树的实现方式大致分两种，一种是以数组形式储存，另一种是以链表形式储存。以数组形式储存的好处是实现起来极其便捷，但是数组只能储存完全二叉树，就是二叉树的任何一个父节点（除了叶子节点）都要有两颗子树，如图所示：</p>\n<p><img src=\"/2022/02/25/binary_tree_1/2-1Q226195949495.gif\" alt=\"满二叉树示意图\"></p>\n<p>我们这里使用链表的方法维护一个二叉树，一个是这样能够实现更宽泛的二叉树形式，减少内存开销；另外以链表形式实现二叉树可以让我们更加深入理解二叉树的本质。</p>\n<p><img src=\"/2022/02/25/binary_tree_1/2-1Q22R035341H.gif\" alt=\"二叉树链式存储结构示意图\"></p>\n<h3 id=\"头文件\"><a class=\"markdownIt-Anchor\" href=\"#头文件\"></a> 头文件</h3>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\">once</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifndef</span> <span class=\"token expression\">BST_H</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">BST_H</span></span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">TreeNode</span>\n<span class=\"token punctuation\">&#123;</span>\n\tElementType Node<span class=\"token punctuation\">;</span>\n\tTreeNode<span class=\"token operator\">*</span> L_Child<span class=\"token punctuation\">;</span>\n\tTreeNode<span class=\"token operator\">*</span> R_Child<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">int</span> ElementType<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">TreeNode</span><span class=\"token operator\">*</span> PtrToNode<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">TreeNode</span><span class=\"token operator\">*</span> Position<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">TreeNode</span><span class=\"token operator\">*</span> SearchTree<span class=\"token punctuation\">;</span>\n\nSearchTree <span class=\"token function\">MakeEmpty</span><span class=\"token punctuation\">(</span>SearchTree T<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//initialize</span>\nPosition <span class=\"token function\">Find</span><span class=\"token punctuation\">(</span>ElementType X<span class=\"token punctuation\">,</span> SearchTree T<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nPosition <span class=\"token function\">FindMin</span><span class=\"token punctuation\">(</span>SearchTree T<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nPosition <span class=\"token function\">FindMax</span><span class=\"token punctuation\">(</span>SearchTree T<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nSearchTree <span class=\"token function\">Insert</span><span class=\"token punctuation\">(</span>SearchTree T<span class=\"token punctuation\">,</span> ElementType X<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nSearchTree <span class=\"token function\">Delete</span><span class=\"token punctuation\">(</span>SearchTree T<span class=\"token punctuation\">,</span> ElementType X<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nElementType <span class=\"token function\">Retrieve</span><span class=\"token punctuation\">(</span>Position P<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//Output</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">PreOrderTraverse</span><span class=\"token punctuation\">(</span>SearchTree T<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">InOrderTraverse</span><span class=\"token punctuation\">(</span>SearchTree T<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">PostOrderTraverse</span><span class=\"token punctuation\">(</span>SearchTree T<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></code></pre>\n<h3 id=\"创建二叉树\"><a class=\"markdownIt-Anchor\" href=\"#创建二叉树\"></a> 创建二叉树</h3>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\">SearchTree <span class=\"token function\">MakeEmpty</span><span class=\"token punctuation\">(</span>SearchTree T<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>T <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">MakeEmpty</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">-></span>L_Child<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">MakeEmpty</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">-></span>R_Child<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<h3 id=\"二叉树查找元素\"><a class=\"markdownIt-Anchor\" href=\"#二叉树查找元素\"></a> 二叉树查找元素</h3>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\">Position <span class=\"token function\">Find</span><span class=\"token punctuation\">(</span>ElementType X<span class=\"token punctuation\">,</span> SearchTree T<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>T <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>X <span class=\"token operator\">&lt;</span> T<span class=\"token operator\">-></span>Node<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token function\">Find</span><span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">,</span> T<span class=\"token operator\">-></span>L_Child<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>X <span class=\"token operator\">></span> T<span class=\"token operator\">-></span>Node<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token function\">Find</span><span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">,</span> T<span class=\"token operator\">-></span>R_Child<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">else</span>\n\t\t<span class=\"token keyword\">return</span> T<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<h3 id=\"查找最大最小值\"><a class=\"markdownIt-Anchor\" href=\"#查找最大最小值\"></a> 查找最大最小值</h3>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\">Position <span class=\"token function\">FindMin</span><span class=\"token punctuation\">(</span>SearchTree T<span class=\"token punctuation\">)</span><span class=\"token comment\">//递归写法</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>T <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>T<span class=\"token operator\">-></span>L_Child <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> T<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">else</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">FindMin</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">-></span>L_Child<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\nPosition <span class=\"token function\">FindMax</span><span class=\"token punctuation\">(</span>SearchTree T<span class=\"token punctuation\">)</span><span class=\"token comment\">//while循环写法</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>T <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">else</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">-></span>R_Child <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n\t\t\tT<span class=\"token operator\">=</span>T<span class=\"token operator\">-></span>R_Child<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> T<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<h3 id=\"二叉树插入元素\"><a class=\"markdownIt-Anchor\" href=\"#二叉树插入元素\"></a> 二叉树插入元素</h3>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\">SearchTree <span class=\"token function\">Insert</span><span class=\"token punctuation\">(</span>SearchTree T<span class=\"token punctuation\">,</span> ElementType X<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>T<span class=\"token operator\">==</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token comment\">// the fist element</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\tT <span class=\"token operator\">=</span> new TreeNode<span class=\"token punctuation\">;</span>\n\t\tT<span class=\"token operator\">-></span>L_Child <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\t\tT<span class=\"token operator\">-></span>R_Child <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\t\tT<span class=\"token operator\">-></span>Node <span class=\"token operator\">=</span> X<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">else</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>X <span class=\"token operator\">&lt;</span> T<span class=\"token operator\">-></span>Node<span class=\"token punctuation\">)</span><span class=\"token comment\">//put X on the left</span>\n\t\t\tT<span class=\"token operator\">-></span>L_Child<span class=\"token operator\">=</span><span class=\"token function\">Insert</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">-></span>L_Child<span class=\"token punctuation\">,</span> X<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">else</span>             <span class=\"token comment\">//put X on the right</span>\n\t\t\tT<span class=\"token operator\">-></span>R_Child <span class=\"token operator\">=</span> <span class=\"token function\">Insert</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">-></span>R_Child<span class=\"token punctuation\">,</span> X<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> T<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<h3 id=\"二叉树删除元素\"><a class=\"markdownIt-Anchor\" href=\"#二叉树删除元素\"></a> 二叉树删除元素</h3>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\">SearchTree <span class=\"token function\">Delete</span><span class=\"token punctuation\">(</span>SearchTree T<span class=\"token punctuation\">,</span> ElementType X<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>T <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>X <span class=\"token operator\">&lt;</span> T<span class=\"token operator\">-></span>Node<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\tT<span class=\"token operator\">-></span>L_Child<span class=\"token operator\">=</span> <span class=\"token function\">Delete</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">-></span>L_Child<span class=\"token punctuation\">,</span> X<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>X <span class=\"token operator\">></span> T<span class=\"token operator\">-></span>Node<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\tT<span class=\"token operator\">-></span>R_Child<span class=\"token operator\">=</span><span class=\"token function\">Delete</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">-></span>R_Child<span class=\"token punctuation\">,</span> X<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">else</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>T<span class=\"token operator\">-></span>L_Child <span class=\"token operator\">&amp;&amp;</span> T<span class=\"token operator\">-></span>R_Child<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 2  children</span>\n\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\tPosition minn <span class=\"token operator\">=</span> <span class=\"token function\">FindMin</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">-></span>R_Child<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tT<span class=\"token operator\">-></span>Node <span class=\"token operator\">=</span> minn<span class=\"token operator\">-></span>Node<span class=\"token punctuation\">;</span>\n\t\t\tT<span class=\"token operator\">-></span>R_Child <span class=\"token operator\">=</span> <span class=\"token function\">Delete</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">-></span>R_Child<span class=\"token punctuation\">,</span> T<span class=\"token operator\">-></span>Node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token keyword\">else</span>           <span class=\"token comment\">// 1  or  0 child</span>\n\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\tPosition temp <span class=\"token operator\">=</span> T<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>T<span class=\"token operator\">-></span>L_Child <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n\t\t\t\tT <span class=\"token operator\">=</span> T<span class=\"token operator\">-></span>R_Child<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>T<span class=\"token operator\">-></span>R_Child <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n\t\t\t\tT <span class=\"token operator\">=</span> T<span class=\"token operator\">-></span>L_Child<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> T<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<h2 id=\"二叉树的遍历\"><a class=\"markdownIt-Anchor\" href=\"#二叉树的遍历\"></a> 二叉树的遍历</h2>\n<ul>\n<li>先序遍历<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>P</mi><mi>r</mi><mi>e</mi><mi>O</mi><mi>r</mi><mi>d</mi><mi>e</mi><mi>r</mi><mo stretchy=\"false\">(</mo><mi>T</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>R</mi><mi>o</mi><mi>o</mi><mi>t</mi><mo stretchy=\"false\">(</mo><mi>T</mi><mo stretchy=\"false\">)</mo><mo>+</mo><mi>P</mi><mi>r</mi><mi>e</mi><mi>O</mi><mi>r</mi><mi>d</mi><mi>e</mi><mi>r</mi><mo stretchy=\"false\">(</mo><mi>l</mi><mi>e</mi><mi>f</mi><mi>t</mi><mi>s</mi><mi>u</mi><mi>b</mi><mi>T</mi><mo stretchy=\"false\">)</mo><mo>+</mo><mi>P</mi><mi>r</mi><mi>e</mi><mi>O</mi><mi>r</mi><mi>d</mi><mi>e</mi><mi>r</mi><mo stretchy=\"false\">(</mo><mi>r</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi><mi>s</mi><mi>u</mi><mi>b</mi><mi>T</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">PreOrder(T)=Root(T)+PreOrder(left subT)+PreOrder(right subT)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">P</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">t</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">P</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">u</span><span class=\"mord mathdefault\">b</span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">P</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathdefault\">h</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">u</span><span class=\"mord mathdefault\">b</span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"mclose\">)</span></span></span></span></li>\n<li>中序遍历<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>I</mi><mi>n</mi><mi>O</mi><mi>r</mi><mi>d</mi><mi>e</mi><mi>r</mi><mo stretchy=\"false\">(</mo><mi>T</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>I</mi><mi>n</mi><mi>O</mi><mi>r</mi><mi>d</mi><mi>e</mi><mi>r</mi><mo stretchy=\"false\">(</mo><mi>l</mi><mi>e</mi><mi>f</mi><mi>t</mi><mi>s</mi><mi>u</mi><mi>b</mi><mi>T</mi><mo stretchy=\"false\">)</mo><mo>+</mo><mi>R</mi><mi>o</mi><mi>o</mi><mi>t</mi><mo stretchy=\"false\">(</mo><mi>T</mi><mo stretchy=\"false\">)</mo><mo>+</mo><mi>I</mi><mi>n</mi><mi>O</mi><mi>r</mi><mi>d</mi><mi>e</mi><mi>r</mi><mo stretchy=\"false\">(</mo><mi>r</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi><mi>s</mi><mi>u</mi><mi>b</mi><mi>T</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">InOrder(T)=InOrder(left subT)+Root(T)+InOrder(right subT)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">I</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">I</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">u</span><span class=\"mord mathdefault\">b</span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">t</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">I</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathdefault\">h</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">u</span><span class=\"mord mathdefault\">b</span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"mclose\">)</span></span></span></span></li>\n<li>后序遍历<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>P</mi><mi>o</mi><mi>s</mi><mi>t</mi><mi>O</mi><mi>r</mi><mi>d</mi><mi>e</mi><mi>r</mi><mo stretchy=\"false\">(</mo><mi>T</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>P</mi><mi>o</mi><mi>s</mi><mi>t</mi><mi>O</mi><mi>r</mi><mi>d</mi><mi>e</mi><mi>r</mi><mo stretchy=\"false\">(</mo><mi>l</mi><mi>e</mi><mi>f</mi><mi>t</mi><mi>s</mi><mi>u</mi><mi>b</mi><mi>T</mi><mo stretchy=\"false\">)</mo><mo>+</mo><mi>P</mi><mi>o</mi><mi>s</mi><mi>t</mi><mi>O</mi><mi>r</mi><mi>d</mi><mi>e</mi><mi>r</mi><mo stretchy=\"false\">(</mo><mi>R</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi><mi>s</mi><mi>u</mi><mi>b</mi><mi>T</mi><mo stretchy=\"false\">)</mo><mo>+</mo><mi>R</mi><mi>o</mi><mi>o</mi><mi>t</mi><mo stretchy=\"false\">(</mo><mi>T</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">PostOrder(T)=PostOrder(left subT)+PostOrder(Right subT)+Root(T)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">P</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">P</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">u</span><span class=\"mord mathdefault\">b</span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">P</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathdefault\">h</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">u</span><span class=\"mord mathdefault\">b</span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">t</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"mclose\">)</span></span></span></span></li>\n</ul>\n<p><img src=\"/2022/02/25/binary_tree_1/image.png\" alt=\"img\"></p>\n<h3 id=\"先序遍历\"><a class=\"markdownIt-Anchor\" href=\"#先序遍历\"></a> 先序遍历</h3>\n<ol>\n<li>递归实现</li>\n</ol>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">PreOrderTraverse</span><span class=\"token punctuation\">(</span>SearchTree T<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>T <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">Retrieve</span><span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">PreOrderTraverse</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">-></span>L_Child<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">PreOrderTraverse</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">-></span>R_Child<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<ol start=\"2\">\n<li>迭代实现</li>\n</ol>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">PreOrder</span><span class=\"token punctuation\">(</span>BiTree Root<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    stack <span class=\"token operator\">&lt;</span>BiTree<span class=\"token operator\">></span> s<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span> <span class=\"token comment\">//如果根节点不为空</span>\n        s<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//则令根节点入栈</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//在栈变空之前反复循环</span>\n    <span class=\"token punctuation\">&#123;</span> \n        root <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n        cout <span class=\"token operator\">&lt;&lt;</span> root<span class=\"token operator\">-></span>data<span class=\"token punctuation\">;</span> <span class=\"token comment\">//弹出并访问当前节点</span>\n        <span class=\"token comment\">//下面左右孩子的顺序不能颠倒</span>\n        <span class=\"token comment\">//必须先让右孩子先入栈，再让左孩子入栈。</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root<span class=\"token operator\">-></span>RChild<span class=\"token punctuation\">)</span>\n            s<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">-></span>RChild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//右孩子先入后出</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root<span class=\"token operator\">-></span>LChild<span class=\"token punctuation\">)</span>\n            s<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">-></span>LChild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//左孩子后入先出</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<p>我们通过一个实例来了解一下该迭代版本是如何工作的 :</p>\n<p><img src=\"/2022/02/25/binary_tree_1/v2-0ccba83c7b3dbf7b89964c04021025d9_720w.jpg\" alt=\"img\"></p>\n<h3 id=\"中序遍历\"><a class=\"markdownIt-Anchor\" href=\"#中序遍历\"></a> 中序遍历</h3>\n<ol>\n<li>递归实现</li>\n</ol>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">InOrderTraverse</span><span class=\"token punctuation\">(</span>SearchTree T<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>T <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">InOrderTraverse</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">-></span>L_Child<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">Retrieve</span><span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">InOrderTraverse</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">-></span>R_Child<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<ol start=\"2\">\n<li>迭代实现</li>\n</ol>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">InOrderTraverse</span><span class=\"token punctuation\">(</span>BiTree root<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n   Stack<span class=\"token operator\">&lt;</span>BiTree<span class=\"token operator\">></span> S<span class=\"token punctuation\">;</span> <span class=\"token comment\">//辅助栈</span>\n   <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>true<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span> \n      <span class=\"token punctuation\">&#123;</span>\n         S<span class=\"token punctuation\">.</span><span class=\"token function\">push</span> <span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//根节点进栈</span>\n         root <span class=\"token operator\">=</span> root<span class=\"token operator\">-></span>LChild<span class=\"token punctuation\">;</span> <span class=\"token comment\">//深入遍历左子树</span>\n      <span class=\"token punctuation\">&#125;</span> \n      <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>S<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> \n      <span class=\"token punctuation\">&#123;</span>\n         root <span class=\"token operator\">=</span> S<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//尚未访问的最低祖先节点退栈</span>\n         cout <span class=\"token operator\">&lt;&lt;</span> root<span class=\"token operator\">-></span>data<span class=\"token punctuation\">;</span> <span class=\"token comment\">//访问该祖先节点</span>\n         root <span class=\"token operator\">=</span> root<span class=\"token operator\">-></span>RChild<span class=\"token punctuation\">;</span> <span class=\"token comment\">//遍历祖先的右子树</span>\n      <span class=\"token punctuation\">&#125;</span> \n      <span class=\"token keyword\">else</span>\n         <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//遍历完成</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<h3 id=\"后序遍历\"><a class=\"markdownIt-Anchor\" href=\"#后序遍历\"></a> 后序遍历</h3>\n<ol>\n<li>递归实现</li>\n</ol>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">PostOrderTraverse</span><span class=\"token punctuation\">(</span>SearchTree T<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>T <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">PostOrderTraverse</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">-></span>L_Child<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">PostOrderTraverse</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">-></span>R_Child<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> T<span class=\"token operator\">-></span>Node <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<ol start=\"2\">\n<li>迭代实现</li>\n</ol>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">A</span> <span class=\"token expression\"><span class=\"token operator\">!</span>cur<span class=\"token operator\">-></span>Lchild <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>cur<span class=\"token operator\">-></span>Rchild</span></span>\n<span class=\"token comment\">//如果P不存在左孩子和右孩子，则可以直接访问它；</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">B</span> <span class=\"token expression\">pre<span class=\"token operator\">==</span>cur<span class=\"token operator\">-></span>Lchild <span class=\"token operator\">||</span> pre<span class=\"token operator\">==</span>cur<span class=\"token operator\">-></span>Rchild</span></span>\n<span class=\"token comment\">//P存在左孩子或者右孩子，但是其左孩子和右孩子都已被访问过了;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">PostOrder</span><span class=\"token punctuation\">(</span>BiTree Root<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>Root<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    stack <span class=\"token operator\">&lt;</span>BiTree<span class=\"token operator\">></span> s<span class=\"token punctuation\">;</span><span class=\"token comment\">//辅助栈</span>\n    BiTree cur<span class=\"token operator\">=</span>Root<span class=\"token punctuation\">,</span>pre<span class=\"token operator\">=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    s<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>Root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//根节点进栈</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        cur<span class=\"token operator\">=</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>A <span class=\"token operator\">||</span> B<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            cout <span class=\"token operator\">&lt;&lt;</span> cur<span class=\"token operator\">-></span>data<span class=\"token punctuation\">;</span>\n            s<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            pre<span class=\"token operator\">=</span>cur<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">else</span>\n        <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cur<span class=\"token operator\">-></span>Rchild<span class=\"token punctuation\">)</span>\n                s<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>cur<span class=\"token operator\">-></span>Rchild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cur<span class=\"token operator\">-></span>Lchild<span class=\"token punctuation\">)</span>\n                s<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>cur<span class=\"token operator\">-></span>Lchild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n</code></pre>\n<h2 id=\"main函数\"><a class=\"markdownIt-Anchor\" href=\"#main函数\"></a> main()函数</h2>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\tSearchTree My_Tree <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\tMy_Tree <span class=\"token operator\">=</span> <span class=\"token function\">MakeEmpty</span><span class=\"token punctuation\">(</span>My_Tree<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tMy_Tree <span class=\"token operator\">=</span> <span class=\"token function\">Insert</span><span class=\"token punctuation\">(</span>My_Tree<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tMy_Tree <span class=\"token operator\">=</span> <span class=\"token function\">Insert</span><span class=\"token punctuation\">(</span>My_Tree<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tMy_Tree <span class=\"token operator\">=</span> <span class=\"token function\">Insert</span><span class=\"token punctuation\">(</span>My_Tree<span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tMy_Tree <span class=\"token operator\">=</span> <span class=\"token function\">Insert</span><span class=\"token punctuation\">(</span>My_Tree<span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tMy_Tree <span class=\"token operator\">=</span> <span class=\"token function\">Insert</span><span class=\"token punctuation\">(</span>My_Tree<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">Find</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> My_Tree<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\tMy_Tree <span class=\"token operator\">=</span> <span class=\"token function\">Insert</span><span class=\"token punctuation\">(</span>My_Tree<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tMy_Tree <span class=\"token operator\">=</span> <span class=\"token function\">Delete</span><span class=\"token punctuation\">(</span>My_Tree<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tSearchTree min <span class=\"token operator\">=</span> <span class=\"token function\">FindMin</span><span class=\"token punctuation\">(</span>My_Tree<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">Retrieve</span><span class=\"token punctuation\">(</span>min<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">PreOrderTraverse</span><span class=\"token punctuation\">(</span>My_Tree<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">InOrderTraverse</span><span class=\"token punctuation\">(</span>My_Tree<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">PostOrderTraverse</span><span class=\"token punctuation\">(</span>My_Tree<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<p>下一篇文章：<a href=\"https://tonylsx611.github.io/2022/02/24/binary_tree_2/\">数组与链式二叉树之间的转换 | Tony (tonylsx611.github.io)</a></p>\n<p>注：本文图片部分选自http://data.biancheng.net/；如有侵权，请联系我。</p>\n"},{"title":"Hexo 网站搭建指南","date":"2022-02-23T19:14:29.000Z","author":"Tony","_content":"# Hexo 网站搭建指南\n\nWelcome to [Hexo](https://hexo.io/)! \n\nThis is a Guideline of building your own hexo, which is written in English, but easy to understand!\n\n## Preparation and Installation\n\n### Git Installation\n\n- Linux/Mac:\n\n```bash\nsudo apt install git\n```\n\n- Windows:\n\nOfficial link: [Download git](https://gitforwindows.org/)\n\n- Check whether installed or not:\n\n```bash\ngit --version\n```\n\n### Nodejs Installation\n\n- Linux/Mac:\n\n```bash\nsudo apt install nodejs\nsudo aot install npm\n```\n\n- Windows:\n\nOfficial link: [nodejs](https://nodejs.org/en/download/) (Suggest you to choose LTS version)\n\n- Check whether installed or not:\n\n```bash\nnode -v\nnpm -v\n```\n\n### Hexo Installation\n\n- Linux/Mac:\n\n```bash\nsudo npm install -g hexo-cli\n```\n\n- Windows:\n\n```bash\nnpm install -g hexo-cli\n```\n\n- Check whether installed or not:\n\n```bash\nhexo -v\n```\n\n## Deploy local Hexo\n\n​\t\tFirst you need to **choose or create a folder** to storage the local hexo website. For instance, in `C:/Software/My_Hexo`.\n\n​\t\tThen right click the folder, click `open in Windows terminal`; or just use command line to get into that folder.\n\n```bash\nsudo hexo init Mybolg\nls Myblog\nsudo npm install\n```\n\n​\t\t*Note that you can replace `Mybolg` into any word you like.\n\n​\t\tNow you can see some files inside the folder, but only three folders you need to concerntrated.\n\n![image-20220308165404552](Hexo_creation/image-20220308165404552.png)\n\n- node_modules: 依赖包\n- public：存放生成的页面\n- scaffolds：生成文章的一些模板\n- ==source==：你的文章和素材放在这里\n- ==themes==：字面意思\n- ==_config.yml==: 博客的配置文件\n\n## Use GitHub to host\n\n### Create a new repository on GitHub\n\n​\t\tFirstly, you need to have a GitHub account…\n\n​\t\tThen, create a **new repository** on GitHub and named `yourusername.github.io`, note that you **must** named like this (`yourusername` is your user name), otherwise the deployment cannot be recognized.\n\n![image-20220308165502809](Hexo_creation/image-20220308165502809.png) \n\n### Add SSH key to GitHub\n\n​\t\tBack to the terminal, generate the SSH and add it into GitHub so that GitHub can know whether the your computer are visiting the corresponding account.\n\n```bash\ngit cofig --global user.name \"yourusername\"\ngit cofig --global user.email \"youremail\"\nssh-keygen -t rsa -C \"youremail\"\n```\n\n​\t\tThe computer then will tell you the path of `.ssh`, find it on your computer, and open it via notepad.\n\n​\t\tTo say it simpler, SSH is just the ID of your computer, GitHub recognized your computer via this ID. `id_rsa` is your private key that you cannot show it to others, while `id_rsa.pub` is the public key, you can copy the info to GitHub.\n\n​\t\t`Github -> settings -> personal settings -> SSH and PGP keys -> New SSH key`\n\n​\t\tYou can verify whether add the SSH key successfully via your terminal:\n\n```bash\nssh -T git@github.com\n```\n\n### Deploy hexo to GitHub\n\n​\t\tOpen your folder, remember the three folders that I let you to concentrate? Now it turns into `_config.yml` file, open it and add something in the end:\n\n```bash\ndeploy:\n  type: git\n  repo: https://github.com/yourusername/yourusername.github.io.git\n  branch: master\n```\n\n​\t\t*Notice the format must be totally same with me, pay attention to the **blanks**.\n\n​\t\tBefore deployment, you need to install the `deploy-git` in your computer so that you can deploy your own hexo into GitHub.\n\n```bash\nsudo npm install hexo-deployer-git --save\n```\n\n​\t\tFinally, deploy your website via the following commands, and you can visit your bolg via `http://yourusername.github.io`.\n\n```bash\nhexo clean\nhexo deploy\nhexo generate\n```\n\n---\n\n注：本文部分内容引用自[hexo史上最全搭建教程_Fangzh的技术博客](https://blog.csdn.net/sinat_37781304/article/details/82729029)， 如有侵权，请联系我。","source":"_posts/Hexo_creation.md","raw":"---\ntitle: Hexo 网站搭建指南\ndate: 2022-02-24 03:14:29\nauthor: Tony\ntags: \n\t- Hexo\ncategories:\n\t- Hexo搭建\n---\n# Hexo 网站搭建指南\n\nWelcome to [Hexo](https://hexo.io/)! \n\nThis is a Guideline of building your own hexo, which is written in English, but easy to understand!\n\n## Preparation and Installation\n\n### Git Installation\n\n- Linux/Mac:\n\n```bash\nsudo apt install git\n```\n\n- Windows:\n\nOfficial link: [Download git](https://gitforwindows.org/)\n\n- Check whether installed or not:\n\n```bash\ngit --version\n```\n\n### Nodejs Installation\n\n- Linux/Mac:\n\n```bash\nsudo apt install nodejs\nsudo aot install npm\n```\n\n- Windows:\n\nOfficial link: [nodejs](https://nodejs.org/en/download/) (Suggest you to choose LTS version)\n\n- Check whether installed or not:\n\n```bash\nnode -v\nnpm -v\n```\n\n### Hexo Installation\n\n- Linux/Mac:\n\n```bash\nsudo npm install -g hexo-cli\n```\n\n- Windows:\n\n```bash\nnpm install -g hexo-cli\n```\n\n- Check whether installed or not:\n\n```bash\nhexo -v\n```\n\n## Deploy local Hexo\n\n​\t\tFirst you need to **choose or create a folder** to storage the local hexo website. For instance, in `C:/Software/My_Hexo`.\n\n​\t\tThen right click the folder, click `open in Windows terminal`; or just use command line to get into that folder.\n\n```bash\nsudo hexo init Mybolg\nls Myblog\nsudo npm install\n```\n\n​\t\t*Note that you can replace `Mybolg` into any word you like.\n\n​\t\tNow you can see some files inside the folder, but only three folders you need to concerntrated.\n\n![image-20220308165404552](Hexo_creation/image-20220308165404552.png)\n\n- node_modules: 依赖包\n- public：存放生成的页面\n- scaffolds：生成文章的一些模板\n- ==source==：你的文章和素材放在这里\n- ==themes==：字面意思\n- ==_config.yml==: 博客的配置文件\n\n## Use GitHub to host\n\n### Create a new repository on GitHub\n\n​\t\tFirstly, you need to have a GitHub account…\n\n​\t\tThen, create a **new repository** on GitHub and named `yourusername.github.io`, note that you **must** named like this (`yourusername` is your user name), otherwise the deployment cannot be recognized.\n\n![image-20220308165502809](Hexo_creation/image-20220308165502809.png) \n\n### Add SSH key to GitHub\n\n​\t\tBack to the terminal, generate the SSH and add it into GitHub so that GitHub can know whether the your computer are visiting the corresponding account.\n\n```bash\ngit cofig --global user.name \"yourusername\"\ngit cofig --global user.email \"youremail\"\nssh-keygen -t rsa -C \"youremail\"\n```\n\n​\t\tThe computer then will tell you the path of `.ssh`, find it on your computer, and open it via notepad.\n\n​\t\tTo say it simpler, SSH is just the ID of your computer, GitHub recognized your computer via this ID. `id_rsa` is your private key that you cannot show it to others, while `id_rsa.pub` is the public key, you can copy the info to GitHub.\n\n​\t\t`Github -> settings -> personal settings -> SSH and PGP keys -> New SSH key`\n\n​\t\tYou can verify whether add the SSH key successfully via your terminal:\n\n```bash\nssh -T git@github.com\n```\n\n### Deploy hexo to GitHub\n\n​\t\tOpen your folder, remember the three folders that I let you to concentrate? Now it turns into `_config.yml` file, open it and add something in the end:\n\n```bash\ndeploy:\n  type: git\n  repo: https://github.com/yourusername/yourusername.github.io.git\n  branch: master\n```\n\n​\t\t*Notice the format must be totally same with me, pay attention to the **blanks**.\n\n​\t\tBefore deployment, you need to install the `deploy-git` in your computer so that you can deploy your own hexo into GitHub.\n\n```bash\nsudo npm install hexo-deployer-git --save\n```\n\n​\t\tFinally, deploy your website via the following commands, and you can visit your bolg via `http://yourusername.github.io`.\n\n```bash\nhexo clean\nhexo deploy\nhexo generate\n```\n\n---\n\n注：本文部分内容引用自[hexo史上最全搭建教程_Fangzh的技术博客](https://blog.csdn.net/sinat_37781304/article/details/82729029)， 如有侵权，请联系我。","slug":"Hexo_creation","published":1,"updated":"2022-03-13T14:32:27.863Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1rj2n5b001egwcyhjs0b9kk","content":"<h1 id=\"hexo-网站搭建指南\"><a class=\"markdownIt-Anchor\" href=\"#hexo-网站搭建指南\"></a> Hexo 网站搭建指南</h1>\n<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>!</p>\n<p>This is a Guideline of building your own hexo, which is written in English, but easy to understand!</p>\n<h2 id=\"preparation-and-installation\"><a class=\"markdownIt-Anchor\" href=\"#preparation-and-installation\"></a> Preparation and Installation</h2>\n<h3 id=\"git-installation\"><a class=\"markdownIt-Anchor\" href=\"#git-installation\"></a> Git Installation</h3>\n<ul>\n<li>Linux/Mac:</li>\n</ul>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> <span class=\"token function\">git</span></code></pre>\n<ul>\n<li>Windows:</li>\n</ul>\n<p>Official link: <a href=\"https://gitforwindows.org/\">Download git</a></p>\n<ul>\n<li>Check whether installed or not:</li>\n</ul>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> --version</code></pre>\n<h3 id=\"nodejs-installation\"><a class=\"markdownIt-Anchor\" href=\"#nodejs-installation\"></a> Nodejs Installation</h3>\n<ul>\n<li>Linux/Mac:</li>\n</ul>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> nodejs\n<span class=\"token function\">sudo</span> aot <span class=\"token function\">install</span> <span class=\"token function\">npm</span></code></pre>\n<ul>\n<li>Windows:</li>\n</ul>\n<p>Official link: <a href=\"https://nodejs.org/en/download/\">nodejs</a> (Suggest you to choose LTS version)</p>\n<ul>\n<li>Check whether installed or not:</li>\n</ul>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">node</span> -v\n<span class=\"token function\">npm</span> -v</code></pre>\n<h3 id=\"hexo-installation\"><a class=\"markdownIt-Anchor\" href=\"#hexo-installation\"></a> Hexo Installation</h3>\n<ul>\n<li>Linux/Mac:</li>\n</ul>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">npm</span> <span class=\"token function\">install</span> -g hexo-cli</code></pre>\n<ul>\n<li>Windows:</li>\n</ul>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> -g hexo-cli</code></pre>\n<ul>\n<li>Check whether installed or not:</li>\n</ul>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">hexo -v</code></pre>\n<h2 id=\"deploy-local-hexo\"><a class=\"markdownIt-Anchor\" href=\"#deploy-local-hexo\"></a> Deploy local Hexo</h2>\n<p>​\t\tFirst you need to <strong>choose or create a folder</strong> to storage the local hexo website. For instance, in <code>C:/Software/My_Hexo</code>.</p>\n<p>​\t\tThen right click the folder, click <code>open in Windows terminal</code>; or just use command line to get into that folder.</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> hexo init Mybolg\n<span class=\"token function\">ls</span> Myblog\n<span class=\"token function\">sudo</span> <span class=\"token function\">npm</span> <span class=\"token function\">install</span></code></pre>\n<p>​\t\t*Note that you can replace <code>Mybolg</code> into any word you like.</p>\n<p>​\t\tNow you can see some files inside the folder, but only three folders you need to concerntrated.</p>\n<p><img src=\"/2022/02/24/Hexo_creation/image-20220308165404552.png\" alt=\"image-20220308165404552\" loading=\"lazy\"></p>\n<ul>\n<li>node_modules: 依赖包</li>\n<li>public：存放生成的页面</li>\n<li>scaffolds：生成文章的一些模板</li>\n<li><mark>source</mark>：你的文章和素材放在这里</li>\n<li><mark>themes</mark>：字面意思</li>\n<li><mark>_config.yml</mark>: 博客的配置文件</li>\n</ul>\n<h2 id=\"use-github-to-host\"><a class=\"markdownIt-Anchor\" href=\"#use-github-to-host\"></a> Use GitHub to host</h2>\n<h3 id=\"create-a-new-repository-on-github\"><a class=\"markdownIt-Anchor\" href=\"#create-a-new-repository-on-github\"></a> Create a new repository on GitHub</h3>\n<p>​\t\tFirstly, you need to have a GitHub account…</p>\n<p>​\t\tThen, create a <strong>new repository</strong> on GitHub and named <code>yourusername.github.io</code>, note that you <strong>must</strong> named like this (<code>yourusername</code> is your user name), otherwise the deployment cannot be recognized.</p>\n<p><img src=\"/2022/02/24/Hexo_creation/image-20220308165502809.png\" alt=\"image-20220308165502809\" loading=\"lazy\"></p>\n<h3 id=\"add-ssh-key-to-github\"><a class=\"markdownIt-Anchor\" href=\"#add-ssh-key-to-github\"></a> Add SSH key to GitHub</h3>\n<p>​\t\tBack to the terminal, generate the SSH and add it into GitHub so that GitHub can know whether the your computer are visiting the corresponding account.</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> cofig --global user.name <span class=\"token string\">\"yourusername\"</span>\n<span class=\"token function\">git</span> cofig --global user.email <span class=\"token string\">\"youremail\"</span>\nssh-keygen -t rsa -C <span class=\"token string\">\"youremail\"</span></code></pre>\n<p>​\t\tThe computer then will tell you the path of <code>.ssh</code>, find it on your computer, and open it via notepad.</p>\n<p>​\t\tTo say it simpler, SSH is just the ID of your computer, GitHub recognized your computer via this ID. <code>id_rsa</code> is your private key that you cannot show it to others, while <code>id_rsa.pub</code> is the public key, you can copy the info to GitHub.</p>\n<p>​\t\t<code>Github -&gt; settings -&gt; personal settings -&gt; SSH and PGP keys -&gt; New SSH key</code></p>\n<p>​\t\tYou can verify whether add the SSH key successfully via your terminal:</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">ssh</span> -T git@github.com</code></pre>\n<h3 id=\"deploy-hexo-to-github\"><a class=\"markdownIt-Anchor\" href=\"#deploy-hexo-to-github\"></a> Deploy hexo to GitHub</h3>\n<p>​\t\tOpen your folder, remember the three folders that I let you to concentrate? Now it turns into <code>_config.yml</code> file, open it and add something in the end:</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">deploy:\n  type: <span class=\"token function\">git</span>\n  repo: https://github.com/yourusername/yourusername.github.io.git\n  branch: master</code></pre>\n<p>​\t\t*Notice the format must be totally same with me, pay attention to the <strong>blanks</strong>.</p>\n<p>​\t\tBefore deployment, you need to install the <code>deploy-git</code> in your computer so that you can deploy your own hexo into GitHub.</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">npm</span> <span class=\"token function\">install</span> hexo-deployer-git --save</code></pre>\n<p>​\t\tFinally, deploy your website via the following commands, and you can visit your bolg via <code>http://yourusername.github.io</code>.</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">hexo clean\nhexo deploy\nhexo generate</code></pre>\n<hr>\n<p>注：本文部分内容引用自<a href=\"https://blog.csdn.net/sinat_37781304/article/details/82729029\">hexo史上最全搭建教程_Fangzh的技术博客</a>， 如有侵权，请联系我。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"hexo-网站搭建指南\"><a class=\"markdownIt-Anchor\" href=\"#hexo-网站搭建指南\"></a> Hexo 网站搭建指南</h1>\n<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>!</p>\n<p>This is a Guideline of building your own hexo, which is written in English, but easy to understand!</p>\n<h2 id=\"preparation-and-installation\"><a class=\"markdownIt-Anchor\" href=\"#preparation-and-installation\"></a> Preparation and Installation</h2>\n<h3 id=\"git-installation\"><a class=\"markdownIt-Anchor\" href=\"#git-installation\"></a> Git Installation</h3>\n<ul>\n<li>Linux/Mac:</li>\n</ul>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> <span class=\"token function\">git</span></code></pre>\n<ul>\n<li>Windows:</li>\n</ul>\n<p>Official link: <a href=\"https://gitforwindows.org/\">Download git</a></p>\n<ul>\n<li>Check whether installed or not:</li>\n</ul>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> --version</code></pre>\n<h3 id=\"nodejs-installation\"><a class=\"markdownIt-Anchor\" href=\"#nodejs-installation\"></a> Nodejs Installation</h3>\n<ul>\n<li>Linux/Mac:</li>\n</ul>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> nodejs\n<span class=\"token function\">sudo</span> aot <span class=\"token function\">install</span> <span class=\"token function\">npm</span></code></pre>\n<ul>\n<li>Windows:</li>\n</ul>\n<p>Official link: <a href=\"https://nodejs.org/en/download/\">nodejs</a> (Suggest you to choose LTS version)</p>\n<ul>\n<li>Check whether installed or not:</li>\n</ul>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">node</span> -v\n<span class=\"token function\">npm</span> -v</code></pre>\n<h3 id=\"hexo-installation\"><a class=\"markdownIt-Anchor\" href=\"#hexo-installation\"></a> Hexo Installation</h3>\n<ul>\n<li>Linux/Mac:</li>\n</ul>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">npm</span> <span class=\"token function\">install</span> -g hexo-cli</code></pre>\n<ul>\n<li>Windows:</li>\n</ul>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> -g hexo-cli</code></pre>\n<ul>\n<li>Check whether installed or not:</li>\n</ul>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">hexo -v</code></pre>\n<h2 id=\"deploy-local-hexo\"><a class=\"markdownIt-Anchor\" href=\"#deploy-local-hexo\"></a> Deploy local Hexo</h2>\n<p>​\t\tFirst you need to <strong>choose or create a folder</strong> to storage the local hexo website. For instance, in <code>C:/Software/My_Hexo</code>.</p>\n<p>​\t\tThen right click the folder, click <code>open in Windows terminal</code>; or just use command line to get into that folder.</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> hexo init Mybolg\n<span class=\"token function\">ls</span> Myblog\n<span class=\"token function\">sudo</span> <span class=\"token function\">npm</span> <span class=\"token function\">install</span></code></pre>\n<p>​\t\t*Note that you can replace <code>Mybolg</code> into any word you like.</p>\n<p>​\t\tNow you can see some files inside the folder, but only three folders you need to concerntrated.</p>\n<p><img src=\"/2022/02/24/Hexo_creation/image-20220308165404552.png\" alt=\"image-20220308165404552\"></p>\n<ul>\n<li>node_modules: 依赖包</li>\n<li>public：存放生成的页面</li>\n<li>scaffolds：生成文章的一些模板</li>\n<li><mark>source</mark>：你的文章和素材放在这里</li>\n<li><mark>themes</mark>：字面意思</li>\n<li><mark>_config.yml</mark>: 博客的配置文件</li>\n</ul>\n<h2 id=\"use-github-to-host\"><a class=\"markdownIt-Anchor\" href=\"#use-github-to-host\"></a> Use GitHub to host</h2>\n<h3 id=\"create-a-new-repository-on-github\"><a class=\"markdownIt-Anchor\" href=\"#create-a-new-repository-on-github\"></a> Create a new repository on GitHub</h3>\n<p>​\t\tFirstly, you need to have a GitHub account…</p>\n<p>​\t\tThen, create a <strong>new repository</strong> on GitHub and named <code>yourusername.github.io</code>, note that you <strong>must</strong> named like this (<code>yourusername</code> is your user name), otherwise the deployment cannot be recognized.</p>\n<p><img src=\"/2022/02/24/Hexo_creation/image-20220308165502809.png\" alt=\"image-20220308165502809\"></p>\n<h3 id=\"add-ssh-key-to-github\"><a class=\"markdownIt-Anchor\" href=\"#add-ssh-key-to-github\"></a> Add SSH key to GitHub</h3>\n<p>​\t\tBack to the terminal, generate the SSH and add it into GitHub so that GitHub can know whether the your computer are visiting the corresponding account.</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> cofig --global user.name <span class=\"token string\">\"yourusername\"</span>\n<span class=\"token function\">git</span> cofig --global user.email <span class=\"token string\">\"youremail\"</span>\nssh-keygen -t rsa -C <span class=\"token string\">\"youremail\"</span></code></pre>\n<p>​\t\tThe computer then will tell you the path of <code>.ssh</code>, find it on your computer, and open it via notepad.</p>\n<p>​\t\tTo say it simpler, SSH is just the ID of your computer, GitHub recognized your computer via this ID. <code>id_rsa</code> is your private key that you cannot show it to others, while <code>id_rsa.pub</code> is the public key, you can copy the info to GitHub.</p>\n<p>​\t\t<code>Github -&gt; settings -&gt; personal settings -&gt; SSH and PGP keys -&gt; New SSH key</code></p>\n<p>​\t\tYou can verify whether add the SSH key successfully via your terminal:</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">ssh</span> -T git@github.com</code></pre>\n<h3 id=\"deploy-hexo-to-github\"><a class=\"markdownIt-Anchor\" href=\"#deploy-hexo-to-github\"></a> Deploy hexo to GitHub</h3>\n<p>​\t\tOpen your folder, remember the three folders that I let you to concentrate? Now it turns into <code>_config.yml</code> file, open it and add something in the end:</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">deploy:\n  type: <span class=\"token function\">git</span>\n  repo: https://github.com/yourusername/yourusername.github.io.git\n  branch: master</code></pre>\n<p>​\t\t*Notice the format must be totally same with me, pay attention to the <strong>blanks</strong>.</p>\n<p>​\t\tBefore deployment, you need to install the <code>deploy-git</code> in your computer so that you can deploy your own hexo into GitHub.</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">npm</span> <span class=\"token function\">install</span> hexo-deployer-git --save</code></pre>\n<p>​\t\tFinally, deploy your website via the following commands, and you can visit your bolg via <code>http://yourusername.github.io</code>.</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">hexo clean\nhexo deploy\nhexo generate</code></pre>\n<hr>\n<p>注：本文部分内容引用自<a href=\"https://blog.csdn.net/sinat_37781304/article/details/82729029\">hexo史上最全搭建教程_Fangzh的技术博客</a>， 如有侵权，请联系我。</p>\n"},{"title":"二叉树进阶与习题","date":"2022-02-24T14:20:55.000Z","author":"Tony","katex":true,"_content":"\n## 前言\n\n对二叉树不是很了解的同学可以先看一下我之前的文章：[链式二叉树简介](https://tonylsx611.github.io/2022/02/25/binary_tree_1/)\n\n## 数组二叉树转链表\n\n将一棵完全二叉树转换成链表形式是比较常见的一种做法，我们首先声明一个int类型的数组，然后把它放入链表二叉树中。这个过程相对来说是很容易实现的。\n\n```c\nint length = 7;\nint arr[length] = { 1, 2, 3, 4, 5, NULL, 6 };\n```\n\n![img](binary_tree_2/image.png)\n\n之后的任务就是将数组转化为链表形式，链表的定义如下：\n\n```c\nstruct TreeNode //二叉树的格式\n{\n    int val;\n    TreeNode* left;\n    TreeNode* right;\n    TreeNode() : val(0), left(nullptr), right(nullptr) {}\n    TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n    TreeNode(int x, TreeNode* left, TreeNode* right) : val(x), left(left), right(right) {}\n};\n```\n\n转化的过程也很容易，其实这是一个数学问题，对于一棵完全二叉树（满二叉树），节点`tree[i]`的左子树永远是`tree[2*i+1]`，节点`tree[i]`的右子树永远是`tree[2*i+2]`；并且我们只需要递归到倒数第二层的树即可，即`if (i < length/2)`。\n\n```c\nTreeNode* addtree(TreeNode* tree, int arr[], int i)//数组转链表\n{\n\tif (arr[i] == 0)\n        return NULL;\n    if (i < length/2)//arr.length()\n    {\n        TreeNode* tree = new TreeNode();\n        \n        tree->val = arr[i];\n        tree->left = addtree(tree, arr, i + i + 1);\n        tree->right = addtree(tree, arr, i + i + 2);\n        return tree;\n    }\n    return NULL;\n}\n```\n\n## 链表二叉树转数组\n\n比较困难的是如何将链表二叉树转换为数组，因为链表形式下并不一定每一个节点都有两个子节点，因此链表二叉树是没有办法直接转化成一棵数组型的完全二叉树（可能也可以，但是我不会，欢迎在评论区讨论）。\n\n如果可以获得链式二叉树的高度，那么可以通过BFS来遍历整个链表，即使链表的节点没有左枝或右枝，也把一个空节点加进stack中，这样理论上可以实现链表到数组的转换，不过实现起来还是非常麻烦。\n\n因此，我们绝大多数情况下是不会将链表转化成数组的，因为在链表中操作数据是非常方便的（当然在数组中操作也不麻烦），我们做的最多的事情就是搜索和遍历二叉树，如果不是很理解前一句话，建议再次回顾一下上一篇文章：[链式二叉树简介](https://tonylsx611.github.io/2022/02/25/binary_tree_1/)\n\n## 例题98\n\n### 题目描述\n\nLeetcode链接: [98. 验证二叉搜索树 - 力扣（LeetCode） (leetcode-cn.com)](https://leetcode-cn.com/problems/validate-binary-search-tree/)\n\n给你一个二叉树的根节点 root ，判断其是否是一个有效的二叉搜索树。\n\n有效 二叉搜索树定义如下：\n\n- 节点的左子树只包含 小于 当前节点的数。\n- 节点的右子树只包含 大于 当前节点的数。\n- 所有左子树和右子树自身必须也是二叉搜索树。\n\n**输入输出样例：**\n\n![img](binary_tree_2/tree1.jpg)\n\n```bash\ninput: root=[2,1,3]\noutput: true\n```\n\n![img](binary_tree_2/tree2.jpg)\n\n```bash\ninput: root = [5,1,4,null,null,3,6]\noutput: false\nexplanation: 根节点的值是 5 ，但是右子节点的值是 4 。\n```\n\n**提示：**\n\n- 树中节点数目范围在$[1, 10^4]$ 内\n- $-2^{31} \\leq Node.val \\leq 2^{31} - 1$\n\n### 例题分析\n\n我最初的思路是，只要保证**每一个节点大于左枝，小于右枝**即可。\n\n对于这样的思路，直接对链表进行BFS搜索即可，如果不会BFS算法，可以参考：[BFS简介](https://tonylsx611.github.io/2022/03/10/BFS/)。当然，其他的搜索算法也可以考虑，比如DFS，或者前序中序后序遍历每一个节点，然后判断每个节点的两个子节点就可以。我这里就用BFS来实现，代码如下：\n\n```c\nclass Solution {\npublic:\n    TreeNode* temp;\n    bool isValidBST(TreeNode* root)\n    {\n        queue<TreeNode*> Q;\n        TreeNode* node;\n        Q.push(root);\n        while (!Q.empty())\n        {\n            node = Q.front();\n            temp = node;\n            if (node->left != NULL)\n            {\n                if (node->left->val >= temp->val)\n                    return false;\n                Q.push(node->left);\n            }\n            if (node->right != NULL)\n            {\n                if (node->right->val <= temp->val)\n                    return false;\n                Q.push(node->right);\n            }\n            Q.pop();\n        }\n        return true;\n    }\n};\n```\n\n但是，我发现我的理解是有问题的，这个题目要求是节点下面的**所有左子树**的值都要小于该节点，节点下面**所有右子树**的值都要大于该节点！\n\n比如这个例子，对于该题来说，他的答案应该是false。因为根节点的值是5，但是右侧分支中有一个节点的值是3，小于根节点的值。\n\n![false example](binary_tree_2/false%20example-16473330373123.png)\n\n因此，对于这种情况，我们应该优先考虑对二叉树进行中序遍历，中序遍历的结果如果是升序就返回true，否则返回false。\n\n比如上面这个错误的样例的中序遍历结果为：`root=[4,5,3,6,7];`，他不是单调递增的数组。\n\n再比如，我们来看一个正确的样例，他的中序遍历的结果为：`root=[4,5,6,7,9]`，他是单调递增的数组。\n\n![true example](binary_tree_2/true%20example.png)\n\n因此，我们的思路就可以转变为，**判断该二叉树的中序遍历结果是否为单调递增**，来判断其是否是一个有效的二叉搜索树，代码如下：\n\n```c\nclass Solution {\npublic:\n    int btree[10001];\n    int ptr = 0;\n    void inorder(TreeNode* root)\n    {\n        if (root == NULL)\n            return;\n        if (root->left)\n            inorder(root->left);\n        btree[ptr] = root->val;\n        ptr++;\n        if (root->right)\n            inorder(root->right);\n    }\n    bool isValidBST(TreeNode* root)\n    {\n        inorder(root);\n        //for(int i=0;i<ptr;i++)\n        //    cout<<btree[i]<<\" \";    \n        for (int i = 0; i < ptr - 1; i++)\n            if (btree[i] >= btree[i + 1])\n                return false;\n        return true;\n    }\n};\n```\n\n## 例题103\n\n### 题目描述\n\nLeetcode链接: [103. 二叉树的锯齿形层序遍历 - 力扣（LeetCode） (leetcode-cn.com)](https://leetcode-cn.com/problems/binary-tree-zigzag-level-order-traversal/)\n\n给你二叉树的根节点 root ，返回其节点值的 锯齿形层序遍历 。（即先从左往右，再从右往左进行下一层遍历，以此类推，层与层之间交替进行）。\n\n**输入输出样例：**\n\n![img](binary_tree_2/tree1.jpg)\n\n```bash\n输入：root = [3,9,20,null,null,15,7]\n输出：[[3],[20,9],[15,7]]\n```\n\n\n\n```\n输入：root = [1]\n输出：[[1]]\n```\n\n\n\n```\n输入：root = []\n输出：[]\n```\n\n\n\n**提示：**\n\n- 树中节点数目在范围 $[0, 2000]$ 内\n- $-100 \\leq Node.val \\leq 100$\n\n### 题目分析\n\n官方的题解以及很多人都很喜欢使用deque(双端队列)来做，这种做法自然很好，但是我们明明用正常的队列就可以搞定的事，干嘛那么复杂呢？\n\n首先分析题目，既然要求一层层地遍历二叉树，那么自然而然就应该想到用BFS来遍历。然而正常的BFS是没办法分层的，就是说我们BFS仅仅是维护了一个栈，但实际上无法将层与层之间的节点分离开来。我们只需要稍作改动，在while循环中嵌套一个for循环即可实现。想一想为什么？\n\n回忆一下BFS的原理，每次进栈的节点深度都一样，每次出栈的节点深度也是一样的，利用这个原理，就可以将每一层的节点分开，输出到二维vector数组中。\n\n至于还要从右向左遍历，我们只需要构建一个reverse函数，将二维数组双数的行不变，单数的行取反reverse，就好啦。\n\n需要注意的是，我们应该了解如何使用vector创建二维数组，每次for循环都用resize创建一行vector数组。如果不熟悉的话建议百度一下。。。（比如说我就不太会）\n\n全部代码如下，建议去leetcode自行做一下，不要抄任何现成的代码，这样对能力提升没好处。\n\n```c\nclass Solution {\npublic:\n    vector<vector<int>> zigzagLevelOrder(TreeNode* root) \n    {\n        vector<vector<int>> ans;\n        queue<TreeNode*> Q;\n        if(root)\n            Q.push(root);\n        else\n            return ans;\n        int depth=0;\n        while(!Q.empty())\n        {\n            ans.resize(depth+1); \n            int temp=Q.size();\n            for(int i=0;i<temp;i++)//循环每一层\n            {\n                TreeNode* node;\n                node=Q.front();\n                if(node->left != NULL)\n                    Q.push(node->left);\n                if(node->right != NULL)\n                    Q.push(node->right);\n                ans[depth].push_back(node->val);\n                Q.pop();\n            }\n            depth++;\n        }\n        for(int i=1;i<depth;i+=2)\n            reverse(ans[i]);\n        return ans;\n    }\n    vector<int> reverse(vector<int>& arr)\n    {\n        int len=arr.size();\n        if(len<=1)\n            return arr;\n        for(int i=0;i<len/2;i++)//reverse\n        {\n            int temp=arr[i];\n            arr[i]=arr[len-i-1];\n            arr[len-i-1]=temp;\n        }\n        return arr;\n    }\n};\n```\n\n","source":"_posts/binary_tree_2.md","raw":"---\ntitle: 二叉树进阶与习题\ndate: 2022-02-24 22:20:55\nauthor: Tony\ncategories:\n\t- algorithm\ntags: \n\t- Binary-tree\n\t- algorithm\nkatex: true\n---\n\n## 前言\n\n对二叉树不是很了解的同学可以先看一下我之前的文章：[链式二叉树简介](https://tonylsx611.github.io/2022/02/25/binary_tree_1/)\n\n## 数组二叉树转链表\n\n将一棵完全二叉树转换成链表形式是比较常见的一种做法，我们首先声明一个int类型的数组，然后把它放入链表二叉树中。这个过程相对来说是很容易实现的。\n\n```c\nint length = 7;\nint arr[length] = { 1, 2, 3, 4, 5, NULL, 6 };\n```\n\n![img](binary_tree_2/image.png)\n\n之后的任务就是将数组转化为链表形式，链表的定义如下：\n\n```c\nstruct TreeNode //二叉树的格式\n{\n    int val;\n    TreeNode* left;\n    TreeNode* right;\n    TreeNode() : val(0), left(nullptr), right(nullptr) {}\n    TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n    TreeNode(int x, TreeNode* left, TreeNode* right) : val(x), left(left), right(right) {}\n};\n```\n\n转化的过程也很容易，其实这是一个数学问题，对于一棵完全二叉树（满二叉树），节点`tree[i]`的左子树永远是`tree[2*i+1]`，节点`tree[i]`的右子树永远是`tree[2*i+2]`；并且我们只需要递归到倒数第二层的树即可，即`if (i < length/2)`。\n\n```c\nTreeNode* addtree(TreeNode* tree, int arr[], int i)//数组转链表\n{\n\tif (arr[i] == 0)\n        return NULL;\n    if (i < length/2)//arr.length()\n    {\n        TreeNode* tree = new TreeNode();\n        \n        tree->val = arr[i];\n        tree->left = addtree(tree, arr, i + i + 1);\n        tree->right = addtree(tree, arr, i + i + 2);\n        return tree;\n    }\n    return NULL;\n}\n```\n\n## 链表二叉树转数组\n\n比较困难的是如何将链表二叉树转换为数组，因为链表形式下并不一定每一个节点都有两个子节点，因此链表二叉树是没有办法直接转化成一棵数组型的完全二叉树（可能也可以，但是我不会，欢迎在评论区讨论）。\n\n如果可以获得链式二叉树的高度，那么可以通过BFS来遍历整个链表，即使链表的节点没有左枝或右枝，也把一个空节点加进stack中，这样理论上可以实现链表到数组的转换，不过实现起来还是非常麻烦。\n\n因此，我们绝大多数情况下是不会将链表转化成数组的，因为在链表中操作数据是非常方便的（当然在数组中操作也不麻烦），我们做的最多的事情就是搜索和遍历二叉树，如果不是很理解前一句话，建议再次回顾一下上一篇文章：[链式二叉树简介](https://tonylsx611.github.io/2022/02/25/binary_tree_1/)\n\n## 例题98\n\n### 题目描述\n\nLeetcode链接: [98. 验证二叉搜索树 - 力扣（LeetCode） (leetcode-cn.com)](https://leetcode-cn.com/problems/validate-binary-search-tree/)\n\n给你一个二叉树的根节点 root ，判断其是否是一个有效的二叉搜索树。\n\n有效 二叉搜索树定义如下：\n\n- 节点的左子树只包含 小于 当前节点的数。\n- 节点的右子树只包含 大于 当前节点的数。\n- 所有左子树和右子树自身必须也是二叉搜索树。\n\n**输入输出样例：**\n\n![img](binary_tree_2/tree1.jpg)\n\n```bash\ninput: root=[2,1,3]\noutput: true\n```\n\n![img](binary_tree_2/tree2.jpg)\n\n```bash\ninput: root = [5,1,4,null,null,3,6]\noutput: false\nexplanation: 根节点的值是 5 ，但是右子节点的值是 4 。\n```\n\n**提示：**\n\n- 树中节点数目范围在$[1, 10^4]$ 内\n- $-2^{31} \\leq Node.val \\leq 2^{31} - 1$\n\n### 例题分析\n\n我最初的思路是，只要保证**每一个节点大于左枝，小于右枝**即可。\n\n对于这样的思路，直接对链表进行BFS搜索即可，如果不会BFS算法，可以参考：[BFS简介](https://tonylsx611.github.io/2022/03/10/BFS/)。当然，其他的搜索算法也可以考虑，比如DFS，或者前序中序后序遍历每一个节点，然后判断每个节点的两个子节点就可以。我这里就用BFS来实现，代码如下：\n\n```c\nclass Solution {\npublic:\n    TreeNode* temp;\n    bool isValidBST(TreeNode* root)\n    {\n        queue<TreeNode*> Q;\n        TreeNode* node;\n        Q.push(root);\n        while (!Q.empty())\n        {\n            node = Q.front();\n            temp = node;\n            if (node->left != NULL)\n            {\n                if (node->left->val >= temp->val)\n                    return false;\n                Q.push(node->left);\n            }\n            if (node->right != NULL)\n            {\n                if (node->right->val <= temp->val)\n                    return false;\n                Q.push(node->right);\n            }\n            Q.pop();\n        }\n        return true;\n    }\n};\n```\n\n但是，我发现我的理解是有问题的，这个题目要求是节点下面的**所有左子树**的值都要小于该节点，节点下面**所有右子树**的值都要大于该节点！\n\n比如这个例子，对于该题来说，他的答案应该是false。因为根节点的值是5，但是右侧分支中有一个节点的值是3，小于根节点的值。\n\n![false example](binary_tree_2/false%20example-16473330373123.png)\n\n因此，对于这种情况，我们应该优先考虑对二叉树进行中序遍历，中序遍历的结果如果是升序就返回true，否则返回false。\n\n比如上面这个错误的样例的中序遍历结果为：`root=[4,5,3,6,7];`，他不是单调递增的数组。\n\n再比如，我们来看一个正确的样例，他的中序遍历的结果为：`root=[4,5,6,7,9]`，他是单调递增的数组。\n\n![true example](binary_tree_2/true%20example.png)\n\n因此，我们的思路就可以转变为，**判断该二叉树的中序遍历结果是否为单调递增**，来判断其是否是一个有效的二叉搜索树，代码如下：\n\n```c\nclass Solution {\npublic:\n    int btree[10001];\n    int ptr = 0;\n    void inorder(TreeNode* root)\n    {\n        if (root == NULL)\n            return;\n        if (root->left)\n            inorder(root->left);\n        btree[ptr] = root->val;\n        ptr++;\n        if (root->right)\n            inorder(root->right);\n    }\n    bool isValidBST(TreeNode* root)\n    {\n        inorder(root);\n        //for(int i=0;i<ptr;i++)\n        //    cout<<btree[i]<<\" \";    \n        for (int i = 0; i < ptr - 1; i++)\n            if (btree[i] >= btree[i + 1])\n                return false;\n        return true;\n    }\n};\n```\n\n## 例题103\n\n### 题目描述\n\nLeetcode链接: [103. 二叉树的锯齿形层序遍历 - 力扣（LeetCode） (leetcode-cn.com)](https://leetcode-cn.com/problems/binary-tree-zigzag-level-order-traversal/)\n\n给你二叉树的根节点 root ，返回其节点值的 锯齿形层序遍历 。（即先从左往右，再从右往左进行下一层遍历，以此类推，层与层之间交替进行）。\n\n**输入输出样例：**\n\n![img](binary_tree_2/tree1.jpg)\n\n```bash\n输入：root = [3,9,20,null,null,15,7]\n输出：[[3],[20,9],[15,7]]\n```\n\n\n\n```\n输入：root = [1]\n输出：[[1]]\n```\n\n\n\n```\n输入：root = []\n输出：[]\n```\n\n\n\n**提示：**\n\n- 树中节点数目在范围 $[0, 2000]$ 内\n- $-100 \\leq Node.val \\leq 100$\n\n### 题目分析\n\n官方的题解以及很多人都很喜欢使用deque(双端队列)来做，这种做法自然很好，但是我们明明用正常的队列就可以搞定的事，干嘛那么复杂呢？\n\n首先分析题目，既然要求一层层地遍历二叉树，那么自然而然就应该想到用BFS来遍历。然而正常的BFS是没办法分层的，就是说我们BFS仅仅是维护了一个栈，但实际上无法将层与层之间的节点分离开来。我们只需要稍作改动，在while循环中嵌套一个for循环即可实现。想一想为什么？\n\n回忆一下BFS的原理，每次进栈的节点深度都一样，每次出栈的节点深度也是一样的，利用这个原理，就可以将每一层的节点分开，输出到二维vector数组中。\n\n至于还要从右向左遍历，我们只需要构建一个reverse函数，将二维数组双数的行不变，单数的行取反reverse，就好啦。\n\n需要注意的是，我们应该了解如何使用vector创建二维数组，每次for循环都用resize创建一行vector数组。如果不熟悉的话建议百度一下。。。（比如说我就不太会）\n\n全部代码如下，建议去leetcode自行做一下，不要抄任何现成的代码，这样对能力提升没好处。\n\n```c\nclass Solution {\npublic:\n    vector<vector<int>> zigzagLevelOrder(TreeNode* root) \n    {\n        vector<vector<int>> ans;\n        queue<TreeNode*> Q;\n        if(root)\n            Q.push(root);\n        else\n            return ans;\n        int depth=0;\n        while(!Q.empty())\n        {\n            ans.resize(depth+1); \n            int temp=Q.size();\n            for(int i=0;i<temp;i++)//循环每一层\n            {\n                TreeNode* node;\n                node=Q.front();\n                if(node->left != NULL)\n                    Q.push(node->left);\n                if(node->right != NULL)\n                    Q.push(node->right);\n                ans[depth].push_back(node->val);\n                Q.pop();\n            }\n            depth++;\n        }\n        for(int i=1;i<depth;i+=2)\n            reverse(ans[i]);\n        return ans;\n    }\n    vector<int> reverse(vector<int>& arr)\n    {\n        int len=arr.size();\n        if(len<=1)\n            return arr;\n        for(int i=0;i<len/2;i++)//reverse\n        {\n            int temp=arr[i];\n            arr[i]=arr[len-i-1];\n            arr[len-i-1]=temp;\n        }\n        return arr;\n    }\n};\n```\n\n","slug":"binary_tree_2","published":1,"updated":"2022-03-17T11:03:20.714Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1rj2n5c001ggwcyg493c980","content":"<h2 id=\"前言\"><a class=\"markdownIt-Anchor\" href=\"#前言\"></a> 前言</h2>\n<p>对二叉树不是很了解的同学可以先看一下我之前的文章：<a href=\"https://tonylsx611.github.io/2022/02/25/binary_tree_1/\">链式二叉树简介</a></p>\n<h2 id=\"数组二叉树转链表\"><a class=\"markdownIt-Anchor\" href=\"#数组二叉树转链表\"></a> 数组二叉树转链表</h2>\n<p>将一棵完全二叉树转换成链表形式是比较常见的一种做法，我们首先声明一个int类型的数组，然后把它放入链表二叉树中。这个过程相对来说是很容易实现的。</p>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> length <span class=\"token operator\">=</span> <span class=\"token number\">7</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span>length<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></code></pre>\n<p><img src=\"/2022/02/24/binary_tree_2/image.png\" alt=\"img\" loading=\"lazy\"></p>\n<p>之后的任务就是将数组转化为链表形式，链表的定义如下：</p>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">TreeNode</span> <span class=\"token comment\">//二叉树的格式</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> val<span class=\"token punctuation\">;</span>\n    TreeNode<span class=\"token operator\">*</span> left<span class=\"token punctuation\">;</span>\n    TreeNode<span class=\"token operator\">*</span> right<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">TreeNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">val</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">left</span><span class=\"token punctuation\">(</span>nullptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">right</span><span class=\"token punctuation\">(</span>nullptr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n    <span class=\"token function\">TreeNode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">val</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">left</span><span class=\"token punctuation\">(</span>nullptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">right</span><span class=\"token punctuation\">(</span>nullptr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n    <span class=\"token function\">TreeNode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> TreeNode<span class=\"token operator\">*</span> left<span class=\"token punctuation\">,</span> TreeNode<span class=\"token operator\">*</span> right<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">val</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">left</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">right</span><span class=\"token punctuation\">(</span>right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></code></pre>\n<p>转化的过程也很容易，其实这是一个数学问题，对于一棵完全二叉树（满二叉树），节点<code>tree[i]</code>的左子树永远是<code>tree[2*i+1]</code>，节点<code>tree[i]</code>的右子树永远是<code>tree[2*i+2]</code>；并且我们只需要递归到倒数第二层的树即可，即<code>if (i &lt; length/2)</code>。</p>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\">TreeNode<span class=\"token operator\">*</span> <span class=\"token function\">addtree</span><span class=\"token punctuation\">(</span>TreeNode<span class=\"token operator\">*</span> tree<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span><span class=\"token comment\">//数组转链表</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> length<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//arr.length()</span>\n    <span class=\"token punctuation\">&#123;</span>\n        TreeNode<span class=\"token operator\">*</span> tree <span class=\"token operator\">=</span> new <span class=\"token function\">TreeNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        \n        tree<span class=\"token operator\">-></span>val <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        tree<span class=\"token operator\">-></span>left <span class=\"token operator\">=</span> <span class=\"token function\">addtree</span><span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">,</span> i <span class=\"token operator\">+</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        tree<span class=\"token operator\">-></span>right <span class=\"token operator\">=</span> <span class=\"token function\">addtree</span><span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">,</span> i <span class=\"token operator\">+</span> i <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> tree<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<h2 id=\"链表二叉树转数组\"><a class=\"markdownIt-Anchor\" href=\"#链表二叉树转数组\"></a> 链表二叉树转数组</h2>\n<p>比较困难的是如何将链表二叉树转换为数组，因为链表形式下并不一定每一个节点都有两个子节点，因此链表二叉树是没有办法直接转化成一棵数组型的完全二叉树（可能也可以，但是我不会，欢迎在评论区讨论）。</p>\n<p>如果可以获得链式二叉树的高度，那么可以通过BFS来遍历整个链表，即使链表的节点没有左枝或右枝，也把一个空节点加进stack中，这样理论上可以实现链表到数组的转换，不过实现起来还是非常麻烦。</p>\n<p>因此，我们绝大多数情况下是不会将链表转化成数组的，因为在链表中操作数据是非常方便的（当然在数组中操作也不麻烦），我们做的最多的事情就是搜索和遍历二叉树，如果不是很理解前一句话，建议再次回顾一下上一篇文章：<a href=\"https://tonylsx611.github.io/2022/02/25/binary_tree_1/\">链式二叉树简介</a></p>\n<h2 id=\"例题98\"><a class=\"markdownIt-Anchor\" href=\"#例题98\"></a> 例题98</h2>\n<h3 id=\"题目描述\"><a class=\"markdownIt-Anchor\" href=\"#题目描述\"></a> 题目描述</h3>\n<p>Leetcode链接: <a href=\"https://leetcode-cn.com/problems/validate-binary-search-tree/\">98. 验证二叉搜索树 - 力扣（LeetCode） (leetcode-cn.com)</a></p>\n<p>给你一个二叉树的根节点 root ，判断其是否是一个有效的二叉搜索树。</p>\n<p>有效 二叉搜索树定义如下：</p>\n<ul>\n<li>节点的左子树只包含 小于 当前节点的数。</li>\n<li>节点的右子树只包含 大于 当前节点的数。</li>\n<li>所有左子树和右子树自身必须也是二叉搜索树。</li>\n</ul>\n<p><strong>输入输出样例：</strong></p>\n<p><img src=\"/2022/02/24/binary_tree_2/tree1.jpg\" alt=\"img\" loading=\"lazy\"></p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">input: <span class=\"token assign-left variable\">root</span><span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">2,1</span>,3<span class=\"token punctuation\">]</span>\noutput: <span class=\"token boolean\">true</span></code></pre>\n<p><img src=\"/2022/02/24/binary_tree_2/tree2.jpg\" alt=\"img\" loading=\"lazy\"></p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">input: root <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">5,1</span>,4,null,null,3,6<span class=\"token punctuation\">]</span>\noutput: <span class=\"token boolean\">false</span>\nexplanation: 根节点的值是 <span class=\"token number\">5</span> ，但是右子节点的值是 <span class=\"token number\">4</span> 。</code></pre>\n<p><strong>提示：</strong></p>\n<ul>\n<li>树中节点数目范围在<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo stretchy=\"false\">[</mo><mn>1</mn><mo separator=\"true\">,</mo><mn>1</mn><msup><mn>0</mn><mn>4</mn></msup><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[1, 10^4]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">4</span></span></span></span></span></span></span></span><span class=\"mclose\">]</span></span></span></span> 内</li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>−</mo><msup><mn>2</mn><mn>31</mn></msup><mo>≤</mo><mi>N</mi><mi>o</mi><mi>d</mi><mi>e</mi><mi mathvariant=\"normal\">.</mi><mi>v</mi><mi>a</mi><mi>l</mi><mo>≤</mo><msup><mn>2</mn><mn>31</mn></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">-2^{31} \\leq Node.val \\leq 2^{31} - 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.950078em;vertical-align:-0.13597em;\"></span><span class=\"mord\">−</span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">3</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.83041em;vertical-align:-0.13597em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">N</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\">e</span><span class=\"mord\">.</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">v</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.897438em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">3</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span></li>\n</ul>\n<h3 id=\"例题分析\"><a class=\"markdownIt-Anchor\" href=\"#例题分析\"></a> 例题分析</h3>\n<p>我最初的思路是，只要保证<strong>每一个节点大于左枝，小于右枝</strong>即可。</p>\n<p>对于这样的思路，直接对链表进行BFS搜索即可，如果不会BFS算法，可以参考：<a href=\"https://tonylsx611.github.io/2022/03/10/BFS/\">BFS简介</a>。当然，其他的搜索算法也可以考虑，比如DFS，或者前序中序后序遍历每一个节点，然后判断每个节点的两个子节点就可以。我这里就用BFS来实现，代码如下：</p>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\">class Solution <span class=\"token punctuation\">&#123;</span>\npublic<span class=\"token operator\">:</span>\n    TreeNode<span class=\"token operator\">*</span> temp<span class=\"token punctuation\">;</span>\n    bool <span class=\"token function\">isValidBST</span><span class=\"token punctuation\">(</span>TreeNode<span class=\"token operator\">*</span> root<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        queue<span class=\"token operator\">&lt;</span>TreeNode<span class=\"token operator\">*</span><span class=\"token operator\">></span> Q<span class=\"token punctuation\">;</span>\n        TreeNode<span class=\"token operator\">*</span> node<span class=\"token punctuation\">;</span>\n        Q<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>Q<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            node <span class=\"token operator\">=</span> Q<span class=\"token punctuation\">.</span><span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            temp <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token operator\">-></span>left <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token operator\">-></span>left<span class=\"token operator\">-></span>val <span class=\"token operator\">>=</span> temp<span class=\"token operator\">-></span>val<span class=\"token punctuation\">)</span>\n                    <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span>\n                Q<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>node<span class=\"token operator\">-></span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token operator\">-></span>right <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token operator\">-></span>right<span class=\"token operator\">-></span>val <span class=\"token operator\">&lt;=</span> temp<span class=\"token operator\">-></span>val<span class=\"token punctuation\">)</span>\n                    <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span>\n                Q<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>node<span class=\"token operator\">-></span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            Q<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> true<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></code></pre>\n<p>但是，我发现我的理解是有问题的，这个题目要求是节点下面的<strong>所有左子树</strong>的值都要小于该节点，节点下面<strong>所有右子树</strong>的值都要大于该节点！</p>\n<p>比如这个例子，对于该题来说，他的答案应该是false。因为根节点的值是5，但是右侧分支中有一个节点的值是3，小于根节点的值。</p>\n<p><img src=\"/2022/02/24/binary_tree_2/false%20example-16473330373123.png\" alt=\"false example\" loading=\"lazy\"></p>\n<p>因此，对于这种情况，我们应该优先考虑对二叉树进行中序遍历，中序遍历的结果如果是升序就返回true，否则返回false。</p>\n<p>比如上面这个错误的样例的中序遍历结果为：<code>root=[4,5,3,6,7];</code>，他不是单调递增的数组。</p>\n<p>再比如，我们来看一个正确的样例，他的中序遍历的结果为：<code>root=[4,5,6,7,9]</code>，他是单调递增的数组。</p>\n<p><img src=\"/2022/02/24/binary_tree_2/true%20example.png\" alt=\"true example\" loading=\"lazy\"></p>\n<p>因此，我们的思路就可以转变为，<strong>判断该二叉树的中序遍历结果是否为单调递增</strong>，来判断其是否是一个有效的二叉搜索树，代码如下：</p>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\">class Solution <span class=\"token punctuation\">&#123;</span>\npublic<span class=\"token operator\">:</span>\n    <span class=\"token keyword\">int</span> btree<span class=\"token punctuation\">[</span><span class=\"token number\">10001</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> ptr <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">inorder</span><span class=\"token punctuation\">(</span>TreeNode<span class=\"token operator\">*</span> root<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root<span class=\"token operator\">-></span>left<span class=\"token punctuation\">)</span>\n            <span class=\"token function\">inorder</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">-></span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        btree<span class=\"token punctuation\">[</span>ptr<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> root<span class=\"token operator\">-></span>val<span class=\"token punctuation\">;</span>\n        ptr<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root<span class=\"token operator\">-></span>right<span class=\"token punctuation\">)</span>\n            <span class=\"token function\">inorder</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">-></span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    bool <span class=\"token function\">isValidBST</span><span class=\"token punctuation\">(</span>TreeNode<span class=\"token operator\">*</span> root<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">inorder</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//for(int i=0;i&lt;ptr;i++)</span>\n        <span class=\"token comment\">//    cout&lt;&lt;btree[i]&lt;&lt;\" \";    </span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> ptr <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>btree<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">>=</span> btree<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> true<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></code></pre>\n<h2 id=\"例题103\"><a class=\"markdownIt-Anchor\" href=\"#例题103\"></a> 例题103</h2>\n<h3 id=\"题目描述-2\"><a class=\"markdownIt-Anchor\" href=\"#题目描述-2\"></a> 题目描述</h3>\n<p>Leetcode链接: <a href=\"https://leetcode-cn.com/problems/binary-tree-zigzag-level-order-traversal/\">103. 二叉树的锯齿形层序遍历 - 力扣（LeetCode） (leetcode-cn.com)</a></p>\n<p>给你二叉树的根节点 root ，返回其节点值的 锯齿形层序遍历 。（即先从左往右，再从右往左进行下一层遍历，以此类推，层与层之间交替进行）。</p>\n<p><strong>输入输出样例：</strong></p>\n<p><img src=\"/2022/02/24/binary_tree_2/tree1.jpg\" alt=\"img\" loading=\"lazy\"></p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">输入：root <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3,9</span>,20,null,null,15,7<span class=\"token punctuation\">]</span>\n输出：<span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span>,<span class=\"token punctuation\">[</span><span class=\"token number\">20,9</span><span class=\"token punctuation\">]</span>,<span class=\"token punctuation\">[</span><span class=\"token number\">15,7</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span></code></pre>\n<pre class=\"language-none\"><code class=\"language-none\">输入：root &#x3D; [1]\n输出：[[1]]</code></pre>\n<pre class=\"language-none\"><code class=\"language-none\">输入：root &#x3D; []\n输出：[]</code></pre>\n<p><strong>提示：</strong></p>\n<ul>\n<li>树中节点数目在范围 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo stretchy=\"false\">[</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>2000</mn><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[0, 2000]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">2</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mclose\">]</span></span></span></span> 内</li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>−</mo><mn>100</mn><mo>≤</mo><mi>N</mi><mi>o</mi><mi>d</mi><mi>e</mi><mi mathvariant=\"normal\">.</mi><mi>v</mi><mi>a</mi><mi>l</mi><mo>≤</mo><mn>100</mn></mrow><annotation encoding=\"application/x-tex\">-100 \\leq Node.val \\leq 100</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.78041em;vertical-align:-0.13597em;\"></span><span class=\"mord\">−</span><span class=\"mord\">1</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.83041em;vertical-align:-0.13597em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">N</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\">e</span><span class=\"mord\">.</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">v</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\">0</span><span class=\"mord\">0</span></span></span></span></li>\n</ul>\n<h3 id=\"题目分析\"><a class=\"markdownIt-Anchor\" href=\"#题目分析\"></a> 题目分析</h3>\n<p>官方的题解以及很多人都很喜欢使用deque(双端队列)来做，这种做法自然很好，但是我们明明用正常的队列就可以搞定的事，干嘛那么复杂呢？</p>\n<p>首先分析题目，既然要求一层层地遍历二叉树，那么自然而然就应该想到用BFS来遍历。然而正常的BFS是没办法分层的，就是说我们BFS仅仅是维护了一个栈，但实际上无法将层与层之间的节点分离开来。我们只需要稍作改动，在while循环中嵌套一个for循环即可实现。想一想为什么？</p>\n<p>回忆一下BFS的原理，每次进栈的节点深度都一样，每次出栈的节点深度也是一样的，利用这个原理，就可以将每一层的节点分开，输出到二维vector数组中。</p>\n<p>至于还要从右向左遍历，我们只需要构建一个reverse函数，将二维数组双数的行不变，单数的行取反reverse，就好啦。</p>\n<p>需要注意的是，我们应该了解如何使用vector创建二维数组，每次for循环都用resize创建一行vector数组。如果不熟悉的话建议百度一下。。。（比如说我就不太会）</p>\n<p>全部代码如下，建议去leetcode自行做一下，不要抄任何现成的代码，这样对能力提升没好处。</p>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\">class Solution <span class=\"token punctuation\">&#123;</span>\npublic<span class=\"token operator\">:</span>\n    vector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">>></span> <span class=\"token function\">zigzagLevelOrder</span><span class=\"token punctuation\">(</span>TreeNode<span class=\"token operator\">*</span> root<span class=\"token punctuation\">)</span> \n    <span class=\"token punctuation\">&#123;</span>\n        vector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">>></span> ans<span class=\"token punctuation\">;</span>\n        queue<span class=\"token operator\">&lt;</span>TreeNode<span class=\"token operator\">*</span><span class=\"token operator\">></span> Q<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span>\n            Q<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">else</span>\n            <span class=\"token keyword\">return</span> ans<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> depth<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>Q<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            ans<span class=\"token punctuation\">.</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span>depth<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n            <span class=\"token keyword\">int</span> temp<span class=\"token operator\">=</span>Q<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>temp<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//循环每一层</span>\n            <span class=\"token punctuation\">&#123;</span>\n                TreeNode<span class=\"token operator\">*</span> node<span class=\"token punctuation\">;</span>\n                node<span class=\"token operator\">=</span>Q<span class=\"token punctuation\">.</span><span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>node<span class=\"token operator\">-></span>left <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n                    Q<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>node<span class=\"token operator\">-></span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>node<span class=\"token operator\">-></span>right <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n                    Q<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>node<span class=\"token operator\">-></span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                ans<span class=\"token punctuation\">[</span>depth<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>node<span class=\"token operator\">-></span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                Q<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            depth<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>depth<span class=\"token punctuation\">;</span>i<span class=\"token operator\">+=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n            <span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span>ans<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> ans<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> arr<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> len<span class=\"token operator\">=</span>arr<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>len<span class=\"token operator\">&lt;=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>len<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//reverse</span>\n        <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">int</span> temp<span class=\"token operator\">=</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>arr<span class=\"token punctuation\">[</span>len<span class=\"token operator\">-</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            arr<span class=\"token punctuation\">[</span>len<span class=\"token operator\">-</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>temp<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a class=\"markdownIt-Anchor\" href=\"#前言\"></a> 前言</h2>\n<p>对二叉树不是很了解的同学可以先看一下我之前的文章：<a href=\"https://tonylsx611.github.io/2022/02/25/binary_tree_1/\">链式二叉树简介</a></p>\n<h2 id=\"数组二叉树转链表\"><a class=\"markdownIt-Anchor\" href=\"#数组二叉树转链表\"></a> 数组二叉树转链表</h2>\n<p>将一棵完全二叉树转换成链表形式是比较常见的一种做法，我们首先声明一个int类型的数组，然后把它放入链表二叉树中。这个过程相对来说是很容易实现的。</p>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> length <span class=\"token operator\">=</span> <span class=\"token number\">7</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span>length<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></code></pre>\n<p><img src=\"/2022/02/24/binary_tree_2/image.png\" alt=\"img\"></p>\n<p>之后的任务就是将数组转化为链表形式，链表的定义如下：</p>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">TreeNode</span> <span class=\"token comment\">//二叉树的格式</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> val<span class=\"token punctuation\">;</span>\n    TreeNode<span class=\"token operator\">*</span> left<span class=\"token punctuation\">;</span>\n    TreeNode<span class=\"token operator\">*</span> right<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">TreeNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">val</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">left</span><span class=\"token punctuation\">(</span>nullptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">right</span><span class=\"token punctuation\">(</span>nullptr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n    <span class=\"token function\">TreeNode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">val</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">left</span><span class=\"token punctuation\">(</span>nullptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">right</span><span class=\"token punctuation\">(</span>nullptr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n    <span class=\"token function\">TreeNode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> TreeNode<span class=\"token operator\">*</span> left<span class=\"token punctuation\">,</span> TreeNode<span class=\"token operator\">*</span> right<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">val</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">left</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">right</span><span class=\"token punctuation\">(</span>right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></code></pre>\n<p>转化的过程也很容易，其实这是一个数学问题，对于一棵完全二叉树（满二叉树），节点<code>tree[i]</code>的左子树永远是<code>tree[2*i+1]</code>，节点<code>tree[i]</code>的右子树永远是<code>tree[2*i+2]</code>；并且我们只需要递归到倒数第二层的树即可，即<code>if (i &lt; length/2)</code>。</p>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\">TreeNode<span class=\"token operator\">*</span> <span class=\"token function\">addtree</span><span class=\"token punctuation\">(</span>TreeNode<span class=\"token operator\">*</span> tree<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span><span class=\"token comment\">//数组转链表</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> length<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//arr.length()</span>\n    <span class=\"token punctuation\">&#123;</span>\n        TreeNode<span class=\"token operator\">*</span> tree <span class=\"token operator\">=</span> new <span class=\"token function\">TreeNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        \n        tree<span class=\"token operator\">-></span>val <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        tree<span class=\"token operator\">-></span>left <span class=\"token operator\">=</span> <span class=\"token function\">addtree</span><span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">,</span> i <span class=\"token operator\">+</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        tree<span class=\"token operator\">-></span>right <span class=\"token operator\">=</span> <span class=\"token function\">addtree</span><span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">,</span> i <span class=\"token operator\">+</span> i <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> tree<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<h2 id=\"链表二叉树转数组\"><a class=\"markdownIt-Anchor\" href=\"#链表二叉树转数组\"></a> 链表二叉树转数组</h2>\n<p>比较困难的是如何将链表二叉树转换为数组，因为链表形式下并不一定每一个节点都有两个子节点，因此链表二叉树是没有办法直接转化成一棵数组型的完全二叉树（可能也可以，但是我不会，欢迎在评论区讨论）。</p>\n<p>如果可以获得链式二叉树的高度，那么可以通过BFS来遍历整个链表，即使链表的节点没有左枝或右枝，也把一个空节点加进stack中，这样理论上可以实现链表到数组的转换，不过实现起来还是非常麻烦。</p>\n<p>因此，我们绝大多数情况下是不会将链表转化成数组的，因为在链表中操作数据是非常方便的（当然在数组中操作也不麻烦），我们做的最多的事情就是搜索和遍历二叉树，如果不是很理解前一句话，建议再次回顾一下上一篇文章：<a href=\"https://tonylsx611.github.io/2022/02/25/binary_tree_1/\">链式二叉树简介</a></p>\n<h2 id=\"例题98\"><a class=\"markdownIt-Anchor\" href=\"#例题98\"></a> 例题98</h2>\n<h3 id=\"题目描述\"><a class=\"markdownIt-Anchor\" href=\"#题目描述\"></a> 题目描述</h3>\n<p>Leetcode链接: <a href=\"https://leetcode-cn.com/problems/validate-binary-search-tree/\">98. 验证二叉搜索树 - 力扣（LeetCode） (leetcode-cn.com)</a></p>\n<p>给你一个二叉树的根节点 root ，判断其是否是一个有效的二叉搜索树。</p>\n<p>有效 二叉搜索树定义如下：</p>\n<ul>\n<li>节点的左子树只包含 小于 当前节点的数。</li>\n<li>节点的右子树只包含 大于 当前节点的数。</li>\n<li>所有左子树和右子树自身必须也是二叉搜索树。</li>\n</ul>\n<p><strong>输入输出样例：</strong></p>\n<p><img src=\"/2022/02/24/binary_tree_2/tree1.jpg\" alt=\"img\"></p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">input: <span class=\"token assign-left variable\">root</span><span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">2,1</span>,3<span class=\"token punctuation\">]</span>\noutput: <span class=\"token boolean\">true</span></code></pre>\n<p><img src=\"/2022/02/24/binary_tree_2/tree2.jpg\" alt=\"img\"></p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">input: root <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">5,1</span>,4,null,null,3,6<span class=\"token punctuation\">]</span>\noutput: <span class=\"token boolean\">false</span>\nexplanation: 根节点的值是 <span class=\"token number\">5</span> ，但是右子节点的值是 <span class=\"token number\">4</span> 。</code></pre>\n<p><strong>提示：</strong></p>\n<ul>\n<li>树中节点数目范围在<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo stretchy=\"false\">[</mo><mn>1</mn><mo separator=\"true\">,</mo><mn>1</mn><msup><mn>0</mn><mn>4</mn></msup><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[1, 10^4]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">4</span></span></span></span></span></span></span></span><span class=\"mclose\">]</span></span></span></span> 内</li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>−</mo><msup><mn>2</mn><mn>31</mn></msup><mo>≤</mo><mi>N</mi><mi>o</mi><mi>d</mi><mi>e</mi><mi mathvariant=\"normal\">.</mi><mi>v</mi><mi>a</mi><mi>l</mi><mo>≤</mo><msup><mn>2</mn><mn>31</mn></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">-2^{31} \\leq Node.val \\leq 2^{31} - 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.950078em;vertical-align:-0.13597em;\"></span><span class=\"mord\">−</span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">3</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.83041em;vertical-align:-0.13597em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">N</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\">e</span><span class=\"mord\">.</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">v</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.897438em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">3</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span></li>\n</ul>\n<h3 id=\"例题分析\"><a class=\"markdownIt-Anchor\" href=\"#例题分析\"></a> 例题分析</h3>\n<p>我最初的思路是，只要保证<strong>每一个节点大于左枝，小于右枝</strong>即可。</p>\n<p>对于这样的思路，直接对链表进行BFS搜索即可，如果不会BFS算法，可以参考：<a href=\"https://tonylsx611.github.io/2022/03/10/BFS/\">BFS简介</a>。当然，其他的搜索算法也可以考虑，比如DFS，或者前序中序后序遍历每一个节点，然后判断每个节点的两个子节点就可以。我这里就用BFS来实现，代码如下：</p>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\">class Solution <span class=\"token punctuation\">&#123;</span>\npublic<span class=\"token operator\">:</span>\n    TreeNode<span class=\"token operator\">*</span> temp<span class=\"token punctuation\">;</span>\n    bool <span class=\"token function\">isValidBST</span><span class=\"token punctuation\">(</span>TreeNode<span class=\"token operator\">*</span> root<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        queue<span class=\"token operator\">&lt;</span>TreeNode<span class=\"token operator\">*</span><span class=\"token operator\">></span> Q<span class=\"token punctuation\">;</span>\n        TreeNode<span class=\"token operator\">*</span> node<span class=\"token punctuation\">;</span>\n        Q<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>Q<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            node <span class=\"token operator\">=</span> Q<span class=\"token punctuation\">.</span><span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            temp <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token operator\">-></span>left <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token operator\">-></span>left<span class=\"token operator\">-></span>val <span class=\"token operator\">>=</span> temp<span class=\"token operator\">-></span>val<span class=\"token punctuation\">)</span>\n                    <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span>\n                Q<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>node<span class=\"token operator\">-></span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token operator\">-></span>right <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token operator\">-></span>right<span class=\"token operator\">-></span>val <span class=\"token operator\">&lt;=</span> temp<span class=\"token operator\">-></span>val<span class=\"token punctuation\">)</span>\n                    <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span>\n                Q<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>node<span class=\"token operator\">-></span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            Q<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> true<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></code></pre>\n<p>但是，我发现我的理解是有问题的，这个题目要求是节点下面的<strong>所有左子树</strong>的值都要小于该节点，节点下面<strong>所有右子树</strong>的值都要大于该节点！</p>\n<p>比如这个例子，对于该题来说，他的答案应该是false。因为根节点的值是5，但是右侧分支中有一个节点的值是3，小于根节点的值。</p>\n<p><img src=\"/2022/02/24/binary_tree_2/false%20example-16473330373123.png\" alt=\"false example\"></p>\n<p>因此，对于这种情况，我们应该优先考虑对二叉树进行中序遍历，中序遍历的结果如果是升序就返回true，否则返回false。</p>\n<p>比如上面这个错误的样例的中序遍历结果为：<code>root=[4,5,3,6,7];</code>，他不是单调递增的数组。</p>\n<p>再比如，我们来看一个正确的样例，他的中序遍历的结果为：<code>root=[4,5,6,7,9]</code>，他是单调递增的数组。</p>\n<p><img src=\"/2022/02/24/binary_tree_2/true%20example.png\" alt=\"true example\"></p>\n<p>因此，我们的思路就可以转变为，<strong>判断该二叉树的中序遍历结果是否为单调递增</strong>，来判断其是否是一个有效的二叉搜索树，代码如下：</p>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\">class Solution <span class=\"token punctuation\">&#123;</span>\npublic<span class=\"token operator\">:</span>\n    <span class=\"token keyword\">int</span> btree<span class=\"token punctuation\">[</span><span class=\"token number\">10001</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> ptr <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">inorder</span><span class=\"token punctuation\">(</span>TreeNode<span class=\"token operator\">*</span> root<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root<span class=\"token operator\">-></span>left<span class=\"token punctuation\">)</span>\n            <span class=\"token function\">inorder</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">-></span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        btree<span class=\"token punctuation\">[</span>ptr<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> root<span class=\"token operator\">-></span>val<span class=\"token punctuation\">;</span>\n        ptr<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root<span class=\"token operator\">-></span>right<span class=\"token punctuation\">)</span>\n            <span class=\"token function\">inorder</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">-></span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    bool <span class=\"token function\">isValidBST</span><span class=\"token punctuation\">(</span>TreeNode<span class=\"token operator\">*</span> root<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">inorder</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//for(int i=0;i&lt;ptr;i++)</span>\n        <span class=\"token comment\">//    cout&lt;&lt;btree[i]&lt;&lt;\" \";    </span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> ptr <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>btree<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">>=</span> btree<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> true<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></code></pre>\n<h2 id=\"例题103\"><a class=\"markdownIt-Anchor\" href=\"#例题103\"></a> 例题103</h2>\n<h3 id=\"题目描述-2\"><a class=\"markdownIt-Anchor\" href=\"#题目描述-2\"></a> 题目描述</h3>\n<p>Leetcode链接: <a href=\"https://leetcode-cn.com/problems/binary-tree-zigzag-level-order-traversal/\">103. 二叉树的锯齿形层序遍历 - 力扣（LeetCode） (leetcode-cn.com)</a></p>\n<p>给你二叉树的根节点 root ，返回其节点值的 锯齿形层序遍历 。（即先从左往右，再从右往左进行下一层遍历，以此类推，层与层之间交替进行）。</p>\n<p><strong>输入输出样例：</strong></p>\n<p><img src=\"/2022/02/24/binary_tree_2/tree1.jpg\" alt=\"img\"></p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">输入：root <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3,9</span>,20,null,null,15,7<span class=\"token punctuation\">]</span>\n输出：<span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span>,<span class=\"token punctuation\">[</span><span class=\"token number\">20,9</span><span class=\"token punctuation\">]</span>,<span class=\"token punctuation\">[</span><span class=\"token number\">15,7</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span></code></pre>\n<pre class=\"language-none\"><code class=\"language-none\">输入：root &#x3D; [1]\n输出：[[1]]</code></pre>\n<pre class=\"language-none\"><code class=\"language-none\">输入：root &#x3D; []\n输出：[]</code></pre>\n<p><strong>提示：</strong></p>\n<ul>\n<li>树中节点数目在范围 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo stretchy=\"false\">[</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>2000</mn><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[0, 2000]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">2</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mclose\">]</span></span></span></span> 内</li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>−</mo><mn>100</mn><mo>≤</mo><mi>N</mi><mi>o</mi><mi>d</mi><mi>e</mi><mi mathvariant=\"normal\">.</mi><mi>v</mi><mi>a</mi><mi>l</mi><mo>≤</mo><mn>100</mn></mrow><annotation encoding=\"application/x-tex\">-100 \\leq Node.val \\leq 100</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.78041em;vertical-align:-0.13597em;\"></span><span class=\"mord\">−</span><span class=\"mord\">1</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.83041em;vertical-align:-0.13597em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">N</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\">e</span><span class=\"mord\">.</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">v</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\">0</span><span class=\"mord\">0</span></span></span></span></li>\n</ul>\n<h3 id=\"题目分析\"><a class=\"markdownIt-Anchor\" href=\"#题目分析\"></a> 题目分析</h3>\n<p>官方的题解以及很多人都很喜欢使用deque(双端队列)来做，这种做法自然很好，但是我们明明用正常的队列就可以搞定的事，干嘛那么复杂呢？</p>\n<p>首先分析题目，既然要求一层层地遍历二叉树，那么自然而然就应该想到用BFS来遍历。然而正常的BFS是没办法分层的，就是说我们BFS仅仅是维护了一个栈，但实际上无法将层与层之间的节点分离开来。我们只需要稍作改动，在while循环中嵌套一个for循环即可实现。想一想为什么？</p>\n<p>回忆一下BFS的原理，每次进栈的节点深度都一样，每次出栈的节点深度也是一样的，利用这个原理，就可以将每一层的节点分开，输出到二维vector数组中。</p>\n<p>至于还要从右向左遍历，我们只需要构建一个reverse函数，将二维数组双数的行不变，单数的行取反reverse，就好啦。</p>\n<p>需要注意的是，我们应该了解如何使用vector创建二维数组，每次for循环都用resize创建一行vector数组。如果不熟悉的话建议百度一下。。。（比如说我就不太会）</p>\n<p>全部代码如下，建议去leetcode自行做一下，不要抄任何现成的代码，这样对能力提升没好处。</p>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\">class Solution <span class=\"token punctuation\">&#123;</span>\npublic<span class=\"token operator\">:</span>\n    vector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">>></span> <span class=\"token function\">zigzagLevelOrder</span><span class=\"token punctuation\">(</span>TreeNode<span class=\"token operator\">*</span> root<span class=\"token punctuation\">)</span> \n    <span class=\"token punctuation\">&#123;</span>\n        vector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">>></span> ans<span class=\"token punctuation\">;</span>\n        queue<span class=\"token operator\">&lt;</span>TreeNode<span class=\"token operator\">*</span><span class=\"token operator\">></span> Q<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span>\n            Q<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">else</span>\n            <span class=\"token keyword\">return</span> ans<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> depth<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>Q<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            ans<span class=\"token punctuation\">.</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span>depth<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n            <span class=\"token keyword\">int</span> temp<span class=\"token operator\">=</span>Q<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>temp<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//循环每一层</span>\n            <span class=\"token punctuation\">&#123;</span>\n                TreeNode<span class=\"token operator\">*</span> node<span class=\"token punctuation\">;</span>\n                node<span class=\"token operator\">=</span>Q<span class=\"token punctuation\">.</span><span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>node<span class=\"token operator\">-></span>left <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n                    Q<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>node<span class=\"token operator\">-></span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>node<span class=\"token operator\">-></span>right <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n                    Q<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>node<span class=\"token operator\">-></span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                ans<span class=\"token punctuation\">[</span>depth<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>node<span class=\"token operator\">-></span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                Q<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            depth<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>depth<span class=\"token punctuation\">;</span>i<span class=\"token operator\">+=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n            <span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span>ans<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> ans<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> arr<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> len<span class=\"token operator\">=</span>arr<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>len<span class=\"token operator\">&lt;=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>len<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//reverse</span>\n        <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">int</span> temp<span class=\"token operator\">=</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>arr<span class=\"token punctuation\">[</span>len<span class=\"token operator\">-</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            arr<span class=\"token punctuation\">[</span>len<span class=\"token operator\">-</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>temp<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></code></pre>\n"}],"PostAsset":[{"_id":"source/_posts/8-puzzle/35482241-1605ae76-046d-11e8-87e5-3d8a0cfa8628.gif","slug":"35482241-1605ae76-046d-11e8-87e5-3d8a0cfa8628.gif","post":"cl1rj2n4s0001gwcy8llpeeqb","modified":0,"renderable":0},{"_id":"source/_posts/8-puzzle/R.024c89daf1b60db70d608b4b73215e76","slug":"R.024c89daf1b60db70d608b4b73215e76","post":"cl1rj2n4s0001gwcy8llpeeqb","modified":0,"renderable":0},{"_id":"source/_posts/8-puzzle/R.png","slug":"R.png","post":"cl1rj2n4s0001gwcy8llpeeqb","modified":0,"renderable":0},{"_id":"source/_posts/8-puzzle/R1.png","slug":"R1.png","post":"cl1rj2n4s0001gwcy8llpeeqb","modified":0,"renderable":0},{"_id":"source/_posts/BM-algorithm/image-20220328004145309.png","slug":"image-20220328004145309.png","post":"cl1rj2n4x0006gwcygjswas5u","modified":0,"renderable":0},{"_id":"source/_posts/BM-algorithm/image-20220328005451919.png","slug":"image-20220328005451919.png","post":"cl1rj2n4x0006gwcygjswas5u","modified":0,"renderable":0},{"_id":"source/_posts/BM-algorithm/image-20220328173308025.png","slug":"image-20220328173308025.png","post":"cl1rj2n4x0006gwcygjswas5u","modified":0,"renderable":0},{"_id":"source/_posts/CN-2/image-20211204114107336.png","slug":"image-20211204114107336.png","post":"cl1rj2n50000bgwcy46ltclhs","modified":0,"renderable":0},{"_id":"source/_posts/CN-2/image-20211204114128703.png","slug":"image-20211204114128703.png","post":"cl1rj2n50000bgwcy46ltclhs","modified":0,"renderable":0},{"_id":"source/_posts/CN-2/image-20211204114150471.png","slug":"image-20211204114150471.png","post":"cl1rj2n50000bgwcy46ltclhs","modified":0,"renderable":0},{"_id":"source/_posts/CN-2/image-20211210170210391.png","slug":"image-20211210170210391.png","post":"cl1rj2n50000bgwcy46ltclhs","modified":0,"renderable":0},{"_id":"source/_posts/CN-1/image-20211201155433683.png","slug":"image-20211201155433683.png","post":"cl1rj2n4z0009gwcy354i4t45","modified":0,"renderable":0},{"_id":"source/_posts/CN-1/image-20211201155917959.png","slug":"image-20211201155917959.png","post":"cl1rj2n4z0009gwcy354i4t45","modified":0,"renderable":0},{"_id":"source/_posts/CN-1/image-20211201165246959.png","slug":"image-20211201165246959.png","post":"cl1rj2n4z0009gwcy354i4t45","modified":0,"renderable":0},{"_id":"source/_posts/CN-3/image-20211205153141538.png","slug":"image-20211205153141538.png","post":"cl1rj2n51000dgwcy64dv874o","modified":0,"renderable":0},{"_id":"source/_posts/CN-3/image-20211205153202429.png","slug":"image-20211205153202429.png","post":"cl1rj2n51000dgwcy64dv874o","modified":0,"renderable":0},{"_id":"source/_posts/CN-3/image-20211205153214433.png","slug":"image-20211205153214433.png","post":"cl1rj2n51000dgwcy64dv874o","modified":0,"renderable":0},{"_id":"source/_posts/CN-3/image-20211205153227168.png","slug":"image-20211205153227168.png","post":"cl1rj2n51000dgwcy64dv874o","modified":0,"renderable":0},{"_id":"source/_posts/CN-3/image-20211205162300456.png","slug":"image-20211205162300456.png","post":"cl1rj2n51000dgwcy64dv874o","modified":0,"renderable":0},{"_id":"source/_posts/CN-3/image-20211205165352723.png","slug":"image-20211205165352723.png","post":"cl1rj2n51000dgwcy64dv874o","modified":0,"renderable":0},{"_id":"source/_posts/CN-3/image-20211205174403372.png","slug":"image-20211205174403372.png","post":"cl1rj2n51000dgwcy64dv874o","modified":0,"renderable":0},{"_id":"source/_posts/CN-3/image-20211205174543073.png","slug":"image-20211205174543073.png","post":"cl1rj2n51000dgwcy64dv874o","modified":0,"renderable":0},{"_id":"source/_posts/CN-5/image-20211211152352560.png","slug":"image-20211211152352560.png","post":"cl1rj2n53000jgwcycryt4kqy","modified":0,"renderable":0},{"_id":"source/_posts/CN-5/image-20211211154556832.png","slug":"image-20211211154556832.png","post":"cl1rj2n53000jgwcycryt4kqy","modified":0,"renderable":0},{"_id":"source/_posts/CN-5/image-20211211154616223.png","slug":"image-20211211154616223.png","post":"cl1rj2n53000jgwcycryt4kqy","modified":0,"renderable":0},{"_id":"source/_posts/CN-5/image-20211211154625242.png","slug":"image-20211211154625242.png","post":"cl1rj2n53000jgwcycryt4kqy","modified":0,"renderable":0},{"_id":"source/_posts/CN-5/image-20211211154842458.png","slug":"image-20211211154842458.png","post":"cl1rj2n53000jgwcycryt4kqy","modified":0,"renderable":0},{"_id":"source/_posts/CN-4/image-20211206080908048-1649432396057.png","slug":"image-20211206080908048-1649432396057.png","post":"cl1rj2n52000fgwcyew866ixi","modified":0,"renderable":0},{"_id":"source/_posts/CN-4/image-20211206080908048.png","slug":"image-20211206080908048.png","post":"cl1rj2n52000fgwcyew866ixi","modified":0,"renderable":0},{"_id":"source/_posts/CN-4/image-20211206080928415-1649432396057.png","slug":"image-20211206080928415-1649432396057.png","post":"cl1rj2n52000fgwcyew866ixi","modified":0,"renderable":0},{"_id":"source/_posts/CN-4/image-20211206080928415.png","slug":"image-20211206080928415.png","post":"cl1rj2n52000fgwcyew866ixi","modified":0,"renderable":0},{"_id":"source/_posts/CN-4/image-20211206080942577-1649432396057.png","slug":"image-20211206080942577-1649432396057.png","post":"cl1rj2n52000fgwcyew866ixi","modified":0,"renderable":0},{"_id":"source/_posts/CN-4/image-20211206080942577.png","slug":"image-20211206080942577.png","post":"cl1rj2n52000fgwcyew866ixi","modified":0,"renderable":0},{"_id":"source/_posts/CN-6/image-20211207025902517.png","slug":"image-20211207025902517.png","post":"cl1rj2n54000mgwcy864shas1","modified":0,"renderable":0},{"_id":"source/_posts/Graph-search/image-1.png","slug":"image-1.png","post":"cl1rj2n56000rgwcye66n3ugw","modified":0,"renderable":0},{"_id":"source/_posts/Graph-search/image-2.png","slug":"image-2.png","post":"cl1rj2n56000rgwcye66n3ugw","modified":0,"renderable":0},{"_id":"source/_posts/Graph-search/image-3.png","slug":"image-3.png","post":"cl1rj2n56000rgwcye66n3ugw","modified":0,"renderable":0},{"_id":"source/_posts/Graph-search/v2-4a4d37df348f283649e2aecc74d959b5_720w.jpg","slug":"v2-4a4d37df348f283649e2aecc74d959b5_720w.jpg","post":"cl1rj2n56000rgwcye66n3ugw","modified":0,"renderable":0},{"_id":"source/_posts/Graph-search/v2-9e2643ca5d96f86a391c36de4d3bd48d_720w.jpg","slug":"v2-9e2643ca5d96f86a391c36de4d3bd48d_720w.jpg","post":"cl1rj2n56000rgwcye66n3ugw","modified":0,"renderable":0},{"_id":"source/_posts/Hexo-synchronization/image-20220310172557250.png","slug":"image-20220310172557250.png","post":"cl1rj2n57000ugwcy554n5xp7","modified":0,"renderable":0},{"_id":"source/_posts/Hexo-synchronization/image-20220315180411753.png","slug":"image-20220315180411753.png","post":"cl1rj2n57000ugwcy554n5xp7","modified":0,"renderable":0},{"_id":"source/_posts/Hexo-synchronization/Screenshot 2022-03-08 161552.png","slug":"Screenshot 2022-03-08 161552.png","post":"cl1rj2n57000ugwcy554n5xp7","modified":0,"renderable":0},{"_id":"source/_posts/Hexo_article/2d6f869662e83398f06070e2a14f838.jpg","slug":"2d6f869662e83398f06070e2a14f838.jpg","post":"cl1rj2n58000wgwcy8oa12fid","modified":0,"renderable":0},{"_id":"source/_posts/Hexo_article/884019afce82603bd8bc8fd4e531839.jpg","slug":"884019afce82603bd8bc8fd4e531839.jpg","post":"cl1rj2n58000wgwcy8oa12fid","modified":0,"renderable":0},{"_id":"source/_posts/Hexo_article/image-20220308162506034.png","slug":"image-20220308162506034.png","post":"cl1rj2n58000wgwcy8oa12fid","modified":0,"renderable":0},{"_id":"source/_posts/Hexo_article/image-20220308162715529.png","slug":"image-20220308162715529.png","post":"cl1rj2n58000wgwcy8oa12fid","modified":0,"renderable":0},{"_id":"source/_posts/Hexo_article/IMG_1479.jpg","slug":"IMG_1479.jpg","post":"cl1rj2n58000wgwcy8oa12fid","modified":0,"renderable":0},{"_id":"source/_posts/Hexo_article/traffic-light.gif","slug":"traffic-light.gif","post":"cl1rj2n58000wgwcy8oa12fid","modified":0,"renderable":0},{"_id":"source/_posts/PERT/image-20210926121305734.png","slug":"image-20210926121305734.png","post":"cl1rj2n580010gwcyeijqcvmo","modified":0,"renderable":0},{"_id":"source/_posts/PERT/image-20210926121433312.png","slug":"image-20210926121433312.png","post":"cl1rj2n580010gwcyeijqcvmo","modified":0,"renderable":0},{"_id":"source/_posts/PERT/image-20210926121452437.png","slug":"image-20210926121452437.png","post":"cl1rj2n580010gwcyeijqcvmo","modified":0,"renderable":0},{"_id":"source/_posts/PERT/image-20210926121557824.png","slug":"image-20210926121557824.png","post":"cl1rj2n580010gwcyeijqcvmo","modified":0,"renderable":0},{"_id":"source/_posts/PERT/image-20210926125842698.png","slug":"image-20210926125842698.png","post":"cl1rj2n580010gwcyeijqcvmo","modified":0,"renderable":0},{"_id":"source/_posts/R2S_build/image-1.png","slug":"image-1.png","post":"cl1rj2n590014gwcyefiqg007","modified":0,"renderable":0},{"_id":"source/_posts/R2S_build/image-10.png","slug":"image-10.png","post":"cl1rj2n590014gwcyefiqg007","modified":0,"renderable":0},{"_id":"source/_posts/R2S_build/image-2-1024x507.png","slug":"image-2-1024x507.png","post":"cl1rj2n590014gwcyefiqg007","modified":0,"renderable":0},{"_id":"source/_posts/R2S_build/image-20220305212846426.png","slug":"image-20220305212846426.png","post":"cl1rj2n590014gwcyefiqg007","modified":0,"renderable":0},{"_id":"source/_posts/R2S_build/image-3-1024x485.png","slug":"image-3-1024x485.png","post":"cl1rj2n590014gwcyefiqg007","modified":0,"renderable":0},{"_id":"source/_posts/R2S_build/image-5.png","slug":"image-5.png","post":"cl1rj2n590014gwcyefiqg007","modified":0,"renderable":0},{"_id":"source/_posts/R2S_build/image-7.png","slug":"image-7.png","post":"cl1rj2n590014gwcyefiqg007","modified":0,"renderable":0},{"_id":"source/_posts/R2S_build/image-8.png","slug":"image-8.png","post":"cl1rj2n590014gwcyefiqg007","modified":0,"renderable":0},{"_id":"source/_posts/R2S_build/image-9-1024x194.png","slug":"image-9-1024x194.png","post":"cl1rj2n590014gwcyefiqg007","modified":0,"renderable":0},{"_id":"source/_posts/IPsec/image-20220408173945688.png","slug":"image-20220408173945688.png","post":"cl1rj2n5a0018gwcy9ut2aykz","modified":0,"renderable":0},{"_id":"source/_posts/IPsec/image-20220408182745880.png","slug":"image-20220408182745880.png","post":"cl1rj2n5a0018gwcy9ut2aykz","modified":0,"renderable":0},{"_id":"source/_posts/IPsec/image-20220408182806622.png","slug":"image-20220408182806622.png","post":"cl1rj2n5a0018gwcy9ut2aykz","modified":0,"renderable":0},{"_id":"source/_posts/IPsec/image-20220408182806757.png","slug":"image-20220408182806757.png","post":"cl1rj2n5a0018gwcy9ut2aykz","modified":0,"renderable":0},{"_id":"source/_posts/IPsec/image-20220408182852006.png","slug":"image-20220408182852006.png","post":"cl1rj2n5a0018gwcy9ut2aykz","modified":0,"renderable":0},{"_id":"source/_posts/IPsec/image-20220408182902202.png","slug":"image-20220408182902202.png","post":"cl1rj2n5a0018gwcy9ut2aykz","modified":0,"renderable":0},{"_id":"source/_posts/IPsec/image-20220408183423694.png","slug":"image-20220408183423694.png","post":"cl1rj2n5a0018gwcy9ut2aykz","modified":0,"renderable":0},{"_id":"source/_posts/IPsec/image-20220408183817734.png","slug":"image-20220408183817734.png","post":"cl1rj2n5a0018gwcy9ut2aykz","modified":0,"renderable":0},{"_id":"source/_posts/Hexo_creation/image-20220308165404552.png","slug":"image-20220308165404552.png","post":"cl1rj2n5b001egwcyhjs0b9kk","modified":0,"renderable":0},{"_id":"source/_posts/Hexo_creation/image-20220308165502809.png","slug":"image-20220308165502809.png","post":"cl1rj2n5b001egwcyhjs0b9kk","modified":0,"renderable":0},{"_id":"source/_posts/binary_tree_2/false example-16473330373123.png","slug":"false example-16473330373123.png","post":"cl1rj2n5c001ggwcyg493c980","modified":0,"renderable":0},{"_id":"source/_posts/binary_tree_2/false example.png","slug":"false example.png","post":"cl1rj2n5c001ggwcyg493c980","modified":0,"renderable":0},{"_id":"source/_posts/binary_tree_2/image.png","slug":"image.png","post":"cl1rj2n5c001ggwcyg493c980","modified":0,"renderable":0},{"_id":"source/_posts/binary_tree_2/tree1.jpg","slug":"tree1.jpg","post":"cl1rj2n5c001ggwcyg493c980","modified":0,"renderable":0},{"_id":"source/_posts/binary_tree_2/tree2.jpg","slug":"tree2.jpg","post":"cl1rj2n5c001ggwcyg493c980","modified":0,"renderable":0},{"_id":"source/_posts/binary_tree_2/true example.png","slug":"true example.png","post":"cl1rj2n5c001ggwcyg493c980","modified":0,"renderable":0},{"_id":"source/_posts/binary_tree_1/2-1Q226195949495.gif","slug":"2-1Q226195949495.gif","post":"cl1rj2n5b001bgwcyaka20m90","modified":0,"renderable":0},{"_id":"source/_posts/binary_tree_1/2-1Q226195I0M1.gif","slug":"2-1Q226195I0M1.gif","post":"cl1rj2n5b001bgwcyaka20m90","modified":0,"renderable":0},{"_id":"source/_posts/binary_tree_1/2-1Q22R035341H.gif","slug":"2-1Q22R035341H.gif","post":"cl1rj2n5b001bgwcyaka20m90","modified":0,"renderable":0},{"_id":"source/_posts/binary_tree_1/image.png","slug":"image.png","post":"cl1rj2n5b001bgwcyaka20m90","modified":0,"renderable":0},{"_id":"source/_posts/binary_tree_1/v2-0ccba83c7b3dbf7b89964c04021025d9_720w.jpg","slug":"v2-0ccba83c7b3dbf7b89964c04021025d9_720w.jpg","post":"cl1rj2n5b001bgwcyaka20m90","modified":0,"renderable":0}],"PostCategory":[{"post_id":"cl1rj2n4u0003gwcy9cmlcn69","category_id":"cl1rj2n4y0007gwcy2alqg4gr","_id":"cl1rj2n53000hgwcy5uy8akop"},{"post_id":"cl1rj2n4x0006gwcygjswas5u","category_id":"cl1rj2n4y0007gwcy2alqg4gr","_id":"cl1rj2n55000ogwcy9c971yvi"},{"post_id":"cl1rj2n4y0008gwcy291l747g","category_id":"cl1rj2n4y0007gwcy2alqg4gr","_id":"cl1rj2n56000sgwcyfruxa9xm"},{"post_id":"cl1rj2n55000pgwcyc9uxe2sk","category_id":"cl1rj2n4y0007gwcy2alqg4gr","_id":"cl1rj2n58000xgwcydtv84ue7"},{"post_id":"cl1rj2n4z0009gwcy354i4t45","category_id":"cl1rj2n55000ngwcy9wwzdrhh","_id":"cl1rj2n590011gwcy0xv51rm8"},{"post_id":"cl1rj2n56000rgwcye66n3ugw","category_id":"cl1rj2n4y0007gwcy2alqg4gr","_id":"cl1rj2n5a0015gwcy97wd38m6"},{"post_id":"cl1rj2n50000bgwcy46ltclhs","category_id":"cl1rj2n55000ngwcy9wwzdrhh","_id":"cl1rj2n5a0019gwcy4hqn5451"},{"post_id":"cl1rj2n580010gwcyeijqcvmo","category_id":"cl1rj2n4y0007gwcy2alqg4gr","_id":"cl1rj2n5b001cgwcyg18e6xao"},{"post_id":"cl1rj2n51000dgwcy64dv874o","category_id":"cl1rj2n55000ngwcy9wwzdrhh","_id":"cl1rj2n5c001fgwcy3vzycpkl"},{"post_id":"cl1rj2n590014gwcyefiqg007","category_id":"cl1rj2n55000ngwcy9wwzdrhh","_id":"cl1rj2n5c001hgwcycz3nd17f"},{"post_id":"cl1rj2n5a0018gwcy9ut2aykz","category_id":"cl1rj2n55000ngwcy9wwzdrhh","_id":"cl1rj2n5e001lgwcy4jdsatmr"},{"post_id":"cl1rj2n52000fgwcyew866ixi","category_id":"cl1rj2n55000ngwcy9wwzdrhh","_id":"cl1rj2n5e001ngwcyadew6id7"},{"post_id":"cl1rj2n5b001bgwcyaka20m90","category_id":"cl1rj2n4y0007gwcy2alqg4gr","_id":"cl1rj2n5f001rgwcyaoi40bas"},{"post_id":"cl1rj2n53000jgwcycryt4kqy","category_id":"cl1rj2n55000ngwcy9wwzdrhh","_id":"cl1rj2n5f001sgwcyf5qyerdd"},{"post_id":"cl1rj2n5c001ggwcyg493c980","category_id":"cl1rj2n4y0007gwcy2alqg4gr","_id":"cl1rj2n5f001vgwcybaeh5s17"},{"post_id":"cl1rj2n54000mgwcy864shas1","category_id":"cl1rj2n55000ngwcy9wwzdrhh","_id":"cl1rj2n5f001xgwcyb1l56j7o"},{"post_id":"cl1rj2n57000ugwcy554n5xp7","category_id":"cl1rj2n5e001ogwcyat77hp1q","_id":"cl1rj2n5g0021gwcy1xrfh2xx"},{"post_id":"cl1rj2n58000wgwcy8oa12fid","category_id":"cl1rj2n5e001ogwcyat77hp1q","_id":"cl1rj2n5g0024gwcy9mbt0q0z"},{"post_id":"cl1rj2n5b001egwcyhjs0b9kk","category_id":"cl1rj2n5e001ogwcyat77hp1q","_id":"cl1rj2n5h0027gwcy24y6d4r4"}],"PostTag":[{"post_id":"cl1rj2n4s0001gwcy8llpeeqb","tag_id":"cl1rj2n4v0004gwcyc9v92a2c","_id":"cl1rj2n53000igwcy1trmefia"},{"post_id":"cl1rj2n4s0001gwcy8llpeeqb","tag_id":"cl1rj2n4z000agwcyg4w6evhj","_id":"cl1rj2n54000kgwcy700o8ubw"},{"post_id":"cl1rj2n4u0003gwcy9cmlcn69","tag_id":"cl1rj2n4v0004gwcyc9v92a2c","_id":"cl1rj2n58000zgwcy4xyz0h1q"},{"post_id":"cl1rj2n4u0003gwcy9cmlcn69","tag_id":"cl1rj2n4z000agwcyg4w6evhj","_id":"cl1rj2n590012gwcybxh7b8ef"},{"post_id":"cl1rj2n4u0003gwcy9cmlcn69","tag_id":"cl1rj2n56000qgwcya44ldxe3","_id":"cl1rj2n5a0017gwcy5v3n3oo6"},{"post_id":"cl1rj2n4x0006gwcygjswas5u","tag_id":"cl1rj2n4v0004gwcyc9v92a2c","_id":"cl1rj2n5e001kgwcya8ls18i1"},{"post_id":"cl1rj2n4x0006gwcygjswas5u","tag_id":"cl1rj2n590013gwcy4ltshd6l","_id":"cl1rj2n5e001mgwcy87kc62p1"},{"post_id":"cl1rj2n4x0006gwcygjswas5u","tag_id":"cl1rj2n5a001agwcy0trp663m","_id":"cl1rj2n5f001qgwcy9nha0up1"},{"post_id":"cl1rj2n4y0008gwcy291l747g","tag_id":"cl1rj2n4v0004gwcyc9v92a2c","_id":"cl1rj2n5f001wgwcy34u1695b"},{"post_id":"cl1rj2n4y0008gwcy291l747g","tag_id":"cl1rj2n5c001igwcybfiy8r92","_id":"cl1rj2n5f001ygwcy9s8a7gsy"},{"post_id":"cl1rj2n4y0008gwcy291l747g","tag_id":"cl1rj2n5f001pgwcy7gxr42rt","_id":"cl1rj2n5g0022gwcyafrzcpli"},{"post_id":"cl1rj2n4z0009gwcy354i4t45","tag_id":"cl1rj2n5f001ugwcyf6s90p2e","_id":"cl1rj2n5g0023gwcydoe3fo7d"},{"post_id":"cl1rj2n50000bgwcy46ltclhs","tag_id":"cl1rj2n5f001ugwcyf6s90p2e","_id":"cl1rj2n5h0026gwcy5htu3yxx"},{"post_id":"cl1rj2n51000dgwcy64dv874o","tag_id":"cl1rj2n5f001ugwcyf6s90p2e","_id":"cl1rj2n5h0029gwcy9uxs322x"},{"post_id":"cl1rj2n52000fgwcyew866ixi","tag_id":"cl1rj2n5f001ugwcyf6s90p2e","_id":"cl1rj2n5h002bgwcycgp9djwj"},{"post_id":"cl1rj2n53000jgwcycryt4kqy","tag_id":"cl1rj2n5f001ugwcyf6s90p2e","_id":"cl1rj2n5h002dgwcyflkp9cy4"},{"post_id":"cl1rj2n54000mgwcy864shas1","tag_id":"cl1rj2n5f001ugwcyf6s90p2e","_id":"cl1rj2n5i002fgwcy582z1452"},{"post_id":"cl1rj2n55000pgwcyc9uxe2sk","tag_id":"cl1rj2n4v0004gwcyc9v92a2c","_id":"cl1rj2n5i002hgwcyf1f6dqg0"},{"post_id":"cl1rj2n55000pgwcyc9uxe2sk","tag_id":"cl1rj2n56000qgwcya44ldxe3","_id":"cl1rj2n5i002igwcy9899gp6k"},{"post_id":"cl1rj2n56000rgwcye66n3ugw","tag_id":"cl1rj2n4v0004gwcyc9v92a2c","_id":"cl1rj2n5i002kgwcybv130000"},{"post_id":"cl1rj2n56000rgwcye66n3ugw","tag_id":"cl1rj2n5i002ggwcy4z6y25e1","_id":"cl1rj2n5i002lgwcyab4k1nve"},{"post_id":"cl1rj2n56000rgwcye66n3ugw","tag_id":"cl1rj2n56000qgwcya44ldxe3","_id":"cl1rj2n5i002ngwcy7xnk7m1r"},{"post_id":"cl1rj2n56000rgwcye66n3ugw","tag_id":"cl1rj2n4z000agwcyg4w6evhj","_id":"cl1rj2n5j002ogwcyeil0floj"},{"post_id":"cl1rj2n57000ugwcy554n5xp7","tag_id":"cl1rj2n5i002jgwcy7p8d4o1t","_id":"cl1rj2n5j002qgwcyd2rhct9u"},{"post_id":"cl1rj2n58000wgwcy8oa12fid","tag_id":"cl1rj2n5i002jgwcy7p8d4o1t","_id":"cl1rj2n5j002rgwcye5zdb0r5"},{"post_id":"cl1rj2n580010gwcyeijqcvmo","tag_id":"cl1rj2n4v0004gwcyc9v92a2c","_id":"cl1rj2n5j002tgwcycc36cvnn"},{"post_id":"cl1rj2n580010gwcyeijqcvmo","tag_id":"cl1rj2n5j002pgwcyahit2dy8","_id":"cl1rj2n5j002ugwcy2ipa2rrc"},{"post_id":"cl1rj2n590014gwcyefiqg007","tag_id":"cl1rj2n5j002sgwcy1ifr3ubk","_id":"cl1rj2n5k002zgwcyc1zj4c5v"},{"post_id":"cl1rj2n590014gwcyefiqg007","tag_id":"cl1rj2n5j002vgwcy62ud7s38","_id":"cl1rj2n5k0030gwcyagsv455n"},{"post_id":"cl1rj2n590014gwcyefiqg007","tag_id":"cl1rj2n5j002wgwcy9zp7cg6v","_id":"cl1rj2n5k0032gwcy9yej2h4e"},{"post_id":"cl1rj2n590014gwcyefiqg007","tag_id":"cl1rj2n5j002xgwcy5hbx9etw","_id":"cl1rj2n5k0033gwcy7ntf4rm2"},{"post_id":"cl1rj2n5a0018gwcy9ut2aykz","tag_id":"cl1rj2n5k002ygwcy3tu25kzk","_id":"cl1rj2n5k0036gwcyemor4w8v"},{"post_id":"cl1rj2n5a0018gwcy9ut2aykz","tag_id":"cl1rj2n5k0031gwcy4wzpa0sv","_id":"cl1rj2n5k0037gwcybwvk1ml2"},{"post_id":"cl1rj2n5a0018gwcy9ut2aykz","tag_id":"cl1rj2n5j002vgwcy62ud7s38","_id":"cl1rj2n5l0039gwcy8tk0d27s"},{"post_id":"cl1rj2n5b001bgwcyaka20m90","tag_id":"cl1rj2n5k0035gwcy3mzy4syu","_id":"cl1rj2n5l003agwcy1q5o4j1i"},{"post_id":"cl1rj2n5b001bgwcyaka20m90","tag_id":"cl1rj2n4v0004gwcyc9v92a2c","_id":"cl1rj2n5l003cgwcy7yc85bei"},{"post_id":"cl1rj2n5b001egwcyhjs0b9kk","tag_id":"cl1rj2n5i002jgwcy7p8d4o1t","_id":"cl1rj2n5l003dgwcycmqlgtxf"},{"post_id":"cl1rj2n5c001ggwcyg493c980","tag_id":"cl1rj2n5k0035gwcy3mzy4syu","_id":"cl1rj2n5l003egwcy2fw231ks"},{"post_id":"cl1rj2n5c001ggwcyg493c980","tag_id":"cl1rj2n4v0004gwcyc9v92a2c","_id":"cl1rj2n5l003fgwcyh8aa008p"}],"Tag":[{"name":"algorithm","_id":"cl1rj2n4v0004gwcyc9v92a2c"},{"name":"BFS","_id":"cl1rj2n4z000agwcyg4w6evhj"},{"name":"DFS","_id":"cl1rj2n56000qgwcya44ldxe3"},{"name":"BM","_id":"cl1rj2n590013gwcy4ltshd6l"},{"name":"search","_id":"cl1rj2n5a001agwcy0trp663m"},{"name":"背包问题","_id":"cl1rj2n5c001igwcybfiy8r92"},{"name":"DP","_id":"cl1rj2n5f001pgwcy7gxr42rt"},{"name":"computer network","_id":"cl1rj2n5f001ugwcyf6s90p2e"},{"name":"Graph","_id":"cl1rj2n5i002ggwcy4z6y25e1"},{"name":"Hexo","_id":"cl1rj2n5i002jgwcy7p8d4o1t"},{"name":"PERT","_id":"cl1rj2n5j002pgwcyahit2dy8"},{"name":"R2S","_id":"cl1rj2n5j002sgwcy1ifr3ubk"},{"name":"Computer Network","_id":"cl1rj2n5j002vgwcy62ud7s38"},{"name":"软路由","_id":"cl1rj2n5j002wgwcy9zp7cg6v"},{"name":"科学上网","_id":"cl1rj2n5j002xgwcy5hbx9etw"},{"name":"VPN","_id":"cl1rj2n5k002ygwcy3tu25kzk"},{"name":"IPsec","_id":"cl1rj2n5k0031gwcy4wzpa0sv"},{"name":"Binary-tree","_id":"cl1rj2n5k0035gwcy3mzy4syu"}]}}