{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-yun/source/yun.png","path":"yun.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-yun/source/yun.svg","path":"yun.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-yun/source/css/README.md","path":"css/README.md","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-yun/source/css/hexo-theme-yun.styl","path":"css/hexo-theme-yun.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-yun/source/js/chunk-TTX6TVTO.js","path":"js/chunk-TTX6TVTO.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-yun/source/js/chunk-YZ7E3ATC.js","path":"js/chunk-YZ7E3ATC.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-yun/source/js/gallery-decrypt.js","path":"js/gallery-decrypt.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-yun/source/js/hexo-theme-yun.js","path":"js/hexo-theme-yun.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-yun/source/js/pjax.js","path":"js/pjax.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-yun/source/js/say.js","path":"js/say.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-yun/source/js/sidebar.js","path":"js/sidebar.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-yun/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-yun/source/js/analytics/leancloud-visitors.js","path":"js/analytics/leancloud-visitors.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-yun/source/js/comments/disqus.js","path":"js/comments/disqus.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-yun/source/js/comments/waline.js","path":"js/comments/waline.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-yun/source/js/search/algolia-search.js","path":"js/search/algolia-search.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-yun/source/js/search/local-search.js","path":"js/search/local-search.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-yun/source/js/ui/banner.js","path":"js/ui/banner.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-yun/source/js/ui/fireworks.js","path":"js/ui/fireworks.js","modified":0,"renderable":1},{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/image/alipay.png","path":"image/alipay.png","modified":0,"renderable":0},{"_id":"source/image/avatar.jpg","path":"image/avatar.jpg","modified":0,"renderable":0},{"_id":"source/image/avatar_backup.jpg","path":"image/avatar_backup.jpg","modified":0,"renderable":0},{"_id":"source/image/head.jpg","path":"image/head.jpg","modified":0,"renderable":0},{"_id":"source/image/icon.png","path":"image/icon.png","modified":0,"renderable":0},{"_id":"source/image/qq.jpg","path":"image/qq.jpg","modified":0,"renderable":0},{"_id":"source/image/seedling-line.svg","path":"image/seedling-line.svg","modified":0,"renderable":0},{"_id":"source/image/wechat.jpg","path":"image/wechat.jpg","modified":0,"renderable":0},{"_id":"source/image/wechat.png","path":"image/wechat.png","modified":0,"renderable":0}],"Cache":[{"_id":"source/CNAME","hash":"5e2329bc423a886fdd08288eadb59845c3da790f","modified":1646482948952},{"_id":"source/_posts/Hexo_article.md","hash":"f804ddba19882fa516c8ca404410009afc20a9c1","modified":1645806823684},{"_id":"source/_posts/Hexo_creation.md","hash":"fb846a75038a2e67d853d8c901e40ae845565800","modified":1645879744387},{"_id":"source/_posts/R2S_build.md","hash":"c24e7de8552f272076f4831d24cbc3a7162f24e8","modified":1646487960569},{"_id":"source/_posts/binary_tree_1.md","hash":"71bba3511bafab98b45dae17978a1a75071851ce","modified":1645780360697},{"_id":"source/_posts/binary_tree_2.md","hash":"f61bc99a9384046e8ed6477a23a37f50a60008a8","modified":1645803225153},{"_id":"source/about/index.md","hash":"41597642b5c6c5e08e3eb76242780314274568c9","modified":1645713650016},{"_id":"source/image/avatar.jpg","hash":"371df290b2fe0600ba933d48751ac8f2cadc0a18","modified":1620444425181},{"_id":"source/image/avatar_backup.jpg","hash":"981b12aaf6e63ae11de7eb10483b2676ea88f990","modified":1620444392546},{"_id":"source/image/icon.png","hash":"980118ed1d6035f8a6173abbf6099c4227c055c1","modified":1645448328172},{"_id":"source/image/seedling-line.svg","hash":"40de46a2c2adab799174cf37cb722244d57430d9","modified":1645593037767},{"_id":"source/image/wechat.jpg","hash":"c7050b547d10944c3f802771962c11ab390255dc","modified":1645549964600},{"_id":"source/categories/index.md","hash":"d0543782c5c51744cfae826653eeb4d7691ce747","modified":1645607474937},{"_id":"source/tags/index.md","hash":"2fe1ce87f6f1757c9451f6f9eb9923f71a011ec9","modified":1645596353359},{"_id":"source/_posts/R2S_build/image-1.png","hash":"4a475083bd251f14329a16715da142571bd86747","modified":1645877859527},{"_id":"source/_posts/R2S_build/image-10.png","hash":"62f3de2b27546aff4cf6a616df3b3239e5d5d589","modified":1645877858928},{"_id":"source/_posts/R2S_build/image-5.png","hash":"56c526c61081288b63adab3db805722adedec86f","modified":1645877860008},{"_id":"source/_posts/R2S_build/image-7.png","hash":"b6b02dcf36560a6055756269e885694045ad33bc","modified":1645877859491},{"_id":"source/_posts/R2S_build/image-8.png","hash":"dedaee8c824811ffa4f3d27516e012a86636726e","modified":1645877859509},{"_id":"source/_posts/binary_tree_1/v2-0ccba83c7b3dbf7b89964c04021025d9_720w.jpg","hash":"f56981756349a08c44d83576af3e63798c87e21f","modified":1645779849426},{"_id":"source/_posts/binary_tree_2/image.png","hash":"779e786c51aefa1b4c15d9945a62b452137e2024","modified":1645712022573},{"_id":"source/image/alipay.png","hash":"6be1d1ffc3264828ea0a27a4ca30520dfa448bd6","modified":1645549226320},{"_id":"source/image/qq.jpg","hash":"679ce9b7fb0f782ddfb1177689cb0ae09fbded23","modified":1645550109050},{"_id":"source/image/wechat.png","hash":"4660b50917b947a91c35f55b0281c633b9b0addd","modified":1645549274237},{"_id":"source/_posts/Hexo_article/IMG_1479.jpg","hash":"f869ae1d27243b47840d63ffbe1bd136c7c7a503","modified":1645359648131},{"_id":"source/_posts/R2S_build/image-20220305212846426.png","hash":"ea4b0543826c23f95321520feaca18a54e27c00f","modified":1646486926504},{"_id":"source/_posts/R2S_build/image-9-1024x194.png","hash":"00c8bfd48272b1b8487d34e711ac2800569c3230","modified":1645877860038},{"_id":"source/_posts/R2S_build/image-2-1024x507.png","hash":"3f2c9846cdfeed98cf3b5bf94cb0a5d41de40705","modified":1645877860034},{"_id":"source/_posts/R2S_build/image-3-1024x485.png","hash":"72f68e697d9656bc5dfdf05584660bee9d89e29a","modified":1645877860035},{"_id":"source/_posts/binary_tree_1/image.png","hash":"486e325512c567f522e925b9fe9d58c24789176b","modified":1645779849495},{"_id":"node_modules/hexo-theme-yun/src/dist/global.d.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1645443376649},{"_id":"node_modules/hexo-theme-yun/LICENSE","hash":"a24ce67b002ff38718c549129d23d177bf951dbf","modified":1645443376638},{"_id":"node_modules/hexo-theme-yun/README.md","hash":"969b7c1aff6f54f05064970b355ba1e1d7da58c8","modified":1645443376813},{"_id":"node_modules/hexo-theme-yun/_vendors.yml","hash":"8146e23cc498d090f628d1f3252f193b4ea951bd","modified":1645443377053},{"_id":"node_modules/hexo-theme-yun/_config.yml","hash":"2ac00a6d68edfecedeefef66cc9c0d8d1ab21400","modified":1645443377052},{"_id":"node_modules/hexo-theme-yun/package.json","hash":"966ff428362862fb527f62a36da72d0ec405a3b3","modified":1645443376810},{"_id":"node_modules/hexo-theme-yun/languages/default.yml","hash":"5d50a944a8b527fd857c81b17a60e5cc414c5729","modified":1645443377054},{"_id":"node_modules/hexo-theme-yun/languages/en.yml","hash":"73d56d09af0cade0e47ee995f4110d06f831eabe","modified":1645443377054},{"_id":"node_modules/hexo-theme-yun/languages/ja.yml","hash":"18ab694a0c64f4c0e53b570495625901e883df24","modified":1645443377056},{"_id":"node_modules/hexo-theme-yun/languages/zh-CN.yml","hash":"a38b30c9c2fc6c4231ec60ac02538dae2d4e8527","modified":1645443377056},{"_id":"node_modules/hexo-theme-yun/layout/404.pug","hash":"e96d09b7d27c22c0759514b00ebcf21c711cb021","modified":1645443376815},{"_id":"node_modules/hexo-theme-yun/layout/category.pug","hash":"6d0a910ac2716c1acae5e7ab0c2a56e4d5438281","modified":1645443376821},{"_id":"node_modules/hexo-theme-yun/layout/archive.pug","hash":"067ac814d892dc6c0efe9c03c45abd712648e37e","modified":1645443376818},{"_id":"node_modules/hexo-theme-yun/layout/gallery.pug","hash":"b9a8f9c7512e42aff8dd097cf4f524430c71556f","modified":1645443376826},{"_id":"node_modules/hexo-theme-yun/layout/girls.pug","hash":"b22b459f7be4d91c00d85eeac5d00aee915e70a0","modified":1645443376827},{"_id":"node_modules/hexo-theme-yun/layout/index.pug","hash":"7322ea6d9cfb29b1bb13a31bb5f98abcf5d9f409","modified":1645443376836},{"_id":"node_modules/hexo-theme-yun/layout/links.pug","hash":"64d298ae7d0bd7126621b0b34b099e8808959161","modified":1645443376839},{"_id":"node_modules/hexo-theme-yun/layout/page.pug","hash":"15b6875edc58d55635848febbf88c7eac169ed4f","modified":1645443376843},{"_id":"node_modules/hexo-theme-yun/layout/post.pug","hash":"538c280a308326a058972828b4f69d16b232fd58","modified":1645443376859},{"_id":"node_modules/hexo-theme-yun/layout/slide.pug","hash":"4d1f3a40f3ded6d6df61d924caa38d0c675cc0b3","modified":1645443376862},{"_id":"node_modules/hexo-theme-yun/layout/tag.pug","hash":"6392c8ffd359008e32cc8ce63868a95727855527","modified":1645443376862},{"_id":"node_modules/hexo-theme-yun/source/yun.png","hash":"b8ae426fa5dd7579d23d189c222641d812c51c0a","modified":1645443376815},{"_id":"node_modules/hexo-theme-yun/source/yun.svg","hash":"aa027a0a9e7ba96c906b9fd2d9cd3f8018ff2e2d","modified":1645443377030},{"_id":"node_modules/hexo-theme-yun/src/.eslintrc","hash":"671a555e3c9b75af07b17af3050a227062419e66","modified":1645443376635},{"_id":"node_modules/hexo-theme-yun/src/.pnpm-debug.log","hash":"30c5016fb5be76432421aca0781d0c3c3918cdae","modified":1645443376812},{"_id":"node_modules/hexo-theme-yun/src/README.md","hash":"ec50acdc4dfacfb66cd7b2e5b80543c442d2a75f","modified":1645443376814},{"_id":"node_modules/hexo-theme-yun/src/global.d.ts","hash":"c92e655ce8764a8fdff250008d796a622a083dcb","modified":1645443377034},{"_id":"node_modules/hexo-theme-yun/src/package.json","hash":"87bb09fd806e7e7e4f0b07f9bf6dd908ffe480fe","modified":1645443376810},{"_id":"node_modules/hexo-theme-yun/src/tsconfig.json","hash":"f7624a69048691c9b61e3dc9f49636ae827eb64e","modified":1645443376811},{"_id":"node_modules/hexo-theme-yun/src/tsup.config.ts","hash":"02b20d3cc74a9f0c5a484b37041cd22f156fb05f","modified":1645443377037},{"_id":"node_modules/hexo-theme-yun/layout/_mixin/icon.pug","hash":"18ee2c33b4e6ef71c31d7955f9a20789fe6aa9e4","modified":1645443376830},{"_id":"node_modules/hexo-theme-yun/layout/_mixin/index.pug","hash":"378b5ccf052e951ee130d2ff56245e8faa7e020f","modified":1645443376831},{"_id":"node_modules/hexo-theme-yun/layout/_mixin/page-header.pug","hash":"7ab9c1a6099eda3a64f355caa4d8fac5deff94c6","modified":1645443376842},{"_id":"node_modules/hexo-theme-yun/layout/_mixin/post-categories.pug","hash":"d353f980d65918e8c04f892959b004e4904ce543","modified":1645443376844},{"_id":"node_modules/hexo-theme-yun/layout/_mixin/post-meta.pug","hash":"31b90b74399074814475fdbae2a4666891d452e0","modified":1645443376856},{"_id":"node_modules/hexo-theme-yun/layout/_mixin/post-collapse.pug","hash":"741195a5a29ecb5863b1fd0c3b203d960aae05c1","modified":1645443376852},{"_id":"node_modules/hexo-theme-yun/layout/_mixin/post-tags.pug","hash":"b36dc6e1be7eede047f1f355bd4d095078b342d2","modified":1645443376858},{"_id":"node_modules/hexo-theme-yun/layout/_partial/banner.pug","hash":"ec089f56b2c37054223734ea9161d9b6e5ae0373","modified":1645443376820},{"_id":"node_modules/hexo-theme-yun/layout/_partial/background.pug","hash":"2c369cbdbfd9c9c1fa31a860a77617c4d33e5e21","modified":1645443376819},{"_id":"node_modules/hexo-theme-yun/layout/_partial/extended.pug","hash":"185c2238e8678ff9cb32a7b14c144a1f14dd5f92","modified":1645443376824},{"_id":"node_modules/hexo-theme-yun/layout/_partial/footer.pug","hash":"288d232e66c97dfbf870cb3bd4ffc2c81e387bdc","modified":1645443376825},{"_id":"node_modules/hexo-theme-yun/layout/_partial/head.pug","hash":"f696f92349df353dc5eabdd92859efa36ae675ca","modified":1645443376830},{"_id":"node_modules/hexo-theme-yun/layout/_partial/layout.pug","hash":"311eca2b2c42deafb183fdf600984a35bb0bc57b","modified":1645443376838},{"_id":"node_modules/hexo-theme-yun/layout/_partial/pagination.pug","hash":"b55b6a99b105447b4a6c982fa258680a2a9a34a9","modified":1645443376843},{"_id":"node_modules/hexo-theme-yun/layout/_partial/recent-posts.pug","hash":"80538fd5a3ae45d7304e083c274fdf6710dc32c0","modified":1645443376859},{"_id":"node_modules/hexo-theme-yun/layout/_partial/sidebar.pug","hash":"b15fa6fc27091b6bd1cf68368879d8d2f5428f55","modified":1645443376861},{"_id":"node_modules/hexo-theme-yun/layout/_third-party/aplayer.pug","hash":"642445a227e8b702be443958b49901d7c884555f","modified":1645443376816},{"_id":"node_modules/hexo-theme-yun/layout/_third-party/cdn.pug","hash":"2022e2664912fdbfc0d74e83cbed57e228fa33a1","modified":1645443376822},{"_id":"node_modules/hexo-theme-yun/layout/_third-party/google-tagmanager.pug","hash":"01724665b723aaa1b5fc3a63e3b538970efcd13c","modified":1645443376829},{"_id":"node_modules/hexo-theme-yun/layout/_third-party/iconify.pug","hash":"03121fc0ae99dcf9ae9039beb1a6b26bd289c988","modified":1645443376831},{"_id":"node_modules/hexo-theme-yun/layout/_third-party/index.pug","hash":"c7ca05ff19e71b141ecfbe031a63e225178c2eec","modified":1645443376833},{"_id":"node_modules/hexo-theme-yun/layout/_third-party/lightgallery.pug","hash":"f47e020b9dd2e51c0b78f2718eece58c4448fd15","modified":1645443376839},{"_id":"node_modules/hexo-theme-yun/layout/_third-party/pjax.pug","hash":"4c137fe0ba8cac806f5c9a4ca723c0bc233ca8da","modified":1645443376843},{"_id":"node_modules/hexo-theme-yun/layout/_widget/aplayer.pug","hash":"45675643a8d5e64117f94612e517ce4dff6ca053","modified":1645443376817},{"_id":"node_modules/hexo-theme-yun/layout/_widget/back-to-top.pug","hash":"c8bffdede2cbe8dcb2e4b903d1a9f4a793aa9650","modified":1645443376818},{"_id":"node_modules/hexo-theme-yun/layout/_widget/cloud.pug","hash":"8903d1311bf5f68dcc23e520cb4f1e4385aff70d","modified":1645443376822},{"_id":"node_modules/hexo-theme-yun/layout/_widget/index.pug","hash":"4d1a35e4e0dc485733b0697d073d4f56afb7c1a2","modified":1645443376835},{"_id":"node_modules/hexo-theme-yun/layout/_widget/mourn.pug","hash":"22fab84749be6a28814e4d79fb074a31dee44e1b","modified":1645443376841},{"_id":"node_modules/hexo-theme-yun/layout/_widget/notice.pug","hash":"780a10dbf308022790c58a4d2117dc2f48581531","modified":1645443376842},{"_id":"node_modules/hexo-theme-yun/layout/_widget/say.pug","hash":"e02ffa7b837e3ff387d0cc888b9fed39c717628b","modified":1645443376860},{"_id":"node_modules/hexo-theme-yun/scripts/events/config.js","hash":"1655af9c2e13c2ea33d7eea70a7700df0c31d506","modified":1645443376644},{"_id":"node_modules/hexo-theme-yun/scripts/events/data.js","hash":"4be7cf0de74a8ebf84472ddf1e9a9276101c5b9e","modified":1645443376645},{"_id":"node_modules/hexo-theme-yun/scripts/events/index.js","hash":"d5bdd3c6a51fa042ae17b45531f459b76ac4b3be","modified":1645443376650},{"_id":"node_modules/hexo-theme-yun/scripts/events/utils.js","hash":"700ad26e83b53358f6c01c42708be02f735f647c","modified":1645443376807},{"_id":"node_modules/hexo-theme-yun/scripts/filters/index.js","hash":"fcbfa46a8e6b3006a93966941b2bb446cb77a62d","modified":1645443376651},{"_id":"node_modules/hexo-theme-yun/scripts/helpers/encrypt.js","hash":"efc3c8b54288e278e1f74fedab6526881d6ea30f","modified":1645443376646},{"_id":"node_modules/hexo-theme-yun/scripts/helpers/engine.js","hash":"59a1ea9fd5b49398c97e844f04d00c0760b8f707","modified":1645443376647},{"_id":"node_modules/hexo-theme-yun/scripts/helpers/yun-config.js","hash":"da8eb62439851bbee1c08708ac7ef19372b28a7b","modified":1645443376809},{"_id":"node_modules/hexo-theme-yun/scripts/helpers/index.js","hash":"c0d4c363423ef189d78efe158220fbccc759cd78","modified":1645443376800},{"_id":"node_modules/hexo-theme-yun/scripts/tags/prompt.js","hash":"36f6916721c61b7b03f655088d931c5ea1658d32","modified":1645443376805},{"_id":"node_modules/hexo-theme-yun/source/css/README.md","hash":"9f65c9d90a2764bd7b1a32cabc7013bfd3285594","modified":1645443376813},{"_id":"node_modules/hexo-theme-yun/source/css/hexo-theme-yun.styl","hash":"9d7a11fc1d8196812907fc4a0557ffd10420c39c","modified":1645443376986},{"_id":"node_modules/hexo-theme-yun/source/js/chunk-TTX6TVTO.js","hash":"bdf31df5623cdbe4d6629c1d602cad7a15e5cf78","modified":1645443376642},{"_id":"node_modules/hexo-theme-yun/source/js/chunk-YZ7E3ATC.js","hash":"5bb1683531dd823bb4de8b6541f0290d46006320","modified":1645443376643},{"_id":"node_modules/hexo-theme-yun/source/js/gallery-decrypt.js","hash":"ce7bf147867972a0f9e903eebf66b7e0f0145f61","modified":1645443376649},{"_id":"node_modules/hexo-theme-yun/source/js/hexo-theme-yun.js","hash":"94d9c460fc7e8658f21fcc7f9af346fc5e9d4a63","modified":1645443376649},{"_id":"node_modules/hexo-theme-yun/source/js/pjax.js","hash":"4d59377e0b830db741c2786d4ccbb2f5498ee13e","modified":1645443376804},{"_id":"node_modules/hexo-theme-yun/source/js/say.js","hash":"59c8436cecab357b196c37fe0345e932e7f74dbe","modified":1645443376806},{"_id":"node_modules/hexo-theme-yun/source/js/sidebar.js","hash":"ee176346d586bebbd146f157c23f9d367d5499a4","modified":1645443376806},{"_id":"node_modules/hexo-theme-yun/source/js/utils.js","hash":"36ec1d14c7537ad402e577d5deea7c09160197f8","modified":1645443376807},{"_id":"node_modules/hexo-theme-yun/src/.vscode/settings.json","hash":"71ea8c8a578214ef15ae5530b4d745f59aab2ac7","modified":1645443376811},{"_id":"node_modules/hexo-theme-yun/src/dist/chunk-HJP66R6O.js","hash":"e14e05eaf2c759b7d77906692db89cc4584cc142","modified":1645443376642},{"_id":"node_modules/hexo-theme-yun/src/dist/hexo-theme-yun.js","hash":"4470ce6dce40c74905b9410e07949d4b046372e2","modified":1645443376650},{"_id":"node_modules/hexo-theme-yun/src/dist/pjax.js","hash":"41d57a781bef30d2d12253509152e437ffd328ac","modified":1645443376805},{"_id":"node_modules/hexo-theme-yun/src/dist/utils.js","hash":"ac24669143fd31ea625e692599562e97484b79ac","modified":1645443376808},{"_id":"node_modules/hexo-theme-yun/src/source/gallery-decrypt.ts","hash":"461dcbe6790babb2001ef6ac413a84c066a30f97","modified":1645443377033},{"_id":"node_modules/hexo-theme-yun/src/source/hexo-theme-yun.ts","hash":"f759ad5ba4ec3d36e1bf966d8be585092d970e28","modified":1645443377034},{"_id":"node_modules/hexo-theme-yun/src/source/pjax.ts","hash":"bc5c9aae476a4d3f629300c73a9e0634114b38b9","modified":1645443377035},{"_id":"node_modules/hexo-theme-yun/src/source/say.ts","hash":"975eb74de51fbc8ec188039259981160525b745a","modified":1645443377036},{"_id":"node_modules/hexo-theme-yun/src/source/sidebar.ts","hash":"004473305b49aa2db5bbfe91695ae24828dbf3fc","modified":1645443377037},{"_id":"node_modules/hexo-theme-yun/src/source/utils.ts","hash":"a33bf7980de56421906a25364d94bec057d46f42","modified":1645443377038},{"_id":"node_modules/hexo-theme-yun/layout/_partial/post/post-content.pug","hash":"eb5a9b48e1a2172af74ac1b4c3851d7c6a9fc6f8","modified":1645443376853},{"_id":"node_modules/hexo-theme-yun/layout/_partial/post/post-copyright.pug","hash":"a2415fb36a0dffbe57bf32cd2cfeace11cbaed6b","modified":1645443376854},{"_id":"node_modules/hexo-theme-yun/layout/_partial/post/post-edit.pug","hash":"09d21451a8464047777dcbda09c14b1140396dd8","modified":1645443376855},{"_id":"node_modules/hexo-theme-yun/layout/_partial/post/post-schema.pug","hash":"ec85079174da20c9f608b142e7fda2c28a9b1dac","modified":1645443376857},{"_id":"node_modules/hexo-theme-yun/layout/_partial/post/post-nav.pug","hash":"a951544cfa6127f3284e221cdf6c3e2dcb9801c9","modified":1645443376857},{"_id":"node_modules/hexo-theme-yun/layout/_partial/post/reward.pug","hash":"ceccfe15e3be500274fda527a6d6234ffddf93b8","modified":1645443376860},{"_id":"node_modules/hexo-theme-yun/layout/_partial/sidebar/info.pug","hash":"a4db9946c319629ecc1983375afdcf243cfc7847","modified":1645443376837},{"_id":"node_modules/hexo-theme-yun/layout/_third-party/adsense/google-adsense.pug","hash":"ae63305d776ebec0d88f91197b5c78cdaa401585","modified":1645443376828},{"_id":"node_modules/hexo-theme-yun/layout/_third-party/analytics/busuanzi.pug","hash":"a2503ff7bbaf05e9205fd36177f803cf91021e05","modified":1645443376821},{"_id":"node_modules/hexo-theme-yun/layout/_third-party/analytics/google-analytics.pug","hash":"3cb12c4ec3f5dbaeccf1a63a6aaa9e31dcaf926e","modified":1645443376829},{"_id":"node_modules/hexo-theme-yun/layout/_third-party/analytics/leancloud-visitors.pug","hash":"e7debe84507235c2a92a78e2367727a061e94ba1","modified":1645443376838},{"_id":"node_modules/hexo-theme-yun/layout/_third-party/comments/disqus.pug","hash":"71e78e45545ac6872ca921fe84af15b8e797e8e6","modified":1645443376823},{"_id":"node_modules/hexo-theme-yun/layout/_third-party/comments/disqusjs.pug","hash":"dea47f1db45f60f9c03498f628591f0197e3df0c","modified":1645443376824},{"_id":"node_modules/hexo-theme-yun/layout/_third-party/comments/giscus.pug","hash":"f4c1eeb652839300b7358a117cb89cee72fa257b","modified":1645443376827},{"_id":"node_modules/hexo-theme-yun/layout/_third-party/comments/github-discussions.pug","hash":"84ba9bc5f4c1daf9636648c181c9a781706fb18d","modified":1645443376827},{"_id":"node_modules/hexo-theme-yun/layout/_third-party/comments/github-issues.pug","hash":"a2209c9d873b88a830c518d80a754fe2068e0b55","modified":1645443376828},{"_id":"node_modules/hexo-theme-yun/layout/_third-party/comments/index.pug","hash":"ec6e1d4498cdec56b384216d3efccfdcc617e57b","modified":1645443376833},{"_id":"node_modules/hexo-theme-yun/layout/_third-party/comments/livere.pug","hash":"b81ed4fb8a0ca32ccfb8e22c37ac48e4be1f4152","modified":1645443376840},{"_id":"node_modules/hexo-theme-yun/layout/_third-party/comments/minivaline.pug","hash":"9df0dfb60176a2c53c2e76a94bfa107238853a3d","modified":1645443376841},{"_id":"node_modules/hexo-theme-yun/layout/_third-party/comments/twikoo.pug","hash":"aca9a0970a95290bb4e3e584253cd024517b50f5","modified":1645443376863},{"_id":"node_modules/hexo-theme-yun/layout/_third-party/comments/utterances.pug","hash":"712f893469f258e969806e1b55d0d2ac926761be","modified":1645443376863},{"_id":"node_modules/hexo-theme-yun/layout/_third-party/comments/valine.pug","hash":"b6803c17e37d5e6eeb8d5315e85a36a8bb4e7915","modified":1645443376864},{"_id":"node_modules/hexo-theme-yun/layout/_third-party/comments/waline.pug","hash":"6b8fdd8368af743b29a8aeb27506cd9c52d950cc","modified":1645443376864},{"_id":"node_modules/hexo-theme-yun/layout/_third-party/math/index.pug","hash":"9a61d4923fad7c778f0bf2ce8c81744b126e6a1f","modified":1645443376834},{"_id":"node_modules/hexo-theme-yun/layout/_third-party/math/katex.pug","hash":"f296f8be36bf95034c7a3536e9203874dfabfaed","modified":1645443376837},{"_id":"node_modules/hexo-theme-yun/layout/_third-party/mermaid/index.pug","hash":"52b8567a5527fe85b41ac2a0a6adb113ba6b7205","modified":1645443376835},{"_id":"node_modules/hexo-theme-yun/layout/_third-party/mermaid/mermaid.pug","hash":"d691390d91d298dc705a828897d2e4357d6794f5","modified":1645443376840},{"_id":"node_modules/hexo-theme-yun/layout/_third-party/seo/baidu-push.pug","hash":"0669b8c7e54c0a80e1f36e720e299cf0cd1182fe","modified":1645443376820},{"_id":"node_modules/hexo-theme-yun/layout/_widget/search/algolia-search.pug","hash":"df52fcef82e01d1b1d96dad2df516acffc298435","modified":1645443376816},{"_id":"node_modules/hexo-theme-yun/layout/_widget/search/index.pug","hash":"05271074172be21c014cd862a25f5112d0b3710c","modified":1645443376836},{"_id":"node_modules/hexo-theme-yun/layout/_widget/search/local-search.pug","hash":"cfa6110862e1940f861d2bb122333634225de580","modified":1645443376840},{"_id":"node_modules/hexo-theme-yun/source/css/_components/button.styl","hash":"3315fc12b1b7659a06120b042a1a2e87a839ebe1","modified":1645443376979},{"_id":"node_modules/hexo-theme-yun/source/css/_components/card.styl","hash":"1e5f8da293d53c6f352aa17fc625f88bd0840fa6","modified":1645443376979},{"_id":"node_modules/hexo-theme-yun/source/css/_components/scrollbar.styl","hash":"2d735d019b58a1e6fea297e0027c33a4a7bc1858","modified":1645443377000},{"_id":"node_modules/hexo-theme-yun/source/css/_components/ui.styl","hash":"8ef28ee3363f3676c9327a6d163032a003520f40","modified":1645443377028},{"_id":"node_modules/hexo-theme-yun/source/css/_extend/albums.styl","hash":"1e7c7730c89b6d81da37f6565239679b5075234b","modified":1645443376867},{"_id":"node_modules/hexo-theme-yun/source/css/_extend/girls.styl","hash":"e83c8b1219d0117bc342c40030e106b21245dddf","modified":1645443376984},{"_id":"node_modules/hexo-theme-yun/source/css/_global/dark.styl","hash":"1bb7e112f388f681199a37fabfdc1ec1544b9afd","modified":1645443376982},{"_id":"node_modules/hexo-theme-yun/source/css/_global/index.styl","hash":"6ee9d2bd59706e79e8932bcfc09d86c124467452","modified":1645443376987},{"_id":"node_modules/hexo-theme-yun/source/css/_global/reset.styl","hash":"d1640eb4f76a3cf792c5149e93c42c85da5a29b2","modified":1645443377000},{"_id":"node_modules/hexo-theme-yun/source/css/_helper/index.styl","hash":"a137adf7cb787fbacb9e37101d546eccf365aadc","modified":1645443376988},{"_id":"node_modules/hexo-theme-yun/source/css/_layout/banner.styl","hash":"488a1078c9a417e9bf0af80e897d12e7d1530a9a","modified":1645443376977},{"_id":"node_modules/hexo-theme-yun/source/css/_layout/footer.styl","hash":"ed3afcddad7358ebd89f01846157e26a586e7adf","modified":1645443376983},{"_id":"node_modules/hexo-theme-yun/source/css/_layout/links.styl","hash":"3174cf42a1f79f814ea0a14798f6c5fe28b5dda9","modified":1645443376991},{"_id":"node_modules/hexo-theme-yun/source/css/_layout/main.styl","hash":"2c39ba5d789224bdece3f7c16bc7a82b3e899bf4","modified":1645443376992},{"_id":"node_modules/hexo-theme-yun/source/css/_layout/page.styl","hash":"6ec814a0fccf73a22ba6b94f6d4bba889cbaf0b5","modified":1645443376993},{"_id":"node_modules/hexo-theme-yun/source/css/_layout/pagination.styl","hash":"a4da4433f5c11b4de36782b7dac059bf67dde938","modified":1645443376993},{"_id":"node_modules/hexo-theme-yun/source/css/_layout/post.styl","hash":"2d495981c7456095ae62f97e9c032e1f3fb03cda","modified":1645443376999},{"_id":"node_modules/hexo-theme-yun/source/css/_mixins/base.styl","hash":"2531c22a33aa929dd6bf6c1b9975efc0a70e4a8d","modified":1645443376978},{"_id":"node_modules/hexo-theme-yun/source/css/_variables/_base.styl","hash":"0288e3196318b116f991b043486fbc0b4b0bc579","modified":1645443376865},{"_id":"node_modules/hexo-theme-yun/source/css/_variables/_colors.styl","hash":"5842436c6b74763866a1bc38d1c7cfed715e9e22","modified":1645443376866},{"_id":"node_modules/hexo-theme-yun/source/css/_variables/_code.styl","hash":"2674ad7562f5b6f42d26291e8f5ead7f501a3c46","modified":1645443376865},{"_id":"node_modules/hexo-theme-yun/source/css/_variables/var.styl","hash":"849841036c26b418e80f57b3e1c5d8128907cafb","modified":1645443377029},{"_id":"node_modules/hexo-theme-yun/source/css/_widget/back-to-top.styl","hash":"5898b0c6c36fd1d2ff5408ca098e345ebf04008c","modified":1645443376869},{"_id":"node_modules/hexo-theme-yun/source/css/_widget/comment.styl","hash":"65c0fa4add73c919ea4c8f8c03321e1781f95b4e","modified":1645443376981},{"_id":"node_modules/hexo-theme-yun/source/css/_widget/index.styl","hash":"a740126826a0ae9a1a2860fbb9c8d805d006aad6","modified":1645443376989},{"_id":"node_modules/hexo-theme-yun/source/css/_widget/notice.styl","hash":"1d68860529a4fd8d3f63d2f257ed32b4e0f1167f","modified":1645443376992},{"_id":"node_modules/hexo-theme-yun/source/css/_widget/say.styl","hash":"c47dd38477c08d31e0813610263200322e8f5ebe","modified":1645443377000},{"_id":"node_modules/hexo-theme-yun/source/js/analytics/leancloud-visitors.js","hash":"89952ef9eb5fe84c856068a6e6c274e396f74dd5","modified":1645443376803},{"_id":"node_modules/hexo-theme-yun/source/js/comments/disqus.js","hash":"4073464ce42643d9571211b1443af61fc78ec0d1","modified":1645443376646},{"_id":"node_modules/hexo-theme-yun/source/js/comments/waline.js","hash":"090fc554d82400dca9ae6a2806be48c111b90b3e","modified":1645443376808},{"_id":"node_modules/hexo-theme-yun/source/js/search/algolia-search.js","hash":"aa26c979800de87ecfd9d0ba2ae7e238da2389ba","modified":1645443376639},{"_id":"node_modules/hexo-theme-yun/source/js/search/local-search.js","hash":"db5cbac019bd86c47cac02e6dba1dfb1861ef31f","modified":1645443376804},{"_id":"node_modules/hexo-theme-yun/source/js/ui/banner.js","hash":"c73ce4b3021bebf1a264e481dbe9a8a1ccd87d3b","modified":1645443376640},{"_id":"node_modules/hexo-theme-yun/source/js/ui/fireworks.js","hash":"859b09a6065ea1b4f02f2974e590e44cc13fccc9","modified":1645443376648},{"_id":"node_modules/hexo-theme-yun/src/source/analytics/leancloud-visitors.ts","hash":"396c4a2336b57ef25e8a932db2ec60b0f26baf8f","modified":1645443377035},{"_id":"node_modules/hexo-theme-yun/src/source/comments/disqus.ts","hash":"8674af1b65a5abd6457ef76ec8380fe5e6bc467e","modified":1645443377032},{"_id":"node_modules/hexo-theme-yun/src/source/comments/waline.ts","hash":"6573f476c38e183b1cb02e601dc83771ee3c699e","modified":1645443377038},{"_id":"node_modules/hexo-theme-yun/src/source/search/algolia-search.ts","hash":"ce7424ec5d691c2bc3189e396f8c83d2594c6150","modified":1645443377030},{"_id":"node_modules/hexo-theme-yun/src/source/search/local-search.ts","hash":"e173724650a37f854dd59104beb1b8de01faceeb","modified":1645443377035},{"_id":"node_modules/hexo-theme-yun/src/source/ui/banner.ts","hash":"06c13048fb987a7baa6eee04fc6ae186b06954b2","modified":1645443377031},{"_id":"node_modules/hexo-theme-yun/src/source/ui/fireworks.ts","hash":"17783643f514d2568c2f9121f43754dc12c29fbc","modified":1645443377033},{"_id":"node_modules/hexo-theme-yun/source/css/_components/post/post-card.styl","hash":"048208163b5554110708b9c791fd64468b76f8ca","modified":1645443376994},{"_id":"node_modules/hexo-theme-yun/source/css/_components/post/post-codebloack.styl","hash":"c3cf80ace92d9ba5711cdf487f818cd31598866c","modified":1645443376995},{"_id":"node_modules/hexo-theme-yun/source/css/_components/post/post-collapse.styl","hash":"6741c225a37e7e121d4159f129b7024402a8eeec","modified":1645443376996},{"_id":"node_modules/hexo-theme-yun/source/css/_components/post/post-header.styl","hash":"2e674b76b47b3e6226269fe357d8b937b7a007a8","modified":1645443376996},{"_id":"node_modules/hexo-theme-yun/source/css/_components/post/post-markdown.styl","hash":"d7a5002f2f00287f55c0d9f2f8081cc8bd742786","modified":1645443376997},{"_id":"node_modules/hexo-theme-yun/source/css/_components/post/post-nav.styl","hash":"a9e5f18cee94944c43b0c09d6ec840b78c1f1aa0","modified":1645443376998},{"_id":"node_modules/hexo-theme-yun/source/css/_components/post/post-reward.styl","hash":"f69f5770e0908a8e8a0931f67e2417b0e1692613","modified":1645443376999},{"_id":"node_modules/hexo-theme-yun/source/css/_components/sidebar/hamburger.styl","hash":"0fa240e8a71fdad14d3fd6b3fd49cf697d4c8153","modified":1645443376985},{"_id":"node_modules/hexo-theme-yun/source/css/_components/sidebar/sidebar-nav.styl","hash":"d8feec6f13ca9bd714e4fe7189abf1907848efef","modified":1645443377001},{"_id":"node_modules/hexo-theme-yun/source/css/_components/sidebar/sidebar-toc.styl","hash":"b4b42a6dc949b52b5a861239905d333e1db6c64f","modified":1645443377002},{"_id":"node_modules/hexo-theme-yun/source/css/_components/sidebar/sidebar.styl","hash":"c1266c1039f6ac26884f4619265b29bdb1a9e31c","modified":1645443377002},{"_id":"node_modules/hexo-theme-yun/source/css/_components/sidebar/site-overview.styl","hash":"620772d3b2da06d94ef6fb25c6aee3c4eb48767b","modified":1645443377028},{"_id":"node_modules/hexo-theme-yun/source/css/_extend/tags/index.styl","hash":"1c4ae0e519bb8629425235f2efd80addfc2bee93","modified":1645443376987},{"_id":"node_modules/hexo-theme-yun/source/css/_extend/tags/prompt.styl","hash":"553d59840e1c9217b49b902cfe1ac520bbf71e5c","modified":1645443376999},{"_id":"node_modules/hexo-theme-yun/source/css/_widget/search/algolia-search.styl","hash":"69916b23d54859160c4fda5ee809b8375fc56151","modified":1645443376869},{"_id":"node_modules/hexo-theme-yun/source/css/_widget/search/index.styl","hash":"c396e3205eb672c96fdb93c12ff66e730ab323ee","modified":1645443376990},{"_id":"node_modules/hexo-theme-yun/source/css/_widget/search/local-search.styl","hash":"bcb8e5d593d49e370312e17eadf9f1e13aa22829","modified":1645443376991},{"_id":"source/_posts/Hexo_article/traffic-light.gif","hash":"0c18d7a2a137b37b0af5b1c647aa12a3393dec64","modified":1645802925442},{"_id":"source/_posts/Hexo_article/2d6f869662e83398f06070e2a14f838.jpg","hash":"e891f3a3b28cbefa79db0d9fd17939f3df865836","modified":1645359769594},{"_id":"source/image/head.jpg","hash":"91d9c38a4f5864f68119064c8e61227e6b7719aa","modified":1569071034680},{"_id":"source/_posts/Hexo_article/884019afce82603bd8bc8fd4e531839.jpg","hash":"464c9842be81f3cc1cb18df887b8f497216e1d80","modified":1645288976385},{"_id":"public/search.xml","hash":"e3f7651a34e76febcf75c5b341c25b64a3c47c04","modified":1646488093243},{"_id":"public/about/index.html","hash":"8edc6b4026cfd265e2aec7e0c1fc2be508822ee6","modified":1646488093243},{"_id":"public/tags/index.html","hash":"c25834fb3c8865e9183509cad3984ca23199092b","modified":1646488093243},{"_id":"public/categories/index.html","hash":"472911ab6277f64bf6888dc9c0a74ff14d385934","modified":1646488093243},{"_id":"public/archives/index.html","hash":"fd1d26e1db80ca1f2ff92d80cb2f7cf5e61f7d68","modified":1646488093243},{"_id":"public/archives/2022/index.html","hash":"2802e61b19427b7fe60e3c352acc8a2fe7b8f40e","modified":1646488093243},{"_id":"public/archives/2022/02/index.html","hash":"43de3ffb9884d7d46b2a19ea9c3544a5ce67a226","modified":1646488093243},{"_id":"public/categories/Hexo搭建/index.html","hash":"7719ddca4df956acb109bc4f2a7a178d2f2dd6c3","modified":1646488093243},{"_id":"public/categories/计算机网络/index.html","hash":"02ed652f1cd7abb286d717f209aab4f7e8535f58","modified":1646488093243},{"_id":"public/categories/algorithm/index.html","hash":"27a5062b85be2a2130876acc254a5cc7055b1e48","modified":1646488093243},{"_id":"public/tags/Hexo/index.html","hash":"200c077018961921593f841704ff39766fe80446","modified":1646488093243},{"_id":"public/tags/R2S/index.html","hash":"e683bf723e8efc85ca572d1c445750911f30b414","modified":1646488093243},{"_id":"public/tags/Computer-Network/index.html","hash":"31a78311db1cf676fbd47bfce6f8a3cb2e560251","modified":1646488093243},{"_id":"public/tags/软路由/index.html","hash":"0f0de2174b302a35ac087d184a05646b14eaee7e","modified":1646488093243},{"_id":"public/tags/科学上网/index.html","hash":"ce492db7f96775a38e4278dd1dd1c9a2915ccdf8","modified":1646488093243},{"_id":"public/tags/Binary-tree/index.html","hash":"e155055c423c18ed1288c4e457dac15219a71759","modified":1646488093243},{"_id":"public/2022/02/26/R2S_build/index.html","hash":"09890909b00f7af91974cc9ddc16a4c1e75df66a","modified":1646488093243},{"_id":"public/2022/02/25/binary_tree_1/index.html","hash":"f726ff31a069bc46bade46f47160056cabc47b23","modified":1646488093243},{"_id":"public/2022/02/24/binary_tree_2/index.html","hash":"6eeffad690e2d9b35663936c26f2547e1cba24eb","modified":1646488093243},{"_id":"public/2022/02/24/Hexo_creation/index.html","hash":"4a97c315824c918221abd88dd33910fdfe1bf27e","modified":1646488093243},{"_id":"public/2022/02/20/Hexo_article/index.html","hash":"c383f7d11663a0ad4b35e41474befd32ee67a252","modified":1646488093243},{"_id":"public/index.html","hash":"33984ce67cbf2ee1791b7f419be4cd3b53436adb","modified":1646488093243},{"_id":"public/tags/algorithm/index.html","hash":"6f73927ceb34b16f8cab3adb9331dd19a54f2154","modified":1646488093243},{"_id":"public/yun.png","hash":"b8ae426fa5dd7579d23d189c222641d812c51c0a","modified":1646488093243},{"_id":"public/yun.svg","hash":"aa027a0a9e7ba96c906b9fd2d9cd3f8018ff2e2d","modified":1646488093243},{"_id":"public/CNAME","hash":"5e2329bc423a886fdd08288eadb59845c3da790f","modified":1646488093243},{"_id":"public/image/avatar.jpg","hash":"371df290b2fe0600ba933d48751ac8f2cadc0a18","modified":1646488093243},{"_id":"public/image/avatar_backup.jpg","hash":"981b12aaf6e63ae11de7eb10483b2676ea88f990","modified":1646488093243},{"_id":"public/image/icon.png","hash":"980118ed1d6035f8a6173abbf6099c4227c055c1","modified":1646488093243},{"_id":"public/image/seedling-line.svg","hash":"40de46a2c2adab799174cf37cb722244d57430d9","modified":1646488093243},{"_id":"public/image/wechat.jpg","hash":"c7050b547d10944c3f802771962c11ab390255dc","modified":1646488093243},{"_id":"public/2022/02/26/R2S_build/image-1.png","hash":"4a475083bd251f14329a16715da142571bd86747","modified":1646488093243},{"_id":"public/2022/02/26/R2S_build/image-10.png","hash":"62f3de2b27546aff4cf6a616df3b3239e5d5d589","modified":1646488093243},{"_id":"public/2022/02/26/R2S_build/image-5.png","hash":"56c526c61081288b63adab3db805722adedec86f","modified":1646488093243},{"_id":"public/2022/02/26/R2S_build/image-7.png","hash":"b6b02dcf36560a6055756269e885694045ad33bc","modified":1646488093243},{"_id":"public/2022/02/26/R2S_build/image-8.png","hash":"dedaee8c824811ffa4f3d27516e012a86636726e","modified":1646488093243},{"_id":"public/2022/02/25/binary_tree_1/v2-0ccba83c7b3dbf7b89964c04021025d9_720w.jpg","hash":"f56981756349a08c44d83576af3e63798c87e21f","modified":1646488093243},{"_id":"public/2022/02/24/binary_tree_2/image.png","hash":"779e786c51aefa1b4c15d9945a62b452137e2024","modified":1646488093243},{"_id":"public/image/alipay.png","hash":"6be1d1ffc3264828ea0a27a4ca30520dfa448bd6","modified":1646488093243},{"_id":"public/image/qq.jpg","hash":"679ce9b7fb0f782ddfb1177689cb0ae09fbded23","modified":1646488093243},{"_id":"public/image/wechat.png","hash":"4660b50917b947a91c35f55b0281c633b9b0addd","modified":1646488093243},{"_id":"public/2022/02/20/Hexo_article/IMG_1479.jpg","hash":"f869ae1d27243b47840d63ffbe1bd136c7c7a503","modified":1646488093243},{"_id":"public/2022/02/26/R2S_build/image-20220305212846426.png","hash":"ea4b0543826c23f95321520feaca18a54e27c00f","modified":1646488093243},{"_id":"public/2022/02/26/R2S_build/image-9-1024x194.png","hash":"00c8bfd48272b1b8487d34e711ac2800569c3230","modified":1646488093243},{"_id":"public/css/README.html","hash":"dbe04d4345ad48b3fba4320407bd080a344defc1","modified":1646488093243},{"_id":"public/js/chunk-TTX6TVTO.js","hash":"bdf31df5623cdbe4d6629c1d602cad7a15e5cf78","modified":1646488093243},{"_id":"public/js/chunk-YZ7E3ATC.js","hash":"5bb1683531dd823bb4de8b6541f0290d46006320","modified":1646488093243},{"_id":"public/js/gallery-decrypt.js","hash":"ce7bf147867972a0f9e903eebf66b7e0f0145f61","modified":1646488093243},{"_id":"public/js/hexo-theme-yun.js","hash":"94d9c460fc7e8658f21fcc7f9af346fc5e9d4a63","modified":1646488093243},{"_id":"public/js/pjax.js","hash":"4d59377e0b830db741c2786d4ccbb2f5498ee13e","modified":1646488093243},{"_id":"public/js/say.js","hash":"59c8436cecab357b196c37fe0345e932e7f74dbe","modified":1646488093243},{"_id":"public/js/sidebar.js","hash":"ee176346d586bebbd146f157c23f9d367d5499a4","modified":1646488093243},{"_id":"public/js/utils.js","hash":"36ec1d14c7537ad402e577d5deea7c09160197f8","modified":1646488093243},{"_id":"public/js/analytics/leancloud-visitors.js","hash":"89952ef9eb5fe84c856068a6e6c274e396f74dd5","modified":1646488093243},{"_id":"public/js/comments/disqus.js","hash":"4073464ce42643d9571211b1443af61fc78ec0d1","modified":1646488093243},{"_id":"public/js/comments/waline.js","hash":"090fc554d82400dca9ae6a2806be48c111b90b3e","modified":1646488093243},{"_id":"public/js/search/algolia-search.js","hash":"aa26c979800de87ecfd9d0ba2ae7e238da2389ba","modified":1646488093243},{"_id":"public/js/search/local-search.js","hash":"db5cbac019bd86c47cac02e6dba1dfb1861ef31f","modified":1646488093243},{"_id":"public/js/ui/banner.js","hash":"c73ce4b3021bebf1a264e481dbe9a8a1ccd87d3b","modified":1646488093243},{"_id":"public/js/ui/fireworks.js","hash":"859b09a6065ea1b4f02f2974e590e44cc13fccc9","modified":1646488093243},{"_id":"public/css/hexo-theme-yun.css","hash":"74b33bb12d72932d4e507614ac42d1f4ba7307c8","modified":1646488093243},{"_id":"public/assets/js/DPlayer.min.js","hash":"490148a22ab2b03a880495cc733ecd1840c02ed6","modified":1646488093243},{"_id":"public/2022/02/26/R2S_build/image-2-1024x507.png","hash":"3f2c9846cdfeed98cf3b5bf94cb0a5d41de40705","modified":1646488093243},{"_id":"public/2022/02/26/R2S_build/image-3-1024x485.png","hash":"72f68e697d9656bc5dfdf05584660bee9d89e29a","modified":1646488093243},{"_id":"public/2022/02/25/binary_tree_1/image.png","hash":"486e325512c567f522e925b9fe9d58c24789176b","modified":1646488093243},{"_id":"public/2022/02/20/Hexo_article/traffic-light.gif","hash":"0c18d7a2a137b37b0af5b1c647aa12a3393dec64","modified":1646488093243},{"_id":"public/2022/02/20/Hexo_article/2d6f869662e83398f06070e2a14f838.jpg","hash":"e891f3a3b28cbefa79db0d9fd17939f3df865836","modified":1646488093243},{"_id":"public/image/head.jpg","hash":"91d9c38a4f5864f68119064c8e61227e6b7719aa","modified":1646488093243},{"_id":"public/2022/02/20/Hexo_article/884019afce82603bd8bc8fd4e531839.jpg","hash":"464c9842be81f3cc1cb18df887b8f497216e1d80","modified":1646488093243}],"Category":[{"name":"Hexo搭建","_id":"cl0dwi2ai00045wcydaxg2evh"},{"name":"计算机网络","_id":"cl0dwi2ap000d5wcydz7mbj58"},{"name":"algorithm","_id":"cl0dwi2aq000i5wcy50p1gmvg"}],"Data":[],"Page":[{"title":"about","date":"2022-02-21T14:50:30.000Z","_content":"\n# About me\n\n> ## WHO AM I\n>\n> ~~20岁，是学生。​~~\n>\n> 希望与你相遇。\n\n见字如面，很高兴认识你。\n\n目前我是一名澳科大在读本科生，IT专业。\n\n我喜欢交朋友，然而我是一个社恐人士。\n\n我喜欢拍照片，然而没有拿得出手的美图。\n\n我喜欢打游戏，然而这个赛季王者还是钻石。\n\n。。。 。。。\n\n如果，你喜欢我（和我的网页）的话\n\n~~欢迎给我打钱💰~~\n\n# Contact\n\nEmail: tonylsx611@gmail.com\n\nWechat: tony83607693\n\nQQ: 2858075831","source":"about/index.md","raw":"---\ntitle: about\ndate: 2022-02-21 22:50:30\n---\n\n# About me\n\n> ## WHO AM I\n>\n> ~~20岁，是学生。​~~\n>\n> 希望与你相遇。\n\n见字如面，很高兴认识你。\n\n目前我是一名澳科大在读本科生，IT专业。\n\n我喜欢交朋友，然而我是一个社恐人士。\n\n我喜欢拍照片，然而没有拿得出手的美图。\n\n我喜欢打游戏，然而这个赛季王者还是钻石。\n\n。。。 。。。\n\n如果，你喜欢我（和我的网页）的话\n\n~~欢迎给我打钱💰~~\n\n# Contact\n\nEmail: tonylsx611@gmail.com\n\nWechat: tony83607693\n\nQQ: 2858075831","updated":"2022-02-24T14:40:50.016Z","path":"about/index.html","comments":1,"layout":"page","_id":"cl0dwi2aa00005wcy1avvg9qi","content":"<h1 id=\"about-me\"><a class=\"markdownIt-Anchor\" href=\"#about-me\"></a> About me</h1>\n<blockquote>\n<h2 id=\"who-am-i\"><a class=\"markdownIt-Anchor\" href=\"#who-am-i\"></a> WHO AM I</h2>\n<p><s>20岁，是学生。​</s></p>\n<p>希望与你相遇。</p>\n</blockquote>\n<p>见字如面，很高兴认识你。</p>\n<p>目前我是一名澳科大在读本科生，IT专业。</p>\n<p>我喜欢交朋友，然而我是一个社恐人士。</p>\n<p>我喜欢拍照片，然而没有拿得出手的美图。</p>\n<p>我喜欢打游戏，然而这个赛季王者还是钻石。</p>\n<p>。。。 。。。</p>\n<p>如果，你喜欢我（和我的网页）的话</p>\n<p><s>欢迎给我打钱💰</s></p>\n<h1 id=\"contact\"><a class=\"markdownIt-Anchor\" href=\"#contact\"></a> Contact</h1>\n<p>Email: <a href=\"mailto:tonylsx611@gmail.com\">tonylsx611@gmail.com</a></p>\n<p>Wechat: tony83607693</p>\n<p>QQ: 2858075831</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"about-me\"><a class=\"markdownIt-Anchor\" href=\"#about-me\"></a> About me</h1>\n<blockquote>\n<h2 id=\"who-am-i\"><a class=\"markdownIt-Anchor\" href=\"#who-am-i\"></a> WHO AM I</h2>\n<p><s>20岁，是学生。​</s></p>\n<p>希望与你相遇。</p>\n</blockquote>\n<p>见字如面，很高兴认识你。</p>\n<p>目前我是一名澳科大在读本科生，IT专业。</p>\n<p>我喜欢交朋友，然而我是一个社恐人士。</p>\n<p>我喜欢拍照片，然而没有拿得出手的美图。</p>\n<p>我喜欢打游戏，然而这个赛季王者还是钻石。</p>\n<p>。。。 。。。</p>\n<p>如果，你喜欢我（和我的网页）的话</p>\n<p><s>欢迎给我打钱💰</s></p>\n<h1 id=\"contact\"><a class=\"markdownIt-Anchor\" href=\"#contact\"></a> Contact</h1>\n<p>Email: <a href=\"mailto:tonylsx611@gmail.com\">tonylsx611@gmail.com</a></p>\n<p>Wechat: tony83607693</p>\n<p>QQ: 2858075831</p>\n"},{"title":"tags","date":"2022-02-23T06:03:55.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2022-02-23 14:03:55\ntype: tags\n---\n","updated":"2022-02-23T06:05:53.359Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cl0dwi2ag00025wcy0snhdltl","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"categories","date":"2022-02-23T09:10:40.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2022-02-23 17:10:40\ntype: categories\n---\n","updated":"2022-02-23T09:11:14.937Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cl0dwi2ak00065wcyf1n0ea1d","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Hexo文章发布指南","date":"2022-02-19T16:34:49.000Z","author":"Tony","katex":true,"icon":"icon-women-line","_content":"\n# 文章标题H1\n\n\n\n在md下直接使用 # 进行新建标题，左侧菜单栏会自动生成H1-H6的标题，very nice!\n\n- 标题样式：\n\n## H2\n\n### H3\n\n#### H4 \n\n##### H5\n\n###### H6\n\n# 头部字段\n\n在文章的第一行使用三个`-`（就是分割线）来创建头部字段。\n\n- 格式如下：\n\n```\ntitle: Hexo文章发布指南\ndate: 2077-02-20 00:34:49\nauthor: Tony\ncategories:\n\t- Hexo搭建\ntags: \n\t- tag1\n\t- tag2\nkatex: true\n```\n\n# 数学公式\n\n行内公式使用\\$将数学公式括起来就好，行间公式使用两个\\$\\$，这跟md的格式是一样的。\n\n需要注意的是，如果文章中需要使用数学公式，最好在头部字段前添加`katex: true`的字样。\n\n- 数学公式样例：\n\n我是行内公式：$x=x^{45}+3$，我还可以接着写。。。\n$$\nx_1=x_3+2\\times x^6\\\\\n\\alpha：我是行间公式\\\\\n\\left[\n\\begin{matrix}\n1 & 2 & 3\\\\\n4 & 5 & 6\\\\\n7 & 8 & 9\\\\\n\\end{matrix}\n\\right]\n$$\n\n# 图片\n\n只需要将图片拖入md文档中即可，md会自动创建一个与文件名相同的文件夹以储存所有的图片素材，并会自动将图片复制到该文件夹中，因此所有的图片只需要输入相对路径即可。\n\n比如，本文章的名字为test，那么只需要这样写：`![IMG_1479](test/IMG_1479.jpg)`\n\n注：Hexo支持GIF格式的图片哦！\n\n![IMG_1479](Hexo_article/IMG_1479.jpg)\n\n![2d6f869662e83398f06070e2a14f838](Hexo_article/2d6f869662e83398f06070e2a14f838.jpg)\n\n![traffic-light](Hexo_article/traffic-light.gif)\n\n# 代码\n\n没啥可说的。。。\n\n```c++\n#include<iostream>\nusing namespace std;\nint main()\n{\n\tint a,b,c;\n\tcin>>a>>c;\n\tfor(int i=0;i<a;i++)\n\t\tcout<<c*a<<endl;\n\treturn 0;\n}\n```\n\n# 文字\n\n- 高亮语法：==Highlight==ing （==）\n- 加粗：**Bold** （\\*\\*）\n- 斜体：*Wall*（\\*）\n- 删除线：~~请给我打钱~~（~~）\n\n# 音频及视频\n\n暂不支持。。。\n\n（正在努力开发中。。。）\n\n\n```html\n<video src='test/DSC_7412.MOV' \n       type='video/mp4' \n       controls='controls'  \n       preload=\"auto\"\n       width='100%' \n       height='100%'>\n</video>\n```\n\n$$\nEND\n$$\n","source":"_posts/Hexo_article.md","raw":"---\n\ntitle: Hexo文章发布指南\ndate: 2022-02-20 00:34:49\nauthor: Tony\ncategories:\n\t- Hexo搭建\ntags: \n\t- Hexo\nkatex: true\nicon: icon-women-line\n---\n\n# 文章标题H1\n\n\n\n在md下直接使用 # 进行新建标题，左侧菜单栏会自动生成H1-H6的标题，very nice!\n\n- 标题样式：\n\n## H2\n\n### H3\n\n#### H4 \n\n##### H5\n\n###### H6\n\n# 头部字段\n\n在文章的第一行使用三个`-`（就是分割线）来创建头部字段。\n\n- 格式如下：\n\n```\ntitle: Hexo文章发布指南\ndate: 2077-02-20 00:34:49\nauthor: Tony\ncategories:\n\t- Hexo搭建\ntags: \n\t- tag1\n\t- tag2\nkatex: true\n```\n\n# 数学公式\n\n行内公式使用\\$将数学公式括起来就好，行间公式使用两个\\$\\$，这跟md的格式是一样的。\n\n需要注意的是，如果文章中需要使用数学公式，最好在头部字段前添加`katex: true`的字样。\n\n- 数学公式样例：\n\n我是行内公式：$x=x^{45}+3$，我还可以接着写。。。\n$$\nx_1=x_3+2\\times x^6\\\\\n\\alpha：我是行间公式\\\\\n\\left[\n\\begin{matrix}\n1 & 2 & 3\\\\\n4 & 5 & 6\\\\\n7 & 8 & 9\\\\\n\\end{matrix}\n\\right]\n$$\n\n# 图片\n\n只需要将图片拖入md文档中即可，md会自动创建一个与文件名相同的文件夹以储存所有的图片素材，并会自动将图片复制到该文件夹中，因此所有的图片只需要输入相对路径即可。\n\n比如，本文章的名字为test，那么只需要这样写：`![IMG_1479](test/IMG_1479.jpg)`\n\n注：Hexo支持GIF格式的图片哦！\n\n![IMG_1479](Hexo_article/IMG_1479.jpg)\n\n![2d6f869662e83398f06070e2a14f838](Hexo_article/2d6f869662e83398f06070e2a14f838.jpg)\n\n![traffic-light](Hexo_article/traffic-light.gif)\n\n# 代码\n\n没啥可说的。。。\n\n```c++\n#include<iostream>\nusing namespace std;\nint main()\n{\n\tint a,b,c;\n\tcin>>a>>c;\n\tfor(int i=0;i<a;i++)\n\t\tcout<<c*a<<endl;\n\treturn 0;\n}\n```\n\n# 文字\n\n- 高亮语法：==Highlight==ing （==）\n- 加粗：**Bold** （\\*\\*）\n- 斜体：*Wall*（\\*）\n- 删除线：~~请给我打钱~~（~~）\n\n# 音频及视频\n\n暂不支持。。。\n\n（正在努力开发中。。。）\n\n\n```html\n<video src='test/DSC_7412.MOV' \n       type='video/mp4' \n       controls='controls'  \n       preload=\"auto\"\n       width='100%' \n       height='100%'>\n</video>\n```\n\n$$\nEND\n$$\n","slug":"Hexo_article","published":1,"updated":"2022-02-25T16:33:43.684Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0dwi2ad00015wcybjm60j1t","content":"<h1 id=\"文章标题h1\"><a class=\"markdownIt-Anchor\" href=\"#文章标题h1\"></a> 文章标题H1</h1>\n<p>在md下直接使用 # 进行新建标题，左侧菜单栏会自动生成H1-H6的标题，very nice!</p>\n<ul>\n<li>标题样式：</li>\n</ul>\n<h2 id=\"h2\"><a class=\"markdownIt-Anchor\" href=\"#h2\"></a> H2</h2>\n<h3 id=\"h3\"><a class=\"markdownIt-Anchor\" href=\"#h3\"></a> H3</h3>\n<h4 id=\"h4\"><a class=\"markdownIt-Anchor\" href=\"#h4\"></a> H4</h4>\n<h5 id=\"h5\"><a class=\"markdownIt-Anchor\" href=\"#h5\"></a> H5</h5>\n<h6 id=\"h6\"><a class=\"markdownIt-Anchor\" href=\"#h6\"></a> H6</h6>\n<h1 id=\"头部字段\"><a class=\"markdownIt-Anchor\" href=\"#头部字段\"></a> 头部字段</h1>\n<p>在文章的第一行使用三个<code>-</code>（就是分割线）来创建头部字段。</p>\n<ul>\n<li>格式如下：</li>\n</ul>\n<pre class=\"language-none\"><code class=\"language-none\">title: Hexo文章发布指南\ndate: 2077-02-20 00:34:49\nauthor: Tony\ncategories:\n\t- Hexo搭建\ntags: \n\t- tag1\n\t- tag2\nkatex: true</code></pre>\n<h1 id=\"数学公式\"><a class=\"markdownIt-Anchor\" href=\"#数学公式\"></a> 数学公式</h1>\n<p>行内公式使用$将数学公式括起来就好，行间公式使用两个$$，这跟md的格式是一样的。</p>\n<p>需要注意的是，如果文章中需要使用数学公式，最好在头部字段前添加<code>katex: true</code>的字样。</p>\n<ul>\n<li>数学公式样例：</li>\n</ul>\n<p>我是行内公式：<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>x</mi><mo>=</mo><msup><mi>x</mi><mn>45</mn></msup><mo>+</mo><mn>3</mn></mrow><annotation encoding=\"application/x-tex\">x=x^{45}+3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.897438em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">4</span><span class=\"mord mtight\">5</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">3</span></span></span></span>，我还可以接着写。。。</p>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>x</mi><mn>1</mn></msub><mo>=</mo><msub><mi>x</mi><mn>3</mn></msub><mo>+</mo><mn>2</mn><mo>×</mo><msup><mi>x</mi><mn>6</mn></msup><mspace linebreak=\"newline\"></mspace><mi>α</mi><mi mathvariant=\"normal\">：</mi><mi mathvariant=\"normal\">我</mi><mi mathvariant=\"normal\">是</mi><mi mathvariant=\"normal\">行</mi><mi mathvariant=\"normal\">间</mi><mi mathvariant=\"normal\">公</mi><mi mathvariant=\"normal\">式</mi><mspace linebreak=\"newline\"></mspace><mrow><mo fence=\"true\">[</mo><mtable rowspacing=\"0.15999999999999992em\" columnspacing=\"1em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>2</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>3</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>4</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>5</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>6</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>7</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>8</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>9</mn></mstyle></mtd></mtr></mtable><mo fence=\"true\">]</mo></mrow></mrow><annotation encoding=\"application/x-tex\">x_1=x_3+2\\times x^6\\\\\n\\alpha：我是行间公式\\\\\n\\left[\n\\begin{matrix}\n1 &amp; 2 &amp; 3\\\\\n4 &amp; 5 &amp; 6\\\\\n7 &amp; 8 &amp; 9\\\\\n\\end{matrix}\n\\right]\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.73333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8641079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641079999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">6</span></span></span></span></span></span></span></span></span><span class=\"mspace newline\"></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.0037em;\">α</span><span class=\"mord cjk_fallback\">：</span><span class=\"mord cjk_fallback\">我</span><span class=\"mord cjk_fallback\">是</span><span class=\"mord cjk_fallback\">行</span><span class=\"mord cjk_fallback\">间</span><span class=\"mord cjk_fallback\">公</span><span class=\"mord cjk_fallback\">式</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span></span><span class=\"mspace newline\"></span><span class=\"base\"><span class=\"strut\" style=\"height:3.60004em;vertical-align:-1.55002em;\"></span><span class=\"minner\"><span class=\"mopen\"><span class=\"delimsizing mult\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.05002em;\"><span style=\"top:-2.2500000000000004em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎣</span></span></span><span style=\"top:-4.05002em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎡</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.55002em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.05em;\"><span style=\"top:-4.21em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span><span style=\"top:-3.0099999999999993em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">4</span></span></span><span style=\"top:-1.8099999999999994em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">7</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.5500000000000007em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.05em;\"><span style=\"top:-4.21em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">2</span></span></span><span style=\"top:-3.0099999999999993em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">5</span></span></span><span style=\"top:-1.8099999999999994em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">8</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.5500000000000007em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.05em;\"><span style=\"top:-4.21em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">3</span></span></span><span style=\"top:-3.0099999999999993em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">6</span></span></span><span style=\"top:-1.8099999999999994em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">9</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.5500000000000007em;\"><span></span></span></span></span></span></span></span><span class=\"mclose\"><span class=\"delimsizing mult\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.05002em;\"><span style=\"top:-2.2500000000000004em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎦</span></span></span><span style=\"top:-4.05002em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎤</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.55002em;\"><span></span></span></span></span></span></span></span></span></span></span></span></p>\n<h1 id=\"图片\"><a class=\"markdownIt-Anchor\" href=\"#图片\"></a> 图片</h1>\n<p>只需要将图片拖入md文档中即可，md会自动创建一个与文件名相同的文件夹以储存所有的图片素材，并会自动将图片复制到该文件夹中，因此所有的图片只需要输入相对路径即可。</p>\n<p>比如，本文章的名字为test，那么只需要这样写：<code>![IMG_1479](test/IMG_1479.jpg)</code></p>\n<p>注：Hexo支持GIF格式的图片哦！</p>\n<p><img src=\"/2022/02/20/Hexo_article/IMG_1479.jpg\" alt=\"IMG_1479\" loading=\"lazy\"></p>\n<p><img src=\"/2022/02/20/Hexo_article/2d6f869662e83398f06070e2a14f838.jpg\" alt=\"2d6f869662e83398f06070e2a14f838\" loading=\"lazy\"></p>\n<p><img src=\"/2022/02/20/Hexo_article/traffic-light.gif\" alt=\"traffic-light\" loading=\"lazy\"></p>\n<h1 id=\"代码\"><a class=\"markdownIt-Anchor\" href=\"#代码\"></a> 代码</h1>\n<p>没啥可说的。。。</p>\n<pre class=\"language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include&lt;iostream&gt;\nusing namespace std;\nint main()\n&#123;\n\tint a,b,c;\n\tcin&gt;&gt;a&gt;&gt;c;\n\tfor(int i&#x3D;0;i&lt;a;i++)\n\t\tcout&lt;&lt;c*a&lt;&lt;endl;\n\treturn 0;\n&#125;</code></pre>\n<h1 id=\"文字\"><a class=\"markdownIt-Anchor\" href=\"#文字\"></a> 文字</h1>\n<ul>\n<li>高亮语法：<mark>Highlight</mark>ing （==）</li>\n<li>加粗：<strong>Bold</strong> （**）</li>\n<li>斜体：<em>Wall</em>（*）</li>\n<li>删除线：<s>请给我打钱</s>（~~）</li>\n</ul>\n<h1 id=\"音频及视频\"><a class=\"markdownIt-Anchor\" href=\"#音频及视频\"></a> 音频及视频</h1>\n<p>暂不支持。。。</p>\n<p>（正在努力开发中。。。）</p>\n<pre class=\"language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>video</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>test/DSC_7412.MOV<span class=\"token punctuation\">'</span></span> \n       <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>video/mp4<span class=\"token punctuation\">'</span></span> \n       <span class=\"token attr-name\">controls</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>controls<span class=\"token punctuation\">'</span></span>  \n       <span class=\"token attr-name\">preload</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>auto<span class=\"token punctuation\">\"</span></span>\n       <span class=\"token attr-name\">width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>100%<span class=\"token punctuation\">'</span></span> \n       <span class=\"token attr-name\">height</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>100%<span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>video</span><span class=\"token punctuation\">></span></span></code></pre>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>E</mi><mi>N</mi><mi>D</mi></mrow><annotation encoding=\"application/x-tex\">END\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">N</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">D</span></span></span></span></span></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"文章标题h1\"><a class=\"markdownIt-Anchor\" href=\"#文章标题h1\"></a> 文章标题H1</h1>\n<p>在md下直接使用 # 进行新建标题，左侧菜单栏会自动生成H1-H6的标题，very nice!</p>\n<ul>\n<li>标题样式：</li>\n</ul>\n<h2 id=\"h2\"><a class=\"markdownIt-Anchor\" href=\"#h2\"></a> H2</h2>\n<h3 id=\"h3\"><a class=\"markdownIt-Anchor\" href=\"#h3\"></a> H3</h3>\n<h4 id=\"h4\"><a class=\"markdownIt-Anchor\" href=\"#h4\"></a> H4</h4>\n<h5 id=\"h5\"><a class=\"markdownIt-Anchor\" href=\"#h5\"></a> H5</h5>\n<h6 id=\"h6\"><a class=\"markdownIt-Anchor\" href=\"#h6\"></a> H6</h6>\n<h1 id=\"头部字段\"><a class=\"markdownIt-Anchor\" href=\"#头部字段\"></a> 头部字段</h1>\n<p>在文章的第一行使用三个<code>-</code>（就是分割线）来创建头部字段。</p>\n<ul>\n<li>格式如下：</li>\n</ul>\n<pre class=\"language-none\"><code class=\"language-none\">title: Hexo文章发布指南\ndate: 2077-02-20 00:34:49\nauthor: Tony\ncategories:\n\t- Hexo搭建\ntags: \n\t- tag1\n\t- tag2\nkatex: true</code></pre>\n<h1 id=\"数学公式\"><a class=\"markdownIt-Anchor\" href=\"#数学公式\"></a> 数学公式</h1>\n<p>行内公式使用$将数学公式括起来就好，行间公式使用两个$$，这跟md的格式是一样的。</p>\n<p>需要注意的是，如果文章中需要使用数学公式，最好在头部字段前添加<code>katex: true</code>的字样。</p>\n<ul>\n<li>数学公式样例：</li>\n</ul>\n<p>我是行内公式：<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>x</mi><mo>=</mo><msup><mi>x</mi><mn>45</mn></msup><mo>+</mo><mn>3</mn></mrow><annotation encoding=\"application/x-tex\">x=x^{45}+3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.897438em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">4</span><span class=\"mord mtight\">5</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">3</span></span></span></span>，我还可以接着写。。。</p>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>x</mi><mn>1</mn></msub><mo>=</mo><msub><mi>x</mi><mn>3</mn></msub><mo>+</mo><mn>2</mn><mo>×</mo><msup><mi>x</mi><mn>6</mn></msup><mspace linebreak=\"newline\"></mspace><mi>α</mi><mi mathvariant=\"normal\">：</mi><mi mathvariant=\"normal\">我</mi><mi mathvariant=\"normal\">是</mi><mi mathvariant=\"normal\">行</mi><mi mathvariant=\"normal\">间</mi><mi mathvariant=\"normal\">公</mi><mi mathvariant=\"normal\">式</mi><mspace linebreak=\"newline\"></mspace><mrow><mo fence=\"true\">[</mo><mtable rowspacing=\"0.15999999999999992em\" columnspacing=\"1em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>2</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>3</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>4</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>5</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>6</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>7</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>8</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>9</mn></mstyle></mtd></mtr></mtable><mo fence=\"true\">]</mo></mrow></mrow><annotation encoding=\"application/x-tex\">x_1=x_3+2\\times x^6\\\\\n\\alpha：我是行间公式\\\\\n\\left[\n\\begin{matrix}\n1 &amp; 2 &amp; 3\\\\\n4 &amp; 5 &amp; 6\\\\\n7 &amp; 8 &amp; 9\\\\\n\\end{matrix}\n\\right]\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.73333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8641079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641079999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">6</span></span></span></span></span></span></span></span></span><span class=\"mspace newline\"></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.0037em;\">α</span><span class=\"mord cjk_fallback\">：</span><span class=\"mord cjk_fallback\">我</span><span class=\"mord cjk_fallback\">是</span><span class=\"mord cjk_fallback\">行</span><span class=\"mord cjk_fallback\">间</span><span class=\"mord cjk_fallback\">公</span><span class=\"mord cjk_fallback\">式</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span></span><span class=\"mspace newline\"></span><span class=\"base\"><span class=\"strut\" style=\"height:3.60004em;vertical-align:-1.55002em;\"></span><span class=\"minner\"><span class=\"mopen\"><span class=\"delimsizing mult\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.05002em;\"><span style=\"top:-2.2500000000000004em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎣</span></span></span><span style=\"top:-4.05002em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎡</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.55002em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.05em;\"><span style=\"top:-4.21em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span><span style=\"top:-3.0099999999999993em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">4</span></span></span><span style=\"top:-1.8099999999999994em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">7</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.5500000000000007em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.05em;\"><span style=\"top:-4.21em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">2</span></span></span><span style=\"top:-3.0099999999999993em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">5</span></span></span><span style=\"top:-1.8099999999999994em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">8</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.5500000000000007em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.05em;\"><span style=\"top:-4.21em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">3</span></span></span><span style=\"top:-3.0099999999999993em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">6</span></span></span><span style=\"top:-1.8099999999999994em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">9</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.5500000000000007em;\"><span></span></span></span></span></span></span></span><span class=\"mclose\"><span class=\"delimsizing mult\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.05002em;\"><span style=\"top:-2.2500000000000004em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎦</span></span></span><span style=\"top:-4.05002em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎤</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.55002em;\"><span></span></span></span></span></span></span></span></span></span></span></span></p>\n<h1 id=\"图片\"><a class=\"markdownIt-Anchor\" href=\"#图片\"></a> 图片</h1>\n<p>只需要将图片拖入md文档中即可，md会自动创建一个与文件名相同的文件夹以储存所有的图片素材，并会自动将图片复制到该文件夹中，因此所有的图片只需要输入相对路径即可。</p>\n<p>比如，本文章的名字为test，那么只需要这样写：<code>![IMG_1479](test/IMG_1479.jpg)</code></p>\n<p>注：Hexo支持GIF格式的图片哦！</p>\n<p><img src=\"/2022/02/20/Hexo_article/IMG_1479.jpg\" alt=\"IMG_1479\"></p>\n<p><img src=\"/2022/02/20/Hexo_article/2d6f869662e83398f06070e2a14f838.jpg\" alt=\"2d6f869662e83398f06070e2a14f838\"></p>\n<p><img src=\"/2022/02/20/Hexo_article/traffic-light.gif\" alt=\"traffic-light\"></p>\n<h1 id=\"代码\"><a class=\"markdownIt-Anchor\" href=\"#代码\"></a> 代码</h1>\n<p>没啥可说的。。。</p>\n<pre class=\"language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include&lt;iostream&gt;\nusing namespace std;\nint main()\n&#123;\n\tint a,b,c;\n\tcin&gt;&gt;a&gt;&gt;c;\n\tfor(int i&#x3D;0;i&lt;a;i++)\n\t\tcout&lt;&lt;c*a&lt;&lt;endl;\n\treturn 0;\n&#125;</code></pre>\n<h1 id=\"文字\"><a class=\"markdownIt-Anchor\" href=\"#文字\"></a> 文字</h1>\n<ul>\n<li>高亮语法：<mark>Highlight</mark>ing （==）</li>\n<li>加粗：<strong>Bold</strong> （**）</li>\n<li>斜体：<em>Wall</em>（*）</li>\n<li>删除线：<s>请给我打钱</s>（~~）</li>\n</ul>\n<h1 id=\"音频及视频\"><a class=\"markdownIt-Anchor\" href=\"#音频及视频\"></a> 音频及视频</h1>\n<p>暂不支持。。。</p>\n<p>（正在努力开发中。。。）</p>\n<pre class=\"language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>video</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>test/DSC_7412.MOV<span class=\"token punctuation\">'</span></span> \n       <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>video/mp4<span class=\"token punctuation\">'</span></span> \n       <span class=\"token attr-name\">controls</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>controls<span class=\"token punctuation\">'</span></span>  \n       <span class=\"token attr-name\">preload</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>auto<span class=\"token punctuation\">\"</span></span>\n       <span class=\"token attr-name\">width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>100%<span class=\"token punctuation\">'</span></span> \n       <span class=\"token attr-name\">height</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>100%<span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>video</span><span class=\"token punctuation\">></span></span></code></pre>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>E</mi><mi>N</mi><mi>D</mi></mrow><annotation encoding=\"application/x-tex\">END\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">N</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">D</span></span></span></span></span></p>\n"},{"title":"Hexo 网站搭建指南","date":"2022-02-23T19:14:29.000Z","author":"Hexo offical","_content":"# Hexo 网站搭建指南\n\nWelcome to [Hexo](https://hexo.io/)! \n\n\n\n\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n\n### Advanced Settings\n\nCreate a bat format file (e.g. `start.bat`) in the root folder of your blog.\n\n```bash\nhexo clean & hexo d & hexo g & hexo s\npause\n```\n\nThen every time you uploaded a file or change any settings, you can just double click the .bat file to update your blog, which is very convenience.\n\n---\n\n注：本文部分内容引用自[hexo史上最全搭建教程_Fangzh的技术博客](https://blog.csdn.net/sinat_37781304/article/details/82729029)， 如有侵权，请联系我。","source":"_posts/Hexo_creation.md","raw":"---\ntitle: Hexo 网站搭建指南\ndate: 2022-02-24 03:14:29\nauthor: Hexo offical\ntags: \n\t- Hexo\ncategories:\n\t- Hexo搭建\n---\n# Hexo 网站搭建指南\n\nWelcome to [Hexo](https://hexo.io/)! \n\n\n\n\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n\n### Advanced Settings\n\nCreate a bat format file (e.g. `start.bat`) in the root folder of your blog.\n\n```bash\nhexo clean & hexo d & hexo g & hexo s\npause\n```\n\nThen every time you uploaded a file or change any settings, you can just double click the .bat file to update your blog, which is very convenience.\n\n---\n\n注：本文部分内容引用自[hexo史上最全搭建教程_Fangzh的技术博客](https://blog.csdn.net/sinat_37781304/article/details/82729029)， 如有侵权，请联系我。","slug":"Hexo_creation","published":1,"updated":"2022-02-26T12:49:04.387Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0dwi2ag00035wcy463f0ybt","content":"<h1 id=\"hexo-网站搭建指南\"><a class=\"markdownIt-Anchor\" href=\"#hexo-网站搭建指南\"></a> Hexo 网站搭建指南</h1>\n<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>!</p>\n<h2 id=\"quick-start\"><a class=\"markdownIt-Anchor\" href=\"#quick-start\"></a> Quick Start</h2>\n<h3 id=\"create-a-new-post\"><a class=\"markdownIt-Anchor\" href=\"#create-a-new-post\"></a> Create a new post</h3>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ hexo new <span class=\"token string\">\"My New Post\"</span></code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"run-server\"><a class=\"markdownIt-Anchor\" href=\"#run-server\"></a> Run server</h3>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ hexo server</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"generate-static-files\"><a class=\"markdownIt-Anchor\" href=\"#generate-static-files\"></a> Generate static files</h3>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ hexo generate</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"deploy-to-remote-sites\"><a class=\"markdownIt-Anchor\" href=\"#deploy-to-remote-sites\"></a> Deploy to remote sites</h3>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ hexo deploy</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n<h3 id=\"advanced-settings\"><a class=\"markdownIt-Anchor\" href=\"#advanced-settings\"></a> Advanced Settings</h3>\n<p>Create a bat format file (e.g. <code>start.bat</code>) in the root folder of your blog.</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">hexo clean <span class=\"token operator\">&amp;</span> hexo d <span class=\"token operator\">&amp;</span> hexo g <span class=\"token operator\">&amp;</span> hexo s\npause</code></pre>\n<p>Then every time you uploaded a file or change any settings, you can just double click the .bat file to update your blog, which is very convenience.</p>\n<hr>\n<p>注：本文部分内容引用自<a href=\"https://blog.csdn.net/sinat_37781304/article/details/82729029\">hexo史上最全搭建教程_Fangzh的技术博客</a>， 如有侵权，请联系我。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"hexo-网站搭建指南\"><a class=\"markdownIt-Anchor\" href=\"#hexo-网站搭建指南\"></a> Hexo 网站搭建指南</h1>\n<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>!</p>\n<h2 id=\"quick-start\"><a class=\"markdownIt-Anchor\" href=\"#quick-start\"></a> Quick Start</h2>\n<h3 id=\"create-a-new-post\"><a class=\"markdownIt-Anchor\" href=\"#create-a-new-post\"></a> Create a new post</h3>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ hexo new <span class=\"token string\">\"My New Post\"</span></code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"run-server\"><a class=\"markdownIt-Anchor\" href=\"#run-server\"></a> Run server</h3>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ hexo server</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"generate-static-files\"><a class=\"markdownIt-Anchor\" href=\"#generate-static-files\"></a> Generate static files</h3>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ hexo generate</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"deploy-to-remote-sites\"><a class=\"markdownIt-Anchor\" href=\"#deploy-to-remote-sites\"></a> Deploy to remote sites</h3>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ hexo deploy</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n<h3 id=\"advanced-settings\"><a class=\"markdownIt-Anchor\" href=\"#advanced-settings\"></a> Advanced Settings</h3>\n<p>Create a bat format file (e.g. <code>start.bat</code>) in the root folder of your blog.</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">hexo clean <span class=\"token operator\">&amp;</span> hexo d <span class=\"token operator\">&amp;</span> hexo g <span class=\"token operator\">&amp;</span> hexo s\npause</code></pre>\n<p>Then every time you uploaded a file or change any settings, you can just double click the .bat file to update your blog, which is very convenience.</p>\n<hr>\n<p>注：本文部分内容引用自<a href=\"https://blog.csdn.net/sinat_37781304/article/details/82729029\">hexo史上最全搭建教程_Fangzh的技术博客</a>， 如有侵权，请联系我。</p>\n"},{"title":"R2S家庭组网实操","date":"2022-02-26T12:16:48.000Z","author":"Tony","_content":"\n## 前言\n\n本文授权转载自[R2S家庭组网实操 – Orange Tien](https://www.bytedance.fit/?p=1051)，作者：Orange Tien，在此基础上略加修改，~~并不会定期更新~~。\n\n本文主要介绍R2S的基本使用方法，目前本人（Tony）也在原作者（Orange Tien）的怂恿下在两个地方分别搭建了两个R2S，看起来很简单，其实不是一帆风顺；因此也会把实际组网中遇到的问题列到最后供大家参考。\n\n## 确定所需物理设备\n\n- 一台R2S软路由以及它的电源线\n- 两根用不着太长的网线一张TF卡（作为R2S的系统盘）以及一个读写TF卡的读卡器\n- 一台可以插网线的电脑\n- 交换机（可选）\n- 插排（某些时候插座不够用）\n\n## 烧录OpenWrt系统\n\n烧录软件：[BalenaEtcher]([balenaEtcher - Flash OS images to SD cards & USB drives](https://www.balena.io/etcher/))\n\n软路由系统：\n\n[OpenWrt-R2S-dongdong](https://bigdongdong.cowtransfer.com/s/a3420546d30343)\n\n[OpenWrt-R2S-esir](https://bigdongdong.cowtransfer.com/s/9a349ee597aa4f)\n\n第一个链接比较新，界面比较好看一些，推荐选择这个下载；第二个系统是eSir大人写的2020版本，已经很旧了；~~奈何暂时没找到别的系统~~，如果自行找到更好的系统也可以不用这俩链接。注意系统是要支持Arm架构的，因为Openwrt不是x86架构下的产物。\n\n##  开始烧录系统至TF卡\n\n打开BalenaEtcher，选择Flash from file，然后将OpenWrt系统烧录到TF卡中即可。\n\n![img](R2S_build/image-1.png)\n\n注意：选择文件时只选择镜像文件，不要把那些七七八八的文档说明也选进去。选择`.gz`(`.img`)文件来烧录即可，烧录完成后直接拔掉读卡器；系统会提示格式化，此时千万**不要**格式化！！！（~~否则，就重来一遍吧~~）\n\n##  登入R2S后台\n\n把烧录好固件的TF卡插入R2S，然后给它插上电源，WAN口可以不接，将R2S的LAN口连接电脑的网口，根据所刷入的固件（软路由系统）的不同来决定后台地址，一般来说，软路由后台是`192.168.X.1` ，本文的系统后台是`192.168.22.1`，所以说我们在电脑浏览器内输入`192.168.5.1`(`192.168.22.1`)以进入后台。后台账号是root，默认密码基本都是password（若下载本文的系统，密码则为空），具体操作链接里面写的很清楚。\n\n## 拨号或者DHCP客户端\n\n### 光猫拨号\n\n如果你家里的组网方式是通过光猫拨号（通常都是光猫拨号），那么设置方法如下：\n\n选择 网络-接口， 然后选择 修改WAN口设置\n\n![img](R2S_build/image-2-1024x507.png)\n\n将WAN口设置成DHCP客户端，然后保存应用即可，此外无须做其他任何设置。\n\n![img](R2S_build/image-3-1024x485.png)\n\n### R2S拨号\n\n如果你的光猫是桥接，那么就由路由器来拨号（通常来说，哪个网络设备配置更好，就誰来拨号，由于R2S的稳定性远不如光猫，所以这里选择光猫拨号更好），设置方法如下：\n\n![img](R2S_build/image-5.png)\n\n同样，选择修改WAN口，协议设置成PPPoE, PAP/CHAP，账号密码就是光猫的账号密码。比如电信宽带就是以`@163.gd`结尾的，密码如果忘记的话直接拨打10000（10086）重置就好，省时省力。\n\n![img](R2S_build/image-2-1024x507.png)\n\n接下来，需要用超级管理员账号登陆到光猫的IP中（`192.168.1.1`）,各大运营商的超级管理员账号和密码可以自行搜索。选择 网络-协议，然后设置成DHCP客户端。\n\n### 小结\n\n用什么拨号，什么就选择PPPoE，然后其它设备就都设置成DHCP。\n\n用光猫拨号，光猫的设置里面就选择PPPoE，软路由以及其它路由器就选择DHCP客户端；\n\n用R2S拨号，光猫和其它路由设备的设置里面就选择DHCP客户端，软路由选择PPPoE。\n\n## 各设备接入网络\n\n将软路由的WAN口与光猫的千兆口相连，然后断开软路由的LAN口与电脑网口的连接，此时软路由的LAN口根据各人组网要求的不同选择接不同的设备，可以接交换机，也可以接一台路由器（路由器设置为有线中继模式，也就是无线AP模式）\n\n如果家中设备比较多，或者很多屋子都需要连网线的话，可以买一个最便宜的千兆交换机放到弱电箱中，然后吧R2S接到交换机与光猫中间，这样就可以实现整个局域网都接入到软路由中来。（我来草草的画个图）\n\n![image-20220305212846426](R2S_build/image-20220305212846426.png)\n\n## 利用插件设置科学上网\n\n根据前面的步骤，如果你的设备能够正常访问网络了，就可以开始探索OpenWrt的各类插件了。关于科学上网，常见的插件有PassWall, ShadowScoksR++, OpenClash，由于OpenClash具备强大的分流策略机制（根据你访问的域名或者IP的不同决定走不同的节点），我们在此以OpenCalsh为例设置科学上网\n\n![img](R2S_build/image-7.png)\n\n首先，在服务菜单中找到OpenClash，然后选择配置文件订阅，选择添加配置文件\n\n![img](R2S_build/image-8.png)\n\n配置文件名随便写，用途是给用户自己区分的，订阅地址填上机场给你的订阅地址，其余地方无需设置，直接应用并保存即可。然后回到OpenClash主页，配置文件区域发送了变化。\n\n![img](R2S_build/image-9-1024x194.png)\n\n最后点击左下角的启动按钮，等待服务器上线运行即可。\n\n![img](R2S_build/image-10.png)\n\n如果你设置后无法正常科学上网，原因是有很多的，需要你自己慢慢排查。\n\n## 更多（原作者的话）\n\n[NanoPi R2S WIKI](https://wiki.friendlyarm.com/wiki/index.php/NanoPi_R2S/zh)\n\n上面的链接是R2S的WIKI书，上面详细记录了R2S的配置以及实际测速情况，也有如何编译系统等教程。\n\n个人使用R2S两年，从大一到大三都在用这个，感觉就是到千兆不太行，500M是瓶颈了，然后连久了没那么稳定，官网手册上宣传它是又稳定又能达到千兆的，这个听听就好，R2S本来是适合入门的，但是现在价格炒的太高了，没这个必要去买它，目前有很多更具有性价比的软路由可供选择。\n\n此外向大家推荐软路由界的大佬: [JackStone的Youtube主页](https://youtube.com/c/jackstone) ，人称老白，做了很多小主机的视频，如果想选购更具性价比的设备，可以看他的合集，比如2021软路由选购建议这些。\n\n## 组网时遇到过的问题（我的话）\n\n1. 组网的过程中可能出现无法自动分配IP地址的问题，比如说小米的路由器默认会分配`192.168.31.XXX`；如果你会手动配置的话可以试试，不过最简单的办法就是等，去洗个澡回来就好了。如果还没好，那么可以考虑RESET一下路由器。\n2. OpenClash插件在首次启动的时候，可能会启动失败，他会提示需要你选择编译架构，按照他的提示，选择Arm-v8架构即可。\n3. 网线通常插上马上就会亮灯，5s左右就能ping通，不过不要太相信科学。~~我有一次ping了10多分钟。~~真的，不通的话不一定是没插紧，也不一定是插错了，**很有可能是因为你没给我微信或者支付宝赞赏**。\n4. R2S是很基础的一款软路由，稳定性可能不会太好，不过最有可能导致网络不稳定的还是机场的选择，如果选择廉价机场的话，要做好不知道什么时候突然断网10分钟的准备。\n5. 计算机网络这门学科是玄学的一个分支。\n\n","source":"_posts/R2S_build.md","raw":"---\ntitle: R2S家庭组网实操\ndate: 2022-02-26 20:16:48\nauthor: Tony\ncategories:\n\t- 计算机网络\ntags:\n\t- R2S\n\t- Computer Network\n\t- 软路由\n\t- 科学上网\n---\n\n## 前言\n\n本文授权转载自[R2S家庭组网实操 – Orange Tien](https://www.bytedance.fit/?p=1051)，作者：Orange Tien，在此基础上略加修改，~~并不会定期更新~~。\n\n本文主要介绍R2S的基本使用方法，目前本人（Tony）也在原作者（Orange Tien）的怂恿下在两个地方分别搭建了两个R2S，看起来很简单，其实不是一帆风顺；因此也会把实际组网中遇到的问题列到最后供大家参考。\n\n## 确定所需物理设备\n\n- 一台R2S软路由以及它的电源线\n- 两根用不着太长的网线一张TF卡（作为R2S的系统盘）以及一个读写TF卡的读卡器\n- 一台可以插网线的电脑\n- 交换机（可选）\n- 插排（某些时候插座不够用）\n\n## 烧录OpenWrt系统\n\n烧录软件：[BalenaEtcher]([balenaEtcher - Flash OS images to SD cards & USB drives](https://www.balena.io/etcher/))\n\n软路由系统：\n\n[OpenWrt-R2S-dongdong](https://bigdongdong.cowtransfer.com/s/a3420546d30343)\n\n[OpenWrt-R2S-esir](https://bigdongdong.cowtransfer.com/s/9a349ee597aa4f)\n\n第一个链接比较新，界面比较好看一些，推荐选择这个下载；第二个系统是eSir大人写的2020版本，已经很旧了；~~奈何暂时没找到别的系统~~，如果自行找到更好的系统也可以不用这俩链接。注意系统是要支持Arm架构的，因为Openwrt不是x86架构下的产物。\n\n##  开始烧录系统至TF卡\n\n打开BalenaEtcher，选择Flash from file，然后将OpenWrt系统烧录到TF卡中即可。\n\n![img](R2S_build/image-1.png)\n\n注意：选择文件时只选择镜像文件，不要把那些七七八八的文档说明也选进去。选择`.gz`(`.img`)文件来烧录即可，烧录完成后直接拔掉读卡器；系统会提示格式化，此时千万**不要**格式化！！！（~~否则，就重来一遍吧~~）\n\n##  登入R2S后台\n\n把烧录好固件的TF卡插入R2S，然后给它插上电源，WAN口可以不接，将R2S的LAN口连接电脑的网口，根据所刷入的固件（软路由系统）的不同来决定后台地址，一般来说，软路由后台是`192.168.X.1` ，本文的系统后台是`192.168.22.1`，所以说我们在电脑浏览器内输入`192.168.5.1`(`192.168.22.1`)以进入后台。后台账号是root，默认密码基本都是password（若下载本文的系统，密码则为空），具体操作链接里面写的很清楚。\n\n## 拨号或者DHCP客户端\n\n### 光猫拨号\n\n如果你家里的组网方式是通过光猫拨号（通常都是光猫拨号），那么设置方法如下：\n\n选择 网络-接口， 然后选择 修改WAN口设置\n\n![img](R2S_build/image-2-1024x507.png)\n\n将WAN口设置成DHCP客户端，然后保存应用即可，此外无须做其他任何设置。\n\n![img](R2S_build/image-3-1024x485.png)\n\n### R2S拨号\n\n如果你的光猫是桥接，那么就由路由器来拨号（通常来说，哪个网络设备配置更好，就誰来拨号，由于R2S的稳定性远不如光猫，所以这里选择光猫拨号更好），设置方法如下：\n\n![img](R2S_build/image-5.png)\n\n同样，选择修改WAN口，协议设置成PPPoE, PAP/CHAP，账号密码就是光猫的账号密码。比如电信宽带就是以`@163.gd`结尾的，密码如果忘记的话直接拨打10000（10086）重置就好，省时省力。\n\n![img](R2S_build/image-2-1024x507.png)\n\n接下来，需要用超级管理员账号登陆到光猫的IP中（`192.168.1.1`）,各大运营商的超级管理员账号和密码可以自行搜索。选择 网络-协议，然后设置成DHCP客户端。\n\n### 小结\n\n用什么拨号，什么就选择PPPoE，然后其它设备就都设置成DHCP。\n\n用光猫拨号，光猫的设置里面就选择PPPoE，软路由以及其它路由器就选择DHCP客户端；\n\n用R2S拨号，光猫和其它路由设备的设置里面就选择DHCP客户端，软路由选择PPPoE。\n\n## 各设备接入网络\n\n将软路由的WAN口与光猫的千兆口相连，然后断开软路由的LAN口与电脑网口的连接，此时软路由的LAN口根据各人组网要求的不同选择接不同的设备，可以接交换机，也可以接一台路由器（路由器设置为有线中继模式，也就是无线AP模式）\n\n如果家中设备比较多，或者很多屋子都需要连网线的话，可以买一个最便宜的千兆交换机放到弱电箱中，然后吧R2S接到交换机与光猫中间，这样就可以实现整个局域网都接入到软路由中来。（我来草草的画个图）\n\n![image-20220305212846426](R2S_build/image-20220305212846426.png)\n\n## 利用插件设置科学上网\n\n根据前面的步骤，如果你的设备能够正常访问网络了，就可以开始探索OpenWrt的各类插件了。关于科学上网，常见的插件有PassWall, ShadowScoksR++, OpenClash，由于OpenClash具备强大的分流策略机制（根据你访问的域名或者IP的不同决定走不同的节点），我们在此以OpenCalsh为例设置科学上网\n\n![img](R2S_build/image-7.png)\n\n首先，在服务菜单中找到OpenClash，然后选择配置文件订阅，选择添加配置文件\n\n![img](R2S_build/image-8.png)\n\n配置文件名随便写，用途是给用户自己区分的，订阅地址填上机场给你的订阅地址，其余地方无需设置，直接应用并保存即可。然后回到OpenClash主页，配置文件区域发送了变化。\n\n![img](R2S_build/image-9-1024x194.png)\n\n最后点击左下角的启动按钮，等待服务器上线运行即可。\n\n![img](R2S_build/image-10.png)\n\n如果你设置后无法正常科学上网，原因是有很多的，需要你自己慢慢排查。\n\n## 更多（原作者的话）\n\n[NanoPi R2S WIKI](https://wiki.friendlyarm.com/wiki/index.php/NanoPi_R2S/zh)\n\n上面的链接是R2S的WIKI书，上面详细记录了R2S的配置以及实际测速情况，也有如何编译系统等教程。\n\n个人使用R2S两年，从大一到大三都在用这个，感觉就是到千兆不太行，500M是瓶颈了，然后连久了没那么稳定，官网手册上宣传它是又稳定又能达到千兆的，这个听听就好，R2S本来是适合入门的，但是现在价格炒的太高了，没这个必要去买它，目前有很多更具有性价比的软路由可供选择。\n\n此外向大家推荐软路由界的大佬: [JackStone的Youtube主页](https://youtube.com/c/jackstone) ，人称老白，做了很多小主机的视频，如果想选购更具性价比的设备，可以看他的合集，比如2021软路由选购建议这些。\n\n## 组网时遇到过的问题（我的话）\n\n1. 组网的过程中可能出现无法自动分配IP地址的问题，比如说小米的路由器默认会分配`192.168.31.XXX`；如果你会手动配置的话可以试试，不过最简单的办法就是等，去洗个澡回来就好了。如果还没好，那么可以考虑RESET一下路由器。\n2. OpenClash插件在首次启动的时候，可能会启动失败，他会提示需要你选择编译架构，按照他的提示，选择Arm-v8架构即可。\n3. 网线通常插上马上就会亮灯，5s左右就能ping通，不过不要太相信科学。~~我有一次ping了10多分钟。~~真的，不通的话不一定是没插紧，也不一定是插错了，**很有可能是因为你没给我微信或者支付宝赞赏**。\n4. R2S是很基础的一款软路由，稳定性可能不会太好，不过最有可能导致网络不稳定的还是机场的选择，如果选择廉价机场的话，要做好不知道什么时候突然断网10分钟的准备。\n5. 计算机网络这门学科是玄学的一个分支。\n\n","slug":"R2S_build","published":1,"updated":"2022-03-05T13:46:00.569Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0dwi2ak00075wcy7cju3axd","content":"<h2 id=\"前言\"><a class=\"markdownIt-Anchor\" href=\"#前言\"></a> 前言</h2>\n<p>本文授权转载自<a href=\"https://www.bytedance.fit/?p=1051\">R2S家庭组网实操 – Orange Tien</a>，作者：Orange Tien，在此基础上略加修改，<s>并不会定期更新</s>。</p>\n<p>本文主要介绍R2S的基本使用方法，目前本人（Tony）也在原作者（Orange Tien）的怂恿下在两个地方分别搭建了两个R2S，看起来很简单，其实不是一帆风顺；因此也会把实际组网中遇到的问题列到最后供大家参考。</p>\n<h2 id=\"确定所需物理设备\"><a class=\"markdownIt-Anchor\" href=\"#确定所需物理设备\"></a> 确定所需物理设备</h2>\n<ul>\n<li>一台R2S软路由以及它的电源线</li>\n<li>两根用不着太长的网线一张TF卡（作为R2S的系统盘）以及一个读写TF卡的读卡器</li>\n<li>一台可以插网线的电脑</li>\n<li>交换机（可选）</li>\n<li>插排（某些时候插座不够用）</li>\n</ul>\n<h2 id=\"烧录openwrt系统\"><a class=\"markdownIt-Anchor\" href=\"#烧录openwrt系统\"></a> 烧录OpenWrt系统</h2>\n<p>烧录软件：[BalenaEtcher](<a href=\"https://www.balena.io/etcher/\">balenaEtcher - Flash OS images to SD cards &amp; USB drives</a>)</p>\n<p>软路由系统：</p>\n<p><a href=\"https://bigdongdong.cowtransfer.com/s/a3420546d30343\">OpenWrt-R2S-dongdong</a></p>\n<p><a href=\"https://bigdongdong.cowtransfer.com/s/9a349ee597aa4f\">OpenWrt-R2S-esir</a></p>\n<p>第一个链接比较新，界面比较好看一些，推荐选择这个下载；第二个系统是eSir大人写的2020版本，已经很旧了；<s>奈何暂时没找到别的系统</s>，如果自行找到更好的系统也可以不用这俩链接。注意系统是要支持Arm架构的，因为Openwrt不是x86架构下的产物。</p>\n<h2 id=\"开始烧录系统至tf卡\"><a class=\"markdownIt-Anchor\" href=\"#开始烧录系统至tf卡\"></a> 开始烧录系统至TF卡</h2>\n<p>打开BalenaEtcher，选择Flash from file，然后将OpenWrt系统烧录到TF卡中即可。</p>\n<p><img src=\"/2022/02/26/R2S_build/image-1.png\" alt=\"img\" loading=\"lazy\"></p>\n<p>注意：选择文件时只选择镜像文件，不要把那些七七八八的文档说明也选进去。选择<code>.gz</code>(<code>.img</code>)文件来烧录即可，烧录完成后直接拔掉读卡器；系统会提示格式化，此时千万<strong>不要</strong>格式化！！！（<s>否则，就重来一遍吧</s>）</p>\n<h2 id=\"登入r2s后台\"><a class=\"markdownIt-Anchor\" href=\"#登入r2s后台\"></a> 登入R2S后台</h2>\n<p>把烧录好固件的TF卡插入R2S，然后给它插上电源，WAN口可以不接，将R2S的LAN口连接电脑的网口，根据所刷入的固件（软路由系统）的不同来决定后台地址，一般来说，软路由后台是<code>192.168.X.1</code> ，本文的系统后台是<code>192.168.22.1</code>，所以说我们在电脑浏览器内输入<code>192.168.5.1</code>(<code>192.168.22.1</code>)以进入后台。后台账号是root，默认密码基本都是password（若下载本文的系统，密码则为空），具体操作链接里面写的很清楚。</p>\n<h2 id=\"拨号或者dhcp客户端\"><a class=\"markdownIt-Anchor\" href=\"#拨号或者dhcp客户端\"></a> 拨号或者DHCP客户端</h2>\n<h3 id=\"光猫拨号\"><a class=\"markdownIt-Anchor\" href=\"#光猫拨号\"></a> 光猫拨号</h3>\n<p>如果你家里的组网方式是通过光猫拨号（通常都是光猫拨号），那么设置方法如下：</p>\n<p>选择 网络-接口， 然后选择 修改WAN口设置</p>\n<p><img src=\"/2022/02/26/R2S_build/image-2-1024x507.png\" alt=\"img\" loading=\"lazy\"></p>\n<p>将WAN口设置成DHCP客户端，然后保存应用即可，此外无须做其他任何设置。</p>\n<p><img src=\"/2022/02/26/R2S_build/image-3-1024x485.png\" alt=\"img\" loading=\"lazy\"></p>\n<h3 id=\"r2s拨号\"><a class=\"markdownIt-Anchor\" href=\"#r2s拨号\"></a> R2S拨号</h3>\n<p>如果你的光猫是桥接，那么就由路由器来拨号（通常来说，哪个网络设备配置更好，就誰来拨号，由于R2S的稳定性远不如光猫，所以这里选择光猫拨号更好），设置方法如下：</p>\n<p><img src=\"/2022/02/26/R2S_build/image-5.png\" alt=\"img\" loading=\"lazy\"></p>\n<p>同样，选择修改WAN口，协议设置成PPPoE, PAP/CHAP，账号密码就是光猫的账号密码。比如电信宽带就是以<code>@163.gd</code>结尾的，密码如果忘记的话直接拨打10000（10086）重置就好，省时省力。</p>\n<p><img src=\"/2022/02/26/R2S_build/image-2-1024x507.png\" alt=\"img\" loading=\"lazy\"></p>\n<p>接下来，需要用超级管理员账号登陆到光猫的IP中（<code>192.168.1.1</code>）,各大运营商的超级管理员账号和密码可以自行搜索。选择 网络-协议，然后设置成DHCP客户端。</p>\n<h3 id=\"小结\"><a class=\"markdownIt-Anchor\" href=\"#小结\"></a> 小结</h3>\n<p>用什么拨号，什么就选择PPPoE，然后其它设备就都设置成DHCP。</p>\n<p>用光猫拨号，光猫的设置里面就选择PPPoE，软路由以及其它路由器就选择DHCP客户端；</p>\n<p>用R2S拨号，光猫和其它路由设备的设置里面就选择DHCP客户端，软路由选择PPPoE。</p>\n<h2 id=\"各设备接入网络\"><a class=\"markdownIt-Anchor\" href=\"#各设备接入网络\"></a> 各设备接入网络</h2>\n<p>将软路由的WAN口与光猫的千兆口相连，然后断开软路由的LAN口与电脑网口的连接，此时软路由的LAN口根据各人组网要求的不同选择接不同的设备，可以接交换机，也可以接一台路由器（路由器设置为有线中继模式，也就是无线AP模式）</p>\n<p>如果家中设备比较多，或者很多屋子都需要连网线的话，可以买一个最便宜的千兆交换机放到弱电箱中，然后吧R2S接到交换机与光猫中间，这样就可以实现整个局域网都接入到软路由中来。（我来草草的画个图）</p>\n<p><img src=\"/2022/02/26/R2S_build/image-20220305212846426.png\" alt=\"image-20220305212846426\" loading=\"lazy\"></p>\n<h2 id=\"利用插件设置科学上网\"><a class=\"markdownIt-Anchor\" href=\"#利用插件设置科学上网\"></a> 利用插件设置科学上网</h2>\n<p>根据前面的步骤，如果你的设备能够正常访问网络了，就可以开始探索OpenWrt的各类插件了。关于科学上网，常见的插件有PassWall, ShadowScoksR++, OpenClash，由于OpenClash具备强大的分流策略机制（根据你访问的域名或者IP的不同决定走不同的节点），我们在此以OpenCalsh为例设置科学上网</p>\n<p><img src=\"/2022/02/26/R2S_build/image-7.png\" alt=\"img\" loading=\"lazy\"></p>\n<p>首先，在服务菜单中找到OpenClash，然后选择配置文件订阅，选择添加配置文件</p>\n<p><img src=\"/2022/02/26/R2S_build/image-8.png\" alt=\"img\" loading=\"lazy\"></p>\n<p>配置文件名随便写，用途是给用户自己区分的，订阅地址填上机场给你的订阅地址，其余地方无需设置，直接应用并保存即可。然后回到OpenClash主页，配置文件区域发送了变化。</p>\n<p><img src=\"/2022/02/26/R2S_build/image-9-1024x194.png\" alt=\"img\" loading=\"lazy\"></p>\n<p>最后点击左下角的启动按钮，等待服务器上线运行即可。</p>\n<p><img src=\"/2022/02/26/R2S_build/image-10.png\" alt=\"img\" loading=\"lazy\"></p>\n<p>如果你设置后无法正常科学上网，原因是有很多的，需要你自己慢慢排查。</p>\n<h2 id=\"更多原作者的话\"><a class=\"markdownIt-Anchor\" href=\"#更多原作者的话\"></a> 更多（原作者的话）</h2>\n<p><a href=\"https://wiki.friendlyarm.com/wiki/index.php/NanoPi_R2S/zh\">NanoPi R2S WIKI</a></p>\n<p>上面的链接是R2S的WIKI书，上面详细记录了R2S的配置以及实际测速情况，也有如何编译系统等教程。</p>\n<p>个人使用R2S两年，从大一到大三都在用这个，感觉就是到千兆不太行，500M是瓶颈了，然后连久了没那么稳定，官网手册上宣传它是又稳定又能达到千兆的，这个听听就好，R2S本来是适合入门的，但是现在价格炒的太高了，没这个必要去买它，目前有很多更具有性价比的软路由可供选择。</p>\n<p>此外向大家推荐软路由界的大佬: <a href=\"https://youtube.com/c/jackstone\">JackStone的Youtube主页</a> ，人称老白，做了很多小主机的视频，如果想选购更具性价比的设备，可以看他的合集，比如2021软路由选购建议这些。</p>\n<h2 id=\"组网时遇到过的问题我的话\"><a class=\"markdownIt-Anchor\" href=\"#组网时遇到过的问题我的话\"></a> 组网时遇到过的问题（我的话）</h2>\n<ol>\n<li>组网的过程中可能出现无法自动分配IP地址的问题，比如说小米的路由器默认会分配<code>192.168.31.XXX</code>；如果你会手动配置的话可以试试，不过最简单的办法就是等，去洗个澡回来就好了。如果还没好，那么可以考虑RESET一下路由器。</li>\n<li>OpenClash插件在首次启动的时候，可能会启动失败，他会提示需要你选择编译架构，按照他的提示，选择Arm-v8架构即可。</li>\n<li>网线通常插上马上就会亮灯，5s左右就能ping通，不过不要太相信科学。~~我有一次ping了10多分钟。~~真的，不通的话不一定是没插紧，也不一定是插错了，<strong>很有可能是因为你没给我微信或者支付宝赞赏</strong>。</li>\n<li>R2S是很基础的一款软路由，稳定性可能不会太好，不过最有可能导致网络不稳定的还是机场的选择，如果选择廉价机场的话，要做好不知道什么时候突然断网10分钟的准备。</li>\n<li>计算机网络这门学科是玄学的一个分支。</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a class=\"markdownIt-Anchor\" href=\"#前言\"></a> 前言</h2>\n<p>本文授权转载自<a href=\"https://www.bytedance.fit/?p=1051\">R2S家庭组网实操 – Orange Tien</a>，作者：Orange Tien，在此基础上略加修改，<s>并不会定期更新</s>。</p>\n<p>本文主要介绍R2S的基本使用方法，目前本人（Tony）也在原作者（Orange Tien）的怂恿下在两个地方分别搭建了两个R2S，看起来很简单，其实不是一帆风顺；因此也会把实际组网中遇到的问题列到最后供大家参考。</p>\n<h2 id=\"确定所需物理设备\"><a class=\"markdownIt-Anchor\" href=\"#确定所需物理设备\"></a> 确定所需物理设备</h2>\n<ul>\n<li>一台R2S软路由以及它的电源线</li>\n<li>两根用不着太长的网线一张TF卡（作为R2S的系统盘）以及一个读写TF卡的读卡器</li>\n<li>一台可以插网线的电脑</li>\n<li>交换机（可选）</li>\n<li>插排（某些时候插座不够用）</li>\n</ul>\n<h2 id=\"烧录openwrt系统\"><a class=\"markdownIt-Anchor\" href=\"#烧录openwrt系统\"></a> 烧录OpenWrt系统</h2>\n<p>烧录软件：[BalenaEtcher](<a href=\"https://www.balena.io/etcher/\">balenaEtcher - Flash OS images to SD cards &amp; USB drives</a>)</p>\n<p>软路由系统：</p>\n<p><a href=\"https://bigdongdong.cowtransfer.com/s/a3420546d30343\">OpenWrt-R2S-dongdong</a></p>\n<p><a href=\"https://bigdongdong.cowtransfer.com/s/9a349ee597aa4f\">OpenWrt-R2S-esir</a></p>\n<p>第一个链接比较新，界面比较好看一些，推荐选择这个下载；第二个系统是eSir大人写的2020版本，已经很旧了；<s>奈何暂时没找到别的系统</s>，如果自行找到更好的系统也可以不用这俩链接。注意系统是要支持Arm架构的，因为Openwrt不是x86架构下的产物。</p>\n<h2 id=\"开始烧录系统至tf卡\"><a class=\"markdownIt-Anchor\" href=\"#开始烧录系统至tf卡\"></a> 开始烧录系统至TF卡</h2>\n<p>打开BalenaEtcher，选择Flash from file，然后将OpenWrt系统烧录到TF卡中即可。</p>\n<p><img src=\"/2022/02/26/R2S_build/image-1.png\" alt=\"img\"></p>\n<p>注意：选择文件时只选择镜像文件，不要把那些七七八八的文档说明也选进去。选择<code>.gz</code>(<code>.img</code>)文件来烧录即可，烧录完成后直接拔掉读卡器；系统会提示格式化，此时千万<strong>不要</strong>格式化！！！（<s>否则，就重来一遍吧</s>）</p>\n<h2 id=\"登入r2s后台\"><a class=\"markdownIt-Anchor\" href=\"#登入r2s后台\"></a> 登入R2S后台</h2>\n<p>把烧录好固件的TF卡插入R2S，然后给它插上电源，WAN口可以不接，将R2S的LAN口连接电脑的网口，根据所刷入的固件（软路由系统）的不同来决定后台地址，一般来说，软路由后台是<code>192.168.X.1</code> ，本文的系统后台是<code>192.168.22.1</code>，所以说我们在电脑浏览器内输入<code>192.168.5.1</code>(<code>192.168.22.1</code>)以进入后台。后台账号是root，默认密码基本都是password（若下载本文的系统，密码则为空），具体操作链接里面写的很清楚。</p>\n<h2 id=\"拨号或者dhcp客户端\"><a class=\"markdownIt-Anchor\" href=\"#拨号或者dhcp客户端\"></a> 拨号或者DHCP客户端</h2>\n<h3 id=\"光猫拨号\"><a class=\"markdownIt-Anchor\" href=\"#光猫拨号\"></a> 光猫拨号</h3>\n<p>如果你家里的组网方式是通过光猫拨号（通常都是光猫拨号），那么设置方法如下：</p>\n<p>选择 网络-接口， 然后选择 修改WAN口设置</p>\n<p><img src=\"/2022/02/26/R2S_build/image-2-1024x507.png\" alt=\"img\"></p>\n<p>将WAN口设置成DHCP客户端，然后保存应用即可，此外无须做其他任何设置。</p>\n<p><img src=\"/2022/02/26/R2S_build/image-3-1024x485.png\" alt=\"img\"></p>\n<h3 id=\"r2s拨号\"><a class=\"markdownIt-Anchor\" href=\"#r2s拨号\"></a> R2S拨号</h3>\n<p>如果你的光猫是桥接，那么就由路由器来拨号（通常来说，哪个网络设备配置更好，就誰来拨号，由于R2S的稳定性远不如光猫，所以这里选择光猫拨号更好），设置方法如下：</p>\n<p><img src=\"/2022/02/26/R2S_build/image-5.png\" alt=\"img\"></p>\n<p>同样，选择修改WAN口，协议设置成PPPoE, PAP/CHAP，账号密码就是光猫的账号密码。比如电信宽带就是以<code>@163.gd</code>结尾的，密码如果忘记的话直接拨打10000（10086）重置就好，省时省力。</p>\n<p><img src=\"/2022/02/26/R2S_build/image-2-1024x507.png\" alt=\"img\"></p>\n<p>接下来，需要用超级管理员账号登陆到光猫的IP中（<code>192.168.1.1</code>）,各大运营商的超级管理员账号和密码可以自行搜索。选择 网络-协议，然后设置成DHCP客户端。</p>\n<h3 id=\"小结\"><a class=\"markdownIt-Anchor\" href=\"#小结\"></a> 小结</h3>\n<p>用什么拨号，什么就选择PPPoE，然后其它设备就都设置成DHCP。</p>\n<p>用光猫拨号，光猫的设置里面就选择PPPoE，软路由以及其它路由器就选择DHCP客户端；</p>\n<p>用R2S拨号，光猫和其它路由设备的设置里面就选择DHCP客户端，软路由选择PPPoE。</p>\n<h2 id=\"各设备接入网络\"><a class=\"markdownIt-Anchor\" href=\"#各设备接入网络\"></a> 各设备接入网络</h2>\n<p>将软路由的WAN口与光猫的千兆口相连，然后断开软路由的LAN口与电脑网口的连接，此时软路由的LAN口根据各人组网要求的不同选择接不同的设备，可以接交换机，也可以接一台路由器（路由器设置为有线中继模式，也就是无线AP模式）</p>\n<p>如果家中设备比较多，或者很多屋子都需要连网线的话，可以买一个最便宜的千兆交换机放到弱电箱中，然后吧R2S接到交换机与光猫中间，这样就可以实现整个局域网都接入到软路由中来。（我来草草的画个图）</p>\n<p><img src=\"/2022/02/26/R2S_build/image-20220305212846426.png\" alt=\"image-20220305212846426\"></p>\n<h2 id=\"利用插件设置科学上网\"><a class=\"markdownIt-Anchor\" href=\"#利用插件设置科学上网\"></a> 利用插件设置科学上网</h2>\n<p>根据前面的步骤，如果你的设备能够正常访问网络了，就可以开始探索OpenWrt的各类插件了。关于科学上网，常见的插件有PassWall, ShadowScoksR++, OpenClash，由于OpenClash具备强大的分流策略机制（根据你访问的域名或者IP的不同决定走不同的节点），我们在此以OpenCalsh为例设置科学上网</p>\n<p><img src=\"/2022/02/26/R2S_build/image-7.png\" alt=\"img\"></p>\n<p>首先，在服务菜单中找到OpenClash，然后选择配置文件订阅，选择添加配置文件</p>\n<p><img src=\"/2022/02/26/R2S_build/image-8.png\" alt=\"img\"></p>\n<p>配置文件名随便写，用途是给用户自己区分的，订阅地址填上机场给你的订阅地址，其余地方无需设置，直接应用并保存即可。然后回到OpenClash主页，配置文件区域发送了变化。</p>\n<p><img src=\"/2022/02/26/R2S_build/image-9-1024x194.png\" alt=\"img\"></p>\n<p>最后点击左下角的启动按钮，等待服务器上线运行即可。</p>\n<p><img src=\"/2022/02/26/R2S_build/image-10.png\" alt=\"img\"></p>\n<p>如果你设置后无法正常科学上网，原因是有很多的，需要你自己慢慢排查。</p>\n<h2 id=\"更多原作者的话\"><a class=\"markdownIt-Anchor\" href=\"#更多原作者的话\"></a> 更多（原作者的话）</h2>\n<p><a href=\"https://wiki.friendlyarm.com/wiki/index.php/NanoPi_R2S/zh\">NanoPi R2S WIKI</a></p>\n<p>上面的链接是R2S的WIKI书，上面详细记录了R2S的配置以及实际测速情况，也有如何编译系统等教程。</p>\n<p>个人使用R2S两年，从大一到大三都在用这个，感觉就是到千兆不太行，500M是瓶颈了，然后连久了没那么稳定，官网手册上宣传它是又稳定又能达到千兆的，这个听听就好，R2S本来是适合入门的，但是现在价格炒的太高了，没这个必要去买它，目前有很多更具有性价比的软路由可供选择。</p>\n<p>此外向大家推荐软路由界的大佬: <a href=\"https://youtube.com/c/jackstone\">JackStone的Youtube主页</a> ，人称老白，做了很多小主机的视频，如果想选购更具性价比的设备，可以看他的合集，比如2021软路由选购建议这些。</p>\n<h2 id=\"组网时遇到过的问题我的话\"><a class=\"markdownIt-Anchor\" href=\"#组网时遇到过的问题我的话\"></a> 组网时遇到过的问题（我的话）</h2>\n<ol>\n<li>组网的过程中可能出现无法自动分配IP地址的问题，比如说小米的路由器默认会分配<code>192.168.31.XXX</code>；如果你会手动配置的话可以试试，不过最简单的办法就是等，去洗个澡回来就好了。如果还没好，那么可以考虑RESET一下路由器。</li>\n<li>OpenClash插件在首次启动的时候，可能会启动失败，他会提示需要你选择编译架构，按照他的提示，选择Arm-v8架构即可。</li>\n<li>网线通常插上马上就会亮灯，5s左右就能ping通，不过不要太相信科学。~~我有一次ping了10多分钟。~~真的，不通的话不一定是没插紧，也不一定是插错了，<strong>很有可能是因为你没给我微信或者支付宝赞赏</strong>。</li>\n<li>R2S是很基础的一款软路由，稳定性可能不会太好，不过最有可能导致网络不稳定的还是机场的选择，如果选择廉价机场的话，要做好不知道什么时候突然断网10分钟的准备。</li>\n<li>计算机网络这门学科是玄学的一个分支。</li>\n</ol>\n"},{"title":"链式二叉树简介","date":"2022-02-25T08:01:11.000Z","author":"Tony","katex":true,"_content":"\n\n\n## 前言\n\n> 人为什么难做选择？\n\n**选择意味着放弃**\n\n你选择一方，也就意味着放弃了另一方。摆在你面前的选择项越接近，你的选择就会越困难，因为放弃其中任何一个选择项都不容易。如果摆在你面前的选择项对比明显，那么选择起来就会轻松许多，大家几乎都会毫不犹豫的选择“好”的选择项，放弃掉“差”的选择项。\n\n**选择永远都不是完美的**\n\n选择永远都不可能十全十美，只可能满足尽量多的侧重点。选择的时候想满足越多的侧重点，可能就会越难做出选择。所以在选择上不要过于追求完美。\n\n警惕**逃避性选择**——不知道自己要去哪儿，还要选择离开。\n\n有一种选择是对现状不满，想逃离这种现状，但是却不知道去哪里。举个例子，可能目前的公司有各种问题，比如开发流程不规范等，如果因为这些问题离开，可能就会从一个坑跳到另外一个更大的坑。当决定离开的时候，一定是自己有明确的目标，很清楚自己想要什么。\n\n------\n\n## 二叉树的定义\n\n二叉树要么为空，要么由根节点（root），左子树（left subtree）和右子树（right subtree）组成，而且左子树和右子树分别是一棵二叉树。\n\n------\n\n## 二叉树的遍历\n\n- 先序遍历$PreOrder(T)=Root(T)+PreOrder(left subT)+PreOrder(right subT)$\n- 中序遍历$InOrder(T)=InOrder(left subT)+Root(T)+InOrder(right subT)$\n- 后序遍历$PostOrder(T)=PostOrder(left subT)+PostOrder(Right subT)+Root(T)$\n\n![img](binary_tree_1/image.png)\n\n------\n\n\n\n```\nstruct Bitree //definition\n{\n    int data;\n    Bitree Lchild;\n    Bitree Rchild;\n};\n```\n\n## 先序遍历\n\n1. 递归实现\n\n```\nvoid PreOrderTraverse(BiTree tree)\n{\n    if (tree == NULL)\n        return;\n    cout << tree->data;\n    PreOrderTraverse(tree->lchild);\n    PreOrderTraverse(tree->rchild);\n}\n```\n\n2. 迭代实现\n\n```\nvoid PreOrder(BiTree Root)\n{\n    stack <BiTree> s;\n    if (root) //如果根节点不为空\n        s.push(root); //则令根节点入栈\n    while (!s.empty()) //在栈变空之前反复循环\n    { \n        root = s.pop(); \n        cout << root->data; //弹出并访问当前节点\n        //下面左右孩子的顺序不能颠倒\n        //必须先让右孩子先入栈，再让左孩子入栈。\n        if (root->RChild)\n            s.push(root->RChild); //右孩子先入后出\n        if (root->LChild)\n            s.push(root->LChild); //左孩子后入先出\n    }\n}\n```\n\n我们通过一个实例来了解一下该迭代版本是如何工作的 :\n\n![img](binary_tree_1/v2-0ccba83c7b3dbf7b89964c04021025d9_720w.jpg)\n\n## 中序遍历\n\n1. 递归实现\n\n```\nvoid InOrderTraverse(BiTree tree)\n{\n    if (!tree)\n        return;\n    InOrderTraverse(tree->lchild);\n    cout << tree->data;\n    IndOrderTraverse(tree->rchild);\n}\n```\n\n2. 迭代实现\n\n```\nvoid InOrderTraverse(BiTree root)\n{\n   Stack<BiTree> S; //辅助栈\n   while (true)\n      if (root) \n      {\n         S.push (root); //根节点进栈\n         root = root->LChild; //深入遍历左子树\n      } \n      else if (!S.empty()) \n      {\n         root = S.pop(); //尚未访问的最低祖先节点退栈\n         cout << root->data; //访问该祖先节点\n         root = root->RChild; //遍历祖先的右子树\n      } \n      else\n         break; //遍历完成\n}\n```\n\n## 后序遍历\n\n1. 递归实现\n\n```\nvoid PostOrderTraverse(BiTree tree)\n{\n    if (!tree)\n        return;\n    InOrderTraverse(tree->Lchild);\n    IndOrderTraverse(tree->Rchild);\n    cout << tree->data;\n}\n```\n\n2. 迭代实现\n\n```\n#define A !cur->Lchild && !cur->Rchild\n//如果P不存在左孩子和右孩子，则可以直接访问它；\n#define B pre==cur->Lchild || pre==cur->Rchild\n//P存在左孩子或者右孩子，但是其左孩子和右孩子都已被访问过了;\nvoid PostOrder(BiTree Root)\n{\n    if (!Root)\n        return;\n    stack <BiTree> s;//辅助栈\n    BiTree cur=Root,pre=NULL;\n    s.push(Root);//根节点进栈\n    while (!s.empty())\n    {\n        cur=s.top();\n        if (A || B)\n        {\n            cout << cur->data;\n            s.pop();\n            pre=cur;\n        }\n        else\n        {\n            if (cur->Rchild)\n                s.push(cur->Rchild);\n            if (cur->Lchild)\n                s.push(cur->Lchild);\n        }\n    }\n}\n\n```\n\n------\n\n下一篇文章：[数组与链式二叉树之间的转换 | Tony (tonylsx611.github.io)](https://tonylsx611.github.io/2022/02/24/binary_tree_2/)\n$$\nEND\n$$","source":"_posts/binary_tree_1.md","raw":"---\ntitle: 链式二叉树简介\ndate: 2022-02-25 16:01:11\nauthor: Tony\ncategories:\n\t- algorithm\ntags: \n\t- Binary-tree\n\t- algorithm\nkatex: true\n---\n\n\n\n## 前言\n\n> 人为什么难做选择？\n\n**选择意味着放弃**\n\n你选择一方，也就意味着放弃了另一方。摆在你面前的选择项越接近，你的选择就会越困难，因为放弃其中任何一个选择项都不容易。如果摆在你面前的选择项对比明显，那么选择起来就会轻松许多，大家几乎都会毫不犹豫的选择“好”的选择项，放弃掉“差”的选择项。\n\n**选择永远都不是完美的**\n\n选择永远都不可能十全十美，只可能满足尽量多的侧重点。选择的时候想满足越多的侧重点，可能就会越难做出选择。所以在选择上不要过于追求完美。\n\n警惕**逃避性选择**——不知道自己要去哪儿，还要选择离开。\n\n有一种选择是对现状不满，想逃离这种现状，但是却不知道去哪里。举个例子，可能目前的公司有各种问题，比如开发流程不规范等，如果因为这些问题离开，可能就会从一个坑跳到另外一个更大的坑。当决定离开的时候，一定是自己有明确的目标，很清楚自己想要什么。\n\n------\n\n## 二叉树的定义\n\n二叉树要么为空，要么由根节点（root），左子树（left subtree）和右子树（right subtree）组成，而且左子树和右子树分别是一棵二叉树。\n\n------\n\n## 二叉树的遍历\n\n- 先序遍历$PreOrder(T)=Root(T)+PreOrder(left subT)+PreOrder(right subT)$\n- 中序遍历$InOrder(T)=InOrder(left subT)+Root(T)+InOrder(right subT)$\n- 后序遍历$PostOrder(T)=PostOrder(left subT)+PostOrder(Right subT)+Root(T)$\n\n![img](binary_tree_1/image.png)\n\n------\n\n\n\n```\nstruct Bitree //definition\n{\n    int data;\n    Bitree Lchild;\n    Bitree Rchild;\n};\n```\n\n## 先序遍历\n\n1. 递归实现\n\n```\nvoid PreOrderTraverse(BiTree tree)\n{\n    if (tree == NULL)\n        return;\n    cout << tree->data;\n    PreOrderTraverse(tree->lchild);\n    PreOrderTraverse(tree->rchild);\n}\n```\n\n2. 迭代实现\n\n```\nvoid PreOrder(BiTree Root)\n{\n    stack <BiTree> s;\n    if (root) //如果根节点不为空\n        s.push(root); //则令根节点入栈\n    while (!s.empty()) //在栈变空之前反复循环\n    { \n        root = s.pop(); \n        cout << root->data; //弹出并访问当前节点\n        //下面左右孩子的顺序不能颠倒\n        //必须先让右孩子先入栈，再让左孩子入栈。\n        if (root->RChild)\n            s.push(root->RChild); //右孩子先入后出\n        if (root->LChild)\n            s.push(root->LChild); //左孩子后入先出\n    }\n}\n```\n\n我们通过一个实例来了解一下该迭代版本是如何工作的 :\n\n![img](binary_tree_1/v2-0ccba83c7b3dbf7b89964c04021025d9_720w.jpg)\n\n## 中序遍历\n\n1. 递归实现\n\n```\nvoid InOrderTraverse(BiTree tree)\n{\n    if (!tree)\n        return;\n    InOrderTraverse(tree->lchild);\n    cout << tree->data;\n    IndOrderTraverse(tree->rchild);\n}\n```\n\n2. 迭代实现\n\n```\nvoid InOrderTraverse(BiTree root)\n{\n   Stack<BiTree> S; //辅助栈\n   while (true)\n      if (root) \n      {\n         S.push (root); //根节点进栈\n         root = root->LChild; //深入遍历左子树\n      } \n      else if (!S.empty()) \n      {\n         root = S.pop(); //尚未访问的最低祖先节点退栈\n         cout << root->data; //访问该祖先节点\n         root = root->RChild; //遍历祖先的右子树\n      } \n      else\n         break; //遍历完成\n}\n```\n\n## 后序遍历\n\n1. 递归实现\n\n```\nvoid PostOrderTraverse(BiTree tree)\n{\n    if (!tree)\n        return;\n    InOrderTraverse(tree->Lchild);\n    IndOrderTraverse(tree->Rchild);\n    cout << tree->data;\n}\n```\n\n2. 迭代实现\n\n```\n#define A !cur->Lchild && !cur->Rchild\n//如果P不存在左孩子和右孩子，则可以直接访问它；\n#define B pre==cur->Lchild || pre==cur->Rchild\n//P存在左孩子或者右孩子，但是其左孩子和右孩子都已被访问过了;\nvoid PostOrder(BiTree Root)\n{\n    if (!Root)\n        return;\n    stack <BiTree> s;//辅助栈\n    BiTree cur=Root,pre=NULL;\n    s.push(Root);//根节点进栈\n    while (!s.empty())\n    {\n        cur=s.top();\n        if (A || B)\n        {\n            cout << cur->data;\n            s.pop();\n            pre=cur;\n        }\n        else\n        {\n            if (cur->Rchild)\n                s.push(cur->Rchild);\n            if (cur->Lchild)\n                s.push(cur->Lchild);\n        }\n    }\n}\n\n```\n\n------\n\n下一篇文章：[数组与链式二叉树之间的转换 | Tony (tonylsx611.github.io)](https://tonylsx611.github.io/2022/02/24/binary_tree_2/)\n$$\nEND\n$$","slug":"binary_tree_1","published":1,"updated":"2022-02-25T09:12:40.697Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0dwi2al00085wcybywvhjc3","content":"<h2 id=\"前言\"><a class=\"markdownIt-Anchor\" href=\"#前言\"></a> 前言</h2>\n<blockquote>\n<p>人为什么难做选择？</p>\n</blockquote>\n<p><strong>选择意味着放弃</strong></p>\n<p>你选择一方，也就意味着放弃了另一方。摆在你面前的选择项越接近，你的选择就会越困难，因为放弃其中任何一个选择项都不容易。如果摆在你面前的选择项对比明显，那么选择起来就会轻松许多，大家几乎都会毫不犹豫的选择“好”的选择项，放弃掉“差”的选择项。</p>\n<p><strong>选择永远都不是完美的</strong></p>\n<p>选择永远都不可能十全十美，只可能满足尽量多的侧重点。选择的时候想满足越多的侧重点，可能就会越难做出选择。所以在选择上不要过于追求完美。</p>\n<p>警惕<strong>逃避性选择</strong>——不知道自己要去哪儿，还要选择离开。</p>\n<p>有一种选择是对现状不满，想逃离这种现状，但是却不知道去哪里。举个例子，可能目前的公司有各种问题，比如开发流程不规范等，如果因为这些问题离开，可能就会从一个坑跳到另外一个更大的坑。当决定离开的时候，一定是自己有明确的目标，很清楚自己想要什么。</p>\n<hr>\n<h2 id=\"二叉树的定义\"><a class=\"markdownIt-Anchor\" href=\"#二叉树的定义\"></a> 二叉树的定义</h2>\n<p>二叉树要么为空，要么由根节点（root），左子树（left subtree）和右子树（right subtree）组成，而且左子树和右子树分别是一棵二叉树。</p>\n<hr>\n<h2 id=\"二叉树的遍历\"><a class=\"markdownIt-Anchor\" href=\"#二叉树的遍历\"></a> 二叉树的遍历</h2>\n<ul>\n<li>先序遍历<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>P</mi><mi>r</mi><mi>e</mi><mi>O</mi><mi>r</mi><mi>d</mi><mi>e</mi><mi>r</mi><mo stretchy=\"false\">(</mo><mi>T</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>R</mi><mi>o</mi><mi>o</mi><mi>t</mi><mo stretchy=\"false\">(</mo><mi>T</mi><mo stretchy=\"false\">)</mo><mo>+</mo><mi>P</mi><mi>r</mi><mi>e</mi><mi>O</mi><mi>r</mi><mi>d</mi><mi>e</mi><mi>r</mi><mo stretchy=\"false\">(</mo><mi>l</mi><mi>e</mi><mi>f</mi><mi>t</mi><mi>s</mi><mi>u</mi><mi>b</mi><mi>T</mi><mo stretchy=\"false\">)</mo><mo>+</mo><mi>P</mi><mi>r</mi><mi>e</mi><mi>O</mi><mi>r</mi><mi>d</mi><mi>e</mi><mi>r</mi><mo stretchy=\"false\">(</mo><mi>r</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi><mi>s</mi><mi>u</mi><mi>b</mi><mi>T</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">PreOrder(T)=Root(T)+PreOrder(left subT)+PreOrder(right subT)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">P</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">t</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">P</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">u</span><span class=\"mord mathdefault\">b</span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">P</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathdefault\">h</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">u</span><span class=\"mord mathdefault\">b</span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"mclose\">)</span></span></span></span></li>\n<li>中序遍历<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>I</mi><mi>n</mi><mi>O</mi><mi>r</mi><mi>d</mi><mi>e</mi><mi>r</mi><mo stretchy=\"false\">(</mo><mi>T</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>I</mi><mi>n</mi><mi>O</mi><mi>r</mi><mi>d</mi><mi>e</mi><mi>r</mi><mo stretchy=\"false\">(</mo><mi>l</mi><mi>e</mi><mi>f</mi><mi>t</mi><mi>s</mi><mi>u</mi><mi>b</mi><mi>T</mi><mo stretchy=\"false\">)</mo><mo>+</mo><mi>R</mi><mi>o</mi><mi>o</mi><mi>t</mi><mo stretchy=\"false\">(</mo><mi>T</mi><mo stretchy=\"false\">)</mo><mo>+</mo><mi>I</mi><mi>n</mi><mi>O</mi><mi>r</mi><mi>d</mi><mi>e</mi><mi>r</mi><mo stretchy=\"false\">(</mo><mi>r</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi><mi>s</mi><mi>u</mi><mi>b</mi><mi>T</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">InOrder(T)=InOrder(left subT)+Root(T)+InOrder(right subT)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">I</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">I</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">u</span><span class=\"mord mathdefault\">b</span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">t</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">I</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathdefault\">h</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">u</span><span class=\"mord mathdefault\">b</span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"mclose\">)</span></span></span></span></li>\n<li>后序遍历<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>P</mi><mi>o</mi><mi>s</mi><mi>t</mi><mi>O</mi><mi>r</mi><mi>d</mi><mi>e</mi><mi>r</mi><mo stretchy=\"false\">(</mo><mi>T</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>P</mi><mi>o</mi><mi>s</mi><mi>t</mi><mi>O</mi><mi>r</mi><mi>d</mi><mi>e</mi><mi>r</mi><mo stretchy=\"false\">(</mo><mi>l</mi><mi>e</mi><mi>f</mi><mi>t</mi><mi>s</mi><mi>u</mi><mi>b</mi><mi>T</mi><mo stretchy=\"false\">)</mo><mo>+</mo><mi>P</mi><mi>o</mi><mi>s</mi><mi>t</mi><mi>O</mi><mi>r</mi><mi>d</mi><mi>e</mi><mi>r</mi><mo stretchy=\"false\">(</mo><mi>R</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi><mi>s</mi><mi>u</mi><mi>b</mi><mi>T</mi><mo stretchy=\"false\">)</mo><mo>+</mo><mi>R</mi><mi>o</mi><mi>o</mi><mi>t</mi><mo stretchy=\"false\">(</mo><mi>T</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">PostOrder(T)=PostOrder(left subT)+PostOrder(Right subT)+Root(T)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">P</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">P</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">u</span><span class=\"mord mathdefault\">b</span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">P</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathdefault\">h</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">u</span><span class=\"mord mathdefault\">b</span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">t</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"mclose\">)</span></span></span></span></li>\n</ul>\n<p><img src=\"/2022/02/25/binary_tree_1/image.png\" alt=\"img\" loading=\"lazy\"></p>\n<hr>\n<pre class=\"language-none\"><code class=\"language-none\">struct Bitree &#x2F;&#x2F;definition\n&#123;\n    int data;\n    Bitree Lchild;\n    Bitree Rchild;\n&#125;;</code></pre>\n<h2 id=\"先序遍历\"><a class=\"markdownIt-Anchor\" href=\"#先序遍历\"></a> 先序遍历</h2>\n<ol>\n<li>递归实现</li>\n</ol>\n<pre class=\"language-none\"><code class=\"language-none\">void PreOrderTraverse(BiTree tree)\n&#123;\n    if (tree &#x3D;&#x3D; NULL)\n        return;\n    cout &lt;&lt; tree-&gt;data;\n    PreOrderTraverse(tree-&gt;lchild);\n    PreOrderTraverse(tree-&gt;rchild);\n&#125;</code></pre>\n<ol start=\"2\">\n<li>迭代实现</li>\n</ol>\n<pre class=\"language-none\"><code class=\"language-none\">void PreOrder(BiTree Root)\n&#123;\n    stack &lt;BiTree&gt; s;\n    if (root) &#x2F;&#x2F;如果根节点不为空\n        s.push(root); &#x2F;&#x2F;则令根节点入栈\n    while (!s.empty()) &#x2F;&#x2F;在栈变空之前反复循环\n    &#123; \n        root &#x3D; s.pop(); \n        cout &lt;&lt; root-&gt;data; &#x2F;&#x2F;弹出并访问当前节点\n        &#x2F;&#x2F;下面左右孩子的顺序不能颠倒\n        &#x2F;&#x2F;必须先让右孩子先入栈，再让左孩子入栈。\n        if (root-&gt;RChild)\n            s.push(root-&gt;RChild); &#x2F;&#x2F;右孩子先入后出\n        if (root-&gt;LChild)\n            s.push(root-&gt;LChild); &#x2F;&#x2F;左孩子后入先出\n    &#125;\n&#125;</code></pre>\n<p>我们通过一个实例来了解一下该迭代版本是如何工作的 :</p>\n<p><img src=\"/2022/02/25/binary_tree_1/v2-0ccba83c7b3dbf7b89964c04021025d9_720w.jpg\" alt=\"img\" loading=\"lazy\"></p>\n<h2 id=\"中序遍历\"><a class=\"markdownIt-Anchor\" href=\"#中序遍历\"></a> 中序遍历</h2>\n<ol>\n<li>递归实现</li>\n</ol>\n<pre class=\"language-none\"><code class=\"language-none\">void InOrderTraverse(BiTree tree)\n&#123;\n    if (!tree)\n        return;\n    InOrderTraverse(tree-&gt;lchild);\n    cout &lt;&lt; tree-&gt;data;\n    IndOrderTraverse(tree-&gt;rchild);\n&#125;</code></pre>\n<ol start=\"2\">\n<li>迭代实现</li>\n</ol>\n<pre class=\"language-none\"><code class=\"language-none\">void InOrderTraverse(BiTree root)\n&#123;\n   Stack&lt;BiTree&gt; S; &#x2F;&#x2F;辅助栈\n   while (true)\n      if (root) \n      &#123;\n         S.push (root); &#x2F;&#x2F;根节点进栈\n         root &#x3D; root-&gt;LChild; &#x2F;&#x2F;深入遍历左子树\n      &#125; \n      else if (!S.empty()) \n      &#123;\n         root &#x3D; S.pop(); &#x2F;&#x2F;尚未访问的最低祖先节点退栈\n         cout &lt;&lt; root-&gt;data; &#x2F;&#x2F;访问该祖先节点\n         root &#x3D; root-&gt;RChild; &#x2F;&#x2F;遍历祖先的右子树\n      &#125; \n      else\n         break; &#x2F;&#x2F;遍历完成\n&#125;</code></pre>\n<h2 id=\"后序遍历\"><a class=\"markdownIt-Anchor\" href=\"#后序遍历\"></a> 后序遍历</h2>\n<ol>\n<li>递归实现</li>\n</ol>\n<pre class=\"language-none\"><code class=\"language-none\">void PostOrderTraverse(BiTree tree)\n&#123;\n    if (!tree)\n        return;\n    InOrderTraverse(tree-&gt;Lchild);\n    IndOrderTraverse(tree-&gt;Rchild);\n    cout &lt;&lt; tree-&gt;data;\n&#125;</code></pre>\n<ol start=\"2\">\n<li>迭代实现</li>\n</ol>\n<pre class=\"language-none\"><code class=\"language-none\">#define A !cur-&gt;Lchild &amp;&amp; !cur-&gt;Rchild\n&#x2F;&#x2F;如果P不存在左孩子和右孩子，则可以直接访问它；\n#define B pre&#x3D;&#x3D;cur-&gt;Lchild || pre&#x3D;&#x3D;cur-&gt;Rchild\n&#x2F;&#x2F;P存在左孩子或者右孩子，但是其左孩子和右孩子都已被访问过了;\nvoid PostOrder(BiTree Root)\n&#123;\n    if (!Root)\n        return;\n    stack &lt;BiTree&gt; s;&#x2F;&#x2F;辅助栈\n    BiTree cur&#x3D;Root,pre&#x3D;NULL;\n    s.push(Root);&#x2F;&#x2F;根节点进栈\n    while (!s.empty())\n    &#123;\n        cur&#x3D;s.top();\n        if (A || B)\n        &#123;\n            cout &lt;&lt; cur-&gt;data;\n            s.pop();\n            pre&#x3D;cur;\n        &#125;\n        else\n        &#123;\n            if (cur-&gt;Rchild)\n                s.push(cur-&gt;Rchild);\n            if (cur-&gt;Lchild)\n                s.push(cur-&gt;Lchild);\n        &#125;\n    &#125;\n&#125;\n</code></pre>\n<hr>\n<p>下一篇文章：<a href=\"https://tonylsx611.github.io/2022/02/24/binary_tree_2/\">数组与链式二叉树之间的转换 | Tony (tonylsx611.github.io)</a></p>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>E</mi><mi>N</mi><mi>D</mi></mrow><annotation encoding=\"application/x-tex\">END\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">N</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">D</span></span></span></span></span></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a class=\"markdownIt-Anchor\" href=\"#前言\"></a> 前言</h2>\n<blockquote>\n<p>人为什么难做选择？</p>\n</blockquote>\n<p><strong>选择意味着放弃</strong></p>\n<p>你选择一方，也就意味着放弃了另一方。摆在你面前的选择项越接近，你的选择就会越困难，因为放弃其中任何一个选择项都不容易。如果摆在你面前的选择项对比明显，那么选择起来就会轻松许多，大家几乎都会毫不犹豫的选择“好”的选择项，放弃掉“差”的选择项。</p>\n<p><strong>选择永远都不是完美的</strong></p>\n<p>选择永远都不可能十全十美，只可能满足尽量多的侧重点。选择的时候想满足越多的侧重点，可能就会越难做出选择。所以在选择上不要过于追求完美。</p>\n<p>警惕<strong>逃避性选择</strong>——不知道自己要去哪儿，还要选择离开。</p>\n<p>有一种选择是对现状不满，想逃离这种现状，但是却不知道去哪里。举个例子，可能目前的公司有各种问题，比如开发流程不规范等，如果因为这些问题离开，可能就会从一个坑跳到另外一个更大的坑。当决定离开的时候，一定是自己有明确的目标，很清楚自己想要什么。</p>\n<hr>\n<h2 id=\"二叉树的定义\"><a class=\"markdownIt-Anchor\" href=\"#二叉树的定义\"></a> 二叉树的定义</h2>\n<p>二叉树要么为空，要么由根节点（root），左子树（left subtree）和右子树（right subtree）组成，而且左子树和右子树分别是一棵二叉树。</p>\n<hr>\n<h2 id=\"二叉树的遍历\"><a class=\"markdownIt-Anchor\" href=\"#二叉树的遍历\"></a> 二叉树的遍历</h2>\n<ul>\n<li>先序遍历<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>P</mi><mi>r</mi><mi>e</mi><mi>O</mi><mi>r</mi><mi>d</mi><mi>e</mi><mi>r</mi><mo stretchy=\"false\">(</mo><mi>T</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>R</mi><mi>o</mi><mi>o</mi><mi>t</mi><mo stretchy=\"false\">(</mo><mi>T</mi><mo stretchy=\"false\">)</mo><mo>+</mo><mi>P</mi><mi>r</mi><mi>e</mi><mi>O</mi><mi>r</mi><mi>d</mi><mi>e</mi><mi>r</mi><mo stretchy=\"false\">(</mo><mi>l</mi><mi>e</mi><mi>f</mi><mi>t</mi><mi>s</mi><mi>u</mi><mi>b</mi><mi>T</mi><mo stretchy=\"false\">)</mo><mo>+</mo><mi>P</mi><mi>r</mi><mi>e</mi><mi>O</mi><mi>r</mi><mi>d</mi><mi>e</mi><mi>r</mi><mo stretchy=\"false\">(</mo><mi>r</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi><mi>s</mi><mi>u</mi><mi>b</mi><mi>T</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">PreOrder(T)=Root(T)+PreOrder(left subT)+PreOrder(right subT)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">P</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">t</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">P</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">u</span><span class=\"mord mathdefault\">b</span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">P</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathdefault\">h</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">u</span><span class=\"mord mathdefault\">b</span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"mclose\">)</span></span></span></span></li>\n<li>中序遍历<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>I</mi><mi>n</mi><mi>O</mi><mi>r</mi><mi>d</mi><mi>e</mi><mi>r</mi><mo stretchy=\"false\">(</mo><mi>T</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>I</mi><mi>n</mi><mi>O</mi><mi>r</mi><mi>d</mi><mi>e</mi><mi>r</mi><mo stretchy=\"false\">(</mo><mi>l</mi><mi>e</mi><mi>f</mi><mi>t</mi><mi>s</mi><mi>u</mi><mi>b</mi><mi>T</mi><mo stretchy=\"false\">)</mo><mo>+</mo><mi>R</mi><mi>o</mi><mi>o</mi><mi>t</mi><mo stretchy=\"false\">(</mo><mi>T</mi><mo stretchy=\"false\">)</mo><mo>+</mo><mi>I</mi><mi>n</mi><mi>O</mi><mi>r</mi><mi>d</mi><mi>e</mi><mi>r</mi><mo stretchy=\"false\">(</mo><mi>r</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi><mi>s</mi><mi>u</mi><mi>b</mi><mi>T</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">InOrder(T)=InOrder(left subT)+Root(T)+InOrder(right subT)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">I</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">I</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">u</span><span class=\"mord mathdefault\">b</span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">t</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">I</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathdefault\">h</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">u</span><span class=\"mord mathdefault\">b</span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"mclose\">)</span></span></span></span></li>\n<li>后序遍历<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>P</mi><mi>o</mi><mi>s</mi><mi>t</mi><mi>O</mi><mi>r</mi><mi>d</mi><mi>e</mi><mi>r</mi><mo stretchy=\"false\">(</mo><mi>T</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>P</mi><mi>o</mi><mi>s</mi><mi>t</mi><mi>O</mi><mi>r</mi><mi>d</mi><mi>e</mi><mi>r</mi><mo stretchy=\"false\">(</mo><mi>l</mi><mi>e</mi><mi>f</mi><mi>t</mi><mi>s</mi><mi>u</mi><mi>b</mi><mi>T</mi><mo stretchy=\"false\">)</mo><mo>+</mo><mi>P</mi><mi>o</mi><mi>s</mi><mi>t</mi><mi>O</mi><mi>r</mi><mi>d</mi><mi>e</mi><mi>r</mi><mo stretchy=\"false\">(</mo><mi>R</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi><mi>s</mi><mi>u</mi><mi>b</mi><mi>T</mi><mo stretchy=\"false\">)</mo><mo>+</mo><mi>R</mi><mi>o</mi><mi>o</mi><mi>t</mi><mo stretchy=\"false\">(</mo><mi>T</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">PostOrder(T)=PostOrder(left subT)+PostOrder(Right subT)+Root(T)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">P</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">P</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">u</span><span class=\"mord mathdefault\">b</span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">P</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathdefault\">h</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">u</span><span class=\"mord mathdefault\">b</span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">t</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"mclose\">)</span></span></span></span></li>\n</ul>\n<p><img src=\"/2022/02/25/binary_tree_1/image.png\" alt=\"img\"></p>\n<hr>\n<pre class=\"language-none\"><code class=\"language-none\">struct Bitree &#x2F;&#x2F;definition\n&#123;\n    int data;\n    Bitree Lchild;\n    Bitree Rchild;\n&#125;;</code></pre>\n<h2 id=\"先序遍历\"><a class=\"markdownIt-Anchor\" href=\"#先序遍历\"></a> 先序遍历</h2>\n<ol>\n<li>递归实现</li>\n</ol>\n<pre class=\"language-none\"><code class=\"language-none\">void PreOrderTraverse(BiTree tree)\n&#123;\n    if (tree &#x3D;&#x3D; NULL)\n        return;\n    cout &lt;&lt; tree-&gt;data;\n    PreOrderTraverse(tree-&gt;lchild);\n    PreOrderTraverse(tree-&gt;rchild);\n&#125;</code></pre>\n<ol start=\"2\">\n<li>迭代实现</li>\n</ol>\n<pre class=\"language-none\"><code class=\"language-none\">void PreOrder(BiTree Root)\n&#123;\n    stack &lt;BiTree&gt; s;\n    if (root) &#x2F;&#x2F;如果根节点不为空\n        s.push(root); &#x2F;&#x2F;则令根节点入栈\n    while (!s.empty()) &#x2F;&#x2F;在栈变空之前反复循环\n    &#123; \n        root &#x3D; s.pop(); \n        cout &lt;&lt; root-&gt;data; &#x2F;&#x2F;弹出并访问当前节点\n        &#x2F;&#x2F;下面左右孩子的顺序不能颠倒\n        &#x2F;&#x2F;必须先让右孩子先入栈，再让左孩子入栈。\n        if (root-&gt;RChild)\n            s.push(root-&gt;RChild); &#x2F;&#x2F;右孩子先入后出\n        if (root-&gt;LChild)\n            s.push(root-&gt;LChild); &#x2F;&#x2F;左孩子后入先出\n    &#125;\n&#125;</code></pre>\n<p>我们通过一个实例来了解一下该迭代版本是如何工作的 :</p>\n<p><img src=\"/2022/02/25/binary_tree_1/v2-0ccba83c7b3dbf7b89964c04021025d9_720w.jpg\" alt=\"img\"></p>\n<h2 id=\"中序遍历\"><a class=\"markdownIt-Anchor\" href=\"#中序遍历\"></a> 中序遍历</h2>\n<ol>\n<li>递归实现</li>\n</ol>\n<pre class=\"language-none\"><code class=\"language-none\">void InOrderTraverse(BiTree tree)\n&#123;\n    if (!tree)\n        return;\n    InOrderTraverse(tree-&gt;lchild);\n    cout &lt;&lt; tree-&gt;data;\n    IndOrderTraverse(tree-&gt;rchild);\n&#125;</code></pre>\n<ol start=\"2\">\n<li>迭代实现</li>\n</ol>\n<pre class=\"language-none\"><code class=\"language-none\">void InOrderTraverse(BiTree root)\n&#123;\n   Stack&lt;BiTree&gt; S; &#x2F;&#x2F;辅助栈\n   while (true)\n      if (root) \n      &#123;\n         S.push (root); &#x2F;&#x2F;根节点进栈\n         root &#x3D; root-&gt;LChild; &#x2F;&#x2F;深入遍历左子树\n      &#125; \n      else if (!S.empty()) \n      &#123;\n         root &#x3D; S.pop(); &#x2F;&#x2F;尚未访问的最低祖先节点退栈\n         cout &lt;&lt; root-&gt;data; &#x2F;&#x2F;访问该祖先节点\n         root &#x3D; root-&gt;RChild; &#x2F;&#x2F;遍历祖先的右子树\n      &#125; \n      else\n         break; &#x2F;&#x2F;遍历完成\n&#125;</code></pre>\n<h2 id=\"后序遍历\"><a class=\"markdownIt-Anchor\" href=\"#后序遍历\"></a> 后序遍历</h2>\n<ol>\n<li>递归实现</li>\n</ol>\n<pre class=\"language-none\"><code class=\"language-none\">void PostOrderTraverse(BiTree tree)\n&#123;\n    if (!tree)\n        return;\n    InOrderTraverse(tree-&gt;Lchild);\n    IndOrderTraverse(tree-&gt;Rchild);\n    cout &lt;&lt; tree-&gt;data;\n&#125;</code></pre>\n<ol start=\"2\">\n<li>迭代实现</li>\n</ol>\n<pre class=\"language-none\"><code class=\"language-none\">#define A !cur-&gt;Lchild &amp;&amp; !cur-&gt;Rchild\n&#x2F;&#x2F;如果P不存在左孩子和右孩子，则可以直接访问它；\n#define B pre&#x3D;&#x3D;cur-&gt;Lchild || pre&#x3D;&#x3D;cur-&gt;Rchild\n&#x2F;&#x2F;P存在左孩子或者右孩子，但是其左孩子和右孩子都已被访问过了;\nvoid PostOrder(BiTree Root)\n&#123;\n    if (!Root)\n        return;\n    stack &lt;BiTree&gt; s;&#x2F;&#x2F;辅助栈\n    BiTree cur&#x3D;Root,pre&#x3D;NULL;\n    s.push(Root);&#x2F;&#x2F;根节点进栈\n    while (!s.empty())\n    &#123;\n        cur&#x3D;s.top();\n        if (A || B)\n        &#123;\n            cout &lt;&lt; cur-&gt;data;\n            s.pop();\n            pre&#x3D;cur;\n        &#125;\n        else\n        &#123;\n            if (cur-&gt;Rchild)\n                s.push(cur-&gt;Rchild);\n            if (cur-&gt;Lchild)\n                s.push(cur-&gt;Lchild);\n        &#125;\n    &#125;\n&#125;\n</code></pre>\n<hr>\n<p>下一篇文章：<a href=\"https://tonylsx611.github.io/2022/02/24/binary_tree_2/\">数组与链式二叉树之间的转换 | Tony (tonylsx611.github.io)</a></p>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>E</mi><mi>N</mi><mi>D</mi></mrow><annotation encoding=\"application/x-tex\">END\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">N</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">D</span></span></span></span></span></p>\n"},{"title":"数组与链式二叉树的转换","date":"2022-02-24T14:20:55.000Z","author":"Tony","katex":false,"_content":"\n## 前言\n\n对二叉树不是很了解的同学可以先看一下我之前的文章：\n\n[链式二叉树简介](https://tonylsx611.github.io/2022/02/25/binary_tree_1/)\n\n## 正文\n\n在了解二叉树的基本原理后，我们尝试将一个数组转化成链表形式的二叉树，之后将二叉树以中序遍历打印出来。整个的过程即==数组——链表——数组==。\n\n幸运的是，正好在leetcode中有着一道非常相似的题，所以我就直接拿来使用了，链接如下：\n\n[94. 二叉树的中序遍历 – 力扣（LeetCode） (leetcode-cn.com)](https://leetcode-cn.com/problems/binary-tree-inorder-traversal/)\n\n我们稍加修改，首先声明一个int类型的数组，然后把它放入链表二叉树中，如图所示：\n\n![img](binary_tree_2/image.png)\n\n```\nint arr[7] = { 1, 2, 3, 4, 5, NULL, 6 };\n```\n\n之后的任务就是将数组转化为链表形式，链表的定义如下：\n\n```\nstruct TreeNode \n{\n    int val;\n    TreeNode* left;\n    TreeNode* right;\n    TreeNode() : val(0), left(nullptr), right(nullptr) {}\n    TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n    TreeNode(int x, TreeNode* left, TreeNode* right) : val(x), left(left), right(right) {}\n};\n```\n\n转化为链表过后，剩下的事情就很容易了，无非就是前中后序的遍历，我们在[上一个blog](https://tonylsx611.github.io/2022/02/25/binary_tree_1/)中已经有详细的介绍，这里更希望大家掌握迭代的算法，而非递归；因为递归在电脑的底层逻辑中，依然是维护一个栈。\n\n## 代码\n\n那么全部的代码如下，不做过多解释，有疑问可以在留言板留言。\n\n```\n#include<iostream>\n#include<vector>\nusing namespace std;\nstruct TreeNode {\n...};\nclass Solution {\npublic:\n    int arr[7] = { 1, 2, 3, 4, 5, NULL, 6 };\n    void inorder(TreeNode* root, vector<int>& res)//中序遍历\n    {\n        if (root == nullptr)\n            return;\n\n        inorder(root->left, res);\n        res.push_back(root->val);\n        inorder(root->right, res);\n    }\n    vector<int> inorderTraversal(TreeNode* root)//递归法\n    {\n        vector<int> ans;\n        inorder(root, ans);\n        return ans;\n    }\n    vector<int> inorderTraversal(TreeNode* root)//迭代法\n    {\n        vector<int> ans;\n        stack<TreeNode*> stk;\n           \n        while (1)\n        {\n            if (root != nullptr)\n            {\n                stk.push(root);\n                root = root->left;\n            }\n            else if (!stk.empty())\n            {\n                root = stk.top();\n                stk.pop();\n                ans.push_back(root->val);\n                root = root->right;\n            }\n            else\n                return ans;\n        }\n        \n    }\n    TreeNode* addtree(TreeNode* tree, int arr[], int i)//数组转链表\n    {\n        if (arr[i] == 0)\n            return NULL;\n        if (i < 7)//arr.length()\n        {\n            TreeNode* tree = new TreeNode();\n            \n            tree->val = arr[i];\n            tree->left = addtree(tree, arr, i + i + 1);\n            tree->right = addtree(tree, arr, i + i + 2);\n            return tree;\n        }\n        return NULL;\n    }\n};\n\nint main()\n{\n    Solution sol;\n    TreeNode* tree = NULL;\n    tree= sol.addtree(tree, sol.arr, 0);\n    sol.inorderTraversal(tree);\n    for(int i= 0; i< sol.inorderTraversal(tree).size(); i++)\n        cout << sol.inorderTraversal(tree)[i]<<\" \";\n    return 0;\n}\n```","source":"_posts/binary_tree_2.md","raw":"---\ntitle: 数组与链式二叉树的转换\ndate: 2022-02-24 22:20:55\nauthor: Tony\ncategories:\n\t- algorithm\ntags: \n\t- Binary-tree\n\t- algorithm\nkatex: false\n---\n\n## 前言\n\n对二叉树不是很了解的同学可以先看一下我之前的文章：\n\n[链式二叉树简介](https://tonylsx611.github.io/2022/02/25/binary_tree_1/)\n\n## 正文\n\n在了解二叉树的基本原理后，我们尝试将一个数组转化成链表形式的二叉树，之后将二叉树以中序遍历打印出来。整个的过程即==数组——链表——数组==。\n\n幸运的是，正好在leetcode中有着一道非常相似的题，所以我就直接拿来使用了，链接如下：\n\n[94. 二叉树的中序遍历 – 力扣（LeetCode） (leetcode-cn.com)](https://leetcode-cn.com/problems/binary-tree-inorder-traversal/)\n\n我们稍加修改，首先声明一个int类型的数组，然后把它放入链表二叉树中，如图所示：\n\n![img](binary_tree_2/image.png)\n\n```\nint arr[7] = { 1, 2, 3, 4, 5, NULL, 6 };\n```\n\n之后的任务就是将数组转化为链表形式，链表的定义如下：\n\n```\nstruct TreeNode \n{\n    int val;\n    TreeNode* left;\n    TreeNode* right;\n    TreeNode() : val(0), left(nullptr), right(nullptr) {}\n    TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n    TreeNode(int x, TreeNode* left, TreeNode* right) : val(x), left(left), right(right) {}\n};\n```\n\n转化为链表过后，剩下的事情就很容易了，无非就是前中后序的遍历，我们在[上一个blog](https://tonylsx611.github.io/2022/02/25/binary_tree_1/)中已经有详细的介绍，这里更希望大家掌握迭代的算法，而非递归；因为递归在电脑的底层逻辑中，依然是维护一个栈。\n\n## 代码\n\n那么全部的代码如下，不做过多解释，有疑问可以在留言板留言。\n\n```\n#include<iostream>\n#include<vector>\nusing namespace std;\nstruct TreeNode {\n...};\nclass Solution {\npublic:\n    int arr[7] = { 1, 2, 3, 4, 5, NULL, 6 };\n    void inorder(TreeNode* root, vector<int>& res)//中序遍历\n    {\n        if (root == nullptr)\n            return;\n\n        inorder(root->left, res);\n        res.push_back(root->val);\n        inorder(root->right, res);\n    }\n    vector<int> inorderTraversal(TreeNode* root)//递归法\n    {\n        vector<int> ans;\n        inorder(root, ans);\n        return ans;\n    }\n    vector<int> inorderTraversal(TreeNode* root)//迭代法\n    {\n        vector<int> ans;\n        stack<TreeNode*> stk;\n           \n        while (1)\n        {\n            if (root != nullptr)\n            {\n                stk.push(root);\n                root = root->left;\n            }\n            else if (!stk.empty())\n            {\n                root = stk.top();\n                stk.pop();\n                ans.push_back(root->val);\n                root = root->right;\n            }\n            else\n                return ans;\n        }\n        \n    }\n    TreeNode* addtree(TreeNode* tree, int arr[], int i)//数组转链表\n    {\n        if (arr[i] == 0)\n            return NULL;\n        if (i < 7)//arr.length()\n        {\n            TreeNode* tree = new TreeNode();\n            \n            tree->val = arr[i];\n            tree->left = addtree(tree, arr, i + i + 1);\n            tree->right = addtree(tree, arr, i + i + 2);\n            return tree;\n        }\n        return NULL;\n    }\n};\n\nint main()\n{\n    Solution sol;\n    TreeNode* tree = NULL;\n    tree= sol.addtree(tree, sol.arr, 0);\n    sol.inorderTraversal(tree);\n    for(int i= 0; i< sol.inorderTraversal(tree).size(); i++)\n        cout << sol.inorderTraversal(tree)[i]<<\" \";\n    return 0;\n}\n```","slug":"binary_tree_2","published":1,"updated":"2022-02-25T15:33:45.153Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0dwi2am00095wcy5fmlce6d","content":"<h2 id=\"前言\"><a class=\"markdownIt-Anchor\" href=\"#前言\"></a> 前言</h2>\n<p>对二叉树不是很了解的同学可以先看一下我之前的文章：</p>\n<p><a href=\"https://tonylsx611.github.io/2022/02/25/binary_tree_1/\">链式二叉树简介</a></p>\n<h2 id=\"正文\"><a class=\"markdownIt-Anchor\" href=\"#正文\"></a> 正文</h2>\n<p>在了解二叉树的基本原理后，我们尝试将一个数组转化成链表形式的二叉树，之后将二叉树以中序遍历打印出来。整个的过程即<mark>数组——链表——数组</mark>。</p>\n<p>幸运的是，正好在leetcode中有着一道非常相似的题，所以我就直接拿来使用了，链接如下：</p>\n<p><a href=\"https://leetcode-cn.com/problems/binary-tree-inorder-traversal/\">94. 二叉树的中序遍历 – 力扣（LeetCode） (leetcode-cn.com)</a></p>\n<p>我们稍加修改，首先声明一个int类型的数组，然后把它放入链表二叉树中，如图所示：</p>\n<p><img src=\"/2022/02/24/binary_tree_2/image.png\" alt=\"img\" loading=\"lazy\"></p>\n<pre class=\"language-none\"><code class=\"language-none\">int arr[7] &#x3D; &#123; 1, 2, 3, 4, 5, NULL, 6 &#125;;</code></pre>\n<p>之后的任务就是将数组转化为链表形式，链表的定义如下：</p>\n<pre class=\"language-none\"><code class=\"language-none\">struct TreeNode \n&#123;\n    int val;\n    TreeNode* left;\n    TreeNode* right;\n    TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;\n    TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;\n    TreeNode(int x, TreeNode* left, TreeNode* right) : val(x), left(left), right(right) &#123;&#125;\n&#125;;</code></pre>\n<p>转化为链表过后，剩下的事情就很容易了，无非就是前中后序的遍历，我们在<a href=\"https://tonylsx611.github.io/2022/02/25/binary_tree_1/\">上一个blog</a>中已经有详细的介绍，这里更希望大家掌握迭代的算法，而非递归；因为递归在电脑的底层逻辑中，依然是维护一个栈。</p>\n<h2 id=\"代码\"><a class=\"markdownIt-Anchor\" href=\"#代码\"></a> 代码</h2>\n<p>那么全部的代码如下，不做过多解释，有疑问可以在留言板留言。</p>\n<pre class=\"language-none\"><code class=\"language-none\">#include&lt;iostream&gt;\n#include&lt;vector&gt;\nusing namespace std;\nstruct TreeNode &#123;\n...&#125;;\nclass Solution &#123;\npublic:\n    int arr[7] &#x3D; &#123; 1, 2, 3, 4, 5, NULL, 6 &#125;;\n    void inorder(TreeNode* root, vector&lt;int&gt;&amp; res)&#x2F;&#x2F;中序遍历\n    &#123;\n        if (root &#x3D;&#x3D; nullptr)\n            return;\n\n        inorder(root-&gt;left, res);\n        res.push_back(root-&gt;val);\n        inorder(root-&gt;right, res);\n    &#125;\n    vector&lt;int&gt; inorderTraversal(TreeNode* root)&#x2F;&#x2F;递归法\n    &#123;\n        vector&lt;int&gt; ans;\n        inorder(root, ans);\n        return ans;\n    &#125;\n    vector&lt;int&gt; inorderTraversal(TreeNode* root)&#x2F;&#x2F;迭代法\n    &#123;\n        vector&lt;int&gt; ans;\n        stack&lt;TreeNode*&gt; stk;\n           \n        while (1)\n        &#123;\n            if (root !&#x3D; nullptr)\n            &#123;\n                stk.push(root);\n                root &#x3D; root-&gt;left;\n            &#125;\n            else if (!stk.empty())\n            &#123;\n                root &#x3D; stk.top();\n                stk.pop();\n                ans.push_back(root-&gt;val);\n                root &#x3D; root-&gt;right;\n            &#125;\n            else\n                return ans;\n        &#125;\n        \n    &#125;\n    TreeNode* addtree(TreeNode* tree, int arr[], int i)&#x2F;&#x2F;数组转链表\n    &#123;\n        if (arr[i] &#x3D;&#x3D; 0)\n            return NULL;\n        if (i &lt; 7)&#x2F;&#x2F;arr.length()\n        &#123;\n            TreeNode* tree &#x3D; new TreeNode();\n            \n            tree-&gt;val &#x3D; arr[i];\n            tree-&gt;left &#x3D; addtree(tree, arr, i + i + 1);\n            tree-&gt;right &#x3D; addtree(tree, arr, i + i + 2);\n            return tree;\n        &#125;\n        return NULL;\n    &#125;\n&#125;;\n\nint main()\n&#123;\n    Solution sol;\n    TreeNode* tree &#x3D; NULL;\n    tree&#x3D; sol.addtree(tree, sol.arr, 0);\n    sol.inorderTraversal(tree);\n    for(int i&#x3D; 0; i&lt; sol.inorderTraversal(tree).size(); i++)\n        cout &lt;&lt; sol.inorderTraversal(tree)[i]&lt;&lt;&quot; &quot;;\n    return 0;\n&#125;</code></pre>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a class=\"markdownIt-Anchor\" href=\"#前言\"></a> 前言</h2>\n<p>对二叉树不是很了解的同学可以先看一下我之前的文章：</p>\n<p><a href=\"https://tonylsx611.github.io/2022/02/25/binary_tree_1/\">链式二叉树简介</a></p>\n<h2 id=\"正文\"><a class=\"markdownIt-Anchor\" href=\"#正文\"></a> 正文</h2>\n<p>在了解二叉树的基本原理后，我们尝试将一个数组转化成链表形式的二叉树，之后将二叉树以中序遍历打印出来。整个的过程即<mark>数组——链表——数组</mark>。</p>\n<p>幸运的是，正好在leetcode中有着一道非常相似的题，所以我就直接拿来使用了，链接如下：</p>\n<p><a href=\"https://leetcode-cn.com/problems/binary-tree-inorder-traversal/\">94. 二叉树的中序遍历 – 力扣（LeetCode） (leetcode-cn.com)</a></p>\n<p>我们稍加修改，首先声明一个int类型的数组，然后把它放入链表二叉树中，如图所示：</p>\n<p><img src=\"/2022/02/24/binary_tree_2/image.png\" alt=\"img\"></p>\n<pre class=\"language-none\"><code class=\"language-none\">int arr[7] &#x3D; &#123; 1, 2, 3, 4, 5, NULL, 6 &#125;;</code></pre>\n<p>之后的任务就是将数组转化为链表形式，链表的定义如下：</p>\n<pre class=\"language-none\"><code class=\"language-none\">struct TreeNode \n&#123;\n    int val;\n    TreeNode* left;\n    TreeNode* right;\n    TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;\n    TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;\n    TreeNode(int x, TreeNode* left, TreeNode* right) : val(x), left(left), right(right) &#123;&#125;\n&#125;;</code></pre>\n<p>转化为链表过后，剩下的事情就很容易了，无非就是前中后序的遍历，我们在<a href=\"https://tonylsx611.github.io/2022/02/25/binary_tree_1/\">上一个blog</a>中已经有详细的介绍，这里更希望大家掌握迭代的算法，而非递归；因为递归在电脑的底层逻辑中，依然是维护一个栈。</p>\n<h2 id=\"代码\"><a class=\"markdownIt-Anchor\" href=\"#代码\"></a> 代码</h2>\n<p>那么全部的代码如下，不做过多解释，有疑问可以在留言板留言。</p>\n<pre class=\"language-none\"><code class=\"language-none\">#include&lt;iostream&gt;\n#include&lt;vector&gt;\nusing namespace std;\nstruct TreeNode &#123;\n...&#125;;\nclass Solution &#123;\npublic:\n    int arr[7] &#x3D; &#123; 1, 2, 3, 4, 5, NULL, 6 &#125;;\n    void inorder(TreeNode* root, vector&lt;int&gt;&amp; res)&#x2F;&#x2F;中序遍历\n    &#123;\n        if (root &#x3D;&#x3D; nullptr)\n            return;\n\n        inorder(root-&gt;left, res);\n        res.push_back(root-&gt;val);\n        inorder(root-&gt;right, res);\n    &#125;\n    vector&lt;int&gt; inorderTraversal(TreeNode* root)&#x2F;&#x2F;递归法\n    &#123;\n        vector&lt;int&gt; ans;\n        inorder(root, ans);\n        return ans;\n    &#125;\n    vector&lt;int&gt; inorderTraversal(TreeNode* root)&#x2F;&#x2F;迭代法\n    &#123;\n        vector&lt;int&gt; ans;\n        stack&lt;TreeNode*&gt; stk;\n           \n        while (1)\n        &#123;\n            if (root !&#x3D; nullptr)\n            &#123;\n                stk.push(root);\n                root &#x3D; root-&gt;left;\n            &#125;\n            else if (!stk.empty())\n            &#123;\n                root &#x3D; stk.top();\n                stk.pop();\n                ans.push_back(root-&gt;val);\n                root &#x3D; root-&gt;right;\n            &#125;\n            else\n                return ans;\n        &#125;\n        \n    &#125;\n    TreeNode* addtree(TreeNode* tree, int arr[], int i)&#x2F;&#x2F;数组转链表\n    &#123;\n        if (arr[i] &#x3D;&#x3D; 0)\n            return NULL;\n        if (i &lt; 7)&#x2F;&#x2F;arr.length()\n        &#123;\n            TreeNode* tree &#x3D; new TreeNode();\n            \n            tree-&gt;val &#x3D; arr[i];\n            tree-&gt;left &#x3D; addtree(tree, arr, i + i + 1);\n            tree-&gt;right &#x3D; addtree(tree, arr, i + i + 2);\n            return tree;\n        &#125;\n        return NULL;\n    &#125;\n&#125;;\n\nint main()\n&#123;\n    Solution sol;\n    TreeNode* tree &#x3D; NULL;\n    tree&#x3D; sol.addtree(tree, sol.arr, 0);\n    sol.inorderTraversal(tree);\n    for(int i&#x3D; 0; i&lt; sol.inorderTraversal(tree).size(); i++)\n        cout &lt;&lt; sol.inorderTraversal(tree)[i]&lt;&lt;&quot; &quot;;\n    return 0;\n&#125;</code></pre>"}],"PostAsset":[{"_id":"source/_posts/Hexo_article/2d6f869662e83398f06070e2a14f838.jpg","slug":"2d6f869662e83398f06070e2a14f838.jpg","post":"cl0dwi2ad00015wcybjm60j1t","modified":0,"renderable":0},{"_id":"source/_posts/Hexo_article/884019afce82603bd8bc8fd4e531839.jpg","slug":"884019afce82603bd8bc8fd4e531839.jpg","post":"cl0dwi2ad00015wcybjm60j1t","modified":0,"renderable":0},{"_id":"source/_posts/Hexo_article/IMG_1479.jpg","slug":"IMG_1479.jpg","post":"cl0dwi2ad00015wcybjm60j1t","modified":0,"renderable":0},{"_id":"source/_posts/Hexo_article/traffic-light.gif","slug":"traffic-light.gif","post":"cl0dwi2ad00015wcybjm60j1t","modified":0,"renderable":0},{"_id":"source/_posts/R2S_build/image-1.png","slug":"image-1.png","post":"cl0dwi2ak00075wcy7cju3axd","modified":0,"renderable":0},{"_id":"source/_posts/R2S_build/image-10.png","slug":"image-10.png","post":"cl0dwi2ak00075wcy7cju3axd","modified":0,"renderable":0},{"_id":"source/_posts/R2S_build/image-2-1024x507.png","slug":"image-2-1024x507.png","post":"cl0dwi2ak00075wcy7cju3axd","modified":0,"renderable":0},{"_id":"source/_posts/R2S_build/image-20220305212846426.png","slug":"image-20220305212846426.png","post":"cl0dwi2ak00075wcy7cju3axd","modified":0,"renderable":0},{"_id":"source/_posts/R2S_build/image-3-1024x485.png","slug":"image-3-1024x485.png","post":"cl0dwi2ak00075wcy7cju3axd","modified":0,"renderable":0},{"_id":"source/_posts/R2S_build/image-5.png","slug":"image-5.png","post":"cl0dwi2ak00075wcy7cju3axd","modified":0,"renderable":0},{"_id":"source/_posts/R2S_build/image-7.png","slug":"image-7.png","post":"cl0dwi2ak00075wcy7cju3axd","modified":0,"renderable":0},{"_id":"source/_posts/R2S_build/image-8.png","slug":"image-8.png","post":"cl0dwi2ak00075wcy7cju3axd","modified":0,"renderable":0},{"_id":"source/_posts/R2S_build/image-9-1024x194.png","slug":"image-9-1024x194.png","post":"cl0dwi2ak00075wcy7cju3axd","modified":0,"renderable":0},{"_id":"source/_posts/binary_tree_1/image.png","slug":"image.png","post":"cl0dwi2al00085wcybywvhjc3","modified":0,"renderable":0},{"_id":"source/_posts/binary_tree_1/v2-0ccba83c7b3dbf7b89964c04021025d9_720w.jpg","slug":"v2-0ccba83c7b3dbf7b89964c04021025d9_720w.jpg","post":"cl0dwi2al00085wcybywvhjc3","modified":0,"renderable":0},{"_id":"source/_posts/binary_tree_2/image.png","slug":"image.png","post":"cl0dwi2am00095wcy5fmlce6d","modified":0,"renderable":0}],"PostCategory":[{"post_id":"cl0dwi2ad00015wcybjm60j1t","category_id":"cl0dwi2ai00045wcydaxg2evh","_id":"cl0dwi2ap000e5wcy2216aipp"},{"post_id":"cl0dwi2ag00035wcy463f0ybt","category_id":"cl0dwi2ai00045wcydaxg2evh","_id":"cl0dwi2aq000h5wcya2p77nwz"},{"post_id":"cl0dwi2ak00075wcy7cju3axd","category_id":"cl0dwi2ap000d5wcydz7mbj58","_id":"cl0dwi2aq000k5wcy4y408ont"},{"post_id":"cl0dwi2al00085wcybywvhjc3","category_id":"cl0dwi2aq000i5wcy50p1gmvg","_id":"cl0dwi2ar000n5wcy2zzxhsur"},{"post_id":"cl0dwi2am00095wcy5fmlce6d","category_id":"cl0dwi2aq000i5wcy50p1gmvg","_id":"cl0dwi2ar000p5wcy79s821ke"}],"PostTag":[{"post_id":"cl0dwi2ad00015wcybjm60j1t","tag_id":"cl0dwi2aj00055wcy5lpx6nfg","_id":"cl0dwi2ao000c5wcy846y6r49"},{"post_id":"cl0dwi2ag00035wcy463f0ybt","tag_id":"cl0dwi2aj00055wcy5lpx6nfg","_id":"cl0dwi2ap000g5wcygak4fucx"},{"post_id":"cl0dwi2ak00075wcy7cju3axd","tag_id":"cl0dwi2ap000f5wcy99hf5vgb","_id":"cl0dwi2ar000r5wcy922h5yep"},{"post_id":"cl0dwi2ak00075wcy7cju3axd","tag_id":"cl0dwi2aq000j5wcy5gam6zpy","_id":"cl0dwi2ar000s5wcy9wn7gedl"},{"post_id":"cl0dwi2ak00075wcy7cju3axd","tag_id":"cl0dwi2aq000m5wcy9rcm43nj","_id":"cl0dwi2as000u5wcy5cl026lr"},{"post_id":"cl0dwi2ak00075wcy7cju3axd","tag_id":"cl0dwi2ar000o5wcy56zd0q9m","_id":"cl0dwi2as000v5wcyd33n4jq2"},{"post_id":"cl0dwi2al00085wcybywvhjc3","tag_id":"cl0dwi2ar000q5wcyan5tdw4h","_id":"cl0dwi2as000x5wcy5ehucjvn"},{"post_id":"cl0dwi2al00085wcybywvhjc3","tag_id":"cl0dwi2ar000t5wcy8fnidx6a","_id":"cl0dwi2as000y5wcy0n475qtt"},{"post_id":"cl0dwi2am00095wcy5fmlce6d","tag_id":"cl0dwi2ar000q5wcyan5tdw4h","_id":"cl0dwi2as00105wcyaz9redcy"},{"post_id":"cl0dwi2am00095wcy5fmlce6d","tag_id":"cl0dwi2ar000t5wcy8fnidx6a","_id":"cl0dwi2as00115wcycqcc1w6u"}],"Tag":[{"name":"Hexo","_id":"cl0dwi2aj00055wcy5lpx6nfg"},{"name":"R2S","_id":"cl0dwi2ap000f5wcy99hf5vgb"},{"name":"Computer Network","_id":"cl0dwi2aq000j5wcy5gam6zpy"},{"name":"软路由","_id":"cl0dwi2aq000m5wcy9rcm43nj"},{"name":"科学上网","_id":"cl0dwi2ar000o5wcy56zd0q9m"},{"name":"Binary-tree","_id":"cl0dwi2ar000q5wcyan5tdw4h"},{"name":"algorithm","_id":"cl0dwi2ar000t5wcy8fnidx6a"}]}}