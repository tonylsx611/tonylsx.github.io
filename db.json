{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-yun/source/yun.png","path":"yun.png","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-yun/source/yun.svg","path":"yun.svg","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-yun/source/css/README.md","path":"css/README.md","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-yun/source/css/hexo-theme-yun.styl","path":"css/hexo-theme-yun.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-yun/source/js/chunk-TTX6TVTO.js","path":"js/chunk-TTX6TVTO.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-yun/source/js/chunk-YZ7E3ATC.js","path":"js/chunk-YZ7E3ATC.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-yun/source/js/gallery-decrypt.js","path":"js/gallery-decrypt.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-yun/source/js/hexo-theme-yun.js","path":"js/hexo-theme-yun.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-yun/source/js/pjax.js","path":"js/pjax.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-yun/source/js/say.js","path":"js/say.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-yun/source/js/sidebar.js","path":"js/sidebar.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-yun/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-yun/source/js/analytics/leancloud-visitors.js","path":"js/analytics/leancloud-visitors.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-yun/source/js/comments/disqus.js","path":"js/comments/disqus.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-yun/source/js/comments/waline.js","path":"js/comments/waline.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-yun/source/js/search/algolia-search.js","path":"js/search/algolia-search.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-yun/source/js/search/local-search.js","path":"js/search/local-search.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-yun/source/js/ui/banner.js","path":"js/ui/banner.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-yun/source/js/ui/fireworks.js","path":"js/ui/fireworks.js","modified":1,"renderable":1},{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"source/image/alipay.png","path":"image/alipay.png","modified":1,"renderable":0},{"_id":"source/image/avatar.jpg","path":"image/avatar.jpg","modified":1,"renderable":0},{"_id":"source/image/avatar_backup.jpg","path":"image/avatar_backup.jpg","modified":1,"renderable":0},{"_id":"source/image/head.jpg","path":"image/head.jpg","modified":1,"renderable":0},{"_id":"source/image/icon.png","path":"image/icon.png","modified":1,"renderable":0},{"_id":"source/image/qq.jpg","path":"image/qq.jpg","modified":1,"renderable":0},{"_id":"source/image/seedling-line.svg","path":"image/seedling-line.svg","modified":1,"renderable":0},{"_id":"source/image/wechat.jpg","path":"image/wechat.jpg","modified":1,"renderable":0},{"_id":"source/image/wechat.png","path":"image/wechat.png","modified":1,"renderable":0}],"Cache":[{"_id":"source/CNAME","hash":"5e2329bc423a886fdd08288eadb59845c3da790f","modified":1646903923524},{"_id":"source/_posts/BFS.md","hash":"a804578ae045d827b571fc4b3cde3144f8102209","modified":1646905875871},{"_id":"source/_posts/DFS.md","hash":"67112e8134dd354951107424b7fef71966789dcf","modified":1646905445786},{"_id":"source/_posts/Backpack.md","hash":"31c31b3dda0e68d4540c4a1a53164e951ce4ea44","modified":1647107861957},{"_id":"source/_posts/Graph-search.md","hash":"a74cf400bb32472d24dcc8a5585024d2d11befb8","modified":1646903923524},{"_id":"source/_posts/Hexo-synchronization.md","hash":"2f303454cee3f3580da652ce2f2783af1a7368a6","modified":1646905941096},{"_id":"source/_posts/Hexo_article.md","hash":"ce2f26d19d25fd442be4be88450820cf295ad693","modified":1646903923529},{"_id":"source/_posts/Hexo_creation.md","hash":"ddde00e924485120be2947e2bd478174fd3b955c","modified":1646903923602},{"_id":"source/_posts/PERT.md","hash":"45568d324bc7fbe50f04fdb7d244bf780eca0cbc","modified":1647107801615},{"_id":"source/_posts/R2S_build.md","hash":"2b296533962e9983a25a2c1feeccb093f98c3365","modified":1646903923604},{"_id":"source/_posts/binary_tree_1.md","hash":"71bba3511bafab98b45dae17978a1a75071851ce","modified":1646903923609},{"_id":"source/_posts/binary_tree_2.md","hash":"f61bc99a9384046e8ed6477a23a37f50a60008a8","modified":1646903923611},{"_id":"source/about/index.md","hash":"3c578647ef994683dada780f8266efaea04b9dd7","modified":1646903923613},{"_id":"source/categories/index.md","hash":"c661acf798d58f9cc3a8fed26a451b35a5ae907c","modified":1646903923613},{"_id":"source/image/avatar.jpg","hash":"371df290b2fe0600ba933d48751ac8f2cadc0a18","modified":1646903923614},{"_id":"source/image/avatar_backup.jpg","hash":"981b12aaf6e63ae11de7eb10483b2676ea88f990","modified":1646903923615},{"_id":"source/image/icon.png","hash":"980118ed1d6035f8a6173abbf6099c4227c055c1","modified":1646903923632},{"_id":"source/image/seedling-line.svg","hash":"40de46a2c2adab799174cf37cb722244d57430d9","modified":1646903923633},{"_id":"source/image/wechat.jpg","hash":"c7050b547d10944c3f802771962c11ab390255dc","modified":1646903923633},{"_id":"source/tags/index.md","hash":"e630d4f32d533f0e2969bfe2fa5b8b6f2ea0b2eb","modified":1646903923635},{"_id":"source/_posts/Graph-search/image-1.png","hash":"e31a7b655c8b104176311248253c989c0c3590ee","modified":1646903923525},{"_id":"source/_posts/Graph-search/image-2.png","hash":"1ea7ffb5b9854f92cd4092aa456e1d77f28aa9fc","modified":1646903923525},{"_id":"source/_posts/Graph-search/image-3.png","hash":"3b8a85b9b1f6398874d48d71f702c4e53bf83d37","modified":1646903923526},{"_id":"source/_posts/Graph-search/v2-4a4d37df348f283649e2aecc74d959b5_720w.jpg","hash":"60d73acdd30125aa62e7afc3899271677c9c4cd7","modified":1646903923526},{"_id":"source/_posts/Graph-search/v2-9e2643ca5d96f86a391c36de4d3bd48d_720w.jpg","hash":"24061e3e3eba17d3bf0429516a68cf344e680fd4","modified":1646903923527},{"_id":"source/_posts/Hexo_article/image-20220308162506034.png","hash":"cbac8bf927ab02febc2e96125c88df7426dee64c","modified":1646903923597},{"_id":"source/_posts/PERT/image-20210926121305734.png","hash":"5bb37f387e4b008de13619b2bc84bb610cf73ba3","modified":1647107520164},{"_id":"source/_posts/Hexo_creation/image-20220308165502809.png","hash":"667770d3e29fb219208121ddc70d2ae062563ad1","modified":1646903923603},{"_id":"source/_posts/PERT/image-20210926121452437.png","hash":"409b273ed1a5e8c0aa440379af65b4a8b8d3f5fa","modified":1647107519931},{"_id":"source/_posts/PERT/image-20210926121557824.png","hash":"a082383de3b879a035be5bc7866a932737bb2b66","modified":1647107519932},{"_id":"source/_posts/PERT/image-20210926125842698.png","hash":"f648448ff8f6bb0ceb55706597043c277d7bc9a2","modified":1647107519827},{"_id":"source/_posts/R2S_build/image-1.png","hash":"4a475083bd251f14329a16715da142571bd86747","modified":1646903923604},{"_id":"source/_posts/R2S_build/image-10.png","hash":"62f3de2b27546aff4cf6a616df3b3239e5d5d589","modified":1646903923605},{"_id":"source/_posts/R2S_build/image-5.png","hash":"56c526c61081288b63adab3db805722adedec86f","modified":1646903923608},{"_id":"source/_posts/R2S_build/image-7.png","hash":"b6b02dcf36560a6055756269e885694045ad33bc","modified":1646903923608},{"_id":"source/_posts/R2S_build/image-8.png","hash":"dedaee8c824811ffa4f3d27516e012a86636726e","modified":1646903923609},{"_id":"source/_posts/binary_tree_1/v2-0ccba83c7b3dbf7b89964c04021025d9_720w.jpg","hash":"f56981756349a08c44d83576af3e63798c87e21f","modified":1646903923611},{"_id":"source/_posts/binary_tree_2/image.png","hash":"779e786c51aefa1b4c15d9945a62b452137e2024","modified":1646903923612},{"_id":"source/image/alipay.png","hash":"6be1d1ffc3264828ea0a27a4ca30520dfa448bd6","modified":1646903923614},{"_id":"source/image/qq.jpg","hash":"679ce9b7fb0f782ddfb1177689cb0ae09fbded23","modified":1646903923633},{"_id":"source/image/wechat.png","hash":"4660b50917b947a91c35f55b0281c633b9b0addd","modified":1646903923634},{"_id":"source/_posts/Hexo-synchronization/image-20220310172557250.png","hash":"6e29f7df5d770ebc97cc9c4061ede24d1505d82d","modified":1646904357282},{"_id":"source/_posts/Hexo_article/IMG_1479.jpg","hash":"f869ae1d27243b47840d63ffbe1bd136c7c7a503","modified":1646903923597},{"_id":"source/_posts/R2S_build/image-20220305212846426.png","hash":"ea4b0543826c23f95321520feaca18a54e27c00f","modified":1646903923607},{"_id":"source/_posts/R2S_build/image-9-1024x194.png","hash":"00c8bfd48272b1b8487d34e711ac2800569c3230","modified":1646903923609},{"_id":"source/_posts/PERT/image-20210926121433312.png","hash":"aeb8258e4e8ae3d05ca75e03dfe93ec239da5baa","modified":1647107520318},{"_id":"source/_posts/Hexo-synchronization/Screenshot 2022-03-08 161552.png","hash":"5146a45213aa0aaa7ac928f8083fcf56472628a8","modified":1646903923528},{"_id":"source/_posts/Hexo_article/image-20220308162715529.png","hash":"8e3c4674e8deea387717279e8a00923655c7ddf6","modified":1646903923598},{"_id":"source/_posts/Hexo_creation/image-20220308165404552.png","hash":"a268bc4c307433bde753548c2e00b24bc645571e","modified":1646903923603},{"_id":"source/_posts/R2S_build/image-2-1024x507.png","hash":"3f2c9846cdfeed98cf3b5bf94cb0a5d41de40705","modified":1646903923606},{"_id":"source/_posts/R2S_build/image-3-1024x485.png","hash":"72f68e697d9656bc5dfdf05584660bee9d89e29a","modified":1646903923607},{"_id":"source/_posts/binary_tree_1/image.png","hash":"486e325512c567f522e925b9fe9d58c24789176b","modified":1646903923611},{"_id":"node_modules/hexo-theme-yun/src/dist/global.d.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1646903919623},{"_id":"node_modules/hexo-theme-yun/LICENSE","hash":"fa221ceba871b104543fa698b80750fc19552fd2","modified":1646903919574},{"_id":"node_modules/hexo-theme-yun/README.md","hash":"9bdce4f5ad2d809a2b8e378b5473875947805f8c","modified":1646903919574},{"_id":"node_modules/hexo-theme-yun/_config.yml","hash":"0f8a86ee6db2e80bfbbcb9b47561840a48e644d1","modified":1646903919575},{"_id":"node_modules/hexo-theme-yun/_vendors.yml","hash":"d6ffaf12dd589c5a247c185187067594d584d778","modified":1646903919575},{"_id":"node_modules/hexo-theme-yun/package.json","hash":"60eb7764668aef7183293ced33a8f7051d168356","modified":1646903919597},{"_id":"node_modules/hexo-theme-yun/languages/default.yml","hash":"3866a13fe896b4c5d46541c5cab1f7e61453df19","modified":1646903919575},{"_id":"node_modules/hexo-theme-yun/languages/en.yml","hash":"73d56d09af0cade0e47ee995f4110d06f831eabe","modified":1646903919576},{"_id":"node_modules/hexo-theme-yun/languages/zh-CN.yml","hash":"a38b30c9c2fc6c4231ec60ac02538dae2d4e8527","modified":1646903919576},{"_id":"node_modules/hexo-theme-yun/languages/ja.yml","hash":"18ab694a0c64f4c0e53b570495625901e883df24","modified":1646903919576},{"_id":"node_modules/hexo-theme-yun/layout/404.pug","hash":"34b3a5259b3f5b5a6a18059bc8a535e79ea4d03e","modified":1646903919577},{"_id":"node_modules/hexo-theme-yun/layout/archive.pug","hash":"fcbd3bee3e2dc053170888d77de007ec330443be","modified":1646903919595},{"_id":"node_modules/hexo-theme-yun/layout/category.pug","hash":"fc234721ac03d519dbdf39675af5a86e0b6db2e8","modified":1646903919595},{"_id":"node_modules/hexo-theme-yun/layout/gallery.pug","hash":"f06f0f8d9eb9e2c0c89f7017e188d4f6cd2ec9ee","modified":1646903919595},{"_id":"node_modules/hexo-theme-yun/layout/girls.pug","hash":"8fb552ed751c280cd78e87e68e7b8758d0f1360f","modified":1646903919595},{"_id":"node_modules/hexo-theme-yun/layout/index.pug","hash":"72ce130efc06d107d5244e54d62bd533abe88bff","modified":1646903919596},{"_id":"node_modules/hexo-theme-yun/layout/links.pug","hash":"bb0a3c0b69eb535b7e9b1fbd7831e182f4dbb441","modified":1646903919596},{"_id":"node_modules/hexo-theme-yun/layout/page.pug","hash":"3574c9cd0e1039f968e539ef50a586587fdb9234","modified":1646903919596},{"_id":"node_modules/hexo-theme-yun/layout/post.pug","hash":"ee5ec618062e964abbfee35cc45f647a5c9dc99d","modified":1646903919596},{"_id":"node_modules/hexo-theme-yun/layout/slide.pug","hash":"08a761e1e76e205c7a8cff255844f8fa73d98c8e","modified":1646903919597},{"_id":"node_modules/hexo-theme-yun/layout/tag.pug","hash":"f1c2ae57b62f6a0c6fcc91a1270b5bf328ca2421","modified":1646903919597},{"_id":"node_modules/hexo-theme-yun/source/yun.png","hash":"b8ae426fa5dd7579d23d189c222641d812c51c0a","modified":1646903919621},{"_id":"node_modules/hexo-theme-yun/source/yun.svg","hash":"78218ba93f0150e3613c7d0b60575ebe6131255f","modified":1646903919621},{"_id":"node_modules/hexo-theme-yun/src/.eslintrc","hash":"0be644fc1b5e74061960eeea473fc5c1a202850c","modified":1646903919621},{"_id":"node_modules/hexo-theme-yun/src/.pnpm-debug.log","hash":"ef32320da5b1ef767a75ddedaffb5ce25bade8d4","modified":1646903919621},{"_id":"node_modules/hexo-theme-yun/src/global.d.ts","hash":"0477bc506e6d702c58f566520da06b93ce0dd237","modified":1646903919624},{"_id":"node_modules/hexo-theme-yun/src/README.md","hash":"6d24573c91c965704c15f1a66f696ee566366654","modified":1646903919622},{"_id":"node_modules/hexo-theme-yun/src/package.json","hash":"899775e130ddaedca5885ff27fd852536692f41c","modified":1646903919624},{"_id":"node_modules/hexo-theme-yun/src/tsconfig.json","hash":"be54132469f2600bbc0dbf1a862a1bd751a8f145","modified":1646903919629},{"_id":"node_modules/hexo-theme-yun/src/tsup.config.ts","hash":"13022bfd0c0789181c2b3a859ddbd957966a25df","modified":1646903919630},{"_id":"node_modules/hexo-theme-yun/layout/_mixin/icon.pug","hash":"18ee2c33b4e6ef71c31d7955f9a20789fe6aa9e4","modified":1646903919577},{"_id":"node_modules/hexo-theme-yun/layout/_mixin/index.pug","hash":"e9e30a87904a73f16b26cb697e164d586e170c6f","modified":1646903919578},{"_id":"node_modules/hexo-theme-yun/layout/_mixin/page-header.pug","hash":"56771304fc062882fcb83b3a57036cb12a6d2dab","modified":1646903919578},{"_id":"node_modules/hexo-theme-yun/layout/_mixin/post-categories.pug","hash":"ee645a5c54c279e2346b7ba9f629efab61314026","modified":1646903919578},{"_id":"node_modules/hexo-theme-yun/layout/_mixin/post-collapse.pug","hash":"741195a5a29ecb5863b1fd0c3b203d960aae05c1","modified":1646903919578},{"_id":"node_modules/hexo-theme-yun/layout/_mixin/post-tags.pug","hash":"10eec5c3dad74e73a2ee9c05434e4757c080fcb5","modified":1646903919579},{"_id":"node_modules/hexo-theme-yun/layout/_mixin/post-meta.pug","hash":"31b90b74399074814475fdbae2a4666891d452e0","modified":1646903919579},{"_id":"node_modules/hexo-theme-yun/layout/_partial/background.pug","hash":"a5f5b72932df0b0a78d2732a3b45f5f69ab481fd","modified":1646903919579},{"_id":"node_modules/hexo-theme-yun/layout/_partial/banner.pug","hash":"ef194187e0c6e3cf56cbbde53d5bec552c02f030","modified":1646903919580},{"_id":"node_modules/hexo-theme-yun/layout/_partial/extended.pug","hash":"ea46f99febbfc7688b0f7435e3075397a5029859","modified":1646903919580},{"_id":"node_modules/hexo-theme-yun/layout/_partial/footer.pug","hash":"288d232e66c97dfbf870cb3bd4ffc2c81e387bdc","modified":1646903919580},{"_id":"node_modules/hexo-theme-yun/layout/_partial/head.pug","hash":"f696f92349df353dc5eabdd92859efa36ae675ca","modified":1646903919580},{"_id":"node_modules/hexo-theme-yun/layout/_partial/pagination.pug","hash":"b55b6a99b105447b4a6c982fa258680a2a9a34a9","modified":1646903919581},{"_id":"node_modules/hexo-theme-yun/layout/_partial/layout.pug","hash":"4504bfc22d4003dee177af6b5b1487c2a7c1361e","modified":1646903919581},{"_id":"node_modules/hexo-theme-yun/layout/_partial/recent-posts.pug","hash":"739ef2710f542ca5584286f28e4b69c343b7d2c4","modified":1646903919583},{"_id":"node_modules/hexo-theme-yun/layout/_partial/sidebar.pug","hash":"b15fa6fc27091b6bd1cf68368879d8d2f5428f55","modified":1646903919583},{"_id":"node_modules/hexo-theme-yun/layout/_third-party/aplayer.pug","hash":"93d2be35ae9731056563d3cbdbf7b13b1933c80c","modified":1646903919585},{"_id":"node_modules/hexo-theme-yun/layout/_third-party/cdn.pug","hash":"2cb0400295a5a357fb15a5c12ab3caa544c5a71e","modified":1646903919586},{"_id":"node_modules/hexo-theme-yun/layout/_third-party/iconify.pug","hash":"dadf506575d9b62804fbebceea31c9750e8cb06d","modified":1646903919590},{"_id":"node_modules/hexo-theme-yun/layout/_third-party/google-tagmanager.pug","hash":"4760e37fb37a41ef1417a427c0168c5fc5dd2ee6","modified":1646903919589},{"_id":"node_modules/hexo-theme-yun/layout/_third-party/index.pug","hash":"f6275c094349839c5af019e8a7f3f394ba0339bd","modified":1646903919590},{"_id":"node_modules/hexo-theme-yun/layout/_third-party/lightgallery.pug","hash":"63d2d1c4f55ea15fe8399bfe5da953581dd7a4b6","modified":1646903919590},{"_id":"node_modules/hexo-theme-yun/layout/_third-party/pjax.pug","hash":"bb1801ccef4dc1a37dffdac4726350fc9cd48d67","modified":1646903919592},{"_id":"node_modules/hexo-theme-yun/layout/_widget/aplayer.pug","hash":"75e6886a70ffc8a26018b70933671e5d599cc8e3","modified":1646903919592},{"_id":"node_modules/hexo-theme-yun/layout/_widget/back-to-top.pug","hash":"4c880afb3213395fb64e8a6a4fc3b653bb82b938","modified":1646903919593},{"_id":"node_modules/hexo-theme-yun/layout/_widget/cloud.pug","hash":"eb3185db30fef0303b667e50b96a7d85edda8006","modified":1646903919593},{"_id":"node_modules/hexo-theme-yun/layout/_widget/index.pug","hash":"6a286ec87146e6796440583c6d9c6549ede03bc0","modified":1646903919593},{"_id":"node_modules/hexo-theme-yun/layout/_widget/notice.pug","hash":"346ada39ba6586cb631ac5b1f129683f3ee015f4","modified":1646903919594},{"_id":"node_modules/hexo-theme-yun/layout/_widget/mourn.pug","hash":"03e8bfa95ab5b6d348ac9dd3b613b07e3919ac78","modified":1646903919594},{"_id":"node_modules/hexo-theme-yun/layout/_widget/say.pug","hash":"59da54e31aa4e6d4a93d9a0b9292fb632f5112ee","modified":1646903919594},{"_id":"node_modules/hexo-theme-yun/scripts/events/config.js","hash":"0233ac9e17f5173b3ee89d784d711d2857d34086","modified":1646903919598},{"_id":"node_modules/hexo-theme-yun/scripts/events/data.js","hash":"aa4480dcc89643c83a53002817b85ad7f4c6ac04","modified":1646903919598},{"_id":"node_modules/hexo-theme-yun/scripts/events/index.js","hash":"6d842742da0927ae659eaed41510518406295300","modified":1646903919598},{"_id":"node_modules/hexo-theme-yun/scripts/events/utils.js","hash":"cc00e1d556242ff5f1947a1bd772ec9366dcb921","modified":1646903919599},{"_id":"node_modules/hexo-theme-yun/scripts/filters/index.js","hash":"ca5ef23cec64ac3fc53aae702a8684a53d98f71c","modified":1646903919599},{"_id":"node_modules/hexo-theme-yun/scripts/helpers/encrypt.js","hash":"e3e0cd73a5bf0413a9e8fe96b1622f40c2c1db50","modified":1646903919599},{"_id":"node_modules/hexo-theme-yun/scripts/helpers/engine.js","hash":"9b41629b73dc5bbc18772b292a029531bfd2beca","modified":1646903919600},{"_id":"node_modules/hexo-theme-yun/scripts/helpers/index.js","hash":"1b0d52542255837702cdc41d3885c349c5be5873","modified":1646903919600},{"_id":"node_modules/hexo-theme-yun/scripts/helpers/yun-config.js","hash":"84922c25c87de0b5da5b7b105f825fdfba6b6cd7","modified":1646903919600},{"_id":"node_modules/hexo-theme-yun/scripts/tags/prompt.js","hash":"621d0fa41d15e5617b8a25dd7625c8e5691b35b6","modified":1646903919601},{"_id":"node_modules/hexo-theme-yun/source/css/README.md","hash":"1aa055a1404df2310e675383528d0409821073ba","modified":1646903919601},{"_id":"node_modules/hexo-theme-yun/source/css/hexo-theme-yun.styl","hash":"92a120f2bf01c53f2e3e1c7a7a12455bfc90c446","modified":1646903919616},{"_id":"node_modules/hexo-theme-yun/source/js/chunk-TTX6TVTO.js","hash":"1fa6dd4208272ac21ece94e825a41dee4d2941f8","modified":1646903919616},{"_id":"node_modules/hexo-theme-yun/source/js/chunk-YZ7E3ATC.js","hash":"b1f695dc7e85a7c168eaed5d67b736664051f695","modified":1646903919617},{"_id":"node_modules/hexo-theme-yun/source/js/gallery-decrypt.js","hash":"a6c6661ff169a4651f09d2d55769f6e525b5bc4e","modified":1646903919618},{"_id":"node_modules/hexo-theme-yun/source/js/hexo-theme-yun.js","hash":"7f6dbea52bba74ebb4aeb8e8029d9794bd600e84","modified":1646903919618},{"_id":"node_modules/hexo-theme-yun/source/js/pjax.js","hash":"b71d40474f71070e67110002308e7e8ec9ca358e","modified":1646903919618},{"_id":"node_modules/hexo-theme-yun/source/js/say.js","hash":"08e0fde224b70bc7f2af46ae2e446e22cf8c0ad4","modified":1646903919618},{"_id":"node_modules/hexo-theme-yun/source/js/sidebar.js","hash":"f397553493d8f35ce213de88e8dc6eabce2fab36","modified":1646903919619},{"_id":"node_modules/hexo-theme-yun/source/js/utils.js","hash":"019c533f9f72aef21d9412fd4045d1bce91f9d5e","modified":1646903919620},{"_id":"node_modules/hexo-theme-yun/src/.vscode/settings.json","hash":"64047d34f729a9dc1ab3d9c44169ba58d938e420","modified":1646903919622},{"_id":"node_modules/hexo-theme-yun/src/dist/chunk-HJP66R6O.js","hash":"de391ed652409b2f8542c1c437198b0fe65b1904","modified":1646903919622},{"_id":"node_modules/hexo-theme-yun/src/dist/hexo-theme-yun.js","hash":"4c6c05b42dc4bae0362b7b7db4b9f60a8ca638f0","modified":1646903919623},{"_id":"node_modules/hexo-theme-yun/src/dist/pjax.js","hash":"2aa8e3d383122e26185938f9f2ba45052c1c31cf","modified":1646903919623},{"_id":"node_modules/hexo-theme-yun/src/dist/utils.js","hash":"d7dfdd3663f658cdb2f6924383bf3775af04161d","modified":1646903919624},{"_id":"node_modules/hexo-theme-yun/src/source/gallery-decrypt.ts","hash":"994bcaf82aa4cf9e4145de92f4a8694d9c08b5cc","modified":1646903919626},{"_id":"node_modules/hexo-theme-yun/src/source/hexo-theme-yun.ts","hash":"e993edea707513d75d3f8d2c9132415965c06767","modified":1646903919627},{"_id":"node_modules/hexo-theme-yun/src/source/pjax.ts","hash":"7e010393f0a6d2e9dd8d8e71b9369106d949bf82","modified":1646903919627},{"_id":"node_modules/hexo-theme-yun/src/source/say.ts","hash":"d5e892204649df8248448d71f03599b6eb74e1fe","modified":1646903919627},{"_id":"node_modules/hexo-theme-yun/src/source/sidebar.ts","hash":"f4c12d7b64031c24f0b59c478c5e856c0c624b27","modified":1646903919628},{"_id":"node_modules/hexo-theme-yun/src/source/utils.ts","hash":"84f06ddeff826ca9e404d4aa524dadec4894a27e","modified":1646903919629},{"_id":"node_modules/hexo-theme-yun/layout/_partial/post/post-content.pug","hash":"b840c3f544a38c931736163ddecb38f4b150bfa7","modified":1646903919581},{"_id":"node_modules/hexo-theme-yun/layout/_partial/post/post-copyright.pug","hash":"a2415fb36a0dffbe57bf32cd2cfeace11cbaed6b","modified":1646903919582},{"_id":"node_modules/hexo-theme-yun/layout/_partial/post/post-edit.pug","hash":"2b7d4c210815ddc63c5b6fc5b5fd6a348e75093f","modified":1646903919582},{"_id":"node_modules/hexo-theme-yun/layout/_partial/post/post-nav.pug","hash":"ea351236ab82ff43b66272de1baade70d868131f","modified":1646903919582},{"_id":"node_modules/hexo-theme-yun/layout/_partial/post/post-schema.pug","hash":"ec85079174da20c9f608b142e7fda2c28a9b1dac","modified":1646903919583},{"_id":"node_modules/hexo-theme-yun/layout/_partial/post/reward.pug","hash":"ceccfe15e3be500274fda527a6d6234ffddf93b8","modified":1646903919583},{"_id":"node_modules/hexo-theme-yun/layout/_partial/sidebar/info.pug","hash":"db26c881a5d8c8e2d96c2e5598e9c3c40d135cdf","modified":1646903919584},{"_id":"node_modules/hexo-theme-yun/layout/_third-party/adsense/google-adsense.pug","hash":"ae63305d776ebec0d88f91197b5c78cdaa401585","modified":1646903919584},{"_id":"node_modules/hexo-theme-yun/layout/_third-party/analytics/busuanzi.pug","hash":"a2503ff7bbaf05e9205fd36177f803cf91021e05","modified":1646903919585},{"_id":"node_modules/hexo-theme-yun/layout/_third-party/analytics/google-analytics.pug","hash":"3533cdc143c0b9b4304e375e0a1d2527050d989a","modified":1646903919585},{"_id":"node_modules/hexo-theme-yun/layout/_third-party/analytics/leancloud-visitors.pug","hash":"40a781cd84069802cae2c487efafc8908f414851","modified":1646903919585},{"_id":"node_modules/hexo-theme-yun/layout/_third-party/comments/disqusjs.pug","hash":"67f82c85cf0451c4b7e1e8cf985a1e9a92df0ab6","modified":1646903919586},{"_id":"node_modules/hexo-theme-yun/layout/_third-party/comments/disqus.pug","hash":"80ea8bd1fecfc7317a9e5599c9ab9e69c4b4a6b0","modified":1646903919586},{"_id":"node_modules/hexo-theme-yun/layout/_third-party/comments/giscus.pug","hash":"392429ffdd1cdfda24ede464f8eaf033966ccdde","modified":1646903919587},{"_id":"node_modules/hexo-theme-yun/layout/_third-party/comments/github-discussions.pug","hash":"1b559cbb7bcd1d423eab9d9a2ffdb8b7ebbbcea4","modified":1646903919587},{"_id":"node_modules/hexo-theme-yun/layout/_third-party/comments/github-issues.pug","hash":"11801bd330160555dbaf3ef13955ebd61010c7d6","modified":1646903919587},{"_id":"node_modules/hexo-theme-yun/layout/_third-party/comments/index.pug","hash":"1b0a60862071043fe991f320508f949379ec29d3","modified":1646903919588},{"_id":"node_modules/hexo-theme-yun/layout/_third-party/comments/livere.pug","hash":"f565efde0ee74d69555e8b5c959c96e0f1ae61fb","modified":1646903919588},{"_id":"node_modules/hexo-theme-yun/layout/_third-party/comments/minivaline.pug","hash":"0548263c9f0460916aaeaf77928d27612c1a2897","modified":1646903919588},{"_id":"node_modules/hexo-theme-yun/layout/_third-party/comments/twikoo.pug","hash":"e892045f20dde4528c34b01a8b6aee1c17c9323f","modified":1646903919588},{"_id":"node_modules/hexo-theme-yun/layout/_third-party/comments/utterances.pug","hash":"44adb592fa4995ff586b6b4ff16232323473992a","modified":1646903919589},{"_id":"node_modules/hexo-theme-yun/layout/_third-party/comments/valine.pug","hash":"98901bdb9de7318a06a7b293a8dcc4e5b22d0992","modified":1646903919589},{"_id":"node_modules/hexo-theme-yun/layout/_third-party/comments/waline.pug","hash":"569a8a39e77bd7e12cf43c248a260dac7d511b3e","modified":1646903919589},{"_id":"node_modules/hexo-theme-yun/layout/_third-party/math/index.pug","hash":"0365a84a14325a52ee574df3f633f96c7a47d78f","modified":1646903919591},{"_id":"node_modules/hexo-theme-yun/layout/_third-party/math/katex.pug","hash":"94ca4fffb5ca7fda7c3e243ff8597a19d0583372","modified":1646903919591},{"_id":"node_modules/hexo-theme-yun/layout/_third-party/mermaid/index.pug","hash":"cc0641ac4ab4ceb8a68cf8740b39e0e3d00fd260","modified":1646903919591},{"_id":"node_modules/hexo-theme-yun/layout/_third-party/mermaid/mermaid.pug","hash":"59af49a1ac78574a858c7e4783c560ac00cf2351","modified":1646903919591},{"_id":"node_modules/hexo-theme-yun/layout/_third-party/seo/baidu-push.pug","hash":"5b08e856a6c75a9b4a5aafccf52b1b418dac0e38","modified":1646903919592},{"_id":"node_modules/hexo-theme-yun/layout/_widget/search/algolia-search.pug","hash":"247630340c95ebc0cff4f274dba8684154391037","modified":1646903919595},{"_id":"node_modules/hexo-theme-yun/layout/_widget/search/index.pug","hash":"a1dd964e05b5412c3fc446d80576e51b37926b87","modified":1646903919595},{"_id":"node_modules/hexo-theme-yun/layout/_widget/search/local-search.pug","hash":"79ac9e74e4c725c127457061938bea86cbae41db","modified":1646903919595},{"_id":"node_modules/hexo-theme-yun/source/css/_components/button.styl","hash":"3315fc12b1b7659a06120b042a1a2e87a839ebe1","modified":1646903919602},{"_id":"node_modules/hexo-theme-yun/source/css/_components/card.styl","hash":"6d16aae8534f32a8ce439e648e347c98c1e58af3","modified":1646903919602},{"_id":"node_modules/hexo-theme-yun/source/css/_components/scrollbar.styl","hash":"3e332ae27d3aeab1496079cd509649ceccc0f4b5","modified":1646903919604},{"_id":"node_modules/hexo-theme-yun/source/css/_components/ui.styl","hash":"8ef28ee3363f3676c9327a6d163032a003520f40","modified":1646903919606},{"_id":"node_modules/hexo-theme-yun/source/css/_extend/albums.styl","hash":"b0f703fc6e279844b75797edf714cce2135704ed","modified":1646903919607},{"_id":"node_modules/hexo-theme-yun/source/css/_extend/girls.styl","hash":"393166ea98ef4bee611dcf00f5e8e22df60b2af0","modified":1646903919607},{"_id":"node_modules/hexo-theme-yun/source/css/_global/dark.styl","hash":"4cc28dcc37af6cd85439728a8f65e4a87dfa1f8b","modified":1646903919608},{"_id":"node_modules/hexo-theme-yun/source/css/_global/index.styl","hash":"6ee9d2bd59706e79e8932bcfc09d86c124467452","modified":1646903919608},{"_id":"node_modules/hexo-theme-yun/source/css/_global/reset.styl","hash":"d1640eb4f76a3cf792c5149e93c42c85da5a29b2","modified":1646903919609},{"_id":"node_modules/hexo-theme-yun/source/css/_layout/banner.styl","hash":"efd219425cb30d18368c5aca701c656fe3a0d458","modified":1646903919609},{"_id":"node_modules/hexo-theme-yun/source/css/_layout/footer.styl","hash":"ed3afcddad7358ebd89f01846157e26a586e7adf","modified":1646903919610},{"_id":"node_modules/hexo-theme-yun/source/css/_layout/main.styl","hash":"03669973c1cbb5c93fdba4c011666b921f0587e3","modified":1646903919610},{"_id":"node_modules/hexo-theme-yun/source/css/_layout/links.styl","hash":"9c060919f57a9928331aec8c7bfaae56a6fa8401","modified":1646903919610},{"_id":"node_modules/hexo-theme-yun/source/css/_layout/page.styl","hash":"6ec814a0fccf73a22ba6b94f6d4bba889cbaf0b5","modified":1646903919611},{"_id":"node_modules/hexo-theme-yun/source/css/_layout/pagination.styl","hash":"a4da4433f5c11b4de36782b7dac059bf67dde938","modified":1646903919611},{"_id":"node_modules/hexo-theme-yun/source/css/_layout/post.styl","hash":"2d495981c7456095ae62f97e9c032e1f3fb03cda","modified":1646903919611},{"_id":"node_modules/hexo-theme-yun/source/css/_helper/index.styl","hash":"deb685278c7d3b1bd2180337cb8b868f8ff97ac5","modified":1646903919609},{"_id":"node_modules/hexo-theme-yun/source/css/_mixins/base.styl","hash":"2531c22a33aa929dd6bf6c1b9975efc0a70e4a8d","modified":1646903919611},{"_id":"node_modules/hexo-theme-yun/source/css/_widget/back-to-top.styl","hash":"d86e0c0c6af9fcb293c1fcef20f4ed68272ccc71","modified":1646903919613},{"_id":"node_modules/hexo-theme-yun/source/css/_widget/comment.styl","hash":"02e90ba274312eec5f0eeb3e651750c178d03988","modified":1646903919614},{"_id":"node_modules/hexo-theme-yun/source/css/_widget/index.styl","hash":"640fea56a013989f5878334d09f3f9b716865c8c","modified":1646903919614},{"_id":"node_modules/hexo-theme-yun/source/css/_widget/notice.styl","hash":"8b1ca54535311f38b91433e5beadbeed02ecd28b","modified":1646903919614},{"_id":"node_modules/hexo-theme-yun/source/css/_widget/say.styl","hash":"01dac9059f96fb085edf230e63f3f5e351358fde","modified":1646903919614},{"_id":"node_modules/hexo-theme-yun/source/css/_variables/_base.styl","hash":"0288e3196318b116f991b043486fbc0b4b0bc579","modified":1646903919612},{"_id":"node_modules/hexo-theme-yun/source/css/_variables/_code.styl","hash":"63d012b501ec13cfbf374defd663fee3abf0b565","modified":1646903919612},{"_id":"node_modules/hexo-theme-yun/source/css/_variables/_colors.styl","hash":"5842436c6b74763866a1bc38d1c7cfed715e9e22","modified":1646903919613},{"_id":"node_modules/hexo-theme-yun/source/css/_variables/var.styl","hash":"c22b204db73404f7904f74c2b416c5623b4a0144","modified":1646903919613},{"_id":"node_modules/hexo-theme-yun/source/js/analytics/leancloud-visitors.js","hash":"b47a3b4432e0c34362f162a17f9a9494fa08e85e","modified":1646903919616},{"_id":"node_modules/hexo-theme-yun/source/js/comments/disqus.js","hash":"b3bd520a06de628bd844f811fc1bd07970db786e","modified":1646903919617},{"_id":"node_modules/hexo-theme-yun/source/js/comments/waline.js","hash":"e3487719adbc045be6c85c24a0b3522f688dcb65","modified":1646903919617},{"_id":"node_modules/hexo-theme-yun/source/js/search/algolia-search.js","hash":"0cb0730a3d178eb39d6418280e03ce459116190b","modified":1646903919619},{"_id":"node_modules/hexo-theme-yun/source/js/search/local-search.js","hash":"8fdeaa352a0f079e822d8adfa720a89f45ad60f6","modified":1646903919619},{"_id":"node_modules/hexo-theme-yun/source/js/ui/banner.js","hash":"2ae3473300d16f50d4ea72f6d1d638006e361074","modified":1646903919620},{"_id":"node_modules/hexo-theme-yun/source/js/ui/fireworks.js","hash":"517c20d1dc6d52aafc48148410c3bcf0557c24cd","modified":1646903919620},{"_id":"node_modules/hexo-theme-yun/src/source/analytics/leancloud-visitors.ts","hash":"27bfa0f7a3cd5b3c9cc308365b917a2d90e0e3b5","modified":1646903919625},{"_id":"node_modules/hexo-theme-yun/src/source/comments/waline.ts","hash":"f3d1b9c9eb95b169bb778c2bb45dc4d93623041d","modified":1646903919625},{"_id":"node_modules/hexo-theme-yun/src/source/comments/disqus.ts","hash":"7d1ee111cbde2b94472e23f620fa845f3607adab","modified":1646903919625},{"_id":"node_modules/hexo-theme-yun/src/source/search/algolia-search.ts","hash":"a63762d43c60a4d313bf87e65a6d2f1327c89303","modified":1646903919627},{"_id":"node_modules/hexo-theme-yun/src/source/search/local-search.ts","hash":"3e137cc24da00630ef2fbfe44e56656948c930b7","modified":1646903919628},{"_id":"node_modules/hexo-theme-yun/src/source/ui/banner.ts","hash":"2fa7b78769dd9ab2d693ec433856b8c5ba8f7b74","modified":1646903919628},{"_id":"node_modules/hexo-theme-yun/src/source/ui/fireworks.ts","hash":"14d005d02ea47f6c4dcf12701c9fc201cef9e867","modified":1646903919629},{"_id":"node_modules/hexo-theme-yun/source/css/_components/post/post-card.styl","hash":"e771203f820dc170f749b89115455a929cea51a5","modified":1646903919602},{"_id":"node_modules/hexo-theme-yun/source/css/_components/post/post-codebloack.styl","hash":"ca312b2acfee5f8019e39937500a7ed17762f72a","modified":1646903919603},{"_id":"node_modules/hexo-theme-yun/source/css/_components/post/post-header.styl","hash":"3be5d23cda0020365dbfb39ca35eb00aef65e7cd","modified":1646903919603},{"_id":"node_modules/hexo-theme-yun/source/css/_components/post/post-collapse.styl","hash":"6741c225a37e7e121d4159f129b7024402a8eeec","modified":1646903919603},{"_id":"node_modules/hexo-theme-yun/source/css/_components/post/post-markdown.styl","hash":"aa95737537b8c178010c99b3301af6f86f097904","modified":1646903919603},{"_id":"node_modules/hexo-theme-yun/source/css/_components/post/post-nav.styl","hash":"cec22a5a36eda86b1ee8038e1fa24d9a6c9a0f7f","modified":1646903919604},{"_id":"node_modules/hexo-theme-yun/source/css/_components/post/post-reward.styl","hash":"f69f5770e0908a8e8a0931f67e2417b0e1692613","modified":1646903919604},{"_id":"node_modules/hexo-theme-yun/source/css/_components/sidebar/hamburger.styl","hash":"0fa240e8a71fdad14d3fd6b3fd49cf697d4c8153","modified":1646903919605},{"_id":"node_modules/hexo-theme-yun/source/css/_components/sidebar/sidebar-nav.styl","hash":"a8c2eb2d01a02855ff074e2765c5275f839c7315","modified":1646903919605},{"_id":"node_modules/hexo-theme-yun/source/css/_components/sidebar/sidebar-toc.styl","hash":"fe429fb5aa85739c23a052737aba12418149b182","modified":1646903919605},{"_id":"node_modules/hexo-theme-yun/source/css/_components/sidebar/sidebar.styl","hash":"c1266c1039f6ac26884f4619265b29bdb1a9e31c","modified":1646903919606},{"_id":"node_modules/hexo-theme-yun/source/css/_extend/tags/index.styl","hash":"84112e467510c4d78dc8d9e6cbe1a5012e4d20d8","modified":1646903919607},{"_id":"node_modules/hexo-theme-yun/source/css/_components/sidebar/site-overview.styl","hash":"1a34782575569c8fec4489716a3dae13a88c8170","modified":1646903919606},{"_id":"node_modules/hexo-theme-yun/source/css/_extend/tags/prompt.styl","hash":"4294c5e7f3aef84d369a8ac71f8340e39a681c59","modified":1646903919608},{"_id":"node_modules/hexo-theme-yun/source/css/_widget/search/index.styl","hash":"7f03d791c7bc384672e11960af79676ba8b3cb68","modified":1646903919615},{"_id":"node_modules/hexo-theme-yun/source/css/_widget/search/algolia-search.styl","hash":"d008422dfd104304f50e472a431afa16cad0e15a","modified":1646903919615},{"_id":"node_modules/hexo-theme-yun/source/css/_widget/search/local-search.styl","hash":"06468fd1f85390134d4cf034dc5abcc114018257","modified":1646903919615},{"_id":"source/_posts/Hexo_article/traffic-light.gif","hash":"0c18d7a2a137b37b0af5b1c647aa12a3393dec64","modified":1646903923602},{"_id":"source/_posts/Hexo_article/2d6f869662e83398f06070e2a14f838.jpg","hash":"e891f3a3b28cbefa79db0d9fd17939f3df865836","modified":1646903923540},{"_id":"source/image/head.jpg","hash":"91d9c38a4f5864f68119064c8e61227e6b7719aa","modified":1646903923632},{"_id":"source/_posts/Hexo_article/884019afce82603bd8bc8fd4e531839.jpg","hash":"464c9842be81f3cc1cb18df887b8f497216e1d80","modified":1646903923595},{"_id":"public/search.xml","hash":"77e634bade25c637412ce53b9cd20bd251592588","modified":1647107878452},{"_id":"public/categories/index.html","hash":"3058d9909b8103f2b5ba67865c7f7af0c1acfe66","modified":1647107878452},{"_id":"public/tags/index.html","hash":"a120bf3348d4f57a085826a06317f43614111420","modified":1647107878452},{"_id":"public/about/index.html","hash":"18d232dbe5f4b152ff153a2f936b7c633b6cf03e","modified":1647107878452},{"_id":"public/archives/index.html","hash":"24a9f691354ddd34a286b7b4e841c270337b8eab","modified":1647107878452},{"_id":"public/archives/page/2/index.html","hash":"97ec89c2d3422dd5cc025f5e8938d5f119f366d4","modified":1647107878452},{"_id":"public/archives/2022/index.html","hash":"825b0b782e4a05adb913faa2f2019c6bee9533f3","modified":1647107878452},{"_id":"public/archives/2022/page/2/index.html","hash":"6102a4a54426159ef98757fbe472ca4a9b0c8b2a","modified":1647107878452},{"_id":"public/archives/2022/02/index.html","hash":"b11adb592756bad6c1659fd893d9b7c487f7c876","modified":1647107878452},{"_id":"public/archives/2022/03/index.html","hash":"d87d3fddc63b4484ec9b05348756ded1c0cb8967","modified":1647107878452},{"_id":"public/categories/algorithm/index.html","hash":"f23d82668b464f226fd4f8fee53dfe1eb65d5cdb","modified":1647107878452},{"_id":"public/categories/Hexo搭建/index.html","hash":"f0a7ae334a235cc538a72485fe0ef35e54c204df","modified":1647107878452},{"_id":"public/categories/计算机网络/index.html","hash":"60784e7b4819cb1bfb3130b4499323336a32df48","modified":1647107878452},{"_id":"public/page/2/index.html","hash":"e547d713e86c40e9fcef70c34717ab4ec9ea8791","modified":1647107878452},{"_id":"public/tags/algorithm/index.html","hash":"df4e2c59929678631a5bba1e5d5edd46e835c734","modified":1647107878452},{"_id":"public/tags/BFS/index.html","hash":"685016f6cf0b9d57e26671de96450cd25abd19c1","modified":1647107878452},{"_id":"public/tags/DFS/index.html","hash":"03dc723c9b299a570efa6e6465a9b53b9704d86b","modified":1647107878452},{"_id":"public/tags/背包问题/index.html","hash":"e8b0d5878211d1968f19732afd3ba42d51171c4b","modified":1647107878452},{"_id":"public/tags/DP/index.html","hash":"bd97b9c1f644a521e90742a3cd5963a524850a4e","modified":1647107878452},{"_id":"public/tags/Graph/index.html","hash":"159fa4cd12f9617483a95cd8e9981c1bacd07a05","modified":1647107878452},{"_id":"public/tags/Hexo/index.html","hash":"dbc9a46165efca2eedeeacf56e8a69edba247694","modified":1647107878452},{"_id":"public/tags/PERT/index.html","hash":"6b2b722610059ea4378a8c3d57f6453cde265361","modified":1647107878452},{"_id":"public/tags/R2S/index.html","hash":"58b1a1616991fc12c01b95e146e6378320f08a2a","modified":1647107878452},{"_id":"public/tags/Computer-Network/index.html","hash":"810528db84fc04cb317cef48b649ef8814c3c935","modified":1647107878452},{"_id":"public/tags/软路由/index.html","hash":"d155360a464cf4c5e265719dfa090636364396fb","modified":1647107878452},{"_id":"public/tags/科学上网/index.html","hash":"f9205159b375c5727e46459f55a81a784762df2a","modified":1647107878452},{"_id":"public/tags/Binary-tree/index.html","hash":"90a17cdddbb8d4ed7341b46a496ca0f62f050c74","modified":1647107878452},{"_id":"public/2022/03/13/PERT/index.html","hash":"650c0f779b1bcefbecd34819be97c297ebaa8fbe","modified":1647107878452},{"_id":"public/2022/03/10/Backpack/index.html","hash":"3d017cbba508411bd810cd7ef9fd966882d81587","modified":1647107878452},{"_id":"public/2022/03/10/BFS/index.html","hash":"dcf26c49d9c07343e33b4e9d6ec0007d5a9ef6b6","modified":1647107878452},{"_id":"public/2022/03/10/DFS/index.html","hash":"4e09fdd2888c2744eb5947fb59e269f57178da47","modified":1647107878452},{"_id":"public/2022/03/09/Graph-search/index.html","hash":"0f8c5ea9ca5d7c581cfb4463909cb6530d4937be","modified":1647107878452},{"_id":"public/2022/03/08/Hexo-synchronization/index.html","hash":"2f8aa26dd34f6838d526d49e64d011bf7c1954ea","modified":1647107878452},{"_id":"public/2022/02/26/R2S_build/index.html","hash":"ee0e15d3e9f73ba48353bdc213f60cad1d7086b0","modified":1647107878452},{"_id":"public/2022/02/25/binary_tree_1/index.html","hash":"3adc95de0a8635fa2a2860a9135ce16318129d67","modified":1647107878452},{"_id":"public/2022/02/24/binary_tree_2/index.html","hash":"3d3439c96e06df29233f49db2eab48922be5e718","modified":1647107878452},{"_id":"public/2022/02/24/Hexo_creation/index.html","hash":"5e7aecea4f3915e6beb87d7fd4a561df6e621969","modified":1647107878452},{"_id":"public/2022/02/20/Hexo_article/index.html","hash":"65aa6d47297a11190ae9c339a5b4db7cc7bf38e3","modified":1647107878452},{"_id":"public/index.html","hash":"69304ff09ff838c35982c2adace8b4bc953f829b","modified":1647107878452},{"_id":"public/yun.svg","hash":"78218ba93f0150e3613c7d0b60575ebe6131255f","modified":1647107878452},{"_id":"public/yun.png","hash":"b8ae426fa5dd7579d23d189c222641d812c51c0a","modified":1647107878452},{"_id":"public/CNAME","hash":"5e2329bc423a886fdd08288eadb59845c3da790f","modified":1647107878452},{"_id":"public/image/avatar.jpg","hash":"371df290b2fe0600ba933d48751ac8f2cadc0a18","modified":1647107878452},{"_id":"public/image/avatar_backup.jpg","hash":"981b12aaf6e63ae11de7eb10483b2676ea88f990","modified":1647107878452},{"_id":"public/image/icon.png","hash":"980118ed1d6035f8a6173abbf6099c4227c055c1","modified":1647107878452},{"_id":"public/image/wechat.jpg","hash":"c7050b547d10944c3f802771962c11ab390255dc","modified":1647107878452},{"_id":"public/image/seedling-line.svg","hash":"40de46a2c2adab799174cf37cb722244d57430d9","modified":1647107878452},{"_id":"public/2022/03/09/Graph-search/image-1.png","hash":"e31a7b655c8b104176311248253c989c0c3590ee","modified":1647107878452},{"_id":"public/2022/03/09/Graph-search/image-2.png","hash":"1ea7ffb5b9854f92cd4092aa456e1d77f28aa9fc","modified":1647107878452},{"_id":"public/2022/03/09/Graph-search/image-3.png","hash":"3b8a85b9b1f6398874d48d71f702c4e53bf83d37","modified":1647107878452},{"_id":"public/2022/03/09/Graph-search/v2-4a4d37df348f283649e2aecc74d959b5_720w.jpg","hash":"60d73acdd30125aa62e7afc3899271677c9c4cd7","modified":1647107878452},{"_id":"public/2022/03/09/Graph-search/v2-9e2643ca5d96f86a391c36de4d3bd48d_720w.jpg","hash":"24061e3e3eba17d3bf0429516a68cf344e680fd4","modified":1647107878452},{"_id":"public/2022/02/20/Hexo_article/image-20220308162506034.png","hash":"cbac8bf927ab02febc2e96125c88df7426dee64c","modified":1647107878452},{"_id":"public/2022/02/24/Hexo_creation/image-20220308165502809.png","hash":"667770d3e29fb219208121ddc70d2ae062563ad1","modified":1647107878452},{"_id":"public/2022/03/13/PERT/image-20210926121305734.png","hash":"5bb37f387e4b008de13619b2bc84bb610cf73ba3","modified":1647107878452},{"_id":"public/2022/03/13/PERT/image-20210926121452437.png","hash":"409b273ed1a5e8c0aa440379af65b4a8b8d3f5fa","modified":1647107878452},{"_id":"public/2022/03/13/PERT/image-20210926125842698.png","hash":"f648448ff8f6bb0ceb55706597043c277d7bc9a2","modified":1647107878452},{"_id":"public/2022/03/13/PERT/image-20210926121557824.png","hash":"a082383de3b879a035be5bc7866a932737bb2b66","modified":1647107878452},{"_id":"public/2022/02/25/binary_tree_1/v2-0ccba83c7b3dbf7b89964c04021025d9_720w.jpg","hash":"f56981756349a08c44d83576af3e63798c87e21f","modified":1647107878452},{"_id":"public/2022/02/26/R2S_build/image-1.png","hash":"4a475083bd251f14329a16715da142571bd86747","modified":1647107878452},{"_id":"public/2022/02/26/R2S_build/image-10.png","hash":"62f3de2b27546aff4cf6a616df3b3239e5d5d589","modified":1647107878452},{"_id":"public/2022/02/26/R2S_build/image-5.png","hash":"56c526c61081288b63adab3db805722adedec86f","modified":1647107878452},{"_id":"public/2022/02/26/R2S_build/image-7.png","hash":"b6b02dcf36560a6055756269e885694045ad33bc","modified":1647107878452},{"_id":"public/2022/02/26/R2S_build/image-8.png","hash":"dedaee8c824811ffa4f3d27516e012a86636726e","modified":1647107878452},{"_id":"public/2022/02/24/binary_tree_2/image.png","hash":"779e786c51aefa1b4c15d9945a62b452137e2024","modified":1647107878452},{"_id":"public/image/alipay.png","hash":"6be1d1ffc3264828ea0a27a4ca30520dfa448bd6","modified":1647107878452},{"_id":"public/image/qq.jpg","hash":"679ce9b7fb0f782ddfb1177689cb0ae09fbded23","modified":1647107878452},{"_id":"public/image/wechat.png","hash":"4660b50917b947a91c35f55b0281c633b9b0addd","modified":1647107878452},{"_id":"public/2022/03/08/Hexo-synchronization/image-20220310172557250.png","hash":"6e29f7df5d770ebc97cc9c4061ede24d1505d82d","modified":1647107878452},{"_id":"public/2022/02/20/Hexo_article/IMG_1479.jpg","hash":"f869ae1d27243b47840d63ffbe1bd136c7c7a503","modified":1647107878452},{"_id":"public/2022/03/13/PERT/image-20210926121433312.png","hash":"aeb8258e4e8ae3d05ca75e03dfe93ec239da5baa","modified":1647107878452},{"_id":"public/2022/02/26/R2S_build/image-20220305212846426.png","hash":"ea4b0543826c23f95321520feaca18a54e27c00f","modified":1647107878452},{"_id":"public/2022/02/26/R2S_build/image-9-1024x194.png","hash":"00c8bfd48272b1b8487d34e711ac2800569c3230","modified":1647107878452},{"_id":"public/css/README.html","hash":"3c68b48595e975dd7614b64f71ffa1113d784228","modified":1647107878452},{"_id":"public/js/chunk-TTX6TVTO.js","hash":"bdf31df5623cdbe4d6629c1d602cad7a15e5cf78","modified":1647107878452},{"_id":"public/js/hexo-theme-yun.js","hash":"94d9c460fc7e8658f21fcc7f9af346fc5e9d4a63","modified":1647107878452},{"_id":"public/js/chunk-YZ7E3ATC.js","hash":"5bb1683531dd823bb4de8b6541f0290d46006320","modified":1647107878452},{"_id":"public/js/gallery-decrypt.js","hash":"ce7bf147867972a0f9e903eebf66b7e0f0145f61","modified":1647107878452},{"_id":"public/js/pjax.js","hash":"4d59377e0b830db741c2786d4ccbb2f5498ee13e","modified":1647107878452},{"_id":"public/js/sidebar.js","hash":"ee176346d586bebbd146f157c23f9d367d5499a4","modified":1647107878452},{"_id":"public/js/say.js","hash":"59c8436cecab357b196c37fe0345e932e7f74dbe","modified":1647107878452},{"_id":"public/js/analytics/leancloud-visitors.js","hash":"89952ef9eb5fe84c856068a6e6c274e396f74dd5","modified":1647107878452},{"_id":"public/js/utils.js","hash":"36ec1d14c7537ad402e577d5deea7c09160197f8","modified":1647107878452},{"_id":"public/js/comments/waline.js","hash":"090fc554d82400dca9ae6a2806be48c111b90b3e","modified":1647107878452},{"_id":"public/js/search/algolia-search.js","hash":"aa26c979800de87ecfd9d0ba2ae7e238da2389ba","modified":1647107878452},{"_id":"public/js/comments/disqus.js","hash":"4073464ce42643d9571211b1443af61fc78ec0d1","modified":1647107878452},{"_id":"public/js/search/local-search.js","hash":"db5cbac019bd86c47cac02e6dba1dfb1861ef31f","modified":1647107878452},{"_id":"public/js/ui/banner.js","hash":"c73ce4b3021bebf1a264e481dbe9a8a1ccd87d3b","modified":1647107878452},{"_id":"public/js/ui/fireworks.js","hash":"859b09a6065ea1b4f02f2974e590e44cc13fccc9","modified":1647107878452},{"_id":"public/css/hexo-theme-yun.css","hash":"74b33bb12d72932d4e507614ac42d1f4ba7307c8","modified":1647107878452},{"_id":"public/2022/03/08/Hexo-synchronization/Screenshot 2022-03-08 161552.png","hash":"5146a45213aa0aaa7ac928f8083fcf56472628a8","modified":1647107878452},{"_id":"public/2022/02/20/Hexo_article/image-20220308162715529.png","hash":"8e3c4674e8deea387717279e8a00923655c7ddf6","modified":1647107878452},{"_id":"public/2022/02/24/Hexo_creation/image-20220308165404552.png","hash":"a268bc4c307433bde753548c2e00b24bc645571e","modified":1647107878452},{"_id":"public/assets/js/DPlayer.min.js","hash":"104613de917a8576ff26aaa36d1c0c7bb4730f4e","modified":1647107878452},{"_id":"public/2022/02/25/binary_tree_1/image.png","hash":"486e325512c567f522e925b9fe9d58c24789176b","modified":1647107878452},{"_id":"public/2022/02/26/R2S_build/image-2-1024x507.png","hash":"3f2c9846cdfeed98cf3b5bf94cb0a5d41de40705","modified":1647107878452},{"_id":"public/2022/02/26/R2S_build/image-3-1024x485.png","hash":"72f68e697d9656bc5dfdf05584660bee9d89e29a","modified":1647107878452},{"_id":"public/2022/02/20/Hexo_article/traffic-light.gif","hash":"0c18d7a2a137b37b0af5b1c647aa12a3393dec64","modified":1647107878452},{"_id":"public/2022/02/20/Hexo_article/2d6f869662e83398f06070e2a14f838.jpg","hash":"e891f3a3b28cbefa79db0d9fd17939f3df865836","modified":1647107878452},{"_id":"public/image/head.jpg","hash":"91d9c38a4f5864f68119064c8e61227e6b7719aa","modified":1647107878452},{"_id":"public/2022/02/20/Hexo_article/884019afce82603bd8bc8fd4e531839.jpg","hash":"464c9842be81f3cc1cb18df887b8f497216e1d80","modified":1647107878452}],"Category":[{"name":"algorithm","_id":"cl0o5i7400004ascy4ifdb40y"},{"name":"Hexo搭建","_id":"cl0o5i748000kascyhkvnhch5"},{"name":"计算机网络","_id":"cl0o5i74c0011ascy7v27emqd"}],"Data":[],"Page":[{"title":"categories","date":"2022-02-23T09:10:40.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2022-02-23 17:10:40\ntype: categories\n---\n","updated":"2022-03-10T09:18:43.613Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cl0o5i73t0000ascy00ephd9v","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2022-02-23T06:03:55.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2022-02-23 14:03:55\ntype: tags\n---\n","updated":"2022-03-10T09:18:43.635Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cl0o5i73y0002ascyb7hxa15j","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"about","date":"2022-02-21T14:50:30.000Z","_content":"\n# About me\n\n> ## WHO AM I\n>\n> ~~20岁，是学生。​~~\n>\n> 希望与你相遇。\n\n见字如面，很高兴认识你。\n\n目前我是一名澳科大在读本科生，IT专业。\n\n我喜欢交朋友，然而我是一个社恐人士。\n\n我喜欢拍照片，然而没有拿得出手的美图。\n\n我喜欢打游戏，然而这个赛季王者还是钻石。\n\n。。。 。。。\n\n如果，你喜欢我（和我的网页）的话\n\n~~欢迎给我打钱💰~~\n\n# Contact\n\nEmail: tonylsx611@gmail.com\n\nWechat: tony83607693\n\nQQ: 2858075831","source":"about/index.md","raw":"---\ntitle: about\ndate: 2022-02-21 22:50:30\n---\n\n# About me\n\n> ## WHO AM I\n>\n> ~~20岁，是学生。​~~\n>\n> 希望与你相遇。\n\n见字如面，很高兴认识你。\n\n目前我是一名澳科大在读本科生，IT专业。\n\n我喜欢交朋友，然而我是一个社恐人士。\n\n我喜欢拍照片，然而没有拿得出手的美图。\n\n我喜欢打游戏，然而这个赛季王者还是钻石。\n\n。。。 。。。\n\n如果，你喜欢我（和我的网页）的话\n\n~~欢迎给我打钱💰~~\n\n# Contact\n\nEmail: tonylsx611@gmail.com\n\nWechat: tony83607693\n\nQQ: 2858075831","updated":"2022-03-10T09:18:43.613Z","path":"about/index.html","comments":1,"layout":"page","_id":"cl0o5i7410006ascyhrp50tg2","content":"<h1 id=\"About-me\"><a href=\"#About-me\" class=\"headerlink\" title=\"About me\"></a>About me</h1><blockquote>\n<h2 id=\"WHO-AM-I\"><a href=\"#WHO-AM-I\" class=\"headerlink\" title=\"WHO AM I\"></a>WHO AM I</h2><p><del>20岁，是学生。​</del></p>\n<p>希望与你相遇。</p>\n</blockquote>\n<p>见字如面，很高兴认识你。</p>\n<p>目前我是一名澳科大在读本科生，IT专业。</p>\n<p>我喜欢交朋友，然而我是一个社恐人士。</p>\n<p>我喜欢拍照片，然而没有拿得出手的美图。</p>\n<p>我喜欢打游戏，然而这个赛季王者还是钻石。</p>\n<p>。。。 。。。</p>\n<p>如果，你喜欢我（和我的网页）的话</p>\n<p><del>欢迎给我打钱💰</del></p>\n<h1 id=\"Contact\"><a href=\"#Contact\" class=\"headerlink\" title=\"Contact\"></a>Contact</h1><p>Email: tonylsx611@gmail.com</p>\n<p>Wechat: tony83607693</p>\n<p>QQ: 2858075831</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"About-me\"><a href=\"#About-me\" class=\"headerlink\" title=\"About me\"></a>About me</h1><blockquote>\n<h2 id=\"WHO-AM-I\"><a href=\"#WHO-AM-I\" class=\"headerlink\" title=\"WHO AM I\"></a>WHO AM I</h2><p><del>20岁，是学生。​</del></p>\n<p>希望与你相遇。</p>\n</blockquote>\n<p>见字如面，很高兴认识你。</p>\n<p>目前我是一名澳科大在读本科生，IT专业。</p>\n<p>我喜欢交朋友，然而我是一个社恐人士。</p>\n<p>我喜欢拍照片，然而没有拿得出手的美图。</p>\n<p>我喜欢打游戏，然而这个赛季王者还是钻石。</p>\n<p>。。。 。。。</p>\n<p>如果，你喜欢我（和我的网页）的话</p>\n<p><del>欢迎给我打钱💰</del></p>\n<h1 id=\"Contact\"><a href=\"#Contact\" class=\"headerlink\" title=\"Contact\"></a>Contact</h1><p>Email: tonylsx611@gmail.com</p>\n<p>Wechat: tony83607693</p>\n<p>QQ: 2858075831</p>\n"}],"Post":[{"title":"BFS简介","date":"2022-03-10T09:43:09.000Z","katex":true,"_content":"\n## BFS基本概念\n\n**广度优先算法**（Breadth-First-Search），简称BFS，是一种图形搜索演算法，最糟糕的情况算法时间复杂度为O(V+E)。简单的说，BFS是从根节点开始，沿着树的宽度遍历树的节点，如果发现目标，则演算终止。\n\n## **经典例题**\n\n------\n\n### 1. 填涂颜色\n\n#### 题目描述\n\n由数字$0$组成的方阵中，有一任意形状闭合圈，闭合圈由数字$1$构成，围圈时只走上下左右$4$个方向。现要求把闭合圈内的所有空间都填写成$2$。例如：$6×6$的方阵$(n=6)$，涂色前和涂色后的方阵如下：\n\n```bash\n0 0 0 0 0 0\n0 0 1 1 1 1\n0 1 1 0 0 1\n1 1 0 0 0 1\n1 0 0 0 0 1\n1 1 1 1 1 1\n-----------\n0 0 0 0 0 0\n0 0 1 1 1 1\n0 1 1 2 2 1\n1 1 2 2 2 1\n1 2 2 2 2 1\n1 1 1 1 1 1\n```\n\n#### 输入格式\n\n每组测试数据第一行一个整数$n(1≤n≤30)$\n\n接下来$n$行，由$0$和$1$组成的$n×n$的方阵。\n\n方阵内只有一个闭合圈，圈内至少有一个$0$。\n\n#### 输出格式\n\n已经填好数字$2$的完整方阵。\n\n#### 输入输出样例\n\n**输入 #1**\n\n```bash\n6\n0 0 0 0 0 0\n0 0 1 1 1 1\n0 1 1 0 0 1\n1 1 0 0 0 1\n1 0 0 0 0 1\n1 1 1 1 1 1\n```\n\n**输出 #1**\n\n```bash\n0 0 0 0 0 0\n0 0 1 1 1 1\n0 1 1 2 2 1\n1 1 2 2 2 1\n1 2 2 2 2 1\n1 1 1 1 1 1\n```\n\n#### 说明/提示\n\n$1≤n≤30$\n\n#### 答案解析\n\n```c\n#include<iostream>\nusing namespace std;\nint num[40][40];\nint main()\n{\n    int c,i,j,k;\n    cin>>c;\n    for(i=1;i<=c;i++)\n\t\tfor(j=1;j<=c;j++)\n    {\n        cin>>num[i][j];\n        if(num[i][j]==0)\n\t\t\tnum[i][j]=2;\n        //先认为所有的0都应该被修改,并且真的把它修改成了2;\n    }\n    for(i=1;i<=c;i++)\n    {\n        //边角上的'2'其实本来不应该被修改的,那我们把他们改回去,改成0\n        if(num[1][i]==2)\n\t\t\tnum[1][i]=0;\n        if(num[i][1]==2)\t\n\t\t\tnum[i][1]=0;\n        if(num[c][i]==2)\n\t\t\tnum[c][i]=0;\n        if(num[i][c]==2)\n\t\t\tnum[i][c]=0;\n    }\n    //然后来寻找与这些零相邻的'2',它们其实也是被改错了的\n    for(k=1;k<=100;k++)//广度优先搜索 阈值=100 (事实上不需要那么多)\n    \tfor(i=1;i<=c;i++)\n    \t\tfor(j=1;j<=c;j++)\n    \t\t    if(num[i][j]!=1)\n    \t\t\t    if(!num[i][j-1]||!num[i-1][j]||!num[i+1][j]||!num[i][j+1])\n    \t\t\t\t    num[i][j]=0; \n    for(i=1;i<=c;i++)\n    {\n        for(j=1;j<=c;j++)\n        cout<<num[i][j]<<\" \";\n        cout<<endl;\n    }\n    return 0;\n}\n```\n\n当然，本题仍可以用DFS来做：\n\n```c\n#include <cstdio>\nusing namespace std;\nint n;\nint a[32][32];\nvoid dfs(int x, int y)\n{\n    if(x >= 0 && x <= n + 1 && y >= 0 && y <= n + 1)\n    {\n        if(a[x][y] == 1 || a[x][y] == 3) \n        \treturn ;\n        else\n        {\n        \ta[x][y] = 3;\n            dfs(x + 1, y); \n            dfs(x - 1, y);\n            dfs(x, y + 1); \n            dfs(x, y - 1);\n        }\n    }\n}\nint main()\n{\n    scanf(\"%d\", &n);\n    for(int i = 1; i <= n; ++ i)\n    \tfor(int j = 1; j <= n; ++ j)\n    \t\tscanf(\"%d\", &a[i][j]);\n    dfs(0, 0);\n    for(int i = 1; i <= n; ++ i)\n    \tfor(int j = 1; j <= n; ++ j)\n    \t\tif(a[i][j] == 3) \n    \t\t\ta[i][j] = 0;\n    \t\telse \n    \t\t\tif(a[i][j] == 0) \n    \t\t\t\ta[i][j] = 2;\n    for(int i = 1; i <= n; ++ i)\n    {\n    \tfor(int j = 1; j <= n; ++ j) \n    \t\tprintf(\"%d \", a[i][j]);\n    \tprintf(\"\\n\")\n    }\n    return 0;\n}\n```\n\n注意：dfs在先搜索的时候应该搜索到矩阵的外面一圈$(0， n + 1)$ 否则的话就会出现错误！(边缘处被涂色)\n\n------\n\n### 01迷宫\n\n#### 题目描述\n\n有一个仅由数字$0$与$1$组成的$n×n$格迷宫。若你位于一格$0$上，那么你可以移动到相邻$4$格中的某一格$1$上，同样若你位于一格$1$上，那么你可以移动到相邻$4$格中的某一格$0$上。\n\n你的任务是：对于给定的迷宫，询问从某一格开始能移动到多少个格子（包含自身）。\n\n#### 输入格式\n\n第$1$行为两个正整数$n,m$。\n\n下面$n$行，每行*$n$*个字符，字符只可能是$0$或者$1$，字符之间没有空格。\n\n接下来$m$行，每行$2$个用空格分隔的正整数$i,j$，对应了迷宫中第$i$行第$j$列的一个格子，询问从这一格开始能移动到多少格。\n\n#### 输出格式\n\n$m$行，对于每个询问输出相应答案。\n\n#### 输入输出样例\n\n**输入 #1**\n\n```bash\n2 2\n01\n10\n1 1\n2 2\n```\n\n**输出 #1**\n\n```bash\n4\n4\n```\n\n#### 说明/提示\n\n对于20%的数据，$n≤10$；\n\n对于40%的数据，$n≤50$；\n\n对于50%的数据，$m≤5$；\n\n对于60%的数据，$n*≤100,*m≤100$；\n\n对于100%的数据，$n*≤1000,*m≤100000$。\n\n#### 答案解析\n\nBFS，70分代码：\n\n```c\n#include<iostream>\n#include<cstring>\nusing namespace std;\nstruct mg\n{\n    int x,y;\n};\nbool map[1001][1001];\nbool flag[1001][1001];\nmg q[1000001];\nint m,n;\nvoid bfs(int x,int y);\nint main()\n{\n\tcin>>n>>m;\n\tchar ch;\n\tfor(int i=1;i<=n;i++)\n\t\tfor(int j=1;j<=n;j++)\n\t\t{\n\t\t\tcin>>ch;\n\t\t\tif(ch=='1')\n\t\t\t\tmap[i][j]=true;\n\t\t}\n\tfor(int i=0;i<m;i++)\n\t{\n\t\tint x,y;\n\t\tcin>>x>>y;\n\t\tbfs(x,y);\n\t}\n\treturn 0;\n}\nvoid bfs(int x,int y)\n{\n\tint dx[4]={0,0,-1,1};\n    int dy[4]={1,-1,0,0};\n    int ans,f,r,newx,newy;\n    ans=f=r=1;\n    q[f].x=x;\n    q[f].y=y;\n    memset(flag,false,sizeof(flag));\n    flag[x][y]=true;\n    while(f<=r)\n    {\n    \tfor(int i=0;i<4;i++)\n    \t{\n    \t\tnewx=q[f].x+dx[i];\n    \t\tnewy=q[f].y+dy[i];\n    \t\tif(newx>0 && newx<=n && newy>0 && newy<=n && !flag[newx][newy])\n    \t\t\tif((map[q[f].x][q[f].y]==0 && map[newx][newy]==1) || (map[q[f].x][q[f].y]==1 && map[newx][newy]==0))\n    \t\t\t{\n    \t\t\t\tr++;\n    \t\t\t\tans++;\n    \t\t\t\tflag[newx][newy]=true;\n    \t\t\t\tq[r].x=newx;\n    \t\t\t\tq[r].y=newy;\n\t\t\t\t}\n\t\t}\n\t\tf++;\n\t}\n\tcout<<ans<<endl;\n } \n```\n\n有三个点TEL，所以对代码进行一定时间优化，学名叫记忆化搜索，以时间换空间，优化如下：\n\n```c\n#include<iostream>\n#include<cstring>\nusing namespace std;\nstruct mg\n{\n    int x,y;\n};\nbool map[1001][1001];\nbool flag[1001][1001];\nint a[1001][1001];\nmg q[5000001];\nint m,n;\nvoid bfs(int x,int y);\nint main()\n{\n\tcin>>n>>m;\n\tchar ch;\n\tfor(int i=1;i<=n;i++)\n\t\tfor(int j=1;j<=n;j++)\n\t\t{\n\t\t\tcin>>ch;\n\t\t\tif(ch=='1')\n\t\t\t\tmap[i][j]=true;\n\t\t}\n\tfor(int i=0;i<m;i++)\n\t{\n\t\tint x,y;\n\t\tcin>>x>>y;\n\t\tif(a[x][y]==0)\n\t\t\tbfs(x,y);\n\t\telse\n\t\t\tcout<<a[x][y]<<endl;\n\t}\n\treturn 0;\n}\nvoid bfs(int x,int y)\n{\n\tint dx[4]={0,0,-1,1};\n    int dy[4]={1,-1,0,0};\n    int ans,f,r,newx,newy;\n    ans=f=r=1;\n    q[f].x=x;\n    q[f].y=y;\n    memset(flag,false,sizeof(flag));\n    flag[x][y]=true;\n    while(f<=r)\n    {\n    \tfor(int i=0;i<4;i++)\n    \t{\n    \t\tnewx=q[f].x+dx[i];\n    \t\tnewy=q[f].y+dy[i];\n    \t\tif(newx>0 && newx<=n && newy>0 && newy<=n && !flag[newx][newy])\n    \t\t\tif((map[q[f].x][q[f].y]==0 && map[newx][newy]==1) || (map[q[f].x][q[f].y]==1 && map[newx][newy]==0))\n    \t\t\t{\n    \t\t\t\tr++;\n    \t\t\t\tans++;\n    \t\t\t\tflag[newx][newy]=true;\n    \t\t\t\tq[r].x=newx;\n    \t\t\t\tq[r].y=newy;\n\t\t\t\t}\n\t\t}\n\t\tf++;\n\t}\n\tfor(int i=1;i<n;i++)\n\t\tfor(int j=1;j<n;j++)\n\t\t\tif(flag[i][j])\n\t\t\t\ta[i][j]=ans;\n\tcout<<ans<<endl;\n } \n```\n\n当然，本题也可以用DFS来做，读者可以先自行写一写，不要看下面的答案：\n\n```c\n#include<cstdio>\n#include<cstring>\nint n,m,x,y;\nint ans[100002],f[1002][1002];\nchar s[1002][1002];\nvoid dfs(int r,int c,int z,int lll)\n{\n    if (r<0 || r>=n || c<0 || c>=n || f[r][c]!=-1 || s[r][c]-'0'!=z)\n        return;\n    f[r][c]=lll;\n    ans[lll]++;\n    dfs(r-1,c,!z,lll);\n    dfs(r+1,c,!z,lll);\n    dfs(r,c-1,!z,lll);\n    dfs(r,c+1,!z,lll);\n}\nint main()\n{\n    scanf(\"%d%d\",&n,&m);\n    for (int i=0;i<n;i++)\n    \tscanf(\"%s\",s[i]);\n    memset(f,-1,sizeof(f));\n    for (int i=0;i<m;i++)\n    {\n        scanf(\"%d%d\",&x,&y);\n        x--;\n        y--;\n        if (f[x][y]==-1)\n            dfs(x,y,s[x][y]-'0',i);\n        else \n            ans[i]=ans[f[x][y]];\n    }\n    for (int i=0;i<m;i++)\n    \tprintf(\"%d\\n\",ans[i]);\n    return 0;\n}\n```\n\n$$\nEND\n$$\n\n","source":"_posts/BFS.md","raw":"---\ntitle: BFS简介\ndate: 2022-03-10 17:43:09\ntags:\n\t- algorithm\n\t- BFS\n\t- DFS\ncategories:\n\t- algorithm\nkatex: true\n---\n\n## BFS基本概念\n\n**广度优先算法**（Breadth-First-Search），简称BFS，是一种图形搜索演算法，最糟糕的情况算法时间复杂度为O(V+E)。简单的说，BFS是从根节点开始，沿着树的宽度遍历树的节点，如果发现目标，则演算终止。\n\n## **经典例题**\n\n------\n\n### 1. 填涂颜色\n\n#### 题目描述\n\n由数字$0$组成的方阵中，有一任意形状闭合圈，闭合圈由数字$1$构成，围圈时只走上下左右$4$个方向。现要求把闭合圈内的所有空间都填写成$2$。例如：$6×6$的方阵$(n=6)$，涂色前和涂色后的方阵如下：\n\n```bash\n0 0 0 0 0 0\n0 0 1 1 1 1\n0 1 1 0 0 1\n1 1 0 0 0 1\n1 0 0 0 0 1\n1 1 1 1 1 1\n-----------\n0 0 0 0 0 0\n0 0 1 1 1 1\n0 1 1 2 2 1\n1 1 2 2 2 1\n1 2 2 2 2 1\n1 1 1 1 1 1\n```\n\n#### 输入格式\n\n每组测试数据第一行一个整数$n(1≤n≤30)$\n\n接下来$n$行，由$0$和$1$组成的$n×n$的方阵。\n\n方阵内只有一个闭合圈，圈内至少有一个$0$。\n\n#### 输出格式\n\n已经填好数字$2$的完整方阵。\n\n#### 输入输出样例\n\n**输入 #1**\n\n```bash\n6\n0 0 0 0 0 0\n0 0 1 1 1 1\n0 1 1 0 0 1\n1 1 0 0 0 1\n1 0 0 0 0 1\n1 1 1 1 1 1\n```\n\n**输出 #1**\n\n```bash\n0 0 0 0 0 0\n0 0 1 1 1 1\n0 1 1 2 2 1\n1 1 2 2 2 1\n1 2 2 2 2 1\n1 1 1 1 1 1\n```\n\n#### 说明/提示\n\n$1≤n≤30$\n\n#### 答案解析\n\n```c\n#include<iostream>\nusing namespace std;\nint num[40][40];\nint main()\n{\n    int c,i,j,k;\n    cin>>c;\n    for(i=1;i<=c;i++)\n\t\tfor(j=1;j<=c;j++)\n    {\n        cin>>num[i][j];\n        if(num[i][j]==0)\n\t\t\tnum[i][j]=2;\n        //先认为所有的0都应该被修改,并且真的把它修改成了2;\n    }\n    for(i=1;i<=c;i++)\n    {\n        //边角上的'2'其实本来不应该被修改的,那我们把他们改回去,改成0\n        if(num[1][i]==2)\n\t\t\tnum[1][i]=0;\n        if(num[i][1]==2)\t\n\t\t\tnum[i][1]=0;\n        if(num[c][i]==2)\n\t\t\tnum[c][i]=0;\n        if(num[i][c]==2)\n\t\t\tnum[i][c]=0;\n    }\n    //然后来寻找与这些零相邻的'2',它们其实也是被改错了的\n    for(k=1;k<=100;k++)//广度优先搜索 阈值=100 (事实上不需要那么多)\n    \tfor(i=1;i<=c;i++)\n    \t\tfor(j=1;j<=c;j++)\n    \t\t    if(num[i][j]!=1)\n    \t\t\t    if(!num[i][j-1]||!num[i-1][j]||!num[i+1][j]||!num[i][j+1])\n    \t\t\t\t    num[i][j]=0; \n    for(i=1;i<=c;i++)\n    {\n        for(j=1;j<=c;j++)\n        cout<<num[i][j]<<\" \";\n        cout<<endl;\n    }\n    return 0;\n}\n```\n\n当然，本题仍可以用DFS来做：\n\n```c\n#include <cstdio>\nusing namespace std;\nint n;\nint a[32][32];\nvoid dfs(int x, int y)\n{\n    if(x >= 0 && x <= n + 1 && y >= 0 && y <= n + 1)\n    {\n        if(a[x][y] == 1 || a[x][y] == 3) \n        \treturn ;\n        else\n        {\n        \ta[x][y] = 3;\n            dfs(x + 1, y); \n            dfs(x - 1, y);\n            dfs(x, y + 1); \n            dfs(x, y - 1);\n        }\n    }\n}\nint main()\n{\n    scanf(\"%d\", &n);\n    for(int i = 1; i <= n; ++ i)\n    \tfor(int j = 1; j <= n; ++ j)\n    \t\tscanf(\"%d\", &a[i][j]);\n    dfs(0, 0);\n    for(int i = 1; i <= n; ++ i)\n    \tfor(int j = 1; j <= n; ++ j)\n    \t\tif(a[i][j] == 3) \n    \t\t\ta[i][j] = 0;\n    \t\telse \n    \t\t\tif(a[i][j] == 0) \n    \t\t\t\ta[i][j] = 2;\n    for(int i = 1; i <= n; ++ i)\n    {\n    \tfor(int j = 1; j <= n; ++ j) \n    \t\tprintf(\"%d \", a[i][j]);\n    \tprintf(\"\\n\")\n    }\n    return 0;\n}\n```\n\n注意：dfs在先搜索的时候应该搜索到矩阵的外面一圈$(0， n + 1)$ 否则的话就会出现错误！(边缘处被涂色)\n\n------\n\n### 01迷宫\n\n#### 题目描述\n\n有一个仅由数字$0$与$1$组成的$n×n$格迷宫。若你位于一格$0$上，那么你可以移动到相邻$4$格中的某一格$1$上，同样若你位于一格$1$上，那么你可以移动到相邻$4$格中的某一格$0$上。\n\n你的任务是：对于给定的迷宫，询问从某一格开始能移动到多少个格子（包含自身）。\n\n#### 输入格式\n\n第$1$行为两个正整数$n,m$。\n\n下面$n$行，每行*$n$*个字符，字符只可能是$0$或者$1$，字符之间没有空格。\n\n接下来$m$行，每行$2$个用空格分隔的正整数$i,j$，对应了迷宫中第$i$行第$j$列的一个格子，询问从这一格开始能移动到多少格。\n\n#### 输出格式\n\n$m$行，对于每个询问输出相应答案。\n\n#### 输入输出样例\n\n**输入 #1**\n\n```bash\n2 2\n01\n10\n1 1\n2 2\n```\n\n**输出 #1**\n\n```bash\n4\n4\n```\n\n#### 说明/提示\n\n对于20%的数据，$n≤10$；\n\n对于40%的数据，$n≤50$；\n\n对于50%的数据，$m≤5$；\n\n对于60%的数据，$n*≤100,*m≤100$；\n\n对于100%的数据，$n*≤1000,*m≤100000$。\n\n#### 答案解析\n\nBFS，70分代码：\n\n```c\n#include<iostream>\n#include<cstring>\nusing namespace std;\nstruct mg\n{\n    int x,y;\n};\nbool map[1001][1001];\nbool flag[1001][1001];\nmg q[1000001];\nint m,n;\nvoid bfs(int x,int y);\nint main()\n{\n\tcin>>n>>m;\n\tchar ch;\n\tfor(int i=1;i<=n;i++)\n\t\tfor(int j=1;j<=n;j++)\n\t\t{\n\t\t\tcin>>ch;\n\t\t\tif(ch=='1')\n\t\t\t\tmap[i][j]=true;\n\t\t}\n\tfor(int i=0;i<m;i++)\n\t{\n\t\tint x,y;\n\t\tcin>>x>>y;\n\t\tbfs(x,y);\n\t}\n\treturn 0;\n}\nvoid bfs(int x,int y)\n{\n\tint dx[4]={0,0,-1,1};\n    int dy[4]={1,-1,0,0};\n    int ans,f,r,newx,newy;\n    ans=f=r=1;\n    q[f].x=x;\n    q[f].y=y;\n    memset(flag,false,sizeof(flag));\n    flag[x][y]=true;\n    while(f<=r)\n    {\n    \tfor(int i=0;i<4;i++)\n    \t{\n    \t\tnewx=q[f].x+dx[i];\n    \t\tnewy=q[f].y+dy[i];\n    \t\tif(newx>0 && newx<=n && newy>0 && newy<=n && !flag[newx][newy])\n    \t\t\tif((map[q[f].x][q[f].y]==0 && map[newx][newy]==1) || (map[q[f].x][q[f].y]==1 && map[newx][newy]==0))\n    \t\t\t{\n    \t\t\t\tr++;\n    \t\t\t\tans++;\n    \t\t\t\tflag[newx][newy]=true;\n    \t\t\t\tq[r].x=newx;\n    \t\t\t\tq[r].y=newy;\n\t\t\t\t}\n\t\t}\n\t\tf++;\n\t}\n\tcout<<ans<<endl;\n } \n```\n\n有三个点TEL，所以对代码进行一定时间优化，学名叫记忆化搜索，以时间换空间，优化如下：\n\n```c\n#include<iostream>\n#include<cstring>\nusing namespace std;\nstruct mg\n{\n    int x,y;\n};\nbool map[1001][1001];\nbool flag[1001][1001];\nint a[1001][1001];\nmg q[5000001];\nint m,n;\nvoid bfs(int x,int y);\nint main()\n{\n\tcin>>n>>m;\n\tchar ch;\n\tfor(int i=1;i<=n;i++)\n\t\tfor(int j=1;j<=n;j++)\n\t\t{\n\t\t\tcin>>ch;\n\t\t\tif(ch=='1')\n\t\t\t\tmap[i][j]=true;\n\t\t}\n\tfor(int i=0;i<m;i++)\n\t{\n\t\tint x,y;\n\t\tcin>>x>>y;\n\t\tif(a[x][y]==0)\n\t\t\tbfs(x,y);\n\t\telse\n\t\t\tcout<<a[x][y]<<endl;\n\t}\n\treturn 0;\n}\nvoid bfs(int x,int y)\n{\n\tint dx[4]={0,0,-1,1};\n    int dy[4]={1,-1,0,0};\n    int ans,f,r,newx,newy;\n    ans=f=r=1;\n    q[f].x=x;\n    q[f].y=y;\n    memset(flag,false,sizeof(flag));\n    flag[x][y]=true;\n    while(f<=r)\n    {\n    \tfor(int i=0;i<4;i++)\n    \t{\n    \t\tnewx=q[f].x+dx[i];\n    \t\tnewy=q[f].y+dy[i];\n    \t\tif(newx>0 && newx<=n && newy>0 && newy<=n && !flag[newx][newy])\n    \t\t\tif((map[q[f].x][q[f].y]==0 && map[newx][newy]==1) || (map[q[f].x][q[f].y]==1 && map[newx][newy]==0))\n    \t\t\t{\n    \t\t\t\tr++;\n    \t\t\t\tans++;\n    \t\t\t\tflag[newx][newy]=true;\n    \t\t\t\tq[r].x=newx;\n    \t\t\t\tq[r].y=newy;\n\t\t\t\t}\n\t\t}\n\t\tf++;\n\t}\n\tfor(int i=1;i<n;i++)\n\t\tfor(int j=1;j<n;j++)\n\t\t\tif(flag[i][j])\n\t\t\t\ta[i][j]=ans;\n\tcout<<ans<<endl;\n } \n```\n\n当然，本题也可以用DFS来做，读者可以先自行写一写，不要看下面的答案：\n\n```c\n#include<cstdio>\n#include<cstring>\nint n,m,x,y;\nint ans[100002],f[1002][1002];\nchar s[1002][1002];\nvoid dfs(int r,int c,int z,int lll)\n{\n    if (r<0 || r>=n || c<0 || c>=n || f[r][c]!=-1 || s[r][c]-'0'!=z)\n        return;\n    f[r][c]=lll;\n    ans[lll]++;\n    dfs(r-1,c,!z,lll);\n    dfs(r+1,c,!z,lll);\n    dfs(r,c-1,!z,lll);\n    dfs(r,c+1,!z,lll);\n}\nint main()\n{\n    scanf(\"%d%d\",&n,&m);\n    for (int i=0;i<n;i++)\n    \tscanf(\"%s\",s[i]);\n    memset(f,-1,sizeof(f));\n    for (int i=0;i<m;i++)\n    {\n        scanf(\"%d%d\",&x,&y);\n        x--;\n        y--;\n        if (f[x][y]==-1)\n            dfs(x,y,s[x][y]-'0',i);\n        else \n            ans[i]=ans[f[x][y]];\n    }\n    for (int i=0;i<m;i++)\n    \tprintf(\"%d\\n\",ans[i]);\n    return 0;\n}\n```\n\n$$\nEND\n$$\n\n","slug":"BFS","published":1,"updated":"2022-03-10T09:51:15.871Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0o5i73w0001ascy7x3q601z","content":"<h2 id=\"BFS基本概念\"><a href=\"#BFS基本概念\" class=\"headerlink\" title=\"BFS基本概念\"></a>BFS基本概念</h2><p><strong>广度优先算法</strong>（Breadth-First-Search），简称BFS，是一种图形搜索演算法，最糟糕的情况算法时间复杂度为O(V+E)。简单的说，BFS是从根节点开始，沿着树的宽度遍历树的节点，如果发现目标，则演算终止。</p>\n<h2 id=\"经典例题\"><a href=\"#经典例题\" class=\"headerlink\" title=\"经典例题\"></a><strong>经典例题</strong></h2><hr>\n<h3 id=\"1-填涂颜色\"><a href=\"#1-填涂颜色\" class=\"headerlink\" title=\"1. 填涂颜色\"></a>1. 填涂颜色</h3><h4 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h4><p>由数字$0$组成的方阵中，有一任意形状闭合圈，闭合圈由数字$1$构成，围圈时只走上下左右$4$个方向。现要求把闭合圈内的所有空间都填写成$2$。例如：$6×6$的方阵$(n=6)$，涂色前和涂色后的方阵如下：</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span>\n<span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span>\n<span class=\"token number\">0</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">1</span>\n<span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">1</span>\n<span class=\"token number\">1</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">1</span>\n<span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span>\n-----------\n<span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span>\n<span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span>\n<span class=\"token number\">0</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">2</span> <span class=\"token number\">2</span> <span class=\"token number\">1</span>\n<span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">2</span> <span class=\"token number\">2</span> <span class=\"token number\">2</span> <span class=\"token number\">1</span>\n<span class=\"token number\">1</span> <span class=\"token number\">2</span> <span class=\"token number\">2</span> <span class=\"token number\">2</span> <span class=\"token number\">2</span> <span class=\"token number\">1</span>\n<span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span></code></pre>\n<h4 id=\"输入格式\"><a href=\"#输入格式\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h4><p>每组测试数据第一行一个整数$n(1≤n≤30)$</p>\n<p>接下来$n$行，由$0$和$1$组成的$n×n$的方阵。</p>\n<p>方阵内只有一个闭合圈，圈内至少有一个$0$。</p>\n<h4 id=\"输出格式\"><a href=\"#输出格式\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h4><p>已经填好数字$2$的完整方阵。</p>\n<h4 id=\"输入输出样例\"><a href=\"#输入输出样例\" class=\"headerlink\" title=\"输入输出样例\"></a>输入输出样例</h4><p><strong>输入 #1</strong></p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token number\">6</span>\n<span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span>\n<span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span>\n<span class=\"token number\">0</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">1</span>\n<span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">1</span>\n<span class=\"token number\">1</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">1</span>\n<span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span></code></pre>\n<p><strong>输出 #1</strong></p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span>\n<span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span>\n<span class=\"token number\">0</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">2</span> <span class=\"token number\">2</span> <span class=\"token number\">1</span>\n<span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">2</span> <span class=\"token number\">2</span> <span class=\"token number\">2</span> <span class=\"token number\">1</span>\n<span class=\"token number\">1</span> <span class=\"token number\">2</span> <span class=\"token number\">2</span> <span class=\"token number\">2</span> <span class=\"token number\">2</span> <span class=\"token number\">1</span>\n<span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span></code></pre>\n<h4 id=\"说明-提示\"><a href=\"#说明-提示\" class=\"headerlink\" title=\"说明/提示\"></a>说明/提示</h4><p>$1≤n≤30$</p>\n<h4 id=\"答案解析\"><a href=\"#答案解析\" class=\"headerlink\" title=\"答案解析\"></a>答案解析</h4><pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream></span></span>\nusing namespace std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> num<span class=\"token punctuation\">[</span><span class=\"token number\">40</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">40</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> c<span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">,</span>k<span class=\"token punctuation\">;</span>\n    cin<span class=\"token operator\">>></span>c<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>c<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;=</span>c<span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        cin<span class=\"token operator\">>></span>num<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t\tnum<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//先认为所有的0都应该被修改,并且真的把它修改成了2;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>c<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//边角上的'2'其实本来不应该被修改的,那我们把他们改回去,改成0</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\t\t\tnum<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\t\n\t\t\tnum<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\t\t\tnum<span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\t\t\tnum<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">//然后来寻找与这些零相邻的'2',它们其实也是被改错了的</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>k<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>k<span class=\"token operator\">&lt;=</span><span class=\"token number\">100</span><span class=\"token punctuation\">;</span>k<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//广度优先搜索 阈值=100 (事实上不需要那么多)</span>\n    \t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>c<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    \t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;=</span>c<span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    \t\t    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">!=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    \t\t\t    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>num<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">||</span><span class=\"token operator\">!</span>num<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">||</span><span class=\"token operator\">!</span>num<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">||</span><span class=\"token operator\">!</span>num<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    \t\t\t\t    num<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> \n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>c<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;=</span>c<span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        cout<span class=\"token operator\">&lt;&lt;</span>num<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n        cout<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<p>当然，本题仍可以用DFS来做：</p>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstdio></span></span>\nusing namespace std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> n<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">32</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">32</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">>=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> x <span class=\"token operator\">&lt;=</span> n <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> y <span class=\"token operator\">>=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> y <span class=\"token operator\">&lt;=</span> n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token operator\">||</span> a<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> \n        \t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">else</span>\n        <span class=\"token punctuation\">&#123;</span>\n        \ta<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n            <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n            <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span> i<span class=\"token punctuation\">)</span>\n    \t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span> j<span class=\"token punctuation\">)</span>\n    \t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span> i<span class=\"token punctuation\">)</span>\n    \t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span> j<span class=\"token punctuation\">)</span>\n    \t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> \n    \t\t\ta<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    \t\t<span class=\"token keyword\">else</span> \n    \t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> \n    \t\t\t\ta<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span> i<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n    \t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span> j<span class=\"token punctuation\">)</span> \n    \t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<p>注意：dfs在先搜索的时候应该搜索到矩阵的外面一圈$(0， n + 1)$ 否则的话就会出现错误！(边缘处被涂色)</p>\n<hr>\n<h3 id=\"01迷宫\"><a href=\"#01迷宫\" class=\"headerlink\" title=\"01迷宫\"></a>01迷宫</h3><h4 id=\"题目描述-1\"><a href=\"#题目描述-1\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h4><p>有一个仅由数字$0$与$1$组成的$n×n$格迷宫。若你位于一格$0$上，那么你可以移动到相邻$4$格中的某一格$1$上，同样若你位于一格$1$上，那么你可以移动到相邻$4$格中的某一格$0$上。</p>\n<p>你的任务是：对于给定的迷宫，询问从某一格开始能移动到多少个格子（包含自身）。</p>\n<h4 id=\"输入格式-1\"><a href=\"#输入格式-1\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h4><p>第$1$行为两个正整数$n,m$。</p>\n<p>下面$n$行，每行<em>$n$</em>个字符，字符只可能是$0$或者$1$，字符之间没有空格。</p>\n<p>接下来$m$行，每行$2$个用空格分隔的正整数$i,j$，对应了迷宫中第$i$行第$j$列的一个格子，询问从这一格开始能移动到多少格。</p>\n<h4 id=\"输出格式-1\"><a href=\"#输出格式-1\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h4><p>$m$行，对于每个询问输出相应答案。</p>\n<h4 id=\"输入输出样例-1\"><a href=\"#输入输出样例-1\" class=\"headerlink\" title=\"输入输出样例\"></a>输入输出样例</h4><p><strong>输入 #1</strong></p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token number\">2</span> <span class=\"token number\">2</span>\n01\n<span class=\"token number\">10</span>\n<span class=\"token number\">1</span> <span class=\"token number\">1</span>\n<span class=\"token number\">2</span> <span class=\"token number\">2</span></code></pre>\n<p><strong>输出 #1</strong></p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token number\">4</span>\n<span class=\"token number\">4</span></code></pre>\n<h4 id=\"说明-提示-1\"><a href=\"#说明-提示-1\" class=\"headerlink\" title=\"说明/提示\"></a>说明/提示</h4><p>对于20%的数据，$n≤10$；</p>\n<p>对于40%的数据，$n≤50$；</p>\n<p>对于50%的数据，$m≤5$；</p>\n<p>对于60%的数据，$n<em>≤100,</em>m≤100$；</p>\n<p>对于100%的数据，$n<em>≤1000,</em>m≤100000$。</p>\n<h4 id=\"答案解析-1\"><a href=\"#答案解析-1\" class=\"headerlink\" title=\"答案解析\"></a>答案解析</h4><p>BFS，70分代码：</p>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;cstring></span></span>\nusing namespace std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">mg</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\nbool map<span class=\"token punctuation\">[</span><span class=\"token number\">1001</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1001</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nbool flag<span class=\"token punctuation\">[</span><span class=\"token number\">1001</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1001</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nmg q<span class=\"token punctuation\">[</span><span class=\"token number\">1000001</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> m<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">bfs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\tcin<span class=\"token operator\">>></span>n<span class=\"token operator\">>></span>m<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">char</span> ch<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\tcin<span class=\"token operator\">>></span>ch<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ch<span class=\"token operator\">==</span><span class=\"token char\">'1'</span><span class=\"token punctuation\">)</span>\n\t\t\t\tmap<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>true<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>m<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">;</span>\n\t\tcin<span class=\"token operator\">>></span>x<span class=\"token operator\">>></span>y<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">bfs</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">bfs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> dx<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> dy<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> ans<span class=\"token punctuation\">,</span>f<span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">,</span>newx<span class=\"token punctuation\">,</span>newy<span class=\"token punctuation\">;</span>\n    ans<span class=\"token operator\">=</span>f<span class=\"token operator\">=</span>r<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    q<span class=\"token punctuation\">[</span>f<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>x<span class=\"token operator\">=</span>x<span class=\"token punctuation\">;</span>\n    q<span class=\"token punctuation\">[</span>f<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>y<span class=\"token operator\">=</span>y<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">,</span>false<span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    flag<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>true<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>f<span class=\"token operator\">&lt;=</span>r<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n    \t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">4</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    \t<span class=\"token punctuation\">&#123;</span>\n    \t\tnewx<span class=\"token operator\">=</span>q<span class=\"token punctuation\">[</span>f<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>x<span class=\"token operator\">+</span>dx<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    \t\tnewy<span class=\"token operator\">=</span>q<span class=\"token punctuation\">[</span>f<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>y<span class=\"token operator\">+</span>dy<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    \t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>newx<span class=\"token operator\">></span><span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> newx<span class=\"token operator\">&lt;=</span>n <span class=\"token operator\">&amp;&amp;</span> newy<span class=\"token operator\">></span><span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> newy<span class=\"token operator\">&lt;=</span>n <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>flag<span class=\"token punctuation\">[</span>newx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>newy<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    \t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">[</span>q<span class=\"token punctuation\">[</span>f<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>q<span class=\"token punctuation\">[</span>f<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> map<span class=\"token punctuation\">[</span>newx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>newy<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">[</span>q<span class=\"token punctuation\">[</span>f<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>q<span class=\"token punctuation\">[</span>f<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> map<span class=\"token punctuation\">[</span>newx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>newy<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    \t\t\t<span class=\"token punctuation\">&#123;</span>\n    \t\t\t\tr<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    \t\t\t\tans<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    \t\t\t\tflag<span class=\"token punctuation\">[</span>newx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>newy<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>true<span class=\"token punctuation\">;</span>\n    \t\t\t\tq<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>x<span class=\"token operator\">=</span>newx<span class=\"token punctuation\">;</span>\n    \t\t\t\tq<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>y<span class=\"token operator\">=</span>newy<span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\tf<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tcout<span class=\"token operator\">&lt;&lt;</span>ans<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">&#125;</span> </code></pre>\n<p>有三个点TEL，所以对代码进行一定时间优化，学名叫记忆化搜索，以时间换空间，优化如下：</p>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;cstring></span></span>\nusing namespace std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">mg</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\nbool map<span class=\"token punctuation\">[</span><span class=\"token number\">1001</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1001</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nbool flag<span class=\"token punctuation\">[</span><span class=\"token number\">1001</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1001</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">1001</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1001</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nmg q<span class=\"token punctuation\">[</span><span class=\"token number\">5000001</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> m<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">bfs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\tcin<span class=\"token operator\">>></span>n<span class=\"token operator\">>></span>m<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">char</span> ch<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\tcin<span class=\"token operator\">>></span>ch<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ch<span class=\"token operator\">==</span><span class=\"token char\">'1'</span><span class=\"token punctuation\">)</span>\n\t\t\t\tmap<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>true<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>m<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">;</span>\n\t\tcin<span class=\"token operator\">>></span>x<span class=\"token operator\">>></span>y<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token function\">bfs</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">else</span>\n\t\t\tcout<span class=\"token operator\">&lt;&lt;</span>a<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">bfs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> dx<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> dy<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> ans<span class=\"token punctuation\">,</span>f<span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">,</span>newx<span class=\"token punctuation\">,</span>newy<span class=\"token punctuation\">;</span>\n    ans<span class=\"token operator\">=</span>f<span class=\"token operator\">=</span>r<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    q<span class=\"token punctuation\">[</span>f<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>x<span class=\"token operator\">=</span>x<span class=\"token punctuation\">;</span>\n    q<span class=\"token punctuation\">[</span>f<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>y<span class=\"token operator\">=</span>y<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">,</span>false<span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    flag<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>true<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>f<span class=\"token operator\">&lt;=</span>r<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n    \t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">4</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    \t<span class=\"token punctuation\">&#123;</span>\n    \t\tnewx<span class=\"token operator\">=</span>q<span class=\"token punctuation\">[</span>f<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>x<span class=\"token operator\">+</span>dx<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    \t\tnewy<span class=\"token operator\">=</span>q<span class=\"token punctuation\">[</span>f<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>y<span class=\"token operator\">+</span>dy<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    \t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>newx<span class=\"token operator\">></span><span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> newx<span class=\"token operator\">&lt;=</span>n <span class=\"token operator\">&amp;&amp;</span> newy<span class=\"token operator\">></span><span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> newy<span class=\"token operator\">&lt;=</span>n <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>flag<span class=\"token punctuation\">[</span>newx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>newy<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    \t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">[</span>q<span class=\"token punctuation\">[</span>f<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>q<span class=\"token punctuation\">[</span>f<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> map<span class=\"token punctuation\">[</span>newx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>newy<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">[</span>q<span class=\"token punctuation\">[</span>f<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>q<span class=\"token punctuation\">[</span>f<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> map<span class=\"token punctuation\">[</span>newx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>newy<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    \t\t\t<span class=\"token punctuation\">&#123;</span>\n    \t\t\t\tr<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    \t\t\t\tans<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    \t\t\t\tflag<span class=\"token punctuation\">[</span>newx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>newy<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>true<span class=\"token punctuation\">;</span>\n    \t\t\t\tq<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>x<span class=\"token operator\">=</span>newx<span class=\"token punctuation\">;</span>\n    \t\t\t\tq<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>y<span class=\"token operator\">=</span>newy<span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\tf<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\t\t\t\ta<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>ans<span class=\"token punctuation\">;</span>\n\tcout<span class=\"token operator\">&lt;&lt;</span>ans<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">&#125;</span> </code></pre>\n<p>当然，本题也可以用DFS来做，读者可以先自行写一写，不要看下面的答案：</p>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;cstdio></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;cstring></span></span>\n<span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span>m<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> ans<span class=\"token punctuation\">[</span><span class=\"token number\">100002</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>f<span class=\"token punctuation\">[</span><span class=\"token number\">1002</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1002</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">char</span> s<span class=\"token punctuation\">[</span><span class=\"token number\">1002</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1002</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> r<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> c<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> z<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> lll<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>r<span class=\"token operator\">&lt;</span><span class=\"token number\">0</span> <span class=\"token operator\">||</span> r<span class=\"token operator\">>=</span>n <span class=\"token operator\">||</span> c<span class=\"token operator\">&lt;</span><span class=\"token number\">0</span> <span class=\"token operator\">||</span> c<span class=\"token operator\">>=</span>n <span class=\"token operator\">||</span> f<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">]</span><span class=\"token operator\">!=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">||</span> s<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token char\">'0'</span><span class=\"token operator\">!=</span>z<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    f<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>lll<span class=\"token punctuation\">;</span>\n    ans<span class=\"token punctuation\">[</span>lll<span class=\"token punctuation\">]</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>r<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">,</span><span class=\"token operator\">!</span>z<span class=\"token punctuation\">,</span>lll<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>r<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">,</span><span class=\"token operator\">!</span>z<span class=\"token punctuation\">,</span>lll<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">,</span>c<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token operator\">!</span>z<span class=\"token punctuation\">,</span>lll<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">,</span>c<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token operator\">!</span>z<span class=\"token punctuation\">,</span>lll<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    \t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\"</span><span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>m<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        x<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n        y<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n            <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token char\">'0'</span><span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">else</span> \n            ans<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>ans<span class=\"token punctuation\">[</span>f<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>m<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    \t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span>ans<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<script type=\"math/tex; mode=display\">\nEND</script>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"BFS基本概念\"><a href=\"#BFS基本概念\" class=\"headerlink\" title=\"BFS基本概念\"></a>BFS基本概念</h2><p><strong>广度优先算法</strong>（Breadth-First-Search），简称BFS，是一种图形搜索演算法，最糟糕的情况算法时间复杂度为O(V+E)。简单的说，BFS是从根节点开始，沿着树的宽度遍历树的节点，如果发现目标，则演算终止。</p>\n<h2 id=\"经典例题\"><a href=\"#经典例题\" class=\"headerlink\" title=\"经典例题\"></a><strong>经典例题</strong></h2><hr>\n<h3 id=\"1-填涂颜色\"><a href=\"#1-填涂颜色\" class=\"headerlink\" title=\"1. 填涂颜色\"></a>1. 填涂颜色</h3><h4 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h4><p>由数字$0$组成的方阵中，有一任意形状闭合圈，闭合圈由数字$1$构成，围圈时只走上下左右$4$个方向。现要求把闭合圈内的所有空间都填写成$2$。例如：$6×6$的方阵$(n=6)$，涂色前和涂色后的方阵如下：</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span>\n<span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span>\n<span class=\"token number\">0</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">1</span>\n<span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">1</span>\n<span class=\"token number\">1</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">1</span>\n<span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span>\n-----------\n<span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span>\n<span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span>\n<span class=\"token number\">0</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">2</span> <span class=\"token number\">2</span> <span class=\"token number\">1</span>\n<span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">2</span> <span class=\"token number\">2</span> <span class=\"token number\">2</span> <span class=\"token number\">1</span>\n<span class=\"token number\">1</span> <span class=\"token number\">2</span> <span class=\"token number\">2</span> <span class=\"token number\">2</span> <span class=\"token number\">2</span> <span class=\"token number\">1</span>\n<span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span></code></pre>\n<h4 id=\"输入格式\"><a href=\"#输入格式\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h4><p>每组测试数据第一行一个整数$n(1≤n≤30)$</p>\n<p>接下来$n$行，由$0$和$1$组成的$n×n$的方阵。</p>\n<p>方阵内只有一个闭合圈，圈内至少有一个$0$。</p>\n<h4 id=\"输出格式\"><a href=\"#输出格式\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h4><p>已经填好数字$2$的完整方阵。</p>\n<h4 id=\"输入输出样例\"><a href=\"#输入输出样例\" class=\"headerlink\" title=\"输入输出样例\"></a>输入输出样例</h4><p><strong>输入 #1</strong></p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token number\">6</span>\n<span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span>\n<span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span>\n<span class=\"token number\">0</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">1</span>\n<span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">1</span>\n<span class=\"token number\">1</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">1</span>\n<span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span></code></pre>\n<p><strong>输出 #1</strong></p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span>\n<span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span>\n<span class=\"token number\">0</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">2</span> <span class=\"token number\">2</span> <span class=\"token number\">1</span>\n<span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">2</span> <span class=\"token number\">2</span> <span class=\"token number\">2</span> <span class=\"token number\">1</span>\n<span class=\"token number\">1</span> <span class=\"token number\">2</span> <span class=\"token number\">2</span> <span class=\"token number\">2</span> <span class=\"token number\">2</span> <span class=\"token number\">1</span>\n<span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span></code></pre>\n<h4 id=\"说明-提示\"><a href=\"#说明-提示\" class=\"headerlink\" title=\"说明/提示\"></a>说明/提示</h4><p>$1≤n≤30$</p>\n<h4 id=\"答案解析\"><a href=\"#答案解析\" class=\"headerlink\" title=\"答案解析\"></a>答案解析</h4><pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream></span></span>\nusing namespace std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> num<span class=\"token punctuation\">[</span><span class=\"token number\">40</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">40</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> c<span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">,</span>k<span class=\"token punctuation\">;</span>\n    cin<span class=\"token operator\">>></span>c<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>c<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;=</span>c<span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        cin<span class=\"token operator\">>></span>num<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t\tnum<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//先认为所有的0都应该被修改,并且真的把它修改成了2;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>c<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//边角上的'2'其实本来不应该被修改的,那我们把他们改回去,改成0</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\t\t\tnum<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\t\n\t\t\tnum<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\t\t\tnum<span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\t\t\tnum<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">//然后来寻找与这些零相邻的'2',它们其实也是被改错了的</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>k<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>k<span class=\"token operator\">&lt;=</span><span class=\"token number\">100</span><span class=\"token punctuation\">;</span>k<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//广度优先搜索 阈值=100 (事实上不需要那么多)</span>\n    \t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>c<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    \t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;=</span>c<span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    \t\t    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">!=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    \t\t\t    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>num<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">||</span><span class=\"token operator\">!</span>num<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">||</span><span class=\"token operator\">!</span>num<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">||</span><span class=\"token operator\">!</span>num<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    \t\t\t\t    num<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> \n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>c<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;=</span>c<span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        cout<span class=\"token operator\">&lt;&lt;</span>num<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n        cout<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<p>当然，本题仍可以用DFS来做：</p>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstdio></span></span>\nusing namespace std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> n<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">32</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">32</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">>=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> x <span class=\"token operator\">&lt;=</span> n <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> y <span class=\"token operator\">>=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> y <span class=\"token operator\">&lt;=</span> n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token operator\">||</span> a<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> \n        \t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">else</span>\n        <span class=\"token punctuation\">&#123;</span>\n        \ta<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n            <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n            <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span> i<span class=\"token punctuation\">)</span>\n    \t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span> j<span class=\"token punctuation\">)</span>\n    \t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span> i<span class=\"token punctuation\">)</span>\n    \t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span> j<span class=\"token punctuation\">)</span>\n    \t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> \n    \t\t\ta<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    \t\t<span class=\"token keyword\">else</span> \n    \t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> \n    \t\t\t\ta<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span> i<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n    \t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span> j<span class=\"token punctuation\">)</span> \n    \t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<p>注意：dfs在先搜索的时候应该搜索到矩阵的外面一圈$(0， n + 1)$ 否则的话就会出现错误！(边缘处被涂色)</p>\n<hr>\n<h3 id=\"01迷宫\"><a href=\"#01迷宫\" class=\"headerlink\" title=\"01迷宫\"></a>01迷宫</h3><h4 id=\"题目描述-1\"><a href=\"#题目描述-1\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h4><p>有一个仅由数字$0$与$1$组成的$n×n$格迷宫。若你位于一格$0$上，那么你可以移动到相邻$4$格中的某一格$1$上，同样若你位于一格$1$上，那么你可以移动到相邻$4$格中的某一格$0$上。</p>\n<p>你的任务是：对于给定的迷宫，询问从某一格开始能移动到多少个格子（包含自身）。</p>\n<h4 id=\"输入格式-1\"><a href=\"#输入格式-1\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h4><p>第$1$行为两个正整数$n,m$。</p>\n<p>下面$n$行，每行<em>$n$</em>个字符，字符只可能是$0$或者$1$，字符之间没有空格。</p>\n<p>接下来$m$行，每行$2$个用空格分隔的正整数$i,j$，对应了迷宫中第$i$行第$j$列的一个格子，询问从这一格开始能移动到多少格。</p>\n<h4 id=\"输出格式-1\"><a href=\"#输出格式-1\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h4><p>$m$行，对于每个询问输出相应答案。</p>\n<h4 id=\"输入输出样例-1\"><a href=\"#输入输出样例-1\" class=\"headerlink\" title=\"输入输出样例\"></a>输入输出样例</h4><p><strong>输入 #1</strong></p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token number\">2</span> <span class=\"token number\">2</span>\n01\n<span class=\"token number\">10</span>\n<span class=\"token number\">1</span> <span class=\"token number\">1</span>\n<span class=\"token number\">2</span> <span class=\"token number\">2</span></code></pre>\n<p><strong>输出 #1</strong></p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token number\">4</span>\n<span class=\"token number\">4</span></code></pre>\n<h4 id=\"说明-提示-1\"><a href=\"#说明-提示-1\" class=\"headerlink\" title=\"说明/提示\"></a>说明/提示</h4><p>对于20%的数据，$n≤10$；</p>\n<p>对于40%的数据，$n≤50$；</p>\n<p>对于50%的数据，$m≤5$；</p>\n<p>对于60%的数据，$n<em>≤100,</em>m≤100$；</p>\n<p>对于100%的数据，$n<em>≤1000,</em>m≤100000$。</p>\n<h4 id=\"答案解析-1\"><a href=\"#答案解析-1\" class=\"headerlink\" title=\"答案解析\"></a>答案解析</h4><p>BFS，70分代码：</p>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;cstring></span></span>\nusing namespace std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">mg</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\nbool map<span class=\"token punctuation\">[</span><span class=\"token number\">1001</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1001</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nbool flag<span class=\"token punctuation\">[</span><span class=\"token number\">1001</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1001</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nmg q<span class=\"token punctuation\">[</span><span class=\"token number\">1000001</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> m<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">bfs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\tcin<span class=\"token operator\">>></span>n<span class=\"token operator\">>></span>m<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">char</span> ch<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\tcin<span class=\"token operator\">>></span>ch<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ch<span class=\"token operator\">==</span><span class=\"token char\">'1'</span><span class=\"token punctuation\">)</span>\n\t\t\t\tmap<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>true<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>m<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">;</span>\n\t\tcin<span class=\"token operator\">>></span>x<span class=\"token operator\">>></span>y<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">bfs</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">bfs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> dx<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> dy<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> ans<span class=\"token punctuation\">,</span>f<span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">,</span>newx<span class=\"token punctuation\">,</span>newy<span class=\"token punctuation\">;</span>\n    ans<span class=\"token operator\">=</span>f<span class=\"token operator\">=</span>r<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    q<span class=\"token punctuation\">[</span>f<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>x<span class=\"token operator\">=</span>x<span class=\"token punctuation\">;</span>\n    q<span class=\"token punctuation\">[</span>f<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>y<span class=\"token operator\">=</span>y<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">,</span>false<span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    flag<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>true<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>f<span class=\"token operator\">&lt;=</span>r<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n    \t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">4</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    \t<span class=\"token punctuation\">&#123;</span>\n    \t\tnewx<span class=\"token operator\">=</span>q<span class=\"token punctuation\">[</span>f<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>x<span class=\"token operator\">+</span>dx<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    \t\tnewy<span class=\"token operator\">=</span>q<span class=\"token punctuation\">[</span>f<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>y<span class=\"token operator\">+</span>dy<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    \t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>newx<span class=\"token operator\">></span><span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> newx<span class=\"token operator\">&lt;=</span>n <span class=\"token operator\">&amp;&amp;</span> newy<span class=\"token operator\">></span><span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> newy<span class=\"token operator\">&lt;=</span>n <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>flag<span class=\"token punctuation\">[</span>newx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>newy<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    \t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">[</span>q<span class=\"token punctuation\">[</span>f<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>q<span class=\"token punctuation\">[</span>f<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> map<span class=\"token punctuation\">[</span>newx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>newy<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">[</span>q<span class=\"token punctuation\">[</span>f<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>q<span class=\"token punctuation\">[</span>f<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> map<span class=\"token punctuation\">[</span>newx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>newy<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    \t\t\t<span class=\"token punctuation\">&#123;</span>\n    \t\t\t\tr<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    \t\t\t\tans<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    \t\t\t\tflag<span class=\"token punctuation\">[</span>newx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>newy<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>true<span class=\"token punctuation\">;</span>\n    \t\t\t\tq<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>x<span class=\"token operator\">=</span>newx<span class=\"token punctuation\">;</span>\n    \t\t\t\tq<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>y<span class=\"token operator\">=</span>newy<span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\tf<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tcout<span class=\"token operator\">&lt;&lt;</span>ans<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">&#125;</span> </code></pre>\n<p>有三个点TEL，所以对代码进行一定时间优化，学名叫记忆化搜索，以时间换空间，优化如下：</p>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;cstring></span></span>\nusing namespace std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">mg</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\nbool map<span class=\"token punctuation\">[</span><span class=\"token number\">1001</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1001</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nbool flag<span class=\"token punctuation\">[</span><span class=\"token number\">1001</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1001</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">1001</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1001</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nmg q<span class=\"token punctuation\">[</span><span class=\"token number\">5000001</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> m<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">bfs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\tcin<span class=\"token operator\">>></span>n<span class=\"token operator\">>></span>m<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">char</span> ch<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\tcin<span class=\"token operator\">>></span>ch<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ch<span class=\"token operator\">==</span><span class=\"token char\">'1'</span><span class=\"token punctuation\">)</span>\n\t\t\t\tmap<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>true<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>m<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">;</span>\n\t\tcin<span class=\"token operator\">>></span>x<span class=\"token operator\">>></span>y<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token function\">bfs</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">else</span>\n\t\t\tcout<span class=\"token operator\">&lt;&lt;</span>a<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">bfs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> dx<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> dy<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> ans<span class=\"token punctuation\">,</span>f<span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">,</span>newx<span class=\"token punctuation\">,</span>newy<span class=\"token punctuation\">;</span>\n    ans<span class=\"token operator\">=</span>f<span class=\"token operator\">=</span>r<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    q<span class=\"token punctuation\">[</span>f<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>x<span class=\"token operator\">=</span>x<span class=\"token punctuation\">;</span>\n    q<span class=\"token punctuation\">[</span>f<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>y<span class=\"token operator\">=</span>y<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">,</span>false<span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    flag<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>true<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>f<span class=\"token operator\">&lt;=</span>r<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n    \t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">4</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    \t<span class=\"token punctuation\">&#123;</span>\n    \t\tnewx<span class=\"token operator\">=</span>q<span class=\"token punctuation\">[</span>f<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>x<span class=\"token operator\">+</span>dx<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    \t\tnewy<span class=\"token operator\">=</span>q<span class=\"token punctuation\">[</span>f<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>y<span class=\"token operator\">+</span>dy<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    \t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>newx<span class=\"token operator\">></span><span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> newx<span class=\"token operator\">&lt;=</span>n <span class=\"token operator\">&amp;&amp;</span> newy<span class=\"token operator\">></span><span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> newy<span class=\"token operator\">&lt;=</span>n <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>flag<span class=\"token punctuation\">[</span>newx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>newy<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    \t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">[</span>q<span class=\"token punctuation\">[</span>f<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>q<span class=\"token punctuation\">[</span>f<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> map<span class=\"token punctuation\">[</span>newx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>newy<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">[</span>q<span class=\"token punctuation\">[</span>f<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>q<span class=\"token punctuation\">[</span>f<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> map<span class=\"token punctuation\">[</span>newx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>newy<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    \t\t\t<span class=\"token punctuation\">&#123;</span>\n    \t\t\t\tr<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    \t\t\t\tans<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    \t\t\t\tflag<span class=\"token punctuation\">[</span>newx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>newy<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>true<span class=\"token punctuation\">;</span>\n    \t\t\t\tq<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>x<span class=\"token operator\">=</span>newx<span class=\"token punctuation\">;</span>\n    \t\t\t\tq<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>y<span class=\"token operator\">=</span>newy<span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\tf<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\t\t\t\ta<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>ans<span class=\"token punctuation\">;</span>\n\tcout<span class=\"token operator\">&lt;&lt;</span>ans<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">&#125;</span> </code></pre>\n<p>当然，本题也可以用DFS来做，读者可以先自行写一写，不要看下面的答案：</p>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;cstdio></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;cstring></span></span>\n<span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span>m<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> ans<span class=\"token punctuation\">[</span><span class=\"token number\">100002</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>f<span class=\"token punctuation\">[</span><span class=\"token number\">1002</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1002</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">char</span> s<span class=\"token punctuation\">[</span><span class=\"token number\">1002</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1002</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> r<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> c<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> z<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> lll<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>r<span class=\"token operator\">&lt;</span><span class=\"token number\">0</span> <span class=\"token operator\">||</span> r<span class=\"token operator\">>=</span>n <span class=\"token operator\">||</span> c<span class=\"token operator\">&lt;</span><span class=\"token number\">0</span> <span class=\"token operator\">||</span> c<span class=\"token operator\">>=</span>n <span class=\"token operator\">||</span> f<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">]</span><span class=\"token operator\">!=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">||</span> s<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token char\">'0'</span><span class=\"token operator\">!=</span>z<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    f<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>lll<span class=\"token punctuation\">;</span>\n    ans<span class=\"token punctuation\">[</span>lll<span class=\"token punctuation\">]</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>r<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">,</span><span class=\"token operator\">!</span>z<span class=\"token punctuation\">,</span>lll<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>r<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">,</span><span class=\"token operator\">!</span>z<span class=\"token punctuation\">,</span>lll<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">,</span>c<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token operator\">!</span>z<span class=\"token punctuation\">,</span>lll<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">,</span>c<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token operator\">!</span>z<span class=\"token punctuation\">,</span>lll<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    \t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\"</span><span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>m<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        x<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n        y<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n            <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token char\">'0'</span><span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">else</span> \n            ans<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>ans<span class=\"token punctuation\">[</span>f<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>m<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    \t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span>ans<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<script type=\"math/tex; mode=display\">\nEND</script>"},{"title":"背包问题","date":"2022-03-10T13:35:50.000Z","_content":"\n背包问题(backpack problem)是最经典也是最简单的一类动态规划(dynamic programming)问题，本篇文章重点讲解背包问题中的0-1背包，完全背包，以及多重背包三大问题，顺带也会说明一下动态规划的基本策略，**适合完全不理解相关算法的初学者**。\n\n## 0-1背包(0-1 Knapsack Problem)\n\n### 1.1 问题描述\n\n一共有$N$件物品，每件物品的价格为$W_i$，价值为$V_i$，在总重量不超过背包承载上限$W_{max}$的情况下，如何分配使得装入背包的价值最高？\n\n### 1.2 问题分析\n\n最先想到的就是暴力穷举法，把每种可能的情况都装进去然后找到最大的情况，但是这样做显然是极其低效的，总的时间复杂度是$O(2^n)$.\n\n因此，这里引用了动态规划的思路。在这里我们以此为例，每一组的价格和价值如图所示，假设这里背包的最大重量为$10$。\n\n| N=5    | 1    | 2    | 3    | 4    | 5    |\n| :----- | :--- | :--- | :--- | :--- | :--- |\n| Weight | 1    | 3    | 4    | 5    | 2    |\n| Value  | 5    | 10   | 18   | 20   | 7    |\n\n那么接下来我们要做的事情是，创建一个二维数组`dp[i][j]`，这样的数组表示将前$i$件商品装入重量为j的背包中可以获得的最大价值，其中$$0\\leq i\\leq N\\qquad 0\\leq j\\leq W_{max}$$\n\n现在我们来看一下，按照这样的规则得到的二维数组是什么样子：\n\n|      | 1    | 2    | 3    | 4    | 5    |\n| :--- | :--- | :--- | :--- | :--- | :--- |\n| 1    | 5    | 5    | 5    | 5    | 5    |\n| 2    | 5    | 5    | 5    | 5    | 7    |\n| 3    | 5    | 10   | 10   | 10   | 12   |\n| 4    | 5    | 15   | 18   | 18   | 18   |\n| 5    | 5    | 15   | 23   | 23   | 23   |\n| 6    | 5    | 15   | 23   | 25   | 25   |\n| 7    | 5    | 15   | 28   | 28   | 30   |\n| 8    | 5    | 15   | 33   | 33   | 33   |\n| 9    | 5    | 15   | 33   | 38   | 38   |\n| 10   | 5    | 15   | 33   | 43   | 43   |\n\n最后的答案就是数组右下角的结果，那么我们又该如何通过程序得到这样的数组呢？\n\n当我们只有第一件物品的时候（数组的第一列），无论背包容量有多大都只能装下一个物品，所得到的价值也只有第一个物品的价值，此例中即为5.\n\n当我们拥有第二件物品的时候，就要做一个选择，**要么装入该物品（前提是能装得下），要么不装入该物品。**\n\n那么有人可能就会问了，既然是可以装得下，那么为什么不装入这个物品呢？如果一个物品很沉很沉价值又非常之低，那么我们转入了这个物品的总价值反而要少于装了其他同等重量物品的价值，这个时候装入该物品就显得很多余了。\n\n回到重点，对于这个二维数组来说，**不装入第$i$件物品的意思是`dp[i-1][j]`，装入第$i$件物品的意思是`dp[i-1][j-w[i]] + v[i]`.**\n\n请认真仔细的对照上面的数组，好好理解一下上面的表达式。那么我们得到的状态转移方程即为：$$\ndp[i][j]=max(dp[i-1][j],\\ dp[i-1][j-w[i]] + v[i])\n$$\n### 1.3 python代码\n\n```python\nimport numpy as np\nn = 5\nw_max = 10\nw = [1, 3, 4, 5, 2]\nv = [5, 10, 18 ,20, 7]\ndp = np.zeros((n ,w_max + 1),dtype = np.int)\nfor i in range(0, n):\n    for j in range(0,w_max + 1):\n        if j - w[i] >= 0:\n            dp[i][j] = max(dp[i-1][j],dp[i-1][j-w[i]] + v[i])\n        else:\n            dp[i][j] = dp[i-1][j]\nprint(dp[n - 1][w_max])#43\n```\n\n### 1.4 算法优化\n\n我们可以看到，这样的0-1背包我们用时间复杂度为$O(W·N)$就可以解决，那么当$W_{max}$很大的时候，虽然时间复杂度是足够的，但是空间复杂度依旧为$O(W·N)$，这就导致了二维数组可能会超出内存限制。\n\n实际上，我们不难发现这样一个二维数组是从上至下一层一层进行的（上面的表格是从左至右），在每次进行下一层计算的时候，只有上一层的数据是有用的，其余的数据就没有任何作用了。即，`dp[i][j]`的值只与`dp[i-1][0]… … dp[i-1][j]`是有关系的。\n\n因此，我们可以利用这个特性，采用滚动数组的方法对空间复杂度进行优化，使其从二维变为长度为 $W_{max}$的一维数组。这种方法在动态规划中是一种常见的策略。\n\n至于为什么是一维数组，而不是两行数组(`dp[i][j]`与`dp[i-1][j]`)，我们只需要在循环j的时候做**逆向计算**，从最后一个物品往前推，这样就可以避免上一组数据被覆盖掉。（仔细想一想为什么）\n\n优化后的部分代码如下：\n\n```python\ndp = np.zeros(w_max + 1,dtype = np.int)\nfor i in range(0, n):\n    for j in range(w_max, -1, -1):\n        if j - w[i] >= 0:\n            dp[j] = max(dp[j],dp[j-w[i]] + v[i])\n```\n\n## 完全背包 (Unbounded Knapsack Problem)\n\n### 2.1 问题描述\n\n完全背包与0-1背包唯一的区别在于完全背包中每种物品可以有无限多个。\n\n### 2.2 问题分析\n\n对于完全背包问题，我们很自然的就能想到设置一个$$性价比=\\frac{V_i}{W_i}$$，这样一来只需要不停的装性价比最高的商品就能获得最优解。\n\n然而，事实上这样的作法很多时候并不能得到最高的答案，当背包即将装满但还有一定空余时（没办法再装下一个的时候），装性价比最高的商品不见得比装性价比不那么高但是能将背包装满的商品。\n\n事实上，上面的想法是完全可以进行下去的，只是稍稍麻烦一点。我们依旧围绕0-1背包的角度思考，只需要稍加修改即可。依旧是上一组数据，只不过每个物品可以无限拿取。\n\n| N=5    | 1    | 2    | 3    | 4    | 5    |\n| :----- | :--- | :--- | :--- | :--- | :--- |\n| Weight | 1    | 3    | 4    | 5    | 2    |\n| Value  | 5    | 10   | 18   | 20   | 7    |\n\n对于完全背包问题，我们依旧是做一个选择，装与不装第$i$件物品：\n\n- 不把物品$i$装入背包：`dp[i][j]=dp[i-1][j]`\n- 把物品$i$装入背包：`dp[i][j]=dp[i][j-w[i]] + v[i]`\n\n(相比于0-1背包，唯一的区别就是`dp[i][j]=dp[i-1][j-w[i]] + v[i]`\n\n这里肯定有很多小伙伴一脸懵逼，不妨停下来多思考思考。我在写这个文章的时候在这里也停顿了很久，不知道如何言简意赅的来阐述这样的思路。\n\n0-1背包当取走第$i$个物品时，需要找到第$i-1$个物品的最优解中，当取走第$i$个物品时，它也可以再次取走自己，所以只需要找到第$i$个物品的最优解即可。\n\n因此，完全背包的状态转移方程为：$$\ndp[i][j]=max(dp[i-1][j],\\ dp[i][j-w[i]] + v[i])\n$$\n\n### 2.3 算法优化\n\n对于完全背包依旧可以优化空间复杂度，如同0-1背包一样将其压缩到一维数组。唯一的不同点在于完全背包的滚动数组在循环j的时候需要**正向计算**。从第一个物品往后推，这样就可以避免上一组数据被覆盖掉。（仔细想一想为什么）\n\n优化后的部分代码如下：\n\n```python\ndp = np.zeros((w_max + 1,dtype = np.int)\nfor i in range(0, n)\n    for j in range(0,w_max + 1):\n        if j - w[i] >= 0:\n            dp[j] = max(dp[j],dp[j-w[i]] + v[i])\n```\n\n一件很有趣的事情是，我们回过头来看*1.4节*的0-1背包优化算法，有没有发现他们长得十分相似呢？\n\n此外，对于物品是无限的情况来说，如果有一个物品重量超过另一个物品然而价值又低于另一个物品，那么这样的物品就可以扔掉了。\n\n我们只需要花费$O(N^2)$的时间复杂度进行一次搜索，或许可以排除掉大量没有价值的商品，这样可以极大的节约动态规划的时间开销和空间开销。\n\n### 2.4 另一种思路\n\n我们回过头来看2.1节提到的思路，不妨在此基础上想一下，我们完全可以将完全背包转换成0-1背包。\n\n虽然每件商品的数量是无限的，但是总量$W_{max}$是有限的。因此我们可以计算出每件商品最多可以装入$$\\frac{W_{max}}{W_i}$$个，这样一来，我们就拥有了有限多个商品。\n\n当然，这种思路根本谈不上优化，因为其完全没有降低时间复杂度和空间复杂度，只是提供了另一种思路罢了。\n\n```python\ndp = np.zeros((n ,w_max + 1),dtype = np.int)\nfor i in range(0, n):\n    for j in range(0, w_max + 1):\n        for k in range(0, w_max//w[i] + 1):\n            if j - k * w[i] >= 0:\n                dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - k * w[i]] + k * v[i])\n```\n\n更高效的做法是使用二进制，即将每种物品的**取的个数**都用$$V_i=\\sum2^i\\quad 0\\leq i\\leq\\log_2V_i$$来表示（这是一个常识，任何数字都可以分解成以$2$为指数的数组），如$13$，我们可以表示为$13= 2^0 + 2^2 +2^3$.\n\n我们的目的就是要找出第i件物品要取几个好，那么与其用传统的方法每次取一个，然后询问取好呢还是不取好呢，不如用二进制的方法来代替。\n\n举例说明，第一件物品最多可以取$13$个，假设取$7$个是最优解，那么我们第一次询问取$2^0$个该物品好不好，然后询问$2^1,2^2,2^3… …$，最终得到了 $2^0 +2^2+2^1=7$这样的一个结果，我们只需要询问$4$次而非$13$次，这是一个从$n$降到$\\log n$级别的优化。\n\n现在，小伙伴们可能已经彻底蒙圈了，或许能稍稍理解这样的思想，但是却怎么也写不出来，没关系，只要稍微理解以上的思路就好，我们先来看下一节。\n\n## 多重背包(bounded knapsack problem)\n\n### 3.1 问题描述\n\n多重背包与前面的完全背包的不同点在于每种物品是有限多个。\n\n### 3.2 问题分析\n\n我们在*2.4节*中提到，完全背包每种物品其实也是有上限的，即加和不应当超过背包的最大承载重量。那么，既然完全背包可以转化成0-1背包问题进行求解，多重背包自然也可以。\n\n我们依旧是分为两个部分，装与不装。\n\n- 不把物品$i$装入背包：`dp[i][j]=dp[i-1][j]`\n- 把物品$i$装入背包：因为每种物品有数量限制，因此我们需要在限制数量中找到最大的价值，此时`dp[i][j]=dp[i-1][j-k*w[i]] + k*v[i-1]`\n\n因此，状态转移方程为：$$\ndp[i][j]=max(dp[i-1][j],\\ dp[i][j-k*w[i]] + k*v[i])\n$$\n\n### 3.3 python代码\n\n```python\nimport numpy as np\nn = 5\nw_max = 10\nw = [1, 3, 4, 5, 2]    #weight\nv = [5, 10, 18 ,20, 7] #value\nmaxx = [3, 5, 1, 8, 2] #maximum number\ndp = np.zeros((n ,w_max + 1),dtype = np.int)\nfor i in range(0, n):\n    for j in range(0, w_max + 1):\n        for k in range(0, min(w_max//w[i], maxx[i]) + 1):\n            if j - k * w[i] >= 0:\n                dp[i][j] = max(dp[i - 1][j],\n                dp[i - 1][j - k * w[i]] + k * v[i])\nprint(dp)\nprint(dp[n - 1][w_max]) #42\n```\n\n### 3.4 算法优化\n\n无论是完全背包还是多重背包，都存在着一种优化方式，就是2进制优化。","source":"_posts/Backpack.md","raw":"---\ntitle: 背包问题\ndate: 2022-03-10 21:35:50\ntags:\n\t- algorithm\n\t- 背包问题\n\t- DP\ncategories:\n\t- algorithm\n\n---\n\n背包问题(backpack problem)是最经典也是最简单的一类动态规划(dynamic programming)问题，本篇文章重点讲解背包问题中的0-1背包，完全背包，以及多重背包三大问题，顺带也会说明一下动态规划的基本策略，**适合完全不理解相关算法的初学者**。\n\n## 0-1背包(0-1 Knapsack Problem)\n\n### 1.1 问题描述\n\n一共有$N$件物品，每件物品的价格为$W_i$，价值为$V_i$，在总重量不超过背包承载上限$W_{max}$的情况下，如何分配使得装入背包的价值最高？\n\n### 1.2 问题分析\n\n最先想到的就是暴力穷举法，把每种可能的情况都装进去然后找到最大的情况，但是这样做显然是极其低效的，总的时间复杂度是$O(2^n)$.\n\n因此，这里引用了动态规划的思路。在这里我们以此为例，每一组的价格和价值如图所示，假设这里背包的最大重量为$10$。\n\n| N=5    | 1    | 2    | 3    | 4    | 5    |\n| :----- | :--- | :--- | :--- | :--- | :--- |\n| Weight | 1    | 3    | 4    | 5    | 2    |\n| Value  | 5    | 10   | 18   | 20   | 7    |\n\n那么接下来我们要做的事情是，创建一个二维数组`dp[i][j]`，这样的数组表示将前$i$件商品装入重量为j的背包中可以获得的最大价值，其中$$0\\leq i\\leq N\\qquad 0\\leq j\\leq W_{max}$$\n\n现在我们来看一下，按照这样的规则得到的二维数组是什么样子：\n\n|      | 1    | 2    | 3    | 4    | 5    |\n| :--- | :--- | :--- | :--- | :--- | :--- |\n| 1    | 5    | 5    | 5    | 5    | 5    |\n| 2    | 5    | 5    | 5    | 5    | 7    |\n| 3    | 5    | 10   | 10   | 10   | 12   |\n| 4    | 5    | 15   | 18   | 18   | 18   |\n| 5    | 5    | 15   | 23   | 23   | 23   |\n| 6    | 5    | 15   | 23   | 25   | 25   |\n| 7    | 5    | 15   | 28   | 28   | 30   |\n| 8    | 5    | 15   | 33   | 33   | 33   |\n| 9    | 5    | 15   | 33   | 38   | 38   |\n| 10   | 5    | 15   | 33   | 43   | 43   |\n\n最后的答案就是数组右下角的结果，那么我们又该如何通过程序得到这样的数组呢？\n\n当我们只有第一件物品的时候（数组的第一列），无论背包容量有多大都只能装下一个物品，所得到的价值也只有第一个物品的价值，此例中即为5.\n\n当我们拥有第二件物品的时候，就要做一个选择，**要么装入该物品（前提是能装得下），要么不装入该物品。**\n\n那么有人可能就会问了，既然是可以装得下，那么为什么不装入这个物品呢？如果一个物品很沉很沉价值又非常之低，那么我们转入了这个物品的总价值反而要少于装了其他同等重量物品的价值，这个时候装入该物品就显得很多余了。\n\n回到重点，对于这个二维数组来说，**不装入第$i$件物品的意思是`dp[i-1][j]`，装入第$i$件物品的意思是`dp[i-1][j-w[i]] + v[i]`.**\n\n请认真仔细的对照上面的数组，好好理解一下上面的表达式。那么我们得到的状态转移方程即为：$$\ndp[i][j]=max(dp[i-1][j],\\ dp[i-1][j-w[i]] + v[i])\n$$\n### 1.3 python代码\n\n```python\nimport numpy as np\nn = 5\nw_max = 10\nw = [1, 3, 4, 5, 2]\nv = [5, 10, 18 ,20, 7]\ndp = np.zeros((n ,w_max + 1),dtype = np.int)\nfor i in range(0, n):\n    for j in range(0,w_max + 1):\n        if j - w[i] >= 0:\n            dp[i][j] = max(dp[i-1][j],dp[i-1][j-w[i]] + v[i])\n        else:\n            dp[i][j] = dp[i-1][j]\nprint(dp[n - 1][w_max])#43\n```\n\n### 1.4 算法优化\n\n我们可以看到，这样的0-1背包我们用时间复杂度为$O(W·N)$就可以解决，那么当$W_{max}$很大的时候，虽然时间复杂度是足够的，但是空间复杂度依旧为$O(W·N)$，这就导致了二维数组可能会超出内存限制。\n\n实际上，我们不难发现这样一个二维数组是从上至下一层一层进行的（上面的表格是从左至右），在每次进行下一层计算的时候，只有上一层的数据是有用的，其余的数据就没有任何作用了。即，`dp[i][j]`的值只与`dp[i-1][0]… … dp[i-1][j]`是有关系的。\n\n因此，我们可以利用这个特性，采用滚动数组的方法对空间复杂度进行优化，使其从二维变为长度为 $W_{max}$的一维数组。这种方法在动态规划中是一种常见的策略。\n\n至于为什么是一维数组，而不是两行数组(`dp[i][j]`与`dp[i-1][j]`)，我们只需要在循环j的时候做**逆向计算**，从最后一个物品往前推，这样就可以避免上一组数据被覆盖掉。（仔细想一想为什么）\n\n优化后的部分代码如下：\n\n```python\ndp = np.zeros(w_max + 1,dtype = np.int)\nfor i in range(0, n):\n    for j in range(w_max, -1, -1):\n        if j - w[i] >= 0:\n            dp[j] = max(dp[j],dp[j-w[i]] + v[i])\n```\n\n## 完全背包 (Unbounded Knapsack Problem)\n\n### 2.1 问题描述\n\n完全背包与0-1背包唯一的区别在于完全背包中每种物品可以有无限多个。\n\n### 2.2 问题分析\n\n对于完全背包问题，我们很自然的就能想到设置一个$$性价比=\\frac{V_i}{W_i}$$，这样一来只需要不停的装性价比最高的商品就能获得最优解。\n\n然而，事实上这样的作法很多时候并不能得到最高的答案，当背包即将装满但还有一定空余时（没办法再装下一个的时候），装性价比最高的商品不见得比装性价比不那么高但是能将背包装满的商品。\n\n事实上，上面的想法是完全可以进行下去的，只是稍稍麻烦一点。我们依旧围绕0-1背包的角度思考，只需要稍加修改即可。依旧是上一组数据，只不过每个物品可以无限拿取。\n\n| N=5    | 1    | 2    | 3    | 4    | 5    |\n| :----- | :--- | :--- | :--- | :--- | :--- |\n| Weight | 1    | 3    | 4    | 5    | 2    |\n| Value  | 5    | 10   | 18   | 20   | 7    |\n\n对于完全背包问题，我们依旧是做一个选择，装与不装第$i$件物品：\n\n- 不把物品$i$装入背包：`dp[i][j]=dp[i-1][j]`\n- 把物品$i$装入背包：`dp[i][j]=dp[i][j-w[i]] + v[i]`\n\n(相比于0-1背包，唯一的区别就是`dp[i][j]=dp[i-1][j-w[i]] + v[i]`\n\n这里肯定有很多小伙伴一脸懵逼，不妨停下来多思考思考。我在写这个文章的时候在这里也停顿了很久，不知道如何言简意赅的来阐述这样的思路。\n\n0-1背包当取走第$i$个物品时，需要找到第$i-1$个物品的最优解中，当取走第$i$个物品时，它也可以再次取走自己，所以只需要找到第$i$个物品的最优解即可。\n\n因此，完全背包的状态转移方程为：$$\ndp[i][j]=max(dp[i-1][j],\\ dp[i][j-w[i]] + v[i])\n$$\n\n### 2.3 算法优化\n\n对于完全背包依旧可以优化空间复杂度，如同0-1背包一样将其压缩到一维数组。唯一的不同点在于完全背包的滚动数组在循环j的时候需要**正向计算**。从第一个物品往后推，这样就可以避免上一组数据被覆盖掉。（仔细想一想为什么）\n\n优化后的部分代码如下：\n\n```python\ndp = np.zeros((w_max + 1,dtype = np.int)\nfor i in range(0, n)\n    for j in range(0,w_max + 1):\n        if j - w[i] >= 0:\n            dp[j] = max(dp[j],dp[j-w[i]] + v[i])\n```\n\n一件很有趣的事情是，我们回过头来看*1.4节*的0-1背包优化算法，有没有发现他们长得十分相似呢？\n\n此外，对于物品是无限的情况来说，如果有一个物品重量超过另一个物品然而价值又低于另一个物品，那么这样的物品就可以扔掉了。\n\n我们只需要花费$O(N^2)$的时间复杂度进行一次搜索，或许可以排除掉大量没有价值的商品，这样可以极大的节约动态规划的时间开销和空间开销。\n\n### 2.4 另一种思路\n\n我们回过头来看2.1节提到的思路，不妨在此基础上想一下，我们完全可以将完全背包转换成0-1背包。\n\n虽然每件商品的数量是无限的，但是总量$W_{max}$是有限的。因此我们可以计算出每件商品最多可以装入$$\\frac{W_{max}}{W_i}$$个，这样一来，我们就拥有了有限多个商品。\n\n当然，这种思路根本谈不上优化，因为其完全没有降低时间复杂度和空间复杂度，只是提供了另一种思路罢了。\n\n```python\ndp = np.zeros((n ,w_max + 1),dtype = np.int)\nfor i in range(0, n):\n    for j in range(0, w_max + 1):\n        for k in range(0, w_max//w[i] + 1):\n            if j - k * w[i] >= 0:\n                dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - k * w[i]] + k * v[i])\n```\n\n更高效的做法是使用二进制，即将每种物品的**取的个数**都用$$V_i=\\sum2^i\\quad 0\\leq i\\leq\\log_2V_i$$来表示（这是一个常识，任何数字都可以分解成以$2$为指数的数组），如$13$，我们可以表示为$13= 2^0 + 2^2 +2^3$.\n\n我们的目的就是要找出第i件物品要取几个好，那么与其用传统的方法每次取一个，然后询问取好呢还是不取好呢，不如用二进制的方法来代替。\n\n举例说明，第一件物品最多可以取$13$个，假设取$7$个是最优解，那么我们第一次询问取$2^0$个该物品好不好，然后询问$2^1,2^2,2^3… …$，最终得到了 $2^0 +2^2+2^1=7$这样的一个结果，我们只需要询问$4$次而非$13$次，这是一个从$n$降到$\\log n$级别的优化。\n\n现在，小伙伴们可能已经彻底蒙圈了，或许能稍稍理解这样的思想，但是却怎么也写不出来，没关系，只要稍微理解以上的思路就好，我们先来看下一节。\n\n## 多重背包(bounded knapsack problem)\n\n### 3.1 问题描述\n\n多重背包与前面的完全背包的不同点在于每种物品是有限多个。\n\n### 3.2 问题分析\n\n我们在*2.4节*中提到，完全背包每种物品其实也是有上限的，即加和不应当超过背包的最大承载重量。那么，既然完全背包可以转化成0-1背包问题进行求解，多重背包自然也可以。\n\n我们依旧是分为两个部分，装与不装。\n\n- 不把物品$i$装入背包：`dp[i][j]=dp[i-1][j]`\n- 把物品$i$装入背包：因为每种物品有数量限制，因此我们需要在限制数量中找到最大的价值，此时`dp[i][j]=dp[i-1][j-k*w[i]] + k*v[i-1]`\n\n因此，状态转移方程为：$$\ndp[i][j]=max(dp[i-1][j],\\ dp[i][j-k*w[i]] + k*v[i])\n$$\n\n### 3.3 python代码\n\n```python\nimport numpy as np\nn = 5\nw_max = 10\nw = [1, 3, 4, 5, 2]    #weight\nv = [5, 10, 18 ,20, 7] #value\nmaxx = [3, 5, 1, 8, 2] #maximum number\ndp = np.zeros((n ,w_max + 1),dtype = np.int)\nfor i in range(0, n):\n    for j in range(0, w_max + 1):\n        for k in range(0, min(w_max//w[i], maxx[i]) + 1):\n            if j - k * w[i] >= 0:\n                dp[i][j] = max(dp[i - 1][j],\n                dp[i - 1][j - k * w[i]] + k * v[i])\nprint(dp)\nprint(dp[n - 1][w_max]) #42\n```\n\n### 3.4 算法优化\n\n无论是完全背包还是多重背包，都存在着一种优化方式，就是2进制优化。","slug":"Backpack","published":1,"updated":"2022-03-12T17:57:41.957Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0o5i73y0003ascy1to7de6d","content":"<p>背包问题(backpack problem)是最经典也是最简单的一类动态规划(dynamic programming)问题，本篇文章重点讲解背包问题中的0-1背包，完全背包，以及多重背包三大问题，顺带也会说明一下动态规划的基本策略，<strong>适合完全不理解相关算法的初学者</strong>。</p>\n<h2 id=\"0-1背包-0-1-Knapsack-Problem\"><a href=\"#0-1背包-0-1-Knapsack-Problem\" class=\"headerlink\" title=\"0-1背包(0-1 Knapsack Problem)\"></a>0-1背包(0-1 Knapsack Problem)</h2><h3 id=\"1-1-问题描述\"><a href=\"#1-1-问题描述\" class=\"headerlink\" title=\"1.1 问题描述\"></a>1.1 问题描述</h3><p>一共有$N$件物品，每件物品的价格为$W_i$，价值为$V_i$，在总重量不超过背包承载上限$W_{max}$的情况下，如何分配使得装入背包的价值最高？</p>\n<h3 id=\"1-2-问题分析\"><a href=\"#1-2-问题分析\" class=\"headerlink\" title=\"1.2 问题分析\"></a>1.2 问题分析</h3><p>最先想到的就是暴力穷举法，把每种可能的情况都装进去然后找到最大的情况，但是这样做显然是极其低效的，总的时间复杂度是$O(2^n)$.</p>\n<p>因此，这里引用了动态规划的思路。在这里我们以此为例，每一组的价格和价值如图所示，假设这里背包的最大重量为$10$。</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">N=5</th>\n<th style=\"text-align:left\">1</th>\n<th style=\"text-align:left\">2</th>\n<th style=\"text-align:left\">3</th>\n<th style=\"text-align:left\">4</th>\n<th style=\"text-align:left\">5</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">Weight</td>\n<td style=\"text-align:left\">1</td>\n<td style=\"text-align:left\">3</td>\n<td style=\"text-align:left\">4</td>\n<td style=\"text-align:left\">5</td>\n<td style=\"text-align:left\">2</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Value</td>\n<td style=\"text-align:left\">5</td>\n<td style=\"text-align:left\">10</td>\n<td style=\"text-align:left\">18</td>\n<td style=\"text-align:left\">20</td>\n<td style=\"text-align:left\">7</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>那么接下来我们要做的事情是，创建一个二维数组<code>dp[i][j]</code>，这样的数组表示将前$i$件商品装入重量为j的背包中可以获得的最大价值，其中<script type=\"math/tex\">0\\leq i\\leq N\\qquad 0\\leq j\\leq W_{max}</script></p>\n<p>现在我们来看一下，按照这样的规则得到的二维数组是什么样子：</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\"></th>\n<th style=\"text-align:left\">1</th>\n<th style=\"text-align:left\">2</th>\n<th style=\"text-align:left\">3</th>\n<th style=\"text-align:left\">4</th>\n<th style=\"text-align:left\">5</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">1</td>\n<td style=\"text-align:left\">5</td>\n<td style=\"text-align:left\">5</td>\n<td style=\"text-align:left\">5</td>\n<td style=\"text-align:left\">5</td>\n<td style=\"text-align:left\">5</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">2</td>\n<td style=\"text-align:left\">5</td>\n<td style=\"text-align:left\">5</td>\n<td style=\"text-align:left\">5</td>\n<td style=\"text-align:left\">5</td>\n<td style=\"text-align:left\">7</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">3</td>\n<td style=\"text-align:left\">5</td>\n<td style=\"text-align:left\">10</td>\n<td style=\"text-align:left\">10</td>\n<td style=\"text-align:left\">10</td>\n<td style=\"text-align:left\">12</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">4</td>\n<td style=\"text-align:left\">5</td>\n<td style=\"text-align:left\">15</td>\n<td style=\"text-align:left\">18</td>\n<td style=\"text-align:left\">18</td>\n<td style=\"text-align:left\">18</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">5</td>\n<td style=\"text-align:left\">5</td>\n<td style=\"text-align:left\">15</td>\n<td style=\"text-align:left\">23</td>\n<td style=\"text-align:left\">23</td>\n<td style=\"text-align:left\">23</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">6</td>\n<td style=\"text-align:left\">5</td>\n<td style=\"text-align:left\">15</td>\n<td style=\"text-align:left\">23</td>\n<td style=\"text-align:left\">25</td>\n<td style=\"text-align:left\">25</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">7</td>\n<td style=\"text-align:left\">5</td>\n<td style=\"text-align:left\">15</td>\n<td style=\"text-align:left\">28</td>\n<td style=\"text-align:left\">28</td>\n<td style=\"text-align:left\">30</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">8</td>\n<td style=\"text-align:left\">5</td>\n<td style=\"text-align:left\">15</td>\n<td style=\"text-align:left\">33</td>\n<td style=\"text-align:left\">33</td>\n<td style=\"text-align:left\">33</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">9</td>\n<td style=\"text-align:left\">5</td>\n<td style=\"text-align:left\">15</td>\n<td style=\"text-align:left\">33</td>\n<td style=\"text-align:left\">38</td>\n<td style=\"text-align:left\">38</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">10</td>\n<td style=\"text-align:left\">5</td>\n<td style=\"text-align:left\">15</td>\n<td style=\"text-align:left\">33</td>\n<td style=\"text-align:left\">43</td>\n<td style=\"text-align:left\">43</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>最后的答案就是数组右下角的结果，那么我们又该如何通过程序得到这样的数组呢？</p>\n<p>当我们只有第一件物品的时候（数组的第一列），无论背包容量有多大都只能装下一个物品，所得到的价值也只有第一个物品的价值，此例中即为5.</p>\n<p>当我们拥有第二件物品的时候，就要做一个选择，<strong>要么装入该物品（前提是能装得下），要么不装入该物品。</strong></p>\n<p>那么有人可能就会问了，既然是可以装得下，那么为什么不装入这个物品呢？如果一个物品很沉很沉价值又非常之低，那么我们转入了这个物品的总价值反而要少于装了其他同等重量物品的价值，这个时候装入该物品就显得很多余了。</p>\n<p>回到重点，对于这个二维数组来说，<strong>不装入第$i$件物品的意思是<code>dp[i-1][j]</code>，装入第$i$件物品的意思是<code>dp[i-1][j-w[i]] + v[i]</code>.</strong></p>\n<p>请认真仔细的对照上面的数组，好好理解一下上面的表达式。那么我们得到的状态转移方程即为：$$<br>dp[i][j]=max(dp[i-1][j],\\ dp[i-1][j-w[i]] + v[i])</p>\n<script type=\"math/tex; mode=display\">\n### 1.3 python代码\n\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\nn <span class=\"token operator\">=</span> <span class=\"token number\">5</span>\nw_max <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\nw <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\nv <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span> <span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">]</span>\ndp <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>zeros<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>n <span class=\"token punctuation\">,</span>w_max <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>dtype <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>w_max <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> j <span class=\"token operator\">-</span> w<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n            dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>dp<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token operator\">-</span>w<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> v<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> dp<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>w_max<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token comment\">#43</span></code></pre>\n\n### 1.4 算法优化\n\n我们可以看到，这样的0-1背包我们用时间复杂度为$O(W·N)$就可以解决，那么当$W_{max}$很大的时候，虽然时间复杂度是足够的，但是空间复杂度依旧为$O(W·N)$，这就导致了二维数组可能会超出内存限制。\n\n实际上，我们不难发现这样一个二维数组是从上至下一层一层进行的（上面的表格是从左至右），在每次进行下一层计算的时候，只有上一层的数据是有用的，其余的数据就没有任何作用了。即，`dp[i][j]`的值只与`dp[i-1][0]… … dp[i-1][j]`是有关系的。\n\n因此，我们可以利用这个特性，采用滚动数组的方法对空间复杂度进行优化，使其从二维变为长度为 $W_{max}$的一维数组。这种方法在动态规划中是一种常见的策略。\n\n至于为什么是一维数组，而不是两行数组(`dp[i][j]`与`dp[i-1][j]`)，我们只需要在循环j的时候做**逆向计算**，从最后一个物品往前推，这样就可以避免上一组数据被覆盖掉。（仔细想一想为什么）\n\n优化后的部分代码如下：\n\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">dp <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>zeros<span class=\"token punctuation\">(</span>w_max <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>dtype <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>w_max<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> j <span class=\"token operator\">-</span> w<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n            dp<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>dp<span class=\"token punctuation\">[</span>j<span class=\"token operator\">-</span>w<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> v<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre>\n\n## 完全背包 (Unbounded Knapsack Problem)\n\n### 2.1 问题描述\n\n完全背包与0-1背包唯一的区别在于完全背包中每种物品可以有无限多个。\n\n### 2.2 问题分析\n\n对于完全背包问题，我们很自然的就能想到设置一个$$性价比=\\frac{V_i}{W_i}$$，这样一来只需要不停的装性价比最高的商品就能获得最优解。\n\n然而，事实上这样的作法很多时候并不能得到最高的答案，当背包即将装满但还有一定空余时（没办法再装下一个的时候），装性价比最高的商品不见得比装性价比不那么高但是能将背包装满的商品。\n\n事实上，上面的想法是完全可以进行下去的，只是稍稍麻烦一点。我们依旧围绕0-1背包的角度思考，只需要稍加修改即可。依旧是上一组数据，只不过每个物品可以无限拿取。\n\n| N=5    | 1    | 2    | 3    | 4    | 5    |\n| :----- | :--- | :--- | :--- | :--- | :--- |\n| Weight | 1    | 3    | 4    | 5    | 2    |\n| Value  | 5    | 10   | 18   | 20   | 7    |\n\n对于完全背包问题，我们依旧是做一个选择，装与不装第$i$件物品：\n\n- 不把物品$i$装入背包：`dp[i][j]=dp[i-1][j]`\n- 把物品$i$装入背包：`dp[i][j]=dp[i][j-w[i]] + v[i]`\n\n(相比于0-1背包，唯一的区别就是`dp[i][j]=dp[i-1][j-w[i]] + v[i]`\n\n这里肯定有很多小伙伴一脸懵逼，不妨停下来多思考思考。我在写这个文章的时候在这里也停顿了很久，不知道如何言简意赅的来阐述这样的思路。\n\n0-1背包当取走第$i$个物品时，需要找到第$i-1$个物品的最优解中，当取走第$i$个物品时，它也可以再次取走自己，所以只需要找到第$i$个物品的最优解即可。\n\n因此，完全背包的状态转移方程为：</script><p>dp[i][j]=max(dp[i-1][j],\\ dp[i][j-w[i]] + v[i])</p>\n<script type=\"math/tex; mode=display\">\n\n### 2.3 算法优化\n\n对于完全背包依旧可以优化空间复杂度，如同0-1背包一样将其压缩到一维数组。唯一的不同点在于完全背包的滚动数组在循环j的时候需要**正向计算**。从第一个物品往后推，这样就可以避免上一组数据被覆盖掉。（仔细想一想为什么）\n\n优化后的部分代码如下：\n\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">dp <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>zeros<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>w_max <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>dtype <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>w_max <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> j <span class=\"token operator\">-</span> w<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n            dp<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>dp<span class=\"token punctuation\">[</span>j<span class=\"token operator\">-</span>w<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> v<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre>\n\n一件很有趣的事情是，我们回过头来看*1.4节*的0-1背包优化算法，有没有发现他们长得十分相似呢？\n\n此外，对于物品是无限的情况来说，如果有一个物品重量超过另一个物品然而价值又低于另一个物品，那么这样的物品就可以扔掉了。\n\n我们只需要花费$O(N^2)$的时间复杂度进行一次搜索，或许可以排除掉大量没有价值的商品，这样可以极大的节约动态规划的时间开销和空间开销。\n\n### 2.4 另一种思路\n\n我们回过头来看2.1节提到的思路，不妨在此基础上想一下，我们完全可以将完全背包转换成0-1背包。\n\n虽然每件商品的数量是无限的，但是总量$W_{max}$是有限的。因此我们可以计算出每件商品最多可以装入$$\\frac{W_{max}}{W_i}$$个，这样一来，我们就拥有了有限多个商品。\n\n当然，这种思路根本谈不上优化，因为其完全没有降低时间复杂度和空间复杂度，只是提供了另一种思路罢了。\n\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">dp <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>zeros<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>n <span class=\"token punctuation\">,</span>w_max <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>dtype <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> w_max <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">for</span> k <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> w_max<span class=\"token operator\">//</span>w<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> j <span class=\"token operator\">-</span> k <span class=\"token operator\">*</span> w<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n                dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> dp<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> k <span class=\"token operator\">*</span> w<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> k <span class=\"token operator\">*</span> v<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre>\n\n更高效的做法是使用二进制，即将每种物品的**取的个数**都用$$V_i=\\sum2^i\\quad 0\\leq i\\leq\\log_2V_i$$来表示（这是一个常识，任何数字都可以分解成以$2$为指数的数组），如$13$，我们可以表示为$13= 2^0 + 2^2 +2^3$.\n\n我们的目的就是要找出第i件物品要取几个好，那么与其用传统的方法每次取一个，然后询问取好呢还是不取好呢，不如用二进制的方法来代替。\n\n举例说明，第一件物品最多可以取$13$个，假设取$7$个是最优解，那么我们第一次询问取$2^0$个该物品好不好，然后询问$2^1,2^2,2^3… …$，最终得到了 $2^0 +2^2+2^1=7$这样的一个结果，我们只需要询问$4$次而非$13$次，这是一个从$n$降到$\\log n$级别的优化。\n\n现在，小伙伴们可能已经彻底蒙圈了，或许能稍稍理解这样的思想，但是却怎么也写不出来，没关系，只要稍微理解以上的思路就好，我们先来看下一节。\n\n## 多重背包(bounded knapsack problem)\n\n### 3.1 问题描述\n\n多重背包与前面的完全背包的不同点在于每种物品是有限多个。\n\n### 3.2 问题分析\n\n我们在*2.4节*中提到，完全背包每种物品其实也是有上限的，即加和不应当超过背包的最大承载重量。那么，既然完全背包可以转化成0-1背包问题进行求解，多重背包自然也可以。\n\n我们依旧是分为两个部分，装与不装。\n\n- 不把物品$i$装入背包：`dp[i][j]=dp[i-1][j]`\n- 把物品$i$装入背包：因为每种物品有数量限制，因此我们需要在限制数量中找到最大的价值，此时`dp[i][j]=dp[i-1][j-k*w[i]] + k*v[i-1]`\n\n因此，状态转移方程为：</script><p>dp[i][j]=max(dp[i-1][j],\\ dp[i][j-k<em>w[i]] + k</em>v[i])</p>\n<p>$$</p>\n<h3 id=\"3-3-python代码\"><a href=\"#3-3-python代码\" class=\"headerlink\" title=\"3.3 python代码\"></a>3.3 python代码</h3><pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\nn <span class=\"token operator\">=</span> <span class=\"token number\">5</span>\nw_max <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\nw <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span>    <span class=\"token comment\">#weight</span>\nv <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span> <span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">#value</span>\nmaxx <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">#maximum number</span>\ndp <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>zeros<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>n <span class=\"token punctuation\">,</span>w_max <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>dtype <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> w_max <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">for</span> k <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">min</span><span class=\"token punctuation\">(</span>w_max<span class=\"token operator\">//</span>w<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> maxx<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> j <span class=\"token operator\">-</span> k <span class=\"token operator\">*</span> w<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n                dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                dp<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> k <span class=\"token operator\">*</span> w<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> k <span class=\"token operator\">*</span> v<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>w_max<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#42</span></code></pre>\n<h3 id=\"3-4-算法优化\"><a href=\"#3-4-算法优化\" class=\"headerlink\" title=\"3.4 算法优化\"></a>3.4 算法优化</h3><p>无论是完全背包还是多重背包，都存在着一种优化方式，就是2进制优化。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>背包问题(backpack problem)是最经典也是最简单的一类动态规划(dynamic programming)问题，本篇文章重点讲解背包问题中的0-1背包，完全背包，以及多重背包三大问题，顺带也会说明一下动态规划的基本策略，<strong>适合完全不理解相关算法的初学者</strong>。</p>\n<h2 id=\"0-1背包-0-1-Knapsack-Problem\"><a href=\"#0-1背包-0-1-Knapsack-Problem\" class=\"headerlink\" title=\"0-1背包(0-1 Knapsack Problem)\"></a>0-1背包(0-1 Knapsack Problem)</h2><h3 id=\"1-1-问题描述\"><a href=\"#1-1-问题描述\" class=\"headerlink\" title=\"1.1 问题描述\"></a>1.1 问题描述</h3><p>一共有$N$件物品，每件物品的价格为$W_i$，价值为$V_i$，在总重量不超过背包承载上限$W_{max}$的情况下，如何分配使得装入背包的价值最高？</p>\n<h3 id=\"1-2-问题分析\"><a href=\"#1-2-问题分析\" class=\"headerlink\" title=\"1.2 问题分析\"></a>1.2 问题分析</h3><p>最先想到的就是暴力穷举法，把每种可能的情况都装进去然后找到最大的情况，但是这样做显然是极其低效的，总的时间复杂度是$O(2^n)$.</p>\n<p>因此，这里引用了动态规划的思路。在这里我们以此为例，每一组的价格和价值如图所示，假设这里背包的最大重量为$10$。</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">N=5</th>\n<th style=\"text-align:left\">1</th>\n<th style=\"text-align:left\">2</th>\n<th style=\"text-align:left\">3</th>\n<th style=\"text-align:left\">4</th>\n<th style=\"text-align:left\">5</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">Weight</td>\n<td style=\"text-align:left\">1</td>\n<td style=\"text-align:left\">3</td>\n<td style=\"text-align:left\">4</td>\n<td style=\"text-align:left\">5</td>\n<td style=\"text-align:left\">2</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Value</td>\n<td style=\"text-align:left\">5</td>\n<td style=\"text-align:left\">10</td>\n<td style=\"text-align:left\">18</td>\n<td style=\"text-align:left\">20</td>\n<td style=\"text-align:left\">7</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>那么接下来我们要做的事情是，创建一个二维数组<code>dp[i][j]</code>，这样的数组表示将前$i$件商品装入重量为j的背包中可以获得的最大价值，其中<script type=\"math/tex\">0\\leq i\\leq N\\qquad 0\\leq j\\leq W_{max}</script></p>\n<p>现在我们来看一下，按照这样的规则得到的二维数组是什么样子：</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\"></th>\n<th style=\"text-align:left\">1</th>\n<th style=\"text-align:left\">2</th>\n<th style=\"text-align:left\">3</th>\n<th style=\"text-align:left\">4</th>\n<th style=\"text-align:left\">5</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">1</td>\n<td style=\"text-align:left\">5</td>\n<td style=\"text-align:left\">5</td>\n<td style=\"text-align:left\">5</td>\n<td style=\"text-align:left\">5</td>\n<td style=\"text-align:left\">5</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">2</td>\n<td style=\"text-align:left\">5</td>\n<td style=\"text-align:left\">5</td>\n<td style=\"text-align:left\">5</td>\n<td style=\"text-align:left\">5</td>\n<td style=\"text-align:left\">7</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">3</td>\n<td style=\"text-align:left\">5</td>\n<td style=\"text-align:left\">10</td>\n<td style=\"text-align:left\">10</td>\n<td style=\"text-align:left\">10</td>\n<td style=\"text-align:left\">12</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">4</td>\n<td style=\"text-align:left\">5</td>\n<td style=\"text-align:left\">15</td>\n<td style=\"text-align:left\">18</td>\n<td style=\"text-align:left\">18</td>\n<td style=\"text-align:left\">18</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">5</td>\n<td style=\"text-align:left\">5</td>\n<td style=\"text-align:left\">15</td>\n<td style=\"text-align:left\">23</td>\n<td style=\"text-align:left\">23</td>\n<td style=\"text-align:left\">23</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">6</td>\n<td style=\"text-align:left\">5</td>\n<td style=\"text-align:left\">15</td>\n<td style=\"text-align:left\">23</td>\n<td style=\"text-align:left\">25</td>\n<td style=\"text-align:left\">25</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">7</td>\n<td style=\"text-align:left\">5</td>\n<td style=\"text-align:left\">15</td>\n<td style=\"text-align:left\">28</td>\n<td style=\"text-align:left\">28</td>\n<td style=\"text-align:left\">30</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">8</td>\n<td style=\"text-align:left\">5</td>\n<td style=\"text-align:left\">15</td>\n<td style=\"text-align:left\">33</td>\n<td style=\"text-align:left\">33</td>\n<td style=\"text-align:left\">33</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">9</td>\n<td style=\"text-align:left\">5</td>\n<td style=\"text-align:left\">15</td>\n<td style=\"text-align:left\">33</td>\n<td style=\"text-align:left\">38</td>\n<td style=\"text-align:left\">38</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">10</td>\n<td style=\"text-align:left\">5</td>\n<td style=\"text-align:left\">15</td>\n<td style=\"text-align:left\">33</td>\n<td style=\"text-align:left\">43</td>\n<td style=\"text-align:left\">43</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>最后的答案就是数组右下角的结果，那么我们又该如何通过程序得到这样的数组呢？</p>\n<p>当我们只有第一件物品的时候（数组的第一列），无论背包容量有多大都只能装下一个物品，所得到的价值也只有第一个物品的价值，此例中即为5.</p>\n<p>当我们拥有第二件物品的时候，就要做一个选择，<strong>要么装入该物品（前提是能装得下），要么不装入该物品。</strong></p>\n<p>那么有人可能就会问了，既然是可以装得下，那么为什么不装入这个物品呢？如果一个物品很沉很沉价值又非常之低，那么我们转入了这个物品的总价值反而要少于装了其他同等重量物品的价值，这个时候装入该物品就显得很多余了。</p>\n<p>回到重点，对于这个二维数组来说，<strong>不装入第$i$件物品的意思是<code>dp[i-1][j]</code>，装入第$i$件物品的意思是<code>dp[i-1][j-w[i]] + v[i]</code>.</strong></p>\n<p>请认真仔细的对照上面的数组，好好理解一下上面的表达式。那么我们得到的状态转移方程即为：$$<br>dp[i][j]=max(dp[i-1][j],\\ dp[i-1][j-w[i]] + v[i])</p>\n<script type=\"math/tex; mode=display\">\n### 1.3 python代码\n\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\nn <span class=\"token operator\">=</span> <span class=\"token number\">5</span>\nw_max <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\nw <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\nv <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span> <span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">]</span>\ndp <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>zeros<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>n <span class=\"token punctuation\">,</span>w_max <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>dtype <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>w_max <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> j <span class=\"token operator\">-</span> w<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n            dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>dp<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token operator\">-</span>w<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> v<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> dp<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>w_max<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token comment\">#43</span></code></pre>\n\n### 1.4 算法优化\n\n我们可以看到，这样的0-1背包我们用时间复杂度为$O(W·N)$就可以解决，那么当$W_{max}$很大的时候，虽然时间复杂度是足够的，但是空间复杂度依旧为$O(W·N)$，这就导致了二维数组可能会超出内存限制。\n\n实际上，我们不难发现这样一个二维数组是从上至下一层一层进行的（上面的表格是从左至右），在每次进行下一层计算的时候，只有上一层的数据是有用的，其余的数据就没有任何作用了。即，`dp[i][j]`的值只与`dp[i-1][0]… … dp[i-1][j]`是有关系的。\n\n因此，我们可以利用这个特性，采用滚动数组的方法对空间复杂度进行优化，使其从二维变为长度为 $W_{max}$的一维数组。这种方法在动态规划中是一种常见的策略。\n\n至于为什么是一维数组，而不是两行数组(`dp[i][j]`与`dp[i-1][j]`)，我们只需要在循环j的时候做**逆向计算**，从最后一个物品往前推，这样就可以避免上一组数据被覆盖掉。（仔细想一想为什么）\n\n优化后的部分代码如下：\n\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">dp <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>zeros<span class=\"token punctuation\">(</span>w_max <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>dtype <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>w_max<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> j <span class=\"token operator\">-</span> w<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n            dp<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>dp<span class=\"token punctuation\">[</span>j<span class=\"token operator\">-</span>w<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> v<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre>\n\n## 完全背包 (Unbounded Knapsack Problem)\n\n### 2.1 问题描述\n\n完全背包与0-1背包唯一的区别在于完全背包中每种物品可以有无限多个。\n\n### 2.2 问题分析\n\n对于完全背包问题，我们很自然的就能想到设置一个$$性价比=\\frac{V_i}{W_i}$$，这样一来只需要不停的装性价比最高的商品就能获得最优解。\n\n然而，事实上这样的作法很多时候并不能得到最高的答案，当背包即将装满但还有一定空余时（没办法再装下一个的时候），装性价比最高的商品不见得比装性价比不那么高但是能将背包装满的商品。\n\n事实上，上面的想法是完全可以进行下去的，只是稍稍麻烦一点。我们依旧围绕0-1背包的角度思考，只需要稍加修改即可。依旧是上一组数据，只不过每个物品可以无限拿取。\n\n| N=5    | 1    | 2    | 3    | 4    | 5    |\n| :----- | :--- | :--- | :--- | :--- | :--- |\n| Weight | 1    | 3    | 4    | 5    | 2    |\n| Value  | 5    | 10   | 18   | 20   | 7    |\n\n对于完全背包问题，我们依旧是做一个选择，装与不装第$i$件物品：\n\n- 不把物品$i$装入背包：`dp[i][j]=dp[i-1][j]`\n- 把物品$i$装入背包：`dp[i][j]=dp[i][j-w[i]] + v[i]`\n\n(相比于0-1背包，唯一的区别就是`dp[i][j]=dp[i-1][j-w[i]] + v[i]`\n\n这里肯定有很多小伙伴一脸懵逼，不妨停下来多思考思考。我在写这个文章的时候在这里也停顿了很久，不知道如何言简意赅的来阐述这样的思路。\n\n0-1背包当取走第$i$个物品时，需要找到第$i-1$个物品的最优解中，当取走第$i$个物品时，它也可以再次取走自己，所以只需要找到第$i$个物品的最优解即可。\n\n因此，完全背包的状态转移方程为：</script><p>dp[i][j]=max(dp[i-1][j],\\ dp[i][j-w[i]] + v[i])</p>\n<script type=\"math/tex; mode=display\">\n\n### 2.3 算法优化\n\n对于完全背包依旧可以优化空间复杂度，如同0-1背包一样将其压缩到一维数组。唯一的不同点在于完全背包的滚动数组在循环j的时候需要**正向计算**。从第一个物品往后推，这样就可以避免上一组数据被覆盖掉。（仔细想一想为什么）\n\n优化后的部分代码如下：\n\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">dp <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>zeros<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>w_max <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>dtype <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>w_max <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> j <span class=\"token operator\">-</span> w<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n            dp<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>dp<span class=\"token punctuation\">[</span>j<span class=\"token operator\">-</span>w<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> v<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre>\n\n一件很有趣的事情是，我们回过头来看*1.4节*的0-1背包优化算法，有没有发现他们长得十分相似呢？\n\n此外，对于物品是无限的情况来说，如果有一个物品重量超过另一个物品然而价值又低于另一个物品，那么这样的物品就可以扔掉了。\n\n我们只需要花费$O(N^2)$的时间复杂度进行一次搜索，或许可以排除掉大量没有价值的商品，这样可以极大的节约动态规划的时间开销和空间开销。\n\n### 2.4 另一种思路\n\n我们回过头来看2.1节提到的思路，不妨在此基础上想一下，我们完全可以将完全背包转换成0-1背包。\n\n虽然每件商品的数量是无限的，但是总量$W_{max}$是有限的。因此我们可以计算出每件商品最多可以装入$$\\frac{W_{max}}{W_i}$$个，这样一来，我们就拥有了有限多个商品。\n\n当然，这种思路根本谈不上优化，因为其完全没有降低时间复杂度和空间复杂度，只是提供了另一种思路罢了。\n\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">dp <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>zeros<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>n <span class=\"token punctuation\">,</span>w_max <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>dtype <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> w_max <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">for</span> k <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> w_max<span class=\"token operator\">//</span>w<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> j <span class=\"token operator\">-</span> k <span class=\"token operator\">*</span> w<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n                dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> dp<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> k <span class=\"token operator\">*</span> w<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> k <span class=\"token operator\">*</span> v<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre>\n\n更高效的做法是使用二进制，即将每种物品的**取的个数**都用$$V_i=\\sum2^i\\quad 0\\leq i\\leq\\log_2V_i$$来表示（这是一个常识，任何数字都可以分解成以$2$为指数的数组），如$13$，我们可以表示为$13= 2^0 + 2^2 +2^3$.\n\n我们的目的就是要找出第i件物品要取几个好，那么与其用传统的方法每次取一个，然后询问取好呢还是不取好呢，不如用二进制的方法来代替。\n\n举例说明，第一件物品最多可以取$13$个，假设取$7$个是最优解，那么我们第一次询问取$2^0$个该物品好不好，然后询问$2^1,2^2,2^3… …$，最终得到了 $2^0 +2^2+2^1=7$这样的一个结果，我们只需要询问$4$次而非$13$次，这是一个从$n$降到$\\log n$级别的优化。\n\n现在，小伙伴们可能已经彻底蒙圈了，或许能稍稍理解这样的思想，但是却怎么也写不出来，没关系，只要稍微理解以上的思路就好，我们先来看下一节。\n\n## 多重背包(bounded knapsack problem)\n\n### 3.1 问题描述\n\n多重背包与前面的完全背包的不同点在于每种物品是有限多个。\n\n### 3.2 问题分析\n\n我们在*2.4节*中提到，完全背包每种物品其实也是有上限的，即加和不应当超过背包的最大承载重量。那么，既然完全背包可以转化成0-1背包问题进行求解，多重背包自然也可以。\n\n我们依旧是分为两个部分，装与不装。\n\n- 不把物品$i$装入背包：`dp[i][j]=dp[i-1][j]`\n- 把物品$i$装入背包：因为每种物品有数量限制，因此我们需要在限制数量中找到最大的价值，此时`dp[i][j]=dp[i-1][j-k*w[i]] + k*v[i-1]`\n\n因此，状态转移方程为：</script><p>dp[i][j]=max(dp[i-1][j],\\ dp[i][j-k<em>w[i]] + k</em>v[i])</p>\n<p>$$</p>\n<h3 id=\"3-3-python代码\"><a href=\"#3-3-python代码\" class=\"headerlink\" title=\"3.3 python代码\"></a>3.3 python代码</h3><pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\nn <span class=\"token operator\">=</span> <span class=\"token number\">5</span>\nw_max <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\nw <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span>    <span class=\"token comment\">#weight</span>\nv <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span> <span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">#value</span>\nmaxx <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">#maximum number</span>\ndp <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>zeros<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>n <span class=\"token punctuation\">,</span>w_max <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>dtype <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> w_max <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">for</span> k <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">min</span><span class=\"token punctuation\">(</span>w_max<span class=\"token operator\">//</span>w<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> maxx<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> j <span class=\"token operator\">-</span> k <span class=\"token operator\">*</span> w<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n                dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                dp<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> k <span class=\"token operator\">*</span> w<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> k <span class=\"token operator\">*</span> v<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>w_max<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#42</span></code></pre>\n<h3 id=\"3-4-算法优化\"><a href=\"#3-4-算法优化\" class=\"headerlink\" title=\"3.4 算法优化\"></a>3.4 算法优化</h3><p>无论是完全背包还是多重背包，都存在着一种优化方式，就是2进制优化。</p>\n"},{"title":"图的基础知识","date":"2022-03-09T04:51:45.000Z","author":"Tony","katex":true,"_content":"\n## 基础知识\n\n### 图的定义和分类\n\n- **图的定义** 是一个顶点集合V和一个顶点间关系的集合E组成，记G=(V,E) V：顶点的有限非空集合。 E：顶点间关系的有限集合（边集）。\n\n- **无向图** (graph)在G=(V,E)中，如果对于任意的结点a,b∈V，当(a,b)∈E时，必有(b,a)∈E（即关系R对称），如图二。\n  $$\n  V={1,2,3,4,5}\\\\ \n  E={(1,2),(1,3),(1,4),(2,3),(2,5),(3,5),(4,5)}\n  $$\n  \n- **有向图** (digraph)在G=(V,E)中，如果对于任意的结点a,b∈V，当(a,b)∈E时，(b,a)∈E未必成立，如图三。 \n  $$\n  V={1,2,3,4,5}\\\\\n  E={<1,2>,<1,4>,<2,3>,<2,5>,<3,1>,<5,3>,<5,4>}\n  $$\n\n![img](Graph-search/image-1.png)\n\n- **带权图** 一般的图边上没有数字，边仅表示两个顶点间相连接关系 ，如图四。\n- **连通图**图中任意两个顶点都是连通的，称为连通图；否则为非连通图，如图五。\n\n![img](Graph-search/image-2.png)\n\n### 邻接矩阵和邻接表\n\n- **邻接矩阵**\n\n邻接矩阵的优势是方便定义，只需要一个二维矩阵就可以解决；缺点也显而易见，浪费空间。\n\n![img](Graph-search/v2-9e2643ca5d96f86a391c36de4d3bd48d_720w.jpg)\n\n- **邻接表**\n\n邻接表的优势自然就是尽可能的节省更多的空间，但是与之相对应的就是定义起来很麻烦，需要用链表或者vector来实现。\n\n![img](Graph-search/v2-4a4d37df348f283649e2aecc74d959b5_720w.jpg)\n\n*(图是网上抄的，看水印，如有侵权，请联系我)\n\n## 图的遍历(DFS&&BFS)\n\n------\n\n好了，上面我们学习了图的概念以及如何存图，接下来就是重头戏了。\n\n接下来便是如何实现图的搜索，首先我们来看这样一个有向图， 我们不妨设从1号顶点起始。\n\n![img](Graph-search/image-3.png)\n\n在搜索过程中，我们维护一个布尔数组bool visited[N+1]，这个数组用来表示每个顶点是不是已经遍历过了。\n\n接下来，从1号开始进行DFS，遍历过的节点就在`visited[]`中标注。visited[i] == true表示顶点i已经遍历过了，visited[i] == false表示i还没有遍历过。DFS的具体方法可以用递归实现，直到所有节点都被遍历过结束。如果采用邻接矩阵，伪代码如下：\n\n```python\nVisited[]={0}\nDFS(x):\n\tVisited[x]=true\n\tfor(i=1;i<=N;i++):\n\t\tif(!Visited[i] && map[x][i]):\n\t\t\tDFS(i)\n```\n\n## 代码实现\n\n------\n\n### DFS递归实现\n\n```c++\n#include <iostream>\n#define N 5\nusing namespace std;\nint maze[N][N] = {\n    { 0, 1, 1, 0, 0 },\n    { 0, 0, 1, 0, 1 },\n    { 0, 0, 1, 0, 0 },\n    { 1, 1, 0, 0, 1 },\n    { 0, 0, 1, 0, 0 }\n};\nbool visited[N + 1];\nvoid DFS(int start)\n{\n    visited[start] = true;\n    for (int i = 1; i <= N; i++)\n        if (!visited[i] && maze[start - 1][i - 1] == 1)\n            DFS(i);\n    cout << start << \" \";\n}\nint main()\n{\n    for (int i = 1; i <= N; i++)\n    {\n        if (visited[i])\n            continue;\n        DFS(i);\n    }\n    return 0;\n}\n```\n\n### DFS非递归实现\n\n```c++\n#include <iostream>\n#include <stack>\n#define N 5\nusing namespace std;\nint maze[N][N] = {\n    { 0, 1, 1, 0, 0 },\n    { 0, 0, 1, 0, 1 },\n    { 0, 0, 1, 0, 0 },\n    { 1, 1, 0, 0, 1 },\n    { 0, 0, 1, 0, 0 }\n};\nbool visited[N + 1];\nvoid DFS(int start)\n{\n    stack<int> s;\n    s.push(start);\n    visited[start] = true;\n    bool is_push = false;\n    while (!s.empty())\n    {\n        is_push = false;\n        int v = s.top();\n        for (int i = 1; i <= N; i++)\n        {\n            if (maze[v - 1][i - 1] == 1 && !visited[i])\n            {\n                visited[i] = true;\n                s.push(i);\n                is_push = true;\n                break;\n            }\n        }\n        if (!is_push)\n        {\n            cout << v << \" \";\n            s.pop();\n        }\n    }\n}\nint main()\n{\n    for (int i = 1; i <= N; i++)\n    {\n        if (visited[i])\n            continue;\n        DFS(i);\n    }\n    return 0;\n}\n```\n\n### BFS实现\n\n```c++\n#include <iostream>\n#include <queue>\n#define N 5\nusing namespace std;\nint maze[N][N] = {\n    { 0, 1, 1, 0, 0 },\n    { 0, 0, 1, 1, 0 },\n    { 0, 1, 1, 1, 0 },\n    { 1, 0, 0, 0, 0 },\n    { 0, 0, 1, 1, 0 }\n};\nbool visited[N + 1];\nvoid BFS(int start)\n{\n    queue<int> Q;\n    Q.push(start);\n    visited[start] = true;\n    while (!Q.empty())\n    {\n        int front = Q.front();\n        cout << front << \" \";\n        Q.pop();\n        for (int i = 1; i <= N; i++)\n            if (!visited[i] && maze[front - 1][i - 1] == 1)\n            {\n                visited[i] = true;\n                Q.push(i);\n            }\n    }\n}\nint main()\n{\n    for (int i = 1; i <= N; i++)\n    {\n        if (visited[i])\n            continue;\n        BFS(i);\n    }\n    return 0;\n}\n```\n","source":"_posts/Graph-search.md","raw":"---\ntitle: 图的基础知识\ndate: 2022-03-09 12:51:45\nauthor: Tony\nkatex: true\ncategories:\n  - algorithm\ntags:\n  - algorithm\n  - Graph\n  - DFS\n  - BFS\n\n---\n\n## 基础知识\n\n### 图的定义和分类\n\n- **图的定义** 是一个顶点集合V和一个顶点间关系的集合E组成，记G=(V,E) V：顶点的有限非空集合。 E：顶点间关系的有限集合（边集）。\n\n- **无向图** (graph)在G=(V,E)中，如果对于任意的结点a,b∈V，当(a,b)∈E时，必有(b,a)∈E（即关系R对称），如图二。\n  $$\n  V={1,2,3,4,5}\\\\ \n  E={(1,2),(1,3),(1,4),(2,3),(2,5),(3,5),(4,5)}\n  $$\n  \n- **有向图** (digraph)在G=(V,E)中，如果对于任意的结点a,b∈V，当(a,b)∈E时，(b,a)∈E未必成立，如图三。 \n  $$\n  V={1,2,3,4,5}\\\\\n  E={<1,2>,<1,4>,<2,3>,<2,5>,<3,1>,<5,3>,<5,4>}\n  $$\n\n![img](Graph-search/image-1.png)\n\n- **带权图** 一般的图边上没有数字，边仅表示两个顶点间相连接关系 ，如图四。\n- **连通图**图中任意两个顶点都是连通的，称为连通图；否则为非连通图，如图五。\n\n![img](Graph-search/image-2.png)\n\n### 邻接矩阵和邻接表\n\n- **邻接矩阵**\n\n邻接矩阵的优势是方便定义，只需要一个二维矩阵就可以解决；缺点也显而易见，浪费空间。\n\n![img](Graph-search/v2-9e2643ca5d96f86a391c36de4d3bd48d_720w.jpg)\n\n- **邻接表**\n\n邻接表的优势自然就是尽可能的节省更多的空间，但是与之相对应的就是定义起来很麻烦，需要用链表或者vector来实现。\n\n![img](Graph-search/v2-4a4d37df348f283649e2aecc74d959b5_720w.jpg)\n\n*(图是网上抄的，看水印，如有侵权，请联系我)\n\n## 图的遍历(DFS&&BFS)\n\n------\n\n好了，上面我们学习了图的概念以及如何存图，接下来就是重头戏了。\n\n接下来便是如何实现图的搜索，首先我们来看这样一个有向图， 我们不妨设从1号顶点起始。\n\n![img](Graph-search/image-3.png)\n\n在搜索过程中，我们维护一个布尔数组bool visited[N+1]，这个数组用来表示每个顶点是不是已经遍历过了。\n\n接下来，从1号开始进行DFS，遍历过的节点就在`visited[]`中标注。visited[i] == true表示顶点i已经遍历过了，visited[i] == false表示i还没有遍历过。DFS的具体方法可以用递归实现，直到所有节点都被遍历过结束。如果采用邻接矩阵，伪代码如下：\n\n```python\nVisited[]={0}\nDFS(x):\n\tVisited[x]=true\n\tfor(i=1;i<=N;i++):\n\t\tif(!Visited[i] && map[x][i]):\n\t\t\tDFS(i)\n```\n\n## 代码实现\n\n------\n\n### DFS递归实现\n\n```c++\n#include <iostream>\n#define N 5\nusing namespace std;\nint maze[N][N] = {\n    { 0, 1, 1, 0, 0 },\n    { 0, 0, 1, 0, 1 },\n    { 0, 0, 1, 0, 0 },\n    { 1, 1, 0, 0, 1 },\n    { 0, 0, 1, 0, 0 }\n};\nbool visited[N + 1];\nvoid DFS(int start)\n{\n    visited[start] = true;\n    for (int i = 1; i <= N; i++)\n        if (!visited[i] && maze[start - 1][i - 1] == 1)\n            DFS(i);\n    cout << start << \" \";\n}\nint main()\n{\n    for (int i = 1; i <= N; i++)\n    {\n        if (visited[i])\n            continue;\n        DFS(i);\n    }\n    return 0;\n}\n```\n\n### DFS非递归实现\n\n```c++\n#include <iostream>\n#include <stack>\n#define N 5\nusing namespace std;\nint maze[N][N] = {\n    { 0, 1, 1, 0, 0 },\n    { 0, 0, 1, 0, 1 },\n    { 0, 0, 1, 0, 0 },\n    { 1, 1, 0, 0, 1 },\n    { 0, 0, 1, 0, 0 }\n};\nbool visited[N + 1];\nvoid DFS(int start)\n{\n    stack<int> s;\n    s.push(start);\n    visited[start] = true;\n    bool is_push = false;\n    while (!s.empty())\n    {\n        is_push = false;\n        int v = s.top();\n        for (int i = 1; i <= N; i++)\n        {\n            if (maze[v - 1][i - 1] == 1 && !visited[i])\n            {\n                visited[i] = true;\n                s.push(i);\n                is_push = true;\n                break;\n            }\n        }\n        if (!is_push)\n        {\n            cout << v << \" \";\n            s.pop();\n        }\n    }\n}\nint main()\n{\n    for (int i = 1; i <= N; i++)\n    {\n        if (visited[i])\n            continue;\n        DFS(i);\n    }\n    return 0;\n}\n```\n\n### BFS实现\n\n```c++\n#include <iostream>\n#include <queue>\n#define N 5\nusing namespace std;\nint maze[N][N] = {\n    { 0, 1, 1, 0, 0 },\n    { 0, 0, 1, 1, 0 },\n    { 0, 1, 1, 1, 0 },\n    { 1, 0, 0, 0, 0 },\n    { 0, 0, 1, 1, 0 }\n};\nbool visited[N + 1];\nvoid BFS(int start)\n{\n    queue<int> Q;\n    Q.push(start);\n    visited[start] = true;\n    while (!Q.empty())\n    {\n        int front = Q.front();\n        cout << front << \" \";\n        Q.pop();\n        for (int i = 1; i <= N; i++)\n            if (!visited[i] && maze[front - 1][i - 1] == 1)\n            {\n                visited[i] = true;\n                Q.push(i);\n            }\n    }\n}\nint main()\n{\n    for (int i = 1; i <= N; i++)\n    {\n        if (visited[i])\n            continue;\n        BFS(i);\n    }\n    return 0;\n}\n```\n","slug":"Graph-search","published":1,"updated":"2022-03-10T09:18:43.524Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0o5i7410007ascyh9eth15t","content":"<h2 id=\"基础知识\"><a href=\"#基础知识\" class=\"headerlink\" title=\"基础知识\"></a>基础知识</h2><h3 id=\"图的定义和分类\"><a href=\"#图的定义和分类\" class=\"headerlink\" title=\"图的定义和分类\"></a>图的定义和分类</h3><ul>\n<li><p><strong>图的定义</strong> 是一个顶点集合V和一个顶点间关系的集合E组成，记G=(V,E) V：顶点的有限非空集合。 E：顶点间关系的有限集合（边集）。</p>\n</li>\n<li><p><strong>无向图</strong> (graph)在G=(V,E)中，如果对于任意的结点a,b∈V，当(a,b)∈E时，必有(b,a)∈E（即关系R对称），如图二。</p>\n<script type=\"math/tex; mode=display\">\nV={1,2,3,4,5}\\\\ \nE={(1,2),(1,3),(1,4),(2,3),(2,5),(3,5),(4,5)}</script></li>\n<li><p><strong>有向图</strong> (digraph)在G=(V,E)中，如果对于任意的结点a,b∈V，当(a,b)∈E时，(b,a)∈E未必成立，如图三。 </p>\n<script type=\"math/tex; mode=display\">\nV={1,2,3,4,5}\\\\\nE={<1,2>,<1,4>,<2,3>,<2,5>,<3,1>,<5,3>,<5,4>}</script></li>\n</ul>\n<p><img src=\"/2022/03/09/Graph-search/image-1.png\" alt=\"img\" loading=\"lazy\"></p>\n<ul>\n<li><strong>带权图</strong> 一般的图边上没有数字，边仅表示两个顶点间相连接关系 ，如图四。</li>\n<li><strong>连通图</strong>图中任意两个顶点都是连通的，称为连通图；否则为非连通图，如图五。</li>\n</ul>\n<p><img src=\"/2022/03/09/Graph-search/image-2.png\" alt=\"img\" loading=\"lazy\"></p>\n<h3 id=\"邻接矩阵和邻接表\"><a href=\"#邻接矩阵和邻接表\" class=\"headerlink\" title=\"邻接矩阵和邻接表\"></a>邻接矩阵和邻接表</h3><ul>\n<li><strong>邻接矩阵</strong></li>\n</ul>\n<p>邻接矩阵的优势是方便定义，只需要一个二维矩阵就可以解决；缺点也显而易见，浪费空间。</p>\n<p><img src=\"/2022/03/09/Graph-search/v2-9e2643ca5d96f86a391c36de4d3bd48d_720w.jpg\" alt=\"img\" loading=\"lazy\"></p>\n<ul>\n<li><strong>邻接表</strong></li>\n</ul>\n<p>邻接表的优势自然就是尽可能的节省更多的空间，但是与之相对应的就是定义起来很麻烦，需要用链表或者vector来实现。</p>\n<p><img src=\"/2022/03/09/Graph-search/v2-4a4d37df348f283649e2aecc74d959b5_720w.jpg\" alt=\"img\" loading=\"lazy\"></p>\n<p>*(图是网上抄的，看水印，如有侵权，请联系我)</p>\n<h2 id=\"图的遍历-DFS-amp-amp-BFS\"><a href=\"#图的遍历-DFS-amp-amp-BFS\" class=\"headerlink\" title=\"图的遍历(DFS&amp;&amp;BFS)\"></a>图的遍历(DFS&amp;&amp;BFS)</h2><hr>\n<p>好了，上面我们学习了图的概念以及如何存图，接下来就是重头戏了。</p>\n<p>接下来便是如何实现图的搜索，首先我们来看这样一个有向图， 我们不妨设从1号顶点起始。</p>\n<p><img src=\"/2022/03/09/Graph-search/image-3.png\" alt=\"img\" loading=\"lazy\"></p>\n<p>在搜索过程中，我们维护一个布尔数组bool visited[N+1]，这个数组用来表示每个顶点是不是已经遍历过了。</p>\n<p>接下来，从1号开始进行DFS，遍历过的节点就在<code>visited[]</code>中标注。visited[i] == true表示顶点i已经遍历过了，visited[i] == false表示i还没有遍历过。DFS的具体方法可以用递归实现，直到所有节点都被遍历过结束。如果采用邻接矩阵，伪代码如下：</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">Visited<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span>\nDFS<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\tVisited<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>true\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>N<span class=\"token punctuation\">;</span>i<span class=\"token operator\">+</span><span class=\"token operator\">+</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>!Visited<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;</span><span class=\"token operator\">&amp;</span> <span class=\"token builtin\">map</span><span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\t\tDFS<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span></code></pre>\n<h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><hr>\n<h3 id=\"DFS递归实现\"><a href=\"#DFS递归实现\" class=\"headerlink\" title=\"DFS递归实现\"></a>DFS递归实现</h3><pre class=\"language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include &lt;iostream&gt;\n#define N 5\nusing namespace std;\nint maze[N][N] &#x3D; &#123;\n    &#123; 0, 1, 1, 0, 0 &#125;,\n    &#123; 0, 0, 1, 0, 1 &#125;,\n    &#123; 0, 0, 1, 0, 0 &#125;,\n    &#123; 1, 1, 0, 0, 1 &#125;,\n    &#123; 0, 0, 1, 0, 0 &#125;\n&#125;;\nbool visited[N + 1];\nvoid DFS(int start)\n&#123;\n    visited[start] &#x3D; true;\n    for (int i &#x3D; 1; i &lt;&#x3D; N; i++)\n        if (!visited[i] &amp;&amp; maze[start - 1][i - 1] &#x3D;&#x3D; 1)\n            DFS(i);\n    cout &lt;&lt; start &lt;&lt; &quot; &quot;;\n&#125;\nint main()\n&#123;\n    for (int i &#x3D; 1; i &lt;&#x3D; N; i++)\n    &#123;\n        if (visited[i])\n            continue;\n        DFS(i);\n    &#125;\n    return 0;\n&#125;</code></pre>\n<h3 id=\"DFS非递归实现\"><a href=\"#DFS非递归实现\" class=\"headerlink\" title=\"DFS非递归实现\"></a>DFS非递归实现</h3><pre class=\"language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include &lt;iostream&gt;\n#include &lt;stack&gt;\n#define N 5\nusing namespace std;\nint maze[N][N] &#x3D; &#123;\n    &#123; 0, 1, 1, 0, 0 &#125;,\n    &#123; 0, 0, 1, 0, 1 &#125;,\n    &#123; 0, 0, 1, 0, 0 &#125;,\n    &#123; 1, 1, 0, 0, 1 &#125;,\n    &#123; 0, 0, 1, 0, 0 &#125;\n&#125;;\nbool visited[N + 1];\nvoid DFS(int start)\n&#123;\n    stack&lt;int&gt; s;\n    s.push(start);\n    visited[start] &#x3D; true;\n    bool is_push &#x3D; false;\n    while (!s.empty())\n    &#123;\n        is_push &#x3D; false;\n        int v &#x3D; s.top();\n        for (int i &#x3D; 1; i &lt;&#x3D; N; i++)\n        &#123;\n            if (maze[v - 1][i - 1] &#x3D;&#x3D; 1 &amp;&amp; !visited[i])\n            &#123;\n                visited[i] &#x3D; true;\n                s.push(i);\n                is_push &#x3D; true;\n                break;\n            &#125;\n        &#125;\n        if (!is_push)\n        &#123;\n            cout &lt;&lt; v &lt;&lt; &quot; &quot;;\n            s.pop();\n        &#125;\n    &#125;\n&#125;\nint main()\n&#123;\n    for (int i &#x3D; 1; i &lt;&#x3D; N; i++)\n    &#123;\n        if (visited[i])\n            continue;\n        DFS(i);\n    &#125;\n    return 0;\n&#125;</code></pre>\n<h3 id=\"BFS实现\"><a href=\"#BFS实现\" class=\"headerlink\" title=\"BFS实现\"></a>BFS实现</h3><pre class=\"language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include &lt;iostream&gt;\n#include &lt;queue&gt;\n#define N 5\nusing namespace std;\nint maze[N][N] &#x3D; &#123;\n    &#123; 0, 1, 1, 0, 0 &#125;,\n    &#123; 0, 0, 1, 1, 0 &#125;,\n    &#123; 0, 1, 1, 1, 0 &#125;,\n    &#123; 1, 0, 0, 0, 0 &#125;,\n    &#123; 0, 0, 1, 1, 0 &#125;\n&#125;;\nbool visited[N + 1];\nvoid BFS(int start)\n&#123;\n    queue&lt;int&gt; Q;\n    Q.push(start);\n    visited[start] &#x3D; true;\n    while (!Q.empty())\n    &#123;\n        int front &#x3D; Q.front();\n        cout &lt;&lt; front &lt;&lt; &quot; &quot;;\n        Q.pop();\n        for (int i &#x3D; 1; i &lt;&#x3D; N; i++)\n            if (!visited[i] &amp;&amp; maze[front - 1][i - 1] &#x3D;&#x3D; 1)\n            &#123;\n                visited[i] &#x3D; true;\n                Q.push(i);\n            &#125;\n    &#125;\n&#125;\nint main()\n&#123;\n    for (int i &#x3D; 1; i &lt;&#x3D; N; i++)\n    &#123;\n        if (visited[i])\n            continue;\n        BFS(i);\n    &#125;\n    return 0;\n&#125;</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"基础知识\"><a href=\"#基础知识\" class=\"headerlink\" title=\"基础知识\"></a>基础知识</h2><h3 id=\"图的定义和分类\"><a href=\"#图的定义和分类\" class=\"headerlink\" title=\"图的定义和分类\"></a>图的定义和分类</h3><ul>\n<li><p><strong>图的定义</strong> 是一个顶点集合V和一个顶点间关系的集合E组成，记G=(V,E) V：顶点的有限非空集合。 E：顶点间关系的有限集合（边集）。</p>\n</li>\n<li><p><strong>无向图</strong> (graph)在G=(V,E)中，如果对于任意的结点a,b∈V，当(a,b)∈E时，必有(b,a)∈E（即关系R对称），如图二。</p>\n<script type=\"math/tex; mode=display\">\nV={1,2,3,4,5}\\\\ \nE={(1,2),(1,3),(1,4),(2,3),(2,5),(3,5),(4,5)}</script></li>\n<li><p><strong>有向图</strong> (digraph)在G=(V,E)中，如果对于任意的结点a,b∈V，当(a,b)∈E时，(b,a)∈E未必成立，如图三。 </p>\n<script type=\"math/tex; mode=display\">\nV={1,2,3,4,5}\\\\\nE={<1,2>,<1,4>,<2,3>,<2,5>,<3,1>,<5,3>,<5,4>}</script></li>\n</ul>\n<p><img src=\"/2022/03/09/Graph-search/image-1.png\" alt=\"img\"></p>\n<ul>\n<li><strong>带权图</strong> 一般的图边上没有数字，边仅表示两个顶点间相连接关系 ，如图四。</li>\n<li><strong>连通图</strong>图中任意两个顶点都是连通的，称为连通图；否则为非连通图，如图五。</li>\n</ul>\n<p><img src=\"/2022/03/09/Graph-search/image-2.png\" alt=\"img\"></p>\n<h3 id=\"邻接矩阵和邻接表\"><a href=\"#邻接矩阵和邻接表\" class=\"headerlink\" title=\"邻接矩阵和邻接表\"></a>邻接矩阵和邻接表</h3><ul>\n<li><strong>邻接矩阵</strong></li>\n</ul>\n<p>邻接矩阵的优势是方便定义，只需要一个二维矩阵就可以解决；缺点也显而易见，浪费空间。</p>\n<p><img src=\"/2022/03/09/Graph-search/v2-9e2643ca5d96f86a391c36de4d3bd48d_720w.jpg\" alt=\"img\"></p>\n<ul>\n<li><strong>邻接表</strong></li>\n</ul>\n<p>邻接表的优势自然就是尽可能的节省更多的空间，但是与之相对应的就是定义起来很麻烦，需要用链表或者vector来实现。</p>\n<p><img src=\"/2022/03/09/Graph-search/v2-4a4d37df348f283649e2aecc74d959b5_720w.jpg\" alt=\"img\"></p>\n<p>*(图是网上抄的，看水印，如有侵权，请联系我)</p>\n<h2 id=\"图的遍历-DFS-amp-amp-BFS\"><a href=\"#图的遍历-DFS-amp-amp-BFS\" class=\"headerlink\" title=\"图的遍历(DFS&amp;&amp;BFS)\"></a>图的遍历(DFS&amp;&amp;BFS)</h2><hr>\n<p>好了，上面我们学习了图的概念以及如何存图，接下来就是重头戏了。</p>\n<p>接下来便是如何实现图的搜索，首先我们来看这样一个有向图， 我们不妨设从1号顶点起始。</p>\n<p><img src=\"/2022/03/09/Graph-search/image-3.png\" alt=\"img\"></p>\n<p>在搜索过程中，我们维护一个布尔数组bool visited[N+1]，这个数组用来表示每个顶点是不是已经遍历过了。</p>\n<p>接下来，从1号开始进行DFS，遍历过的节点就在<code>visited[]</code>中标注。visited[i] == true表示顶点i已经遍历过了，visited[i] == false表示i还没有遍历过。DFS的具体方法可以用递归实现，直到所有节点都被遍历过结束。如果采用邻接矩阵，伪代码如下：</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">Visited<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span>\nDFS<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\tVisited<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>true\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>N<span class=\"token punctuation\">;</span>i<span class=\"token operator\">+</span><span class=\"token operator\">+</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>!Visited<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;</span><span class=\"token operator\">&amp;</span> <span class=\"token builtin\">map</span><span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\t\tDFS<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span></code></pre>\n<h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><hr>\n<h3 id=\"DFS递归实现\"><a href=\"#DFS递归实现\" class=\"headerlink\" title=\"DFS递归实现\"></a>DFS递归实现</h3><pre class=\"language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include &lt;iostream&gt;\n#define N 5\nusing namespace std;\nint maze[N][N] &#x3D; &#123;\n    &#123; 0, 1, 1, 0, 0 &#125;,\n    &#123; 0, 0, 1, 0, 1 &#125;,\n    &#123; 0, 0, 1, 0, 0 &#125;,\n    &#123; 1, 1, 0, 0, 1 &#125;,\n    &#123; 0, 0, 1, 0, 0 &#125;\n&#125;;\nbool visited[N + 1];\nvoid DFS(int start)\n&#123;\n    visited[start] &#x3D; true;\n    for (int i &#x3D; 1; i &lt;&#x3D; N; i++)\n        if (!visited[i] &amp;&amp; maze[start - 1][i - 1] &#x3D;&#x3D; 1)\n            DFS(i);\n    cout &lt;&lt; start &lt;&lt; &quot; &quot;;\n&#125;\nint main()\n&#123;\n    for (int i &#x3D; 1; i &lt;&#x3D; N; i++)\n    &#123;\n        if (visited[i])\n            continue;\n        DFS(i);\n    &#125;\n    return 0;\n&#125;</code></pre>\n<h3 id=\"DFS非递归实现\"><a href=\"#DFS非递归实现\" class=\"headerlink\" title=\"DFS非递归实现\"></a>DFS非递归实现</h3><pre class=\"language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include &lt;iostream&gt;\n#include &lt;stack&gt;\n#define N 5\nusing namespace std;\nint maze[N][N] &#x3D; &#123;\n    &#123; 0, 1, 1, 0, 0 &#125;,\n    &#123; 0, 0, 1, 0, 1 &#125;,\n    &#123; 0, 0, 1, 0, 0 &#125;,\n    &#123; 1, 1, 0, 0, 1 &#125;,\n    &#123; 0, 0, 1, 0, 0 &#125;\n&#125;;\nbool visited[N + 1];\nvoid DFS(int start)\n&#123;\n    stack&lt;int&gt; s;\n    s.push(start);\n    visited[start] &#x3D; true;\n    bool is_push &#x3D; false;\n    while (!s.empty())\n    &#123;\n        is_push &#x3D; false;\n        int v &#x3D; s.top();\n        for (int i &#x3D; 1; i &lt;&#x3D; N; i++)\n        &#123;\n            if (maze[v - 1][i - 1] &#x3D;&#x3D; 1 &amp;&amp; !visited[i])\n            &#123;\n                visited[i] &#x3D; true;\n                s.push(i);\n                is_push &#x3D; true;\n                break;\n            &#125;\n        &#125;\n        if (!is_push)\n        &#123;\n            cout &lt;&lt; v &lt;&lt; &quot; &quot;;\n            s.pop();\n        &#125;\n    &#125;\n&#125;\nint main()\n&#123;\n    for (int i &#x3D; 1; i &lt;&#x3D; N; i++)\n    &#123;\n        if (visited[i])\n            continue;\n        DFS(i);\n    &#125;\n    return 0;\n&#125;</code></pre>\n<h3 id=\"BFS实现\"><a href=\"#BFS实现\" class=\"headerlink\" title=\"BFS实现\"></a>BFS实现</h3><pre class=\"language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include &lt;iostream&gt;\n#include &lt;queue&gt;\n#define N 5\nusing namespace std;\nint maze[N][N] &#x3D; &#123;\n    &#123; 0, 1, 1, 0, 0 &#125;,\n    &#123; 0, 0, 1, 1, 0 &#125;,\n    &#123; 0, 1, 1, 1, 0 &#125;,\n    &#123; 1, 0, 0, 0, 0 &#125;,\n    &#123; 0, 0, 1, 1, 0 &#125;\n&#125;;\nbool visited[N + 1];\nvoid BFS(int start)\n&#123;\n    queue&lt;int&gt; Q;\n    Q.push(start);\n    visited[start] &#x3D; true;\n    while (!Q.empty())\n    &#123;\n        int front &#x3D; Q.front();\n        cout &lt;&lt; front &lt;&lt; &quot; &quot;;\n        Q.pop();\n        for (int i &#x3D; 1; i &lt;&#x3D; N; i++)\n            if (!visited[i] &amp;&amp; maze[front - 1][i - 1] &#x3D;&#x3D; 1)\n            &#123;\n                visited[i] &#x3D; true;\n                Q.push(i);\n            &#125;\n    &#125;\n&#125;\nint main()\n&#123;\n    for (int i &#x3D; 1; i &lt;&#x3D; N; i++)\n    &#123;\n        if (visited[i])\n            continue;\n        BFS(i);\n    &#125;\n    return 0;\n&#125;</code></pre>\n"},{"title":"Hexo多电脑同步指南","date":"2022-03-08T08:51:28.000Z","author":"Tony","_content":"\n## 如何实现同步\n\nHexo的同步本质上很简单，使用`git`命令push一下，然后在另一台电脑pull一下就OK。但是我在实际的同步过程中却遇到了各种的报错，这篇文章同样也记录一下我遇到的问题，也为了后期我再次换电脑，或者再次遇到奇奇怪怪的报错做参考。\n\n我现在在家里使用**台式电脑**，在外使用轻薄的商务本（以下简称**笔记本**），所以就以此为例，介绍如何实现两个设备间的同步问题。\n\n首先，我的本地blog储存在台式电脑上面，我们需要将这个blog上传到GitHub上，准确的说是你的GitHub的分支上。我们的目的就是在你的GitHub仓库建一个分支，然后把这个分支当作一个中介，存储我们的源文件，当在A电脑上修改过后直接上传（push）到分支上，然后在B电脑上下载（pull）该分支的所有文件，这样就实现了多设备同步。\n\n### 首次从台式电脑上传本地文件到GitHub\n\n*注意所有命令都要在Hexo项目的目录下执行。\n\n```bash\ngit init # 首先要在台式电脑上初始化git\ngit remote add origin https://github.com/username/username.github.io.git # 添加Github上的仓库地址\n# username是你的GitHub的用户名\ngit checkout -b branch_name # 新建分支并切换到新建的分支\n# branch_name随便起名字，不过最好简单一点，比如Hexo\ngit add . # 添加所有本地文件到本地的git\ngit commit -m \"This is the first time to syn!\" # 提交备注\n# “这里的内容随便写，不过这句代码一定不要省略，后面会出问题！”\ngit push origin branch_name # 本地文件上传到hexo分支\n```\n\n### 首次从笔记本下载工程文件\n\n*注意另一台电脑上要部署好所有的环境，如git，Nodejs，SSH等，详情参考：[Hexo 网站搭建指南](https://tonylsx611.github.io/2022/02/24/Hexo_creation/)\n\n*注意所有命令都要在Hexo项目的目录下执行，没有目录的话找个地方新建一个。\n\n```bash\ngit clone -b branch_name https://github.com/username/username.github.io\n# 克隆分支到本地的博客文件夹\nsudo npm install -g hexo-cli # install hexo\nsudo npm install # 安装依赖库\nsudo npm install hexo-deployer-git # git部署相关配置\n```\n\n### 首次用笔记本更新文件\n\n```bash\nhexo clean && hexo d && hexo g && hexo s #更新Github中的master文件\n# 如果上面这部成功部署，就可以更新分支文件了\ngit add .\ngit commit -m \"...\"\ngit push origin branch_name\n```\n\n### 返回台式电脑进行编辑\n\n```bash\ngit pull origin branch_name # 从Github同步数据到台式电脑\n# 或者直接git pull也可以\n\n\n# 修改或者更新文章。。。\n\n\nhexo clean && hexo d && hexo g && hexo s #更新Github中的master文件\n# 如果上面这部成功部署，就可以更新分支文件了\ngit add .\ngit commit -m \"...\"\ngit push origin branch_name\n#有没有发现，跟上面的代码一样了，没错，这样就形成了循环！\n```\n\n完成首次同步之后的任何设备都可以使用上面的代码进行同步和更新。\n\n## 同步过程中遇到的问题\n\n### git pull文件冲突报错\n\n![Screenshot 2022-03-08 161552](Hexo-synchronization/Screenshot%202022-03-08%20161552.png)\n\n报错信息：\n\n`error: Your local changes to the following files would be overwritten by merge`\n\n报错原因：\n\n在同步的时候出现两个相同文件名内容不同的文件，导致冲突；比如笔记本修改了之前的某个文章，在台式机`pull` 的时候就会产生这样的错误。\n\n解决方法：\n\n```bash\ngit stash # 备份工作区内容\ngit pull origin branch_name # 下载分支内容\ngit stash pop # 恢复工作区内容\n```\n\n### Clone后首次部署报错\n\n![image-20220310172557250](Hexo-synchronization/image-20220310172557250.png)\n\n报错信息：\n\n```bash\nfatal: in unpopulated submodule '.deploy.git'\nFATAL:{\n\terror: Error: Spawn failed\n\t\t...\n}\n```\n\n报错原因：\n\n克隆远程分支到本地电脑的时候，把`.deploy.git`也一并克隆了过来，这个文件夹是部署到master的临时缓存文件夹，是另一个电脑部署用的，因此会产生冲突。\n\n解决方法：\n\n删掉本地的`.deploy.git`文件夹，重新部署。如果还有问题，可能是你开了多个命令行，多个terminal会产生冲突，全部关掉，重开一个来部署。\n\n### 本地未关联远程分支报错\n\n报错信息：\n\n```bash\nThere is no tracking information for the current branch.\nPlease specify which branch you want to merge with.\nSee git-pull(1) for details.\n\ngit pull <remote> <branch>\n\nIf you wish to set tracking information for this branch you can do so with:\n\ngit branch --set-upstream-to=origin/<branch> release\n```\n\n报错原因：\n\n在建立新的本地分支后，未与GitHub分支关联，通常出现在首次添加新的电脑时报错。\n\n解决方法：\n\n他不是说的明明白白的嘛，你就按照他的提示加一行代码，关联上就完了！这里的`remote_branch`就是GitHub上的远程分支，`your branch`就是你的本地分支。\n\n```bash\ngit branch --set-upstream-to=origin/remote_branch your_branch\n```\n\n### 变更远程分支名字导致的报错\n\n报错信息：\n\n```bash\nerror: src refspec master does not match any.\nerror: failed to push some refs to 'git@github.com:username/username.github.io'\n```\n\n报错原因：\n\n这个报错原因就很多了，可能是忘记在``git add .``后面加`commit`了，也可能是没有输入正确的分支名，也可能是别的。不过如果你玩了一定时间的hexo了，觉得刚开始设置的那个远程分支名太复杂了，然后手欠的改了名字，那么恭喜你，和我一样。\n\n解决方法：\n\n我尝试了网上各种的解决办法，由简入繁，你可以试着删掉`.git`文件夹（这是个隐藏的文件夹），然后重新上传到远程分支，看看可不可以解决问题，反正我是没解决掉。\n\n最后我觉得最简单也是最有效的方法是把整个blog的文件夹复制一份做备份，然后全部删掉，重新clone，解决了所有问题，也不算麻烦。\n\n---\n\n注：本文部分内容参考自[Hexo博客的安装部署及多电脑同步](https://cloud.tencent.com/developer/article/1046404)，如有侵权，请联系我。\n","source":"_posts/Hexo-synchronization.md","raw":"---\ntitle: Hexo多电脑同步指南\ndate: 2022-03-08 16:51:28\nauthor: Tony\ntags: \n\t- Hexo\ncategories:\n\t- Hexo搭建\n---\n\n## 如何实现同步\n\nHexo的同步本质上很简单，使用`git`命令push一下，然后在另一台电脑pull一下就OK。但是我在实际的同步过程中却遇到了各种的报错，这篇文章同样也记录一下我遇到的问题，也为了后期我再次换电脑，或者再次遇到奇奇怪怪的报错做参考。\n\n我现在在家里使用**台式电脑**，在外使用轻薄的商务本（以下简称**笔记本**），所以就以此为例，介绍如何实现两个设备间的同步问题。\n\n首先，我的本地blog储存在台式电脑上面，我们需要将这个blog上传到GitHub上，准确的说是你的GitHub的分支上。我们的目的就是在你的GitHub仓库建一个分支，然后把这个分支当作一个中介，存储我们的源文件，当在A电脑上修改过后直接上传（push）到分支上，然后在B电脑上下载（pull）该分支的所有文件，这样就实现了多设备同步。\n\n### 首次从台式电脑上传本地文件到GitHub\n\n*注意所有命令都要在Hexo项目的目录下执行。\n\n```bash\ngit init # 首先要在台式电脑上初始化git\ngit remote add origin https://github.com/username/username.github.io.git # 添加Github上的仓库地址\n# username是你的GitHub的用户名\ngit checkout -b branch_name # 新建分支并切换到新建的分支\n# branch_name随便起名字，不过最好简单一点，比如Hexo\ngit add . # 添加所有本地文件到本地的git\ngit commit -m \"This is the first time to syn!\" # 提交备注\n# “这里的内容随便写，不过这句代码一定不要省略，后面会出问题！”\ngit push origin branch_name # 本地文件上传到hexo分支\n```\n\n### 首次从笔记本下载工程文件\n\n*注意另一台电脑上要部署好所有的环境，如git，Nodejs，SSH等，详情参考：[Hexo 网站搭建指南](https://tonylsx611.github.io/2022/02/24/Hexo_creation/)\n\n*注意所有命令都要在Hexo项目的目录下执行，没有目录的话找个地方新建一个。\n\n```bash\ngit clone -b branch_name https://github.com/username/username.github.io\n# 克隆分支到本地的博客文件夹\nsudo npm install -g hexo-cli # install hexo\nsudo npm install # 安装依赖库\nsudo npm install hexo-deployer-git # git部署相关配置\n```\n\n### 首次用笔记本更新文件\n\n```bash\nhexo clean && hexo d && hexo g && hexo s #更新Github中的master文件\n# 如果上面这部成功部署，就可以更新分支文件了\ngit add .\ngit commit -m \"...\"\ngit push origin branch_name\n```\n\n### 返回台式电脑进行编辑\n\n```bash\ngit pull origin branch_name # 从Github同步数据到台式电脑\n# 或者直接git pull也可以\n\n\n# 修改或者更新文章。。。\n\n\nhexo clean && hexo d && hexo g && hexo s #更新Github中的master文件\n# 如果上面这部成功部署，就可以更新分支文件了\ngit add .\ngit commit -m \"...\"\ngit push origin branch_name\n#有没有发现，跟上面的代码一样了，没错，这样就形成了循环！\n```\n\n完成首次同步之后的任何设备都可以使用上面的代码进行同步和更新。\n\n## 同步过程中遇到的问题\n\n### git pull文件冲突报错\n\n![Screenshot 2022-03-08 161552](Hexo-synchronization/Screenshot%202022-03-08%20161552.png)\n\n报错信息：\n\n`error: Your local changes to the following files would be overwritten by merge`\n\n报错原因：\n\n在同步的时候出现两个相同文件名内容不同的文件，导致冲突；比如笔记本修改了之前的某个文章，在台式机`pull` 的时候就会产生这样的错误。\n\n解决方法：\n\n```bash\ngit stash # 备份工作区内容\ngit pull origin branch_name # 下载分支内容\ngit stash pop # 恢复工作区内容\n```\n\n### Clone后首次部署报错\n\n![image-20220310172557250](Hexo-synchronization/image-20220310172557250.png)\n\n报错信息：\n\n```bash\nfatal: in unpopulated submodule '.deploy.git'\nFATAL:{\n\terror: Error: Spawn failed\n\t\t...\n}\n```\n\n报错原因：\n\n克隆远程分支到本地电脑的时候，把`.deploy.git`也一并克隆了过来，这个文件夹是部署到master的临时缓存文件夹，是另一个电脑部署用的，因此会产生冲突。\n\n解决方法：\n\n删掉本地的`.deploy.git`文件夹，重新部署。如果还有问题，可能是你开了多个命令行，多个terminal会产生冲突，全部关掉，重开一个来部署。\n\n### 本地未关联远程分支报错\n\n报错信息：\n\n```bash\nThere is no tracking information for the current branch.\nPlease specify which branch you want to merge with.\nSee git-pull(1) for details.\n\ngit pull <remote> <branch>\n\nIf you wish to set tracking information for this branch you can do so with:\n\ngit branch --set-upstream-to=origin/<branch> release\n```\n\n报错原因：\n\n在建立新的本地分支后，未与GitHub分支关联，通常出现在首次添加新的电脑时报错。\n\n解决方法：\n\n他不是说的明明白白的嘛，你就按照他的提示加一行代码，关联上就完了！这里的`remote_branch`就是GitHub上的远程分支，`your branch`就是你的本地分支。\n\n```bash\ngit branch --set-upstream-to=origin/remote_branch your_branch\n```\n\n### 变更远程分支名字导致的报错\n\n报错信息：\n\n```bash\nerror: src refspec master does not match any.\nerror: failed to push some refs to 'git@github.com:username/username.github.io'\n```\n\n报错原因：\n\n这个报错原因就很多了，可能是忘记在``git add .``后面加`commit`了，也可能是没有输入正确的分支名，也可能是别的。不过如果你玩了一定时间的hexo了，觉得刚开始设置的那个远程分支名太复杂了，然后手欠的改了名字，那么恭喜你，和我一样。\n\n解决方法：\n\n我尝试了网上各种的解决办法，由简入繁，你可以试着删掉`.git`文件夹（这是个隐藏的文件夹），然后重新上传到远程分支，看看可不可以解决问题，反正我是没解决掉。\n\n最后我觉得最简单也是最有效的方法是把整个blog的文件夹复制一份做备份，然后全部删掉，重新clone，解决了所有问题，也不算麻烦。\n\n---\n\n注：本文部分内容参考自[Hexo博客的安装部署及多电脑同步](https://cloud.tencent.com/developer/article/1046404)，如有侵权，请联系我。\n","slug":"Hexo-synchronization","published":1,"updated":"2022-03-10T09:52:21.096Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0o5i7420008ascy46mf26q2","content":"<h2 id=\"如何实现同步\"><a href=\"#如何实现同步\" class=\"headerlink\" title=\"如何实现同步\"></a>如何实现同步</h2><p>Hexo的同步本质上很简单，使用<code>git</code>命令push一下，然后在另一台电脑pull一下就OK。但是我在实际的同步过程中却遇到了各种的报错，这篇文章同样也记录一下我遇到的问题，也为了后期我再次换电脑，或者再次遇到奇奇怪怪的报错做参考。</p>\n<p>我现在在家里使用<strong>台式电脑</strong>，在外使用轻薄的商务本（以下简称<strong>笔记本</strong>），所以就以此为例，介绍如何实现两个设备间的同步问题。</p>\n<p>首先，我的本地blog储存在台式电脑上面，我们需要将这个blog上传到GitHub上，准确的说是你的GitHub的分支上。我们的目的就是在你的GitHub仓库建一个分支，然后把这个分支当作一个中介，存储我们的源文件，当在A电脑上修改过后直接上传（push）到分支上，然后在B电脑上下载（pull）该分支的所有文件，这样就实现了多设备同步。</p>\n<h3 id=\"首次从台式电脑上传本地文件到GitHub\"><a href=\"#首次从台式电脑上传本地文件到GitHub\" class=\"headerlink\" title=\"首次从台式电脑上传本地文件到GitHub\"></a>首次从台式电脑上传本地文件到GitHub</h3><p>*注意所有命令都要在Hexo项目的目录下执行。</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> init <span class=\"token comment\"># 首先要在台式电脑上初始化git</span>\n<span class=\"token function\">git</span> remote <span class=\"token function\">add</span> origin https://github.com/username/username.github.io.git <span class=\"token comment\"># 添加Github上的仓库地址</span>\n<span class=\"token comment\"># username是你的GitHub的用户名</span>\n<span class=\"token function\">git</span> checkout -b branch_name <span class=\"token comment\"># 新建分支并切换到新建的分支</span>\n<span class=\"token comment\"># branch_name随便起名字，不过最好简单一点，比如Hexo</span>\n<span class=\"token function\">git</span> <span class=\"token function\">add</span> <span class=\"token builtin class-name\">.</span> <span class=\"token comment\"># 添加所有本地文件到本地的git</span>\n<span class=\"token function\">git</span> commit -m <span class=\"token string\">\"This is the first time to syn!\"</span> <span class=\"token comment\"># 提交备注</span>\n<span class=\"token comment\"># “这里的内容随便写，不过这句代码一定不要省略，后面会出问题！”</span>\n<span class=\"token function\">git</span> push origin branch_name <span class=\"token comment\"># 本地文件上传到hexo分支</span></code></pre>\n<h3 id=\"首次从笔记本下载工程文件\"><a href=\"#首次从笔记本下载工程文件\" class=\"headerlink\" title=\"首次从笔记本下载工程文件\"></a>首次从笔记本下载工程文件</h3><p>*注意另一台电脑上要部署好所有的环境，如git，Nodejs，SSH等，详情参考：<a href=\"https://tonylsx611.github.io/2022/02/24/Hexo_creation/\">Hexo 网站搭建指南</a></p>\n<p>*注意所有命令都要在Hexo项目的目录下执行，没有目录的话找个地方新建一个。</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> clone -b branch_name https://github.com/username/username.github.io\n<span class=\"token comment\"># 克隆分支到本地的博客文件夹</span>\n<span class=\"token function\">sudo</span> <span class=\"token function\">npm</span> <span class=\"token function\">install</span> -g hexo-cli <span class=\"token comment\"># install hexo</span>\n<span class=\"token function\">sudo</span> <span class=\"token function\">npm</span> <span class=\"token function\">install</span> <span class=\"token comment\"># 安装依赖库</span>\n<span class=\"token function\">sudo</span> <span class=\"token function\">npm</span> <span class=\"token function\">install</span> hexo-deployer-git <span class=\"token comment\"># git部署相关配置</span></code></pre>\n<h3 id=\"首次用笔记本更新文件\"><a href=\"#首次用笔记本更新文件\" class=\"headerlink\" title=\"首次用笔记本更新文件\"></a>首次用笔记本更新文件</h3><pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">hexo clean <span class=\"token operator\">&amp;&amp;</span> hexo d <span class=\"token operator\">&amp;&amp;</span> hexo g <span class=\"token operator\">&amp;&amp;</span> hexo s <span class=\"token comment\">#更新Github中的master文件</span>\n<span class=\"token comment\"># 如果上面这部成功部署，就可以更新分支文件了</span>\n<span class=\"token function\">git</span> <span class=\"token function\">add</span> <span class=\"token builtin class-name\">.</span>\n<span class=\"token function\">git</span> commit -m <span class=\"token string\">\"...\"</span>\n<span class=\"token function\">git</span> push origin branch_name</code></pre>\n<h3 id=\"返回台式电脑进行编辑\"><a href=\"#返回台式电脑进行编辑\" class=\"headerlink\" title=\"返回台式电脑进行编辑\"></a>返回台式电脑进行编辑</h3><pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> pull origin branch_name <span class=\"token comment\"># 从Github同步数据到台式电脑</span>\n<span class=\"token comment\"># 或者直接git pull也可以</span>\n\n\n<span class=\"token comment\"># 修改或者更新文章。。。</span>\n\n\nhexo clean <span class=\"token operator\">&amp;&amp;</span> hexo d <span class=\"token operator\">&amp;&amp;</span> hexo g <span class=\"token operator\">&amp;&amp;</span> hexo s <span class=\"token comment\">#更新Github中的master文件</span>\n<span class=\"token comment\"># 如果上面这部成功部署，就可以更新分支文件了</span>\n<span class=\"token function\">git</span> <span class=\"token function\">add</span> <span class=\"token builtin class-name\">.</span>\n<span class=\"token function\">git</span> commit -m <span class=\"token string\">\"...\"</span>\n<span class=\"token function\">git</span> push origin branch_name\n<span class=\"token comment\">#有没有发现，跟上面的代码一样了，没错，这样就形成了循环！</span></code></pre>\n<p>完成首次同步之后的任何设备都可以使用上面的代码进行同步和更新。</p>\n<h2 id=\"同步过程中遇到的问题\"><a href=\"#同步过程中遇到的问题\" class=\"headerlink\" title=\"同步过程中遇到的问题\"></a>同步过程中遇到的问题</h2><h3 id=\"git-pull文件冲突报错\"><a href=\"#git-pull文件冲突报错\" class=\"headerlink\" title=\"git pull文件冲突报错\"></a>git pull文件冲突报错</h3><p><img src=\"/2022/03/08/Hexo-synchronization/Screenshot%202022-03-08%20161552.png\" alt=\"Screenshot 2022-03-08 161552\" loading=\"lazy\"></p>\n<p>报错信息：</p>\n<p><code>error: Your local changes to the following files would be overwritten by merge</code></p>\n<p>报错原因：</p>\n<p>在同步的时候出现两个相同文件名内容不同的文件，导致冲突；比如笔记本修改了之前的某个文章，在台式机<code>pull</code> 的时候就会产生这样的错误。</p>\n<p>解决方法：</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> stash <span class=\"token comment\"># 备份工作区内容</span>\n<span class=\"token function\">git</span> pull origin branch_name <span class=\"token comment\"># 下载分支内容</span>\n<span class=\"token function\">git</span> stash pop <span class=\"token comment\"># 恢复工作区内容</span></code></pre>\n<h3 id=\"Clone后首次部署报错\"><a href=\"#Clone后首次部署报错\" class=\"headerlink\" title=\"Clone后首次部署报错\"></a>Clone后首次部署报错</h3><p><img src=\"/2022/03/08/Hexo-synchronization/image-20220310172557250.png\" alt=\"image-20220310172557250\" loading=\"lazy\"></p>\n<p>报错信息：</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">fatal: <span class=\"token keyword\">in</span> unpopulated submodule <span class=\"token string\">'.deploy.git'</span>\nFATAL:<span class=\"token punctuation\">&#123;</span>\n\terror: Error: Spawn failed\n\t\t<span class=\"token punctuation\">..</span>.\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<p>报错原因：</p>\n<p>克隆远程分支到本地电脑的时候，把<code>.deploy.git</code>也一并克隆了过来，这个文件夹是部署到master的临时缓存文件夹，是另一个电脑部署用的，因此会产生冲突。</p>\n<p>解决方法：</p>\n<p>删掉本地的<code>.deploy.git</code>文件夹，重新部署。如果还有问题，可能是你开了多个命令行，多个terminal会产生冲突，全部关掉，重开一个来部署。</p>\n<h3 id=\"本地未关联远程分支报错\"><a href=\"#本地未关联远程分支报错\" class=\"headerlink\" title=\"本地未关联远程分支报错\"></a>本地未关联远程分支报错</h3><p>报错信息：</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">There is no tracking information <span class=\"token keyword\">for</span> the current branch.\nPlease specify <span class=\"token function\">which</span> branch you want to merge with.\nSee git-pull<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> details.\n\n<span class=\"token function\">git</span> pull <span class=\"token operator\">&lt;</span>remote<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>branch<span class=\"token operator\">></span>\n\nIf you wish to <span class=\"token builtin class-name\">set</span> tracking information <span class=\"token keyword\">for</span> this branch you can <span class=\"token keyword\">do</span> so with:\n\n<span class=\"token function\">git</span> branch --set-upstream-to<span class=\"token operator\">=</span>origin/<span class=\"token operator\">&lt;</span>branch<span class=\"token operator\">></span> release</code></pre>\n<p>报错原因：</p>\n<p>在建立新的本地分支后，未与GitHub分支关联，通常出现在首次添加新的电脑时报错。</p>\n<p>解决方法：</p>\n<p>他不是说的明明白白的嘛，你就按照他的提示加一行代码，关联上就完了！这里的<code>remote_branch</code>就是GitHub上的远程分支，<code>your branch</code>就是你的本地分支。</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> branch --set-upstream-to<span class=\"token operator\">=</span>origin/remote_branch your_branch</code></pre>\n<h3 id=\"变更远程分支名字导致的报错\"><a href=\"#变更远程分支名字导致的报错\" class=\"headerlink\" title=\"变更远程分支名字导致的报错\"></a>变更远程分支名字导致的报错</h3><p>报错信息：</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">error: src refspec master does not match any.\nerror: failed to push some refs to <span class=\"token string\">'git@github.com:username/username.github.io'</span></code></pre>\n<p>报错原因：</p>\n<p>这个报错原因就很多了，可能是忘记在<code>git add .</code>后面加<code>commit</code>了，也可能是没有输入正确的分支名，也可能是别的。不过如果你玩了一定时间的hexo了，觉得刚开始设置的那个远程分支名太复杂了，然后手欠的改了名字，那么恭喜你，和我一样。</p>\n<p>解决方法：</p>\n<p>我尝试了网上各种的解决办法，由简入繁，你可以试着删掉<code>.git</code>文件夹（这是个隐藏的文件夹），然后重新上传到远程分支，看看可不可以解决问题，反正我是没解决掉。</p>\n<p>最后我觉得最简单也是最有效的方法是把整个blog的文件夹复制一份做备份，然后全部删掉，重新clone，解决了所有问题，也不算麻烦。</p>\n<hr>\n<p>注：本文部分内容参考自<a href=\"https://cloud.tencent.com/developer/article/1046404\">Hexo博客的安装部署及多电脑同步</a>，如有侵权，请联系我。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"如何实现同步\"><a href=\"#如何实现同步\" class=\"headerlink\" title=\"如何实现同步\"></a>如何实现同步</h2><p>Hexo的同步本质上很简单，使用<code>git</code>命令push一下，然后在另一台电脑pull一下就OK。但是我在实际的同步过程中却遇到了各种的报错，这篇文章同样也记录一下我遇到的问题，也为了后期我再次换电脑，或者再次遇到奇奇怪怪的报错做参考。</p>\n<p>我现在在家里使用<strong>台式电脑</strong>，在外使用轻薄的商务本（以下简称<strong>笔记本</strong>），所以就以此为例，介绍如何实现两个设备间的同步问题。</p>\n<p>首先，我的本地blog储存在台式电脑上面，我们需要将这个blog上传到GitHub上，准确的说是你的GitHub的分支上。我们的目的就是在你的GitHub仓库建一个分支，然后把这个分支当作一个中介，存储我们的源文件，当在A电脑上修改过后直接上传（push）到分支上，然后在B电脑上下载（pull）该分支的所有文件，这样就实现了多设备同步。</p>\n<h3 id=\"首次从台式电脑上传本地文件到GitHub\"><a href=\"#首次从台式电脑上传本地文件到GitHub\" class=\"headerlink\" title=\"首次从台式电脑上传本地文件到GitHub\"></a>首次从台式电脑上传本地文件到GitHub</h3><p>*注意所有命令都要在Hexo项目的目录下执行。</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> init <span class=\"token comment\"># 首先要在台式电脑上初始化git</span>\n<span class=\"token function\">git</span> remote <span class=\"token function\">add</span> origin https://github.com/username/username.github.io.git <span class=\"token comment\"># 添加Github上的仓库地址</span>\n<span class=\"token comment\"># username是你的GitHub的用户名</span>\n<span class=\"token function\">git</span> checkout -b branch_name <span class=\"token comment\"># 新建分支并切换到新建的分支</span>\n<span class=\"token comment\"># branch_name随便起名字，不过最好简单一点，比如Hexo</span>\n<span class=\"token function\">git</span> <span class=\"token function\">add</span> <span class=\"token builtin class-name\">.</span> <span class=\"token comment\"># 添加所有本地文件到本地的git</span>\n<span class=\"token function\">git</span> commit -m <span class=\"token string\">\"This is the first time to syn!\"</span> <span class=\"token comment\"># 提交备注</span>\n<span class=\"token comment\"># “这里的内容随便写，不过这句代码一定不要省略，后面会出问题！”</span>\n<span class=\"token function\">git</span> push origin branch_name <span class=\"token comment\"># 本地文件上传到hexo分支</span></code></pre>\n<h3 id=\"首次从笔记本下载工程文件\"><a href=\"#首次从笔记本下载工程文件\" class=\"headerlink\" title=\"首次从笔记本下载工程文件\"></a>首次从笔记本下载工程文件</h3><p>*注意另一台电脑上要部署好所有的环境，如git，Nodejs，SSH等，详情参考：<a href=\"https://tonylsx611.github.io/2022/02/24/Hexo_creation/\">Hexo 网站搭建指南</a></p>\n<p>*注意所有命令都要在Hexo项目的目录下执行，没有目录的话找个地方新建一个。</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> clone -b branch_name https://github.com/username/username.github.io\n<span class=\"token comment\"># 克隆分支到本地的博客文件夹</span>\n<span class=\"token function\">sudo</span> <span class=\"token function\">npm</span> <span class=\"token function\">install</span> -g hexo-cli <span class=\"token comment\"># install hexo</span>\n<span class=\"token function\">sudo</span> <span class=\"token function\">npm</span> <span class=\"token function\">install</span> <span class=\"token comment\"># 安装依赖库</span>\n<span class=\"token function\">sudo</span> <span class=\"token function\">npm</span> <span class=\"token function\">install</span> hexo-deployer-git <span class=\"token comment\"># git部署相关配置</span></code></pre>\n<h3 id=\"首次用笔记本更新文件\"><a href=\"#首次用笔记本更新文件\" class=\"headerlink\" title=\"首次用笔记本更新文件\"></a>首次用笔记本更新文件</h3><pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">hexo clean <span class=\"token operator\">&amp;&amp;</span> hexo d <span class=\"token operator\">&amp;&amp;</span> hexo g <span class=\"token operator\">&amp;&amp;</span> hexo s <span class=\"token comment\">#更新Github中的master文件</span>\n<span class=\"token comment\"># 如果上面这部成功部署，就可以更新分支文件了</span>\n<span class=\"token function\">git</span> <span class=\"token function\">add</span> <span class=\"token builtin class-name\">.</span>\n<span class=\"token function\">git</span> commit -m <span class=\"token string\">\"...\"</span>\n<span class=\"token function\">git</span> push origin branch_name</code></pre>\n<h3 id=\"返回台式电脑进行编辑\"><a href=\"#返回台式电脑进行编辑\" class=\"headerlink\" title=\"返回台式电脑进行编辑\"></a>返回台式电脑进行编辑</h3><pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> pull origin branch_name <span class=\"token comment\"># 从Github同步数据到台式电脑</span>\n<span class=\"token comment\"># 或者直接git pull也可以</span>\n\n\n<span class=\"token comment\"># 修改或者更新文章。。。</span>\n\n\nhexo clean <span class=\"token operator\">&amp;&amp;</span> hexo d <span class=\"token operator\">&amp;&amp;</span> hexo g <span class=\"token operator\">&amp;&amp;</span> hexo s <span class=\"token comment\">#更新Github中的master文件</span>\n<span class=\"token comment\"># 如果上面这部成功部署，就可以更新分支文件了</span>\n<span class=\"token function\">git</span> <span class=\"token function\">add</span> <span class=\"token builtin class-name\">.</span>\n<span class=\"token function\">git</span> commit -m <span class=\"token string\">\"...\"</span>\n<span class=\"token function\">git</span> push origin branch_name\n<span class=\"token comment\">#有没有发现，跟上面的代码一样了，没错，这样就形成了循环！</span></code></pre>\n<p>完成首次同步之后的任何设备都可以使用上面的代码进行同步和更新。</p>\n<h2 id=\"同步过程中遇到的问题\"><a href=\"#同步过程中遇到的问题\" class=\"headerlink\" title=\"同步过程中遇到的问题\"></a>同步过程中遇到的问题</h2><h3 id=\"git-pull文件冲突报错\"><a href=\"#git-pull文件冲突报错\" class=\"headerlink\" title=\"git pull文件冲突报错\"></a>git pull文件冲突报错</h3><p><img src=\"/2022/03/08/Hexo-synchronization/Screenshot%202022-03-08%20161552.png\" alt=\"Screenshot 2022-03-08 161552\"></p>\n<p>报错信息：</p>\n<p><code>error: Your local changes to the following files would be overwritten by merge</code></p>\n<p>报错原因：</p>\n<p>在同步的时候出现两个相同文件名内容不同的文件，导致冲突；比如笔记本修改了之前的某个文章，在台式机<code>pull</code> 的时候就会产生这样的错误。</p>\n<p>解决方法：</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> stash <span class=\"token comment\"># 备份工作区内容</span>\n<span class=\"token function\">git</span> pull origin branch_name <span class=\"token comment\"># 下载分支内容</span>\n<span class=\"token function\">git</span> stash pop <span class=\"token comment\"># 恢复工作区内容</span></code></pre>\n<h3 id=\"Clone后首次部署报错\"><a href=\"#Clone后首次部署报错\" class=\"headerlink\" title=\"Clone后首次部署报错\"></a>Clone后首次部署报错</h3><p><img src=\"/2022/03/08/Hexo-synchronization/image-20220310172557250.png\" alt=\"image-20220310172557250\"></p>\n<p>报错信息：</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">fatal: <span class=\"token keyword\">in</span> unpopulated submodule <span class=\"token string\">'.deploy.git'</span>\nFATAL:<span class=\"token punctuation\">&#123;</span>\n\terror: Error: Spawn failed\n\t\t<span class=\"token punctuation\">..</span>.\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<p>报错原因：</p>\n<p>克隆远程分支到本地电脑的时候，把<code>.deploy.git</code>也一并克隆了过来，这个文件夹是部署到master的临时缓存文件夹，是另一个电脑部署用的，因此会产生冲突。</p>\n<p>解决方法：</p>\n<p>删掉本地的<code>.deploy.git</code>文件夹，重新部署。如果还有问题，可能是你开了多个命令行，多个terminal会产生冲突，全部关掉，重开一个来部署。</p>\n<h3 id=\"本地未关联远程分支报错\"><a href=\"#本地未关联远程分支报错\" class=\"headerlink\" title=\"本地未关联远程分支报错\"></a>本地未关联远程分支报错</h3><p>报错信息：</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">There is no tracking information <span class=\"token keyword\">for</span> the current branch.\nPlease specify <span class=\"token function\">which</span> branch you want to merge with.\nSee git-pull<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> details.\n\n<span class=\"token function\">git</span> pull <span class=\"token operator\">&lt;</span>remote<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>branch<span class=\"token operator\">></span>\n\nIf you wish to <span class=\"token builtin class-name\">set</span> tracking information <span class=\"token keyword\">for</span> this branch you can <span class=\"token keyword\">do</span> so with:\n\n<span class=\"token function\">git</span> branch --set-upstream-to<span class=\"token operator\">=</span>origin/<span class=\"token operator\">&lt;</span>branch<span class=\"token operator\">></span> release</code></pre>\n<p>报错原因：</p>\n<p>在建立新的本地分支后，未与GitHub分支关联，通常出现在首次添加新的电脑时报错。</p>\n<p>解决方法：</p>\n<p>他不是说的明明白白的嘛，你就按照他的提示加一行代码，关联上就完了！这里的<code>remote_branch</code>就是GitHub上的远程分支，<code>your branch</code>就是你的本地分支。</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> branch --set-upstream-to<span class=\"token operator\">=</span>origin/remote_branch your_branch</code></pre>\n<h3 id=\"变更远程分支名字导致的报错\"><a href=\"#变更远程分支名字导致的报错\" class=\"headerlink\" title=\"变更远程分支名字导致的报错\"></a>变更远程分支名字导致的报错</h3><p>报错信息：</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">error: src refspec master does not match any.\nerror: failed to push some refs to <span class=\"token string\">'git@github.com:username/username.github.io'</span></code></pre>\n<p>报错原因：</p>\n<p>这个报错原因就很多了，可能是忘记在<code>git add .</code>后面加<code>commit</code>了，也可能是没有输入正确的分支名，也可能是别的。不过如果你玩了一定时间的hexo了，觉得刚开始设置的那个远程分支名太复杂了，然后手欠的改了名字，那么恭喜你，和我一样。</p>\n<p>解决方法：</p>\n<p>我尝试了网上各种的解决办法，由简入繁，你可以试着删掉<code>.git</code>文件夹（这是个隐藏的文件夹），然后重新上传到远程分支，看看可不可以解决问题，反正我是没解决掉。</p>\n<p>最后我觉得最简单也是最有效的方法是把整个blog的文件夹复制一份做备份，然后全部删掉，重新clone，解决了所有问题，也不算麻烦。</p>\n<hr>\n<p>注：本文部分内容参考自<a href=\"https://cloud.tencent.com/developer/article/1046404\">Hexo博客的安装部署及多电脑同步</a>，如有侵权，请联系我。</p>\n"},{"title":"DFS简介","date":"2022-03-10T07:08:58.000Z","katex":true,"_content":"\n## DFS基本概念\n\n**深度优先搜索算法**（Depth First Search）：一种用于遍历或搜索树或图的算法。 沿着树的深度遍历树的节点，尽可能深的搜索树的分支。 属于盲目搜索,最糟糕的情况算法时间复杂度为$O(n^2)$。\n\n---\n\n## 经典例题\n\n### P1706全排列问题\n\n注：题目来源自[洛谷](https://www.luogu.com.cn/problem/P1706)。\n\n#### 题目描述\n\n输出自然数 1 到 n 所有不重复的排列，即 *n* 的全排列，要求所产生的任一数字序列中不允许出现重复的数字。\n\n#### 输入格式\n\n一个整数 n。\n\n#### 输出格式\n\n由1∼*n* 组成的所有不重复的数字序列，每行一个序列。\n\n每个数字保留 5 个场宽。\n\n#### 输入输出样例\n\n**输入 #1**\n\n```bash\n3\n```\n\n**输出 #1**\n\n```bash\n    1    2    3\n    1    3    2\n    2    1    3\n    2    3    1\n    3    1    2\n    3    2    1\n```\n\n#### 说明/提示\n\n$1≤n≤9$\n\n#### 答案解析\n\n```c\n#include <iostream>\nusing namespace std;\nbool vis[100];//标记数字是否出现\nint a[100];//全排列数组\nint n;\nvoid dfs(int x)\n{\n    if (x == n+1)\n    {\n        for (int i = 1;i <= n;i++)\n                printf (\"%5d\",a[i]);\n        cout<<endl;\n        return;\n    }\n    for (int i = 1;i <= n;i++)\n    {\n        if (vis[i]==0)\n        {\n            vis[i] = 1;\n            a[x] = i;\n            dfs(x+1);//递归\n            vis[i] = 0;//回溯\n        }\n    }\n}\nint main()\n{\n    cin>>n; \n    dfs(1);\n    return 0;\n}\n```\n\n------\n\n### P1238 走迷宫\n\n注：题目来源[洛谷](https://www.luogu.com.cn/problem/P1238)。\n\n#### 题目描述\n\n有一个 $m\\times n$ 格的迷宫(表示有 $m$ 行、$n$列)，其中有可走的也有不可走的，如果用 $1$ 表示可以走，$0$ 表示不可以走，文件读入这 $m\\times n$ 个数据和起始点、结束点（起始点和结束点都是用两个数据来描述的，分别表示这个点的行号和列号）。现在要你编程找出所有可行的道路，要求所走的路中没有重复的点，走时只能是上下左右四个方向。如果一条路都不可行，则输出相应信息（用 $-1$ 表示无路）。\n\n优先顺序：左上右下。**数据保证随机生成。**\n\n#### 输入格式\n\n第一行是两个数 $m,n(1<m,n<15)$，接下来是 $m$行 $n$ 列由$1$ 和$ 0$ 组成的数据，最后两行是起始点和结束点。\n\n#### 输出格式\n\n所有可行的路径，描述一个点时用 $(x,y)$ 的形式，除开始点外，其他的都要用 `->` 表示方向。\n\n如果没有一条可行的路则输出 $-1$。\n\n#### 输入输出样例\n\n**输入 #1**\n\n```bash\n5 6\n1 0 0 1 0 1\n1 1 1 1 1 1\n0 0 1 1 1 0\n1 1 1 1 1 0\n1 1 1 0 1 1\n1 1\n5 6\n```\n\n**输出 #1**\n\n```bash\n(1,1)->(2,1)->(2,2)->(2,3)->(2,4)->(2,5)->(3,5)->(3,4)->(3,3)->(4,3)->(4,4)->(4,5)->(5,5)->(5,6)\n(1,1)->(2,1)->(2,2)->(2,3)->(2,4)->(2,5)->(3,5)->(3,4)->(4,4)->(4,5)->(5,5)->(5,6)\n(1,1)->(2,1)->(2,2)->(2,3)->(2,4)->(2,5)->(3,5)->(4,5)->(5,5)->(5,6)\n(1,1)->(2,1)->(2,2)->(2,3)->(2,4)->(3,4)->(3,3)->(4,3)->(4,4)->(4,5)->(5,5)->(5,6)\n(1,1)->(2,1)->(2,2)->(2,3)->(2,4)->(3,4)->(3,5)->(4,5)->(5,5)->(5,6)\n(1,1)->(2,1)->(2,2)->(2,3)->(2,4)->(3,4)->(4,4)->(4,5)->(5,5)->(5,6)\n(1,1)->(2,1)->(2,2)->(2,3)->(3,3)->(3,4)->(2,4)->(2,5)->(3,5)->(4,5)->(5,5)->(5,6)\n(1,1)->(2,1)->(2,2)->(2,3)->(3,3)->(3,4)->(3,5)->(4,5)->(5,5)->(5,6)\n(1,1)->(2,1)->(2,2)->(2,3)->(3,3)->(3,4)->(4,4)->(4,5)->(5,5)->(5,6)\n(1,1)->(2,1)->(2,2)->(2,3)->(3,3)->(4,3)->(4,4)->(3,4)->(2,4)->(2,5)->(3,5)->(4,5)->(5,5)->(5,6)\n(1,1)->(2,1)->(2,2)->(2,3)->(3,3)->(4,3)->(4,4)->(3,4)->(3,5)->(4,5)->(5,5)->(5,6)\n(1,1)->(2,1)->(2,2)->(2,3)->(3,3)->(4,3)->(4,4)->(4,5)->(5,5)->(5,6)\n```\n\n#### 说明/提示\n\n数据保证随机生成。事实上，如果 $n=m=14$ 且每个位置都是 $1$的话，有 $69450664761521361664274701548907358996488$ 种路径。\n\n#### 答案解析\n\n```c\n#include<iostream>\n#include<cstdio>\nusing namespace std;\nconst int N = 1001;\nbool map[N][N];\nbool visited[N][N];\nint output[N * N];//stack\nint pointer;\nbool solution;\n//for example, m=5,n=6\n//(2,3)==>(2-1)*n+3=9\n//(5,6)==>(5-1)*n+6=30\n//therefore, (x,y)==>(x-1)*n+y\nvoid dfs(int x, int y);\nint m, n, start_x, start_y, end_x, end_y;\nint main()\n{\n\tcin >> m >> n;\n\tfor (int i = 1; i <= m; i++)\n\t\tfor (int j = 1; j <= n; j++)\n\t\t\tcin >> map[i][j];\n\tcin >> start_x >> start_y;\n\tcin >> end_x >> end_y;\n\tif (map[start_x][start_y] == 0)\n\t{\n\t\tcout << \"-1\";\n\t\treturn 0;\n\t}\t\n\telse if (map[end_x][end_y] == 0)\n\t{\n\t\tcout << \"-1\";\n\t\treturn 0;\n\t}\n\telse \n\t\tdfs(start_x,start_y);\n\tif (!solution)\n\t\tcout << \"-1\";\n\treturn 0;\n}\nvoid dfs(int x,int y)\n{\n\tif (x<1 || y<1 || x>m || y> n)\n\t\treturn;\n\tif (visited[x][y] || !map[x][y])\n\t\treturn;\n\tif (x == end_x && y == end_y)\n\t{\n\t\tsolution = 1;\n\t\tfor (int i = 0; i < pointer; i++)\n\t\t\tif (output[i] % n)\n\t\t\t\tcout << \"(\" << output[i] / n + 1 << \",\" << output[i] % n << \")\" << \"->\";\n\t\t\telse\n\t\t\t\tcout << \"(\" << output[i] / n  << \",\" << n << \")\" << \"->\";\n\t\tcout << \"(\" << end_x << \",\" << end_y << \")\" << endl;\n\t\treturn;\n\t}\n\n\t//++++++++++\n\tvisited[x][y] = true;\n\toutput[pointer] = (x - 1) * n + y;\n\tpointer++;\t\n\t//++++++++++\n\n\tif (map[x][y - 1] && !visited[x][y-1])\n\t\tdfs(x, y - 1);\n\tif (map[x - 1][y] && !visited[x-1][y])\n\t\tdfs(x - 1, y);\n\tif (map[x][y + 1] && !visited[x][y+1])\n\t\tdfs(x, y + 1);\n\tif (map[x + 1][y] && !visited[x+1][y])\n\t\tdfs(x + 1, y);\n\n\t//----------\n\toutput[pointer] = 0;\n\tpointer--;\n\tvisited[x][y] = false;\n\t//----------\n\n\n}\n```\n\n---\n\n### 连通块问题（floodfill）\n\n注：我忘了在哪找的题了。。。\n\n#### 题目描述\n\n一个$n \\times m$的方格图，一些格子被涂成了黑色，在方格图中被标为$1$，白色格子标为$0$。问有多少个四连通的黑色格子连通块。四连通的黑色格子连通块指的是一片由黑色格子组成的区域，其中的每个黑色格子能通过四连通的走法（上下左右），只走黑色格子，到达该联通块中的其它黑色格子。\n\n#### 输入输出样例\n\n**输入 #1**\n\n```bash\n1 1\n*\n3 5\n*@*@*\n**@**\n*@*@*\n1 8\n@@****@*\n5 5\n****@\n*@@*@\n*@**@\n@@@*@\n@@**@\n0 0\n```\n\n**输出 #1**\n\n```bash\n0\n1\n2\n2\n```\n\n#### 答案解析\n\n```c\n#include<bits/stdc++.h>\nusing namespace std;\n#define maxn 100+5\nchar pic[maxn][maxn];//存图\nint m,n,idx[maxn][maxn];\nvoid dfs(int r,int c,int id)\n{\n    if(r<0||r>=m||c<0||c>=n)\n        return ;//出界的格子\n    if(idx[r][c]>0||pic[r][c]!='@')\n        return ;//不是'@'或已经被访问过\n    idx[r][c]=id;//将点记录下来\n    for(int dr=-1;dr<=1;dr++)\n        for(int dc=-1;dc<=1;dc++)\n            if(dr!=0||dc!=0)\n                dfs(r+dr,c+dc,id);//向四个方向搜索·\n}\nint main()\n{\n    while(scanf(\"%d%d\",&m,&n)==2 && m && n)\n    {\n        for(int i=0;i<m;i++)\n            scanf(\"%s\",pic[i]);\n        memset(idx,0,sizeof(idx));\n        int cnt=0;\n        for(int i=0;i<m;i++)\n            for(int j=0;j<n;j++)//每一次扫描所有为id的方格\n                if(idx[i][j]==0&&pic[i][j]=='@')\n                    dfs(i,j,++cnt);\n        printf(\"%d\\n\",cnt);\n    }\n    return 0;\n}\n```\n\n---\n\n$$\nEND\n$$\n\n","source":"_posts/DFS.md","raw":"---\ntitle: DFS简介\ndate: 2022-03-10 15:08:58\ntags:\n\t- algorithm\n\t- DFS\ncategories:\n\t- algorithm\nkatex: true\n\n---\n\n## DFS基本概念\n\n**深度优先搜索算法**（Depth First Search）：一种用于遍历或搜索树或图的算法。 沿着树的深度遍历树的节点，尽可能深的搜索树的分支。 属于盲目搜索,最糟糕的情况算法时间复杂度为$O(n^2)$。\n\n---\n\n## 经典例题\n\n### P1706全排列问题\n\n注：题目来源自[洛谷](https://www.luogu.com.cn/problem/P1706)。\n\n#### 题目描述\n\n输出自然数 1 到 n 所有不重复的排列，即 *n* 的全排列，要求所产生的任一数字序列中不允许出现重复的数字。\n\n#### 输入格式\n\n一个整数 n。\n\n#### 输出格式\n\n由1∼*n* 组成的所有不重复的数字序列，每行一个序列。\n\n每个数字保留 5 个场宽。\n\n#### 输入输出样例\n\n**输入 #1**\n\n```bash\n3\n```\n\n**输出 #1**\n\n```bash\n    1    2    3\n    1    3    2\n    2    1    3\n    2    3    1\n    3    1    2\n    3    2    1\n```\n\n#### 说明/提示\n\n$1≤n≤9$\n\n#### 答案解析\n\n```c\n#include <iostream>\nusing namespace std;\nbool vis[100];//标记数字是否出现\nint a[100];//全排列数组\nint n;\nvoid dfs(int x)\n{\n    if (x == n+1)\n    {\n        for (int i = 1;i <= n;i++)\n                printf (\"%5d\",a[i]);\n        cout<<endl;\n        return;\n    }\n    for (int i = 1;i <= n;i++)\n    {\n        if (vis[i]==0)\n        {\n            vis[i] = 1;\n            a[x] = i;\n            dfs(x+1);//递归\n            vis[i] = 0;//回溯\n        }\n    }\n}\nint main()\n{\n    cin>>n; \n    dfs(1);\n    return 0;\n}\n```\n\n------\n\n### P1238 走迷宫\n\n注：题目来源[洛谷](https://www.luogu.com.cn/problem/P1238)。\n\n#### 题目描述\n\n有一个 $m\\times n$ 格的迷宫(表示有 $m$ 行、$n$列)，其中有可走的也有不可走的，如果用 $1$ 表示可以走，$0$ 表示不可以走，文件读入这 $m\\times n$ 个数据和起始点、结束点（起始点和结束点都是用两个数据来描述的，分别表示这个点的行号和列号）。现在要你编程找出所有可行的道路，要求所走的路中没有重复的点，走时只能是上下左右四个方向。如果一条路都不可行，则输出相应信息（用 $-1$ 表示无路）。\n\n优先顺序：左上右下。**数据保证随机生成。**\n\n#### 输入格式\n\n第一行是两个数 $m,n(1<m,n<15)$，接下来是 $m$行 $n$ 列由$1$ 和$ 0$ 组成的数据，最后两行是起始点和结束点。\n\n#### 输出格式\n\n所有可行的路径，描述一个点时用 $(x,y)$ 的形式，除开始点外，其他的都要用 `->` 表示方向。\n\n如果没有一条可行的路则输出 $-1$。\n\n#### 输入输出样例\n\n**输入 #1**\n\n```bash\n5 6\n1 0 0 1 0 1\n1 1 1 1 1 1\n0 0 1 1 1 0\n1 1 1 1 1 0\n1 1 1 0 1 1\n1 1\n5 6\n```\n\n**输出 #1**\n\n```bash\n(1,1)->(2,1)->(2,2)->(2,3)->(2,4)->(2,5)->(3,5)->(3,4)->(3,3)->(4,3)->(4,4)->(4,5)->(5,5)->(5,6)\n(1,1)->(2,1)->(2,2)->(2,3)->(2,4)->(2,5)->(3,5)->(3,4)->(4,4)->(4,5)->(5,5)->(5,6)\n(1,1)->(2,1)->(2,2)->(2,3)->(2,4)->(2,5)->(3,5)->(4,5)->(5,5)->(5,6)\n(1,1)->(2,1)->(2,2)->(2,3)->(2,4)->(3,4)->(3,3)->(4,3)->(4,4)->(4,5)->(5,5)->(5,6)\n(1,1)->(2,1)->(2,2)->(2,3)->(2,4)->(3,4)->(3,5)->(4,5)->(5,5)->(5,6)\n(1,1)->(2,1)->(2,2)->(2,3)->(2,4)->(3,4)->(4,4)->(4,5)->(5,5)->(5,6)\n(1,1)->(2,1)->(2,2)->(2,3)->(3,3)->(3,4)->(2,4)->(2,5)->(3,5)->(4,5)->(5,5)->(5,6)\n(1,1)->(2,1)->(2,2)->(2,3)->(3,3)->(3,4)->(3,5)->(4,5)->(5,5)->(5,6)\n(1,1)->(2,1)->(2,2)->(2,3)->(3,3)->(3,4)->(4,4)->(4,5)->(5,5)->(5,6)\n(1,1)->(2,1)->(2,2)->(2,3)->(3,3)->(4,3)->(4,4)->(3,4)->(2,4)->(2,5)->(3,5)->(4,5)->(5,5)->(5,6)\n(1,1)->(2,1)->(2,2)->(2,3)->(3,3)->(4,3)->(4,4)->(3,4)->(3,5)->(4,5)->(5,5)->(5,6)\n(1,1)->(2,1)->(2,2)->(2,3)->(3,3)->(4,3)->(4,4)->(4,5)->(5,5)->(5,6)\n```\n\n#### 说明/提示\n\n数据保证随机生成。事实上，如果 $n=m=14$ 且每个位置都是 $1$的话，有 $69450664761521361664274701548907358996488$ 种路径。\n\n#### 答案解析\n\n```c\n#include<iostream>\n#include<cstdio>\nusing namespace std;\nconst int N = 1001;\nbool map[N][N];\nbool visited[N][N];\nint output[N * N];//stack\nint pointer;\nbool solution;\n//for example, m=5,n=6\n//(2,3)==>(2-1)*n+3=9\n//(5,6)==>(5-1)*n+6=30\n//therefore, (x,y)==>(x-1)*n+y\nvoid dfs(int x, int y);\nint m, n, start_x, start_y, end_x, end_y;\nint main()\n{\n\tcin >> m >> n;\n\tfor (int i = 1; i <= m; i++)\n\t\tfor (int j = 1; j <= n; j++)\n\t\t\tcin >> map[i][j];\n\tcin >> start_x >> start_y;\n\tcin >> end_x >> end_y;\n\tif (map[start_x][start_y] == 0)\n\t{\n\t\tcout << \"-1\";\n\t\treturn 0;\n\t}\t\n\telse if (map[end_x][end_y] == 0)\n\t{\n\t\tcout << \"-1\";\n\t\treturn 0;\n\t}\n\telse \n\t\tdfs(start_x,start_y);\n\tif (!solution)\n\t\tcout << \"-1\";\n\treturn 0;\n}\nvoid dfs(int x,int y)\n{\n\tif (x<1 || y<1 || x>m || y> n)\n\t\treturn;\n\tif (visited[x][y] || !map[x][y])\n\t\treturn;\n\tif (x == end_x && y == end_y)\n\t{\n\t\tsolution = 1;\n\t\tfor (int i = 0; i < pointer; i++)\n\t\t\tif (output[i] % n)\n\t\t\t\tcout << \"(\" << output[i] / n + 1 << \",\" << output[i] % n << \")\" << \"->\";\n\t\t\telse\n\t\t\t\tcout << \"(\" << output[i] / n  << \",\" << n << \")\" << \"->\";\n\t\tcout << \"(\" << end_x << \",\" << end_y << \")\" << endl;\n\t\treturn;\n\t}\n\n\t//++++++++++\n\tvisited[x][y] = true;\n\toutput[pointer] = (x - 1) * n + y;\n\tpointer++;\t\n\t//++++++++++\n\n\tif (map[x][y - 1] && !visited[x][y-1])\n\t\tdfs(x, y - 1);\n\tif (map[x - 1][y] && !visited[x-1][y])\n\t\tdfs(x - 1, y);\n\tif (map[x][y + 1] && !visited[x][y+1])\n\t\tdfs(x, y + 1);\n\tif (map[x + 1][y] && !visited[x+1][y])\n\t\tdfs(x + 1, y);\n\n\t//----------\n\toutput[pointer] = 0;\n\tpointer--;\n\tvisited[x][y] = false;\n\t//----------\n\n\n}\n```\n\n---\n\n### 连通块问题（floodfill）\n\n注：我忘了在哪找的题了。。。\n\n#### 题目描述\n\n一个$n \\times m$的方格图，一些格子被涂成了黑色，在方格图中被标为$1$，白色格子标为$0$。问有多少个四连通的黑色格子连通块。四连通的黑色格子连通块指的是一片由黑色格子组成的区域，其中的每个黑色格子能通过四连通的走法（上下左右），只走黑色格子，到达该联通块中的其它黑色格子。\n\n#### 输入输出样例\n\n**输入 #1**\n\n```bash\n1 1\n*\n3 5\n*@*@*\n**@**\n*@*@*\n1 8\n@@****@*\n5 5\n****@\n*@@*@\n*@**@\n@@@*@\n@@**@\n0 0\n```\n\n**输出 #1**\n\n```bash\n0\n1\n2\n2\n```\n\n#### 答案解析\n\n```c\n#include<bits/stdc++.h>\nusing namespace std;\n#define maxn 100+5\nchar pic[maxn][maxn];//存图\nint m,n,idx[maxn][maxn];\nvoid dfs(int r,int c,int id)\n{\n    if(r<0||r>=m||c<0||c>=n)\n        return ;//出界的格子\n    if(idx[r][c]>0||pic[r][c]!='@')\n        return ;//不是'@'或已经被访问过\n    idx[r][c]=id;//将点记录下来\n    for(int dr=-1;dr<=1;dr++)\n        for(int dc=-1;dc<=1;dc++)\n            if(dr!=0||dc!=0)\n                dfs(r+dr,c+dc,id);//向四个方向搜索·\n}\nint main()\n{\n    while(scanf(\"%d%d\",&m,&n)==2 && m && n)\n    {\n        for(int i=0;i<m;i++)\n            scanf(\"%s\",pic[i]);\n        memset(idx,0,sizeof(idx));\n        int cnt=0;\n        for(int i=0;i<m;i++)\n            for(int j=0;j<n;j++)//每一次扫描所有为id的方格\n                if(idx[i][j]==0&&pic[i][j]=='@')\n                    dfs(i,j,++cnt);\n        printf(\"%d\\n\",cnt);\n    }\n    return 0;\n}\n```\n\n---\n\n$$\nEND\n$$\n\n","slug":"DFS","published":1,"updated":"2022-03-10T09:44:05.786Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0o5i7430009ascyfnlp9klh","content":"<h2 id=\"DFS基本概念\"><a href=\"#DFS基本概念\" class=\"headerlink\" title=\"DFS基本概念\"></a>DFS基本概念</h2><p><strong>深度优先搜索算法</strong>（Depth First Search）：一种用于遍历或搜索树或图的算法。 沿着树的深度遍历树的节点，尽可能深的搜索树的分支。 属于盲目搜索,最糟糕的情况算法时间复杂度为$O(n^2)$。</p>\n<hr>\n<h2 id=\"经典例题\"><a href=\"#经典例题\" class=\"headerlink\" title=\"经典例题\"></a>经典例题</h2><h3 id=\"P1706全排列问题\"><a href=\"#P1706全排列问题\" class=\"headerlink\" title=\"P1706全排列问题\"></a>P1706全排列问题</h3><p>注：题目来源自<a href=\"https://www.luogu.com.cn/problem/P1706\">洛谷</a>。</p>\n<h4 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h4><p>输出自然数 1 到 n 所有不重复的排列，即 <em>n</em> 的全排列，要求所产生的任一数字序列中不允许出现重复的数字。</p>\n<h4 id=\"输入格式\"><a href=\"#输入格式\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h4><p>一个整数 n。</p>\n<h4 id=\"输出格式\"><a href=\"#输出格式\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h4><p>由1∼<em>n</em> 组成的所有不重复的数字序列，每行一个序列。</p>\n<p>每个数字保留 5 个场宽。</p>\n<h4 id=\"输入输出样例\"><a href=\"#输入输出样例\" class=\"headerlink\" title=\"输入输出样例\"></a>输入输出样例</h4><p><strong>输入 #1</strong></p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token number\">3</span></code></pre>\n<p><strong>输出 #1</strong></p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token number\">1</span>    <span class=\"token number\">2</span>    <span class=\"token number\">3</span>\n<span class=\"token number\">1</span>    <span class=\"token number\">3</span>    <span class=\"token number\">2</span>\n<span class=\"token number\">2</span>    <span class=\"token number\">1</span>    <span class=\"token number\">3</span>\n<span class=\"token number\">2</span>    <span class=\"token number\">3</span>    <span class=\"token number\">1</span>\n<span class=\"token number\">3</span>    <span class=\"token number\">1</span>    <span class=\"token number\">2</span>\n<span class=\"token number\">3</span>    <span class=\"token number\">2</span>    <span class=\"token number\">1</span></code></pre>\n<h4 id=\"说明-提示\"><a href=\"#说明-提示\" class=\"headerlink\" title=\"说明/提示\"></a>说明/提示</h4><p>$1≤n≤9$</p>\n<h4 id=\"答案解析\"><a href=\"#答案解析\" class=\"headerlink\" title=\"答案解析\"></a>答案解析</h4><pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\nusing namespace std<span class=\"token punctuation\">;</span>\nbool vis<span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//标记数字是否出现</span>\n<span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//全排列数组</span>\n<span class=\"token keyword\">int</span> n<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">==</span> n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n                <span class=\"token function\">printf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"%5d\"</span><span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        cout<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>vis<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            vis<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            a<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n            <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//递归</span>\n            vis<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//回溯</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    cin<span class=\"token operator\">>></span>n<span class=\"token punctuation\">;</span> \n    <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<hr>\n<h3 id=\"P1238-走迷宫\"><a href=\"#P1238-走迷宫\" class=\"headerlink\" title=\"P1238 走迷宫\"></a>P1238 走迷宫</h3><p>注：题目来源<a href=\"https://www.luogu.com.cn/problem/P1238\">洛谷</a>。</p>\n<h4 id=\"题目描述-1\"><a href=\"#题目描述-1\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h4><p>有一个 $m\\times n$ 格的迷宫(表示有 $m$ 行、$n$列)，其中有可走的也有不可走的，如果用 $1$ 表示可以走，$0$ 表示不可以走，文件读入这 $m\\times n$ 个数据和起始点、结束点（起始点和结束点都是用两个数据来描述的，分别表示这个点的行号和列号）。现在要你编程找出所有可行的道路，要求所走的路中没有重复的点，走时只能是上下左右四个方向。如果一条路都不可行，则输出相应信息（用 $-1$ 表示无路）。</p>\n<p>优先顺序：左上右下。<strong>数据保证随机生成。</strong></p>\n<h4 id=\"输入格式-1\"><a href=\"#输入格式-1\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h4><p>第一行是两个数 $m,n(1&lt;m,n&lt;15)$，接下来是 $m$行 $n$ 列由$1$ 和$ 0$ 组成的数据，最后两行是起始点和结束点。</p>\n<h4 id=\"输出格式-1\"><a href=\"#输出格式-1\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h4><p>所有可行的路径，描述一个点时用 $(x,y)$ 的形式，除开始点外，其他的都要用 <code>-&gt;</code> 表示方向。</p>\n<p>如果没有一条可行的路则输出 $-1$。</p>\n<h4 id=\"输入输出样例-1\"><a href=\"#输入输出样例-1\" class=\"headerlink\" title=\"输入输出样例\"></a>输入输出样例</h4><p><strong>输入 #1</strong></p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token number\">5</span> <span class=\"token number\">6</span>\n<span class=\"token number\">1</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">1</span> <span class=\"token number\">0</span> <span class=\"token number\">1</span>\n<span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span>\n<span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">0</span>\n<span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">0</span>\n<span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">0</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span>\n<span class=\"token number\">1</span> <span class=\"token number\">1</span>\n<span class=\"token number\">5</span> <span class=\"token number\">6</span></code></pre>\n<p><strong>输出 #1</strong></p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">(</span><span class=\"token number\">1,1</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,1</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,2</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,3</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,4</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,5</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">3,5</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">3,4</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">3,3</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">4,3</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">4,4</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">4,5</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">5,5</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">5,6</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">1,1</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,1</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,2</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,3</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,4</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,5</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">3,5</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">3,4</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">4,4</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">4,5</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">5,5</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">5,6</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">1,1</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,1</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,2</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,3</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,4</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,5</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">3,5</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">4,5</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">5,5</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">5,6</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">1,1</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,1</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,2</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,3</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,4</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">3,4</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">3,3</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">4,3</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">4,4</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">4,5</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">5,5</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">5,6</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">1,1</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,1</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,2</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,3</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,4</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">3,4</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">3,5</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">4,5</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">5,5</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">5,6</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">1,1</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,1</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,2</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,3</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,4</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">3,4</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">4,4</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">4,5</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">5,5</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">5,6</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">1,1</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,1</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,2</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,3</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">3,3</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">3,4</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,4</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,5</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">3,5</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">4,5</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">5,5</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">5,6</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">1,1</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,1</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,2</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,3</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">3,3</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">3,4</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">3,5</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">4,5</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">5,5</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">5,6</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">1,1</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,1</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,2</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,3</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">3,3</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">3,4</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">4,4</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">4,5</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">5,5</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">5,6</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">1,1</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,1</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,2</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,3</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">3,3</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">4,3</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">4,4</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">3,4</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,4</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,5</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">3,5</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">4,5</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">5,5</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">5,6</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">1,1</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,1</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,2</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,3</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">3,3</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">4,3</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">4,4</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">3,4</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">3,5</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">4,5</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">5,5</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">5,6</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">1,1</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,1</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,2</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,3</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">3,3</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">4,3</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">4,4</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">4,5</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">5,5</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">5,6</span><span class=\"token punctuation\">)</span></code></pre>\n<h4 id=\"说明-提示-1\"><a href=\"#说明-提示-1\" class=\"headerlink\" title=\"说明/提示\"></a>说明/提示</h4><p>数据保证随机生成。事实上，如果 $n=m=14$ 且每个位置都是 $1$的话，有 $69450664761521361664274701548907358996488$ 种路径。</p>\n<h4 id=\"答案解析-1\"><a href=\"#答案解析-1\" class=\"headerlink\" title=\"答案解析\"></a>答案解析</h4><pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;cstdio></span></span>\nusing namespace std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> N <span class=\"token operator\">=</span> <span class=\"token number\">1001</span><span class=\"token punctuation\">;</span>\nbool map<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nbool visited<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> output<span class=\"token punctuation\">[</span>N <span class=\"token operator\">*</span> N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//stack</span>\n<span class=\"token keyword\">int</span> pointer<span class=\"token punctuation\">;</span>\nbool solution<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//for example, m=5,n=6</span>\n<span class=\"token comment\">//(2,3)==>(2-1)*n+3=9</span>\n<span class=\"token comment\">//(5,6)==>(5-1)*n+6=30</span>\n<span class=\"token comment\">//therefore, (x,y)==>(x-1)*n+y</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> m<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> start_x<span class=\"token punctuation\">,</span> start_y<span class=\"token punctuation\">,</span> end_x<span class=\"token punctuation\">,</span> end_y<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\tcin <span class=\"token operator\">>></span> m <span class=\"token operator\">>></span> n<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> m<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t\tcin <span class=\"token operator\">>></span> map<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\tcin <span class=\"token operator\">>></span> start_x <span class=\"token operator\">>></span> start_y<span class=\"token punctuation\">;</span>\n\tcin <span class=\"token operator\">>></span> end_x <span class=\"token operator\">>></span> end_y<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">[</span>start_x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>start_y<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"-1\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\t\n\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">[</span>end_x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>end_y<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"-1\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">else</span> \n\t\t<span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>start_x<span class=\"token punctuation\">,</span>start_y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>solution<span class=\"token punctuation\">)</span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"-1\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x<span class=\"token operator\">&lt;</span><span class=\"token number\">1</span> <span class=\"token operator\">||</span> y<span class=\"token operator\">&lt;</span><span class=\"token number\">1</span> <span class=\"token operator\">||</span> x<span class=\"token operator\">></span>m <span class=\"token operator\">||</span> y<span class=\"token operator\">></span> n<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>visited<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>map<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">==</span> end_x <span class=\"token operator\">&amp;&amp;</span> y <span class=\"token operator\">==</span> end_y<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\tsolution <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> pointer<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>output<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">%</span> n<span class=\"token punctuation\">)</span>\n\t\t\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"(\"</span> <span class=\"token operator\">&lt;&lt;</span> output<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">/</span> n <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\",\"</span> <span class=\"token operator\">&lt;&lt;</span> output<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">%</span> n <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\")\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"->\"</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">else</span>\n\t\t\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"(\"</span> <span class=\"token operator\">&lt;&lt;</span> output<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">/</span> n  <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\",\"</span> <span class=\"token operator\">&lt;&lt;</span> n <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\")\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"->\"</span><span class=\"token punctuation\">;</span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"(\"</span> <span class=\"token operator\">&lt;&lt;</span> end_x <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\",\"</span> <span class=\"token operator\">&lt;&lt;</span> end_y <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\")\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token comment\">//++++++++++</span>\n\tvisited<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> true<span class=\"token punctuation\">;</span>\n\toutput<span class=\"token punctuation\">[</span>pointer<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> n <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span>\n\tpointer<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\t\n\t<span class=\"token comment\">//++++++++++</span>\n\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>visited<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">[</span>x <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>visited<span class=\"token punctuation\">[</span>x<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>visited<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">[</span>x <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>visited<span class=\"token punctuation\">[</span>x<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">//----------</span>\n\toutput<span class=\"token punctuation\">[</span>pointer<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\tpointer<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n\tvisited<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> false<span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//----------</span>\n\n\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<hr>\n<h3 id=\"连通块问题（floodfill）\"><a href=\"#连通块问题（floodfill）\" class=\"headerlink\" title=\"连通块问题（floodfill）\"></a>连通块问题（floodfill）</h3><p>注：我忘了在哪找的题了。。。</p>\n<h4 id=\"题目描述-2\"><a href=\"#题目描述-2\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h4><p>一个$n \\times m$的方格图，一些格子被涂成了黑色，在方格图中被标为$1$，白色格子标为$0$。问有多少个四连通的黑色格子连通块。四连通的黑色格子连通块指的是一片由黑色格子组成的区域，其中的每个黑色格子能通过四连通的走法（上下左右），只走黑色格子，到达该联通块中的其它黑色格子。</p>\n<h4 id=\"输入输出样例-2\"><a href=\"#输入输出样例-2\" class=\"headerlink\" title=\"输入输出样例\"></a>输入输出样例</h4><p><strong>输入 #1</strong></p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token number\">1</span> <span class=\"token number\">1</span>\n*\n<span class=\"token number\">3</span> <span class=\"token number\">5</span>\n*@*@*\n**@**\n*@*@*\n<span class=\"token number\">1</span> <span class=\"token number\">8</span>\n@@****@*\n<span class=\"token number\">5</span> <span class=\"token number\">5</span>\n****@\n*@@*@\n*@**@\n@@@*@\n@@**@\n<span class=\"token number\">0</span> <span class=\"token number\">0</span></code></pre>\n<p><strong>输出 #1</strong></p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token number\">0</span>\n<span class=\"token number\">1</span>\n<span class=\"token number\">2</span>\n<span class=\"token number\">2</span></code></pre>\n<h4 id=\"答案解析-2\"><a href=\"#答案解析-2\" class=\"headerlink\" title=\"答案解析\"></a>答案解析</h4><pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;bits/stdc++.h></span></span>\nusing namespace std<span class=\"token punctuation\">;</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">maxn</span> <span class=\"token expression\"><span class=\"token number\">100</span><span class=\"token operator\">+</span><span class=\"token number\">5</span></span></span>\n<span class=\"token keyword\">char</span> pic<span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//存图</span>\n<span class=\"token keyword\">int</span> m<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">,</span>idx<span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> r<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> c<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> id<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>r<span class=\"token operator\">&lt;</span><span class=\"token number\">0</span><span class=\"token operator\">||</span>r<span class=\"token operator\">>=</span>m<span class=\"token operator\">||</span>c<span class=\"token operator\">&lt;</span><span class=\"token number\">0</span><span class=\"token operator\">||</span>c<span class=\"token operator\">>=</span>n<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">;</span><span class=\"token comment\">//出界的格子</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>idx<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">]</span><span class=\"token operator\">></span><span class=\"token number\">0</span><span class=\"token operator\">||</span>pic<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">]</span><span class=\"token operator\">!=</span><span class=\"token char\">'@'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">;</span><span class=\"token comment\">//不是'@'或已经被访问过</span>\n    idx<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>id<span class=\"token punctuation\">;</span><span class=\"token comment\">//将点记录下来</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> dr<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>dr<span class=\"token operator\">&lt;=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>dr<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> dc<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>dc<span class=\"token operator\">&lt;=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>dc<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>dr<span class=\"token operator\">!=</span><span class=\"token number\">0</span><span class=\"token operator\">||</span>dc<span class=\"token operator\">!=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n                <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>r<span class=\"token operator\">+</span>dr<span class=\"token punctuation\">,</span>c<span class=\"token operator\">+</span>dc<span class=\"token punctuation\">,</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//向四个方向搜索·</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>m<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token number\">2</span> <span class=\"token operator\">&amp;&amp;</span> m <span class=\"token operator\">&amp;&amp;</span> n<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>m<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n            <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\"</span><span class=\"token punctuation\">,</span>pic<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>idx<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>idx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> cnt<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>m<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//每一次扫描所有为id的方格</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>idx<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token operator\">&amp;&amp;</span>pic<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token char\">'@'</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">,</span><span class=\"token operator\">++</span>cnt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span>cnt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<hr>\n<script type=\"math/tex; mode=display\">\nEND</script>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"DFS基本概念\"><a href=\"#DFS基本概念\" class=\"headerlink\" title=\"DFS基本概念\"></a>DFS基本概念</h2><p><strong>深度优先搜索算法</strong>（Depth First Search）：一种用于遍历或搜索树或图的算法。 沿着树的深度遍历树的节点，尽可能深的搜索树的分支。 属于盲目搜索,最糟糕的情况算法时间复杂度为$O(n^2)$。</p>\n<hr>\n<h2 id=\"经典例题\"><a href=\"#经典例题\" class=\"headerlink\" title=\"经典例题\"></a>经典例题</h2><h3 id=\"P1706全排列问题\"><a href=\"#P1706全排列问题\" class=\"headerlink\" title=\"P1706全排列问题\"></a>P1706全排列问题</h3><p>注：题目来源自<a href=\"https://www.luogu.com.cn/problem/P1706\">洛谷</a>。</p>\n<h4 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h4><p>输出自然数 1 到 n 所有不重复的排列，即 <em>n</em> 的全排列，要求所产生的任一数字序列中不允许出现重复的数字。</p>\n<h4 id=\"输入格式\"><a href=\"#输入格式\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h4><p>一个整数 n。</p>\n<h4 id=\"输出格式\"><a href=\"#输出格式\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h4><p>由1∼<em>n</em> 组成的所有不重复的数字序列，每行一个序列。</p>\n<p>每个数字保留 5 个场宽。</p>\n<h4 id=\"输入输出样例\"><a href=\"#输入输出样例\" class=\"headerlink\" title=\"输入输出样例\"></a>输入输出样例</h4><p><strong>输入 #1</strong></p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token number\">3</span></code></pre>\n<p><strong>输出 #1</strong></p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token number\">1</span>    <span class=\"token number\">2</span>    <span class=\"token number\">3</span>\n<span class=\"token number\">1</span>    <span class=\"token number\">3</span>    <span class=\"token number\">2</span>\n<span class=\"token number\">2</span>    <span class=\"token number\">1</span>    <span class=\"token number\">3</span>\n<span class=\"token number\">2</span>    <span class=\"token number\">3</span>    <span class=\"token number\">1</span>\n<span class=\"token number\">3</span>    <span class=\"token number\">1</span>    <span class=\"token number\">2</span>\n<span class=\"token number\">3</span>    <span class=\"token number\">2</span>    <span class=\"token number\">1</span></code></pre>\n<h4 id=\"说明-提示\"><a href=\"#说明-提示\" class=\"headerlink\" title=\"说明/提示\"></a>说明/提示</h4><p>$1≤n≤9$</p>\n<h4 id=\"答案解析\"><a href=\"#答案解析\" class=\"headerlink\" title=\"答案解析\"></a>答案解析</h4><pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\nusing namespace std<span class=\"token punctuation\">;</span>\nbool vis<span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//标记数字是否出现</span>\n<span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//全排列数组</span>\n<span class=\"token keyword\">int</span> n<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">==</span> n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n                <span class=\"token function\">printf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"%5d\"</span><span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        cout<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>vis<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            vis<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            a<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n            <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//递归</span>\n            vis<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//回溯</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    cin<span class=\"token operator\">>></span>n<span class=\"token punctuation\">;</span> \n    <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<hr>\n<h3 id=\"P1238-走迷宫\"><a href=\"#P1238-走迷宫\" class=\"headerlink\" title=\"P1238 走迷宫\"></a>P1238 走迷宫</h3><p>注：题目来源<a href=\"https://www.luogu.com.cn/problem/P1238\">洛谷</a>。</p>\n<h4 id=\"题目描述-1\"><a href=\"#题目描述-1\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h4><p>有一个 $m\\times n$ 格的迷宫(表示有 $m$ 行、$n$列)，其中有可走的也有不可走的，如果用 $1$ 表示可以走，$0$ 表示不可以走，文件读入这 $m\\times n$ 个数据和起始点、结束点（起始点和结束点都是用两个数据来描述的，分别表示这个点的行号和列号）。现在要你编程找出所有可行的道路，要求所走的路中没有重复的点，走时只能是上下左右四个方向。如果一条路都不可行，则输出相应信息（用 $-1$ 表示无路）。</p>\n<p>优先顺序：左上右下。<strong>数据保证随机生成。</strong></p>\n<h4 id=\"输入格式-1\"><a href=\"#输入格式-1\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h4><p>第一行是两个数 $m,n(1&lt;m,n&lt;15)$，接下来是 $m$行 $n$ 列由$1$ 和$ 0$ 组成的数据，最后两行是起始点和结束点。</p>\n<h4 id=\"输出格式-1\"><a href=\"#输出格式-1\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h4><p>所有可行的路径，描述一个点时用 $(x,y)$ 的形式，除开始点外，其他的都要用 <code>-&gt;</code> 表示方向。</p>\n<p>如果没有一条可行的路则输出 $-1$。</p>\n<h4 id=\"输入输出样例-1\"><a href=\"#输入输出样例-1\" class=\"headerlink\" title=\"输入输出样例\"></a>输入输出样例</h4><p><strong>输入 #1</strong></p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token number\">5</span> <span class=\"token number\">6</span>\n<span class=\"token number\">1</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">1</span> <span class=\"token number\">0</span> <span class=\"token number\">1</span>\n<span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span>\n<span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">0</span>\n<span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">0</span>\n<span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">0</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span>\n<span class=\"token number\">1</span> <span class=\"token number\">1</span>\n<span class=\"token number\">5</span> <span class=\"token number\">6</span></code></pre>\n<p><strong>输出 #1</strong></p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">(</span><span class=\"token number\">1,1</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,1</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,2</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,3</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,4</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,5</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">3,5</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">3,4</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">3,3</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">4,3</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">4,4</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">4,5</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">5,5</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">5,6</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">1,1</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,1</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,2</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,3</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,4</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,5</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">3,5</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">3,4</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">4,4</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">4,5</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">5,5</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">5,6</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">1,1</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,1</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,2</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,3</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,4</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,5</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">3,5</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">4,5</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">5,5</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">5,6</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">1,1</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,1</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,2</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,3</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,4</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">3,4</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">3,3</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">4,3</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">4,4</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">4,5</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">5,5</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">5,6</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">1,1</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,1</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,2</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,3</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,4</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">3,4</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">3,5</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">4,5</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">5,5</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">5,6</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">1,1</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,1</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,2</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,3</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,4</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">3,4</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">4,4</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">4,5</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">5,5</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">5,6</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">1,1</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,1</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,2</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,3</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">3,3</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">3,4</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,4</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,5</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">3,5</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">4,5</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">5,5</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">5,6</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">1,1</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,1</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,2</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,3</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">3,3</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">3,4</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">3,5</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">4,5</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">5,5</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">5,6</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">1,1</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,1</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,2</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,3</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">3,3</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">3,4</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">4,4</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">4,5</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">5,5</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">5,6</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">1,1</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,1</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,2</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,3</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">3,3</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">4,3</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">4,4</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">3,4</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,4</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,5</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">3,5</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">4,5</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">5,5</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">5,6</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">1,1</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,1</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,2</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,3</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">3,3</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">4,3</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">4,4</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">3,4</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">3,5</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">4,5</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">5,5</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">5,6</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">1,1</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,1</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,2</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2,3</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">3,3</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">4,3</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">4,4</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">4,5</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">5,5</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">5,6</span><span class=\"token punctuation\">)</span></code></pre>\n<h4 id=\"说明-提示-1\"><a href=\"#说明-提示-1\" class=\"headerlink\" title=\"说明/提示\"></a>说明/提示</h4><p>数据保证随机生成。事实上，如果 $n=m=14$ 且每个位置都是 $1$的话，有 $69450664761521361664274701548907358996488$ 种路径。</p>\n<h4 id=\"答案解析-1\"><a href=\"#答案解析-1\" class=\"headerlink\" title=\"答案解析\"></a>答案解析</h4><pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;cstdio></span></span>\nusing namespace std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> N <span class=\"token operator\">=</span> <span class=\"token number\">1001</span><span class=\"token punctuation\">;</span>\nbool map<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nbool visited<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> output<span class=\"token punctuation\">[</span>N <span class=\"token operator\">*</span> N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//stack</span>\n<span class=\"token keyword\">int</span> pointer<span class=\"token punctuation\">;</span>\nbool solution<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//for example, m=5,n=6</span>\n<span class=\"token comment\">//(2,3)==>(2-1)*n+3=9</span>\n<span class=\"token comment\">//(5,6)==>(5-1)*n+6=30</span>\n<span class=\"token comment\">//therefore, (x,y)==>(x-1)*n+y</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> m<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> start_x<span class=\"token punctuation\">,</span> start_y<span class=\"token punctuation\">,</span> end_x<span class=\"token punctuation\">,</span> end_y<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\tcin <span class=\"token operator\">>></span> m <span class=\"token operator\">>></span> n<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> m<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t\tcin <span class=\"token operator\">>></span> map<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\tcin <span class=\"token operator\">>></span> start_x <span class=\"token operator\">>></span> start_y<span class=\"token punctuation\">;</span>\n\tcin <span class=\"token operator\">>></span> end_x <span class=\"token operator\">>></span> end_y<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">[</span>start_x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>start_y<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"-1\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\t\n\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">[</span>end_x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>end_y<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"-1\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">else</span> \n\t\t<span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>start_x<span class=\"token punctuation\">,</span>start_y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>solution<span class=\"token punctuation\">)</span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"-1\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x<span class=\"token operator\">&lt;</span><span class=\"token number\">1</span> <span class=\"token operator\">||</span> y<span class=\"token operator\">&lt;</span><span class=\"token number\">1</span> <span class=\"token operator\">||</span> x<span class=\"token operator\">></span>m <span class=\"token operator\">||</span> y<span class=\"token operator\">></span> n<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>visited<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>map<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">==</span> end_x <span class=\"token operator\">&amp;&amp;</span> y <span class=\"token operator\">==</span> end_y<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\tsolution <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> pointer<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>output<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">%</span> n<span class=\"token punctuation\">)</span>\n\t\t\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"(\"</span> <span class=\"token operator\">&lt;&lt;</span> output<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">/</span> n <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\",\"</span> <span class=\"token operator\">&lt;&lt;</span> output<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">%</span> n <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\")\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"->\"</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">else</span>\n\t\t\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"(\"</span> <span class=\"token operator\">&lt;&lt;</span> output<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">/</span> n  <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\",\"</span> <span class=\"token operator\">&lt;&lt;</span> n <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\")\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"->\"</span><span class=\"token punctuation\">;</span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"(\"</span> <span class=\"token operator\">&lt;&lt;</span> end_x <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\",\"</span> <span class=\"token operator\">&lt;&lt;</span> end_y <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\")\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token comment\">//++++++++++</span>\n\tvisited<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> true<span class=\"token punctuation\">;</span>\n\toutput<span class=\"token punctuation\">[</span>pointer<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> n <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span>\n\tpointer<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\t\n\t<span class=\"token comment\">//++++++++++</span>\n\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>visited<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">[</span>x <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>visited<span class=\"token punctuation\">[</span>x<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>visited<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">[</span>x <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>visited<span class=\"token punctuation\">[</span>x<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">//----------</span>\n\toutput<span class=\"token punctuation\">[</span>pointer<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\tpointer<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n\tvisited<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> false<span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//----------</span>\n\n\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<hr>\n<h3 id=\"连通块问题（floodfill）\"><a href=\"#连通块问题（floodfill）\" class=\"headerlink\" title=\"连通块问题（floodfill）\"></a>连通块问题（floodfill）</h3><p>注：我忘了在哪找的题了。。。</p>\n<h4 id=\"题目描述-2\"><a href=\"#题目描述-2\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h4><p>一个$n \\times m$的方格图，一些格子被涂成了黑色，在方格图中被标为$1$，白色格子标为$0$。问有多少个四连通的黑色格子连通块。四连通的黑色格子连通块指的是一片由黑色格子组成的区域，其中的每个黑色格子能通过四连通的走法（上下左右），只走黑色格子，到达该联通块中的其它黑色格子。</p>\n<h4 id=\"输入输出样例-2\"><a href=\"#输入输出样例-2\" class=\"headerlink\" title=\"输入输出样例\"></a>输入输出样例</h4><p><strong>输入 #1</strong></p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token number\">1</span> <span class=\"token number\">1</span>\n*\n<span class=\"token number\">3</span> <span class=\"token number\">5</span>\n*@*@*\n**@**\n*@*@*\n<span class=\"token number\">1</span> <span class=\"token number\">8</span>\n@@****@*\n<span class=\"token number\">5</span> <span class=\"token number\">5</span>\n****@\n*@@*@\n*@**@\n@@@*@\n@@**@\n<span class=\"token number\">0</span> <span class=\"token number\">0</span></code></pre>\n<p><strong>输出 #1</strong></p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token number\">0</span>\n<span class=\"token number\">1</span>\n<span class=\"token number\">2</span>\n<span class=\"token number\">2</span></code></pre>\n<h4 id=\"答案解析-2\"><a href=\"#答案解析-2\" class=\"headerlink\" title=\"答案解析\"></a>答案解析</h4><pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;bits/stdc++.h></span></span>\nusing namespace std<span class=\"token punctuation\">;</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">maxn</span> <span class=\"token expression\"><span class=\"token number\">100</span><span class=\"token operator\">+</span><span class=\"token number\">5</span></span></span>\n<span class=\"token keyword\">char</span> pic<span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//存图</span>\n<span class=\"token keyword\">int</span> m<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">,</span>idx<span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> r<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> c<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> id<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>r<span class=\"token operator\">&lt;</span><span class=\"token number\">0</span><span class=\"token operator\">||</span>r<span class=\"token operator\">>=</span>m<span class=\"token operator\">||</span>c<span class=\"token operator\">&lt;</span><span class=\"token number\">0</span><span class=\"token operator\">||</span>c<span class=\"token operator\">>=</span>n<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">;</span><span class=\"token comment\">//出界的格子</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>idx<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">]</span><span class=\"token operator\">></span><span class=\"token number\">0</span><span class=\"token operator\">||</span>pic<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">]</span><span class=\"token operator\">!=</span><span class=\"token char\">'@'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">;</span><span class=\"token comment\">//不是'@'或已经被访问过</span>\n    idx<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>id<span class=\"token punctuation\">;</span><span class=\"token comment\">//将点记录下来</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> dr<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>dr<span class=\"token operator\">&lt;=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>dr<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> dc<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>dc<span class=\"token operator\">&lt;=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>dc<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>dr<span class=\"token operator\">!=</span><span class=\"token number\">0</span><span class=\"token operator\">||</span>dc<span class=\"token operator\">!=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n                <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>r<span class=\"token operator\">+</span>dr<span class=\"token punctuation\">,</span>c<span class=\"token operator\">+</span>dc<span class=\"token punctuation\">,</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//向四个方向搜索·</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>m<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token number\">2</span> <span class=\"token operator\">&amp;&amp;</span> m <span class=\"token operator\">&amp;&amp;</span> n<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>m<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n            <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\"</span><span class=\"token punctuation\">,</span>pic<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>idx<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>idx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> cnt<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>m<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//每一次扫描所有为id的方格</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>idx<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token operator\">&amp;&amp;</span>pic<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token char\">'@'</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">,</span><span class=\"token operator\">++</span>cnt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span>cnt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<hr>\n<script type=\"math/tex; mode=display\">\nEND</script>"},{"title":"Hexo文章发布指南","date":"2022-02-19T16:34:49.000Z","author":"Tony","katex":true,"_content":"\n## Upload your first article\n\n### Create a new post\n\n``` bash\nhexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\nhexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\nhexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\nhexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n\n### Advanced Settings\n\n​\t\tCreate a bat format file (e.g. `start.bat`) in the root folder of your blog.\n\n```bash\nhexo clean & hexo d & hexo g & hexo s\npause\n```\n\n​\t\tThen every time you uploaded a file or change any settings, you can just double click the .bat file to update your blog, which is very convenience.\n\n## Hexo发布类型样例\n\n### Title\n\n在md下直接使用 # 进行新建标题，左侧菜单栏会自动生成H1-H6的标题，very nice!\n\n<img src=\"Hexo_article/image-20220308162506034.png\" alt=\"image-20220308162506034\" style=\"zoom:50%;\" />\n\n### 头部字段\n\n在文章的第一行使用三个`-`（就是分割线）来创建头部字段。\n\n- 格式如下：\n\n```\ntitle: Hexo文章发布指南\ndate: 2077-02-20 00:34:49\nauthor: Tony\ncategories:\n\t- Hexo搭建\ntags: \n\t- tag1\n\t- tag2\nkatex: true\n```\n\n其中，`categories`在一篇文章中建议只设置一个，而`tags`可以设置很多个。这样可以防止文章分类混乱，在左侧菜单栏中可以很方便的访问。\n\n![image-20220308162715529](Hexo_article/image-20220308162715529.png)\n\n### 数学公式\n\n行内公式使用 $\\$$ 将数学公式括起来就好，行间公式使用两个$\\$\\$$，这跟md的格式是一样的。\n\n需要注意的是，如果文章中需要使用数学公式，最好在头部字段前添加`katex: true`的字样。\n\n- 数学公式样例：\n\n我是行内公式：$x=x^{45}+3$，我还可以接着写。。。\n$$\nx_1=x_3+2\\times x^6\\\\\n\\alpha：我是行间公式\\\\\n\\left[\n\\begin{matrix}\n1 & 2 & 3\\\\\n4 & 5 & 6\\\\\n7 & 8 & 9\\\\\n\\end{matrix}\n\\right]\n$$\n\n### 图片\n\n只需要将图片拖入md文档中即可，md会自动创建一个与文件名相同的文件夹以储存所有的图片素材，并会自动将图片复制到该文件夹中，因此所有的图片只需要输入相对路径即可。\n\n比如，本文章的名字为test，那么只需要这样写：`![IMG_1479](test/IMG_1479.jpg)`\n\n注：Hexo支持GIF格式的图片哦！\n\n![IMG_1479](Hexo_article/IMG_1479.jpg)\n\n![2d6f869662e83398f06070e2a14f838](Hexo_article/2d6f869662e83398f06070e2a14f838.jpg)\n\n![traffic-light](Hexo_article/traffic-light.gif)\n\n### 代码\n\n主题中默认代码有些会很丑，建议修改`_config.yml`中的指令把代码前面的行号取消，这样或许会变得好看一些，个人建议仅供参考。\n\n```c++\n#include<iostream>\nusing namespace std;\nint main()\n{\n\tint a,b,c;\n\tcin>>a>>c;\n\tfor(int i=0;i<a;i++)\n\t\tcout<<c*a<<endl;\n\treturn 0;\n}\n```\n\n### 文字\n\n- 高亮语法：==Highlight==ing （==）\n- 加粗：**Bold** （\\*\\*）\n- 斜体：*Wall*（\\*）\n- 删除线：~~请给我打钱~~（~~）\n\n### 音频及视频\n\n暂不支持。。。\n\n（正在努力开发中。。。）\n\n\n```html\n<video src='test/DSC_7412.MOV' \n       type='video/mp4' \n       controls='controls'  \n       preload=\"auto\"\n       width='100%' \n       height='100%'>\n</video>\n```\n\n$$\nEND\n$$\n","source":"_posts/Hexo_article.md","raw":"---\n\ntitle: Hexo文章发布指南\ndate: 2022-02-20 00:34:49\nauthor: Tony\ncategories:\n\t- Hexo搭建\ntags: \n\t- Hexo\nkatex: true\n---\n\n## Upload your first article\n\n### Create a new post\n\n``` bash\nhexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\nhexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\nhexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\nhexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n\n### Advanced Settings\n\n​\t\tCreate a bat format file (e.g. `start.bat`) in the root folder of your blog.\n\n```bash\nhexo clean & hexo d & hexo g & hexo s\npause\n```\n\n​\t\tThen every time you uploaded a file or change any settings, you can just double click the .bat file to update your blog, which is very convenience.\n\n## Hexo发布类型样例\n\n### Title\n\n在md下直接使用 # 进行新建标题，左侧菜单栏会自动生成H1-H6的标题，very nice!\n\n<img src=\"Hexo_article/image-20220308162506034.png\" alt=\"image-20220308162506034\" style=\"zoom:50%;\" />\n\n### 头部字段\n\n在文章的第一行使用三个`-`（就是分割线）来创建头部字段。\n\n- 格式如下：\n\n```\ntitle: Hexo文章发布指南\ndate: 2077-02-20 00:34:49\nauthor: Tony\ncategories:\n\t- Hexo搭建\ntags: \n\t- tag1\n\t- tag2\nkatex: true\n```\n\n其中，`categories`在一篇文章中建议只设置一个，而`tags`可以设置很多个。这样可以防止文章分类混乱，在左侧菜单栏中可以很方便的访问。\n\n![image-20220308162715529](Hexo_article/image-20220308162715529.png)\n\n### 数学公式\n\n行内公式使用 $\\$$ 将数学公式括起来就好，行间公式使用两个$\\$\\$$，这跟md的格式是一样的。\n\n需要注意的是，如果文章中需要使用数学公式，最好在头部字段前添加`katex: true`的字样。\n\n- 数学公式样例：\n\n我是行内公式：$x=x^{45}+3$，我还可以接着写。。。\n$$\nx_1=x_3+2\\times x^6\\\\\n\\alpha：我是行间公式\\\\\n\\left[\n\\begin{matrix}\n1 & 2 & 3\\\\\n4 & 5 & 6\\\\\n7 & 8 & 9\\\\\n\\end{matrix}\n\\right]\n$$\n\n### 图片\n\n只需要将图片拖入md文档中即可，md会自动创建一个与文件名相同的文件夹以储存所有的图片素材，并会自动将图片复制到该文件夹中，因此所有的图片只需要输入相对路径即可。\n\n比如，本文章的名字为test，那么只需要这样写：`![IMG_1479](test/IMG_1479.jpg)`\n\n注：Hexo支持GIF格式的图片哦！\n\n![IMG_1479](Hexo_article/IMG_1479.jpg)\n\n![2d6f869662e83398f06070e2a14f838](Hexo_article/2d6f869662e83398f06070e2a14f838.jpg)\n\n![traffic-light](Hexo_article/traffic-light.gif)\n\n### 代码\n\n主题中默认代码有些会很丑，建议修改`_config.yml`中的指令把代码前面的行号取消，这样或许会变得好看一些，个人建议仅供参考。\n\n```c++\n#include<iostream>\nusing namespace std;\nint main()\n{\n\tint a,b,c;\n\tcin>>a>>c;\n\tfor(int i=0;i<a;i++)\n\t\tcout<<c*a<<endl;\n\treturn 0;\n}\n```\n\n### 文字\n\n- 高亮语法：==Highlight==ing （==）\n- 加粗：**Bold** （\\*\\*）\n- 斜体：*Wall*（\\*）\n- 删除线：~~请给我打钱~~（~~）\n\n### 音频及视频\n\n暂不支持。。。\n\n（正在努力开发中。。。）\n\n\n```html\n<video src='test/DSC_7412.MOV' \n       type='video/mp4' \n       controls='controls'  \n       preload=\"auto\"\n       width='100%' \n       height='100%'>\n</video>\n```\n\n$$\nEND\n$$\n","slug":"Hexo_article","published":1,"updated":"2022-03-10T09:18:43.529Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0o5i745000cascy7satesig","content":"<h2 id=\"Upload-your-first-article\"><a href=\"#Upload-your-first-article\" class=\"headerlink\" title=\"Upload your first article\"></a>Upload your first article</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">hexo new <span class=\"token string\">\"My New Post\"</span></code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">hexo server</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">hexo generate</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">hexo deploy</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n<h3 id=\"Advanced-Settings\"><a href=\"#Advanced-Settings\" class=\"headerlink\" title=\"Advanced Settings\"></a>Advanced Settings</h3><p>​        Create a bat format file (e.g. <code>start.bat</code>) in the root folder of your blog.</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">hexo clean <span class=\"token operator\">&amp;</span> hexo d <span class=\"token operator\">&amp;</span> hexo g <span class=\"token operator\">&amp;</span> hexo s\npause</code></pre>\n<p>​        Then every time you uploaded a file or change any settings, you can just double click the .bat file to update your blog, which is very convenience.</p>\n<h2 id=\"Hexo发布类型样例\"><a href=\"#Hexo发布类型样例\" class=\"headerlink\" title=\"Hexo发布类型样例\"></a>Hexo发布类型样例</h2><h3 id=\"Title\"><a href=\"#Title\" class=\"headerlink\" title=\"Title\"></a>Title</h3><p>在md下直接使用 # 进行新建标题，左侧菜单栏会自动生成H1-H6的标题，very nice!</p>\n<p><img src=\"/2022/02/20/Hexo_article/image-20220308162506034.png\" alt=\"image-20220308162506034\" style=\"zoom:50%;\" loading=\"lazy\"></p>\n<h3 id=\"头部字段\"><a href=\"#头部字段\" class=\"headerlink\" title=\"头部字段\"></a>头部字段</h3><p>在文章的第一行使用三个<code>-</code>（就是分割线）来创建头部字段。</p>\n<ul>\n<li>格式如下：</li>\n</ul>\n<pre class=\"language-none\"><code class=\"language-none\">title: Hexo文章发布指南\ndate: 2077-02-20 00:34:49\nauthor: Tony\ncategories:\n\t- Hexo搭建\ntags: \n\t- tag1\n\t- tag2\nkatex: true</code></pre>\n<p>其中，<code>categories</code>在一篇文章中建议只设置一个，而<code>tags</code>可以设置很多个。这样可以防止文章分类混乱，在左侧菜单栏中可以很方便的访问。</p>\n<p><img src=\"/2022/02/20/Hexo_article/image-20220308162715529.png\" alt=\"image-20220308162715529\" loading=\"lazy\"></p>\n<h3 id=\"数学公式\"><a href=\"#数学公式\" class=\"headerlink\" title=\"数学公式\"></a>数学公式</h3><p>行内公式使用 $$$ 将数学公式括起来就好，行间公式使用两个$$$$，这跟md的格式是一样的。</p>\n<p>需要注意的是，如果文章中需要使用数学公式，最好在头部字段前添加<code>katex: true</code>的字样。</p>\n<ul>\n<li>数学公式样例：</li>\n</ul>\n<p>我是行内公式：$x=x^{45}+3$，我还可以接着写。。。</p>\n<script type=\"math/tex; mode=display\">\nx_1=x_3+2\\times x^6\\\\\n\\alpha：我是行间公式\\\\\n\\left[\n\\begin{matrix}\n1 & 2 & 3\\\\\n4 & 5 & 6\\\\\n7 & 8 & 9\\\\\n\\end{matrix}\n\\right]</script><h3 id=\"图片\"><a href=\"#图片\" class=\"headerlink\" title=\"图片\"></a>图片</h3><p>只需要将图片拖入md文档中即可，md会自动创建一个与文件名相同的文件夹以储存所有的图片素材，并会自动将图片复制到该文件夹中，因此所有的图片只需要输入相对路径即可。</p>\n<p>比如，本文章的名字为test，那么只需要这样写：<code>![IMG_1479](test/IMG_1479.jpg)</code></p>\n<p>注：Hexo支持GIF格式的图片哦！</p>\n<p><img src=\"/2022/02/20/Hexo_article/IMG_1479.jpg\" alt=\"IMG_1479\" loading=\"lazy\"></p>\n<p><img src=\"/2022/02/20/Hexo_article/2d6f869662e83398f06070e2a14f838.jpg\" alt=\"2d6f869662e83398f06070e2a14f838\" loading=\"lazy\"></p>\n<p><img src=\"/2022/02/20/Hexo_article/traffic-light.gif\" alt=\"traffic-light\" loading=\"lazy\"></p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><p>主题中默认代码有些会很丑，建议修改<code>_config.yml</code>中的指令把代码前面的行号取消，这样或许会变得好看一些，个人建议仅供参考。</p>\n<pre class=\"language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include&lt;iostream&gt;\nusing namespace std;\nint main()\n&#123;\n\tint a,b,c;\n\tcin&gt;&gt;a&gt;&gt;c;\n\tfor(int i&#x3D;0;i&lt;a;i++)\n\t\tcout&lt;&lt;c*a&lt;&lt;endl;\n\treturn 0;\n&#125;</code></pre>\n<h3 id=\"文字\"><a href=\"#文字\" class=\"headerlink\" title=\"文字\"></a>文字</h3><ul>\n<li>高亮语法：==Highlight==ing （==）</li>\n<li>加粗：<strong>Bold</strong> （**）</li>\n<li>斜体：<em>Wall</em>（*）</li>\n<li>删除线：<del>请给我打钱</del>（~~）</li>\n</ul>\n<h3 id=\"音频及视频\"><a href=\"#音频及视频\" class=\"headerlink\" title=\"音频及视频\"></a>音频及视频</h3><p>暂不支持。。。</p>\n<p>（正在努力开发中。。。）</p>\n<pre class=\"language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>video</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>test/DSC_7412.MOV<span class=\"token punctuation\">'</span></span> \n       <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>video/mp4<span class=\"token punctuation\">'</span></span> \n       <span class=\"token attr-name\">controls</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>controls<span class=\"token punctuation\">'</span></span>  \n       <span class=\"token attr-name\">preload</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>auto<span class=\"token punctuation\">\"</span></span>\n       <span class=\"token attr-name\">width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>100%<span class=\"token punctuation\">'</span></span> \n       <span class=\"token attr-name\">height</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>100%<span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>video</span><span class=\"token punctuation\">></span></span></code></pre>\n<script type=\"math/tex; mode=display\">\nEND</script>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Upload-your-first-article\"><a href=\"#Upload-your-first-article\" class=\"headerlink\" title=\"Upload your first article\"></a>Upload your first article</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">hexo new <span class=\"token string\">\"My New Post\"</span></code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">hexo server</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">hexo generate</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">hexo deploy</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n<h3 id=\"Advanced-Settings\"><a href=\"#Advanced-Settings\" class=\"headerlink\" title=\"Advanced Settings\"></a>Advanced Settings</h3><p>​        Create a bat format file (e.g. <code>start.bat</code>) in the root folder of your blog.</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">hexo clean <span class=\"token operator\">&amp;</span> hexo d <span class=\"token operator\">&amp;</span> hexo g <span class=\"token operator\">&amp;</span> hexo s\npause</code></pre>\n<p>​        Then every time you uploaded a file or change any settings, you can just double click the .bat file to update your blog, which is very convenience.</p>\n<h2 id=\"Hexo发布类型样例\"><a href=\"#Hexo发布类型样例\" class=\"headerlink\" title=\"Hexo发布类型样例\"></a>Hexo发布类型样例</h2><h3 id=\"Title\"><a href=\"#Title\" class=\"headerlink\" title=\"Title\"></a>Title</h3><p>在md下直接使用 # 进行新建标题，左侧菜单栏会自动生成H1-H6的标题，very nice!</p>\n<p><img src=\"/2022/02/20/Hexo_article/image-20220308162506034.png\" alt=\"image-20220308162506034\" style=\"zoom:50%;\"></p>\n<h3 id=\"头部字段\"><a href=\"#头部字段\" class=\"headerlink\" title=\"头部字段\"></a>头部字段</h3><p>在文章的第一行使用三个<code>-</code>（就是分割线）来创建头部字段。</p>\n<ul>\n<li>格式如下：</li>\n</ul>\n<pre class=\"language-none\"><code class=\"language-none\">title: Hexo文章发布指南\ndate: 2077-02-20 00:34:49\nauthor: Tony\ncategories:\n\t- Hexo搭建\ntags: \n\t- tag1\n\t- tag2\nkatex: true</code></pre>\n<p>其中，<code>categories</code>在一篇文章中建议只设置一个，而<code>tags</code>可以设置很多个。这样可以防止文章分类混乱，在左侧菜单栏中可以很方便的访问。</p>\n<p><img src=\"/2022/02/20/Hexo_article/image-20220308162715529.png\" alt=\"image-20220308162715529\"></p>\n<h3 id=\"数学公式\"><a href=\"#数学公式\" class=\"headerlink\" title=\"数学公式\"></a>数学公式</h3><p>行内公式使用 $$$ 将数学公式括起来就好，行间公式使用两个$$$$，这跟md的格式是一样的。</p>\n<p>需要注意的是，如果文章中需要使用数学公式，最好在头部字段前添加<code>katex: true</code>的字样。</p>\n<ul>\n<li>数学公式样例：</li>\n</ul>\n<p>我是行内公式：$x=x^{45}+3$，我还可以接着写。。。</p>\n<script type=\"math/tex; mode=display\">\nx_1=x_3+2\\times x^6\\\\\n\\alpha：我是行间公式\\\\\n\\left[\n\\begin{matrix}\n1 & 2 & 3\\\\\n4 & 5 & 6\\\\\n7 & 8 & 9\\\\\n\\end{matrix}\n\\right]</script><h3 id=\"图片\"><a href=\"#图片\" class=\"headerlink\" title=\"图片\"></a>图片</h3><p>只需要将图片拖入md文档中即可，md会自动创建一个与文件名相同的文件夹以储存所有的图片素材，并会自动将图片复制到该文件夹中，因此所有的图片只需要输入相对路径即可。</p>\n<p>比如，本文章的名字为test，那么只需要这样写：<code>![IMG_1479](test/IMG_1479.jpg)</code></p>\n<p>注：Hexo支持GIF格式的图片哦！</p>\n<p><img src=\"/2022/02/20/Hexo_article/IMG_1479.jpg\" alt=\"IMG_1479\"></p>\n<p><img src=\"/2022/02/20/Hexo_article/2d6f869662e83398f06070e2a14f838.jpg\" alt=\"2d6f869662e83398f06070e2a14f838\"></p>\n<p><img src=\"/2022/02/20/Hexo_article/traffic-light.gif\" alt=\"traffic-light\"></p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><p>主题中默认代码有些会很丑，建议修改<code>_config.yml</code>中的指令把代码前面的行号取消，这样或许会变得好看一些，个人建议仅供参考。</p>\n<pre class=\"language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include&lt;iostream&gt;\nusing namespace std;\nint main()\n&#123;\n\tint a,b,c;\n\tcin&gt;&gt;a&gt;&gt;c;\n\tfor(int i&#x3D;0;i&lt;a;i++)\n\t\tcout&lt;&lt;c*a&lt;&lt;endl;\n\treturn 0;\n&#125;</code></pre>\n<h3 id=\"文字\"><a href=\"#文字\" class=\"headerlink\" title=\"文字\"></a>文字</h3><ul>\n<li>高亮语法：==Highlight==ing （==）</li>\n<li>加粗：<strong>Bold</strong> （**）</li>\n<li>斜体：<em>Wall</em>（*）</li>\n<li>删除线：<del>请给我打钱</del>（~~）</li>\n</ul>\n<h3 id=\"音频及视频\"><a href=\"#音频及视频\" class=\"headerlink\" title=\"音频及视频\"></a>音频及视频</h3><p>暂不支持。。。</p>\n<p>（正在努力开发中。。。）</p>\n<pre class=\"language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>video</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>test/DSC_7412.MOV<span class=\"token punctuation\">'</span></span> \n       <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>video/mp4<span class=\"token punctuation\">'</span></span> \n       <span class=\"token attr-name\">controls</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>controls<span class=\"token punctuation\">'</span></span>  \n       <span class=\"token attr-name\">preload</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>auto<span class=\"token punctuation\">\"</span></span>\n       <span class=\"token attr-name\">width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>100%<span class=\"token punctuation\">'</span></span> \n       <span class=\"token attr-name\">height</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>100%<span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>video</span><span class=\"token punctuation\">></span></span></code></pre>\n<script type=\"math/tex; mode=display\">\nEND</script>"},{"title":"Hexo 网站搭建指南","date":"2022-02-23T19:14:29.000Z","author":"Tony","_content":"# Hexo 网站搭建指南\n\nWelcome to [Hexo](https://hexo.io/)! \n\nThis is a Guideline of building your own hexo, which is written in English, but easy to understand!\n\n## Preparation and Installation\n\n### Git Installation\n\n- Linux/Mac:\n\n```bash\nsudo apt install git\n```\n\n- Windows:\n\nOfficial link: [Download git](https://gitforwindows.org/)\n\n- Check whether installed or not:\n\n```bash\ngit --version\n```\n\n### Nodejs Installation\n\n- Linux/Mac:\n\n```bash\nsudo apt install nodejs\nsudo aot install npm\n```\n\n- Windows:\n\nOfficial link: [nodejs](https://nodejs.org/en/download/) (Suggest you to choose LTS version)\n\n- Check whether installed or not:\n\n```bash\nnode -v\nnpm -v\n```\n\n### Hexo Installation\n\n- Linux/Mac:\n\n```bash\nsudo npm install -g hexo-cli\n```\n\n- Windows:\n\n```bash\nnpm install -g hexo-cli\n```\n\n- Check whether installed or not:\n\n```bash\nhexo -v\n```\n\n## Deploy local Hexo\n\n​\t\tFirst you need to **choose or create a folder** to storage the local hexo website. For instance, in `C:/Software/My_Hexo`.\n\n​\t\tThen right click the folder, click `open in Windows terminal`; or just use command line to get into that folder.\n\n```bash\nsudo hexo init Mybolg\nls Myblog\nsudo npm install\n```\n\n​\t\t*Note that you can replace `Mybolg` into any word you like.\n\n​\t\tNow you can see some files inside the folder, but only three folders you need to concerntrated.\n\n![image-20220308165404552](Hexo_creation/image-20220308165404552.png)\n\n- node_modules: 依赖包\n- public：存放生成的页面\n- scaffolds：生成文章的一些模板\n- ==source==：你的文章和素材放在这里\n- ==themes==：字面意思\n- ==_config.yml==: 博客的配置文件\n\n## Use GitHub to host\n\n### Create a new repository on GitHub\n\n​\t\tFirstly, you need to have a GitHub account…\n\n​\t\tThen, create a **new repository** on GitHub and named `yourusername.github.io`, note that you **must** named like this (`yourusername` is your user name), otherwise the deployment cannot be recognized.\n\n![image-20220308165502809](Hexo_creation/image-20220308165502809.png) \n\n### Add SSH key to GitHub\n\n​\t\tBack to the terminal, generate the SSH and add it into GitHub so that GitHub can know whether the your computer are visiting the corresponding account.\n\n```bash\ngit cofig --global user.name \"yourusername\"\ngit cofig --global user.email \"youremail\"\nssh-keygen -t rsa -C \"youremail\"\n```\n\n​\t\tThe computer then will tell you the path of `.ssh`, find it on your computer, and open it via notepad.\n\n​\t\tTo say it simpler, SSH is just the ID of your computer, GitHub recognized your computer via this ID. `id_rsa` is your private key that you cannot show it to others, while `id_rsa.pub` is the public key, you can copy the info to GitHub.\n\n​\t\t`Github -> settings -> personal settings -> SSH and PGP keys -> New SSH key`\n\n​\t\tYou can verify whether add the SSH key successfully via your terminal:\n\n```bash\nssh -T git@github.com\n```\n\n### Deploy hexo to GitHub\n\n​\t\tOpen your folder, remember the three folders that I let you to concentrate? Now it turns into `_config.yml` file, open it and add something in the end:\n\n```bash\ndeploy:\n  type: git\n  repo: https://github.com/yourusername/yourusername.github.io.git\n  branch: master\n```\n\n​\t\t*Notice the format must be totally same with me, pay attention to the **blanks**.\n\n​\t\tBefore deployment, you need to install the `deploy-git` in your computer so that you can deploy your own hexo into GitHub.\n\n```bash\nsudo npm install hexo-deployer-git --save\n```\n\n​\t\tFinally, deploy your website via the following commands, and you can visit your bolg via `http://yourusername.github.io`.\n\n```bash\nhexo clean\nhexo deploy\nhexo generate\n```\n\n---\n\n注：本文部分内容引用自[hexo史上最全搭建教程_Fangzh的技术博客](https://blog.csdn.net/sinat_37781304/article/details/82729029)， 如有侵权，请联系我。","source":"_posts/Hexo_creation.md","raw":"---\ntitle: Hexo 网站搭建指南\ndate: 2022-02-24 03:14:29\nauthor: Tony\ntags: \n\t- Hexo\ncategories:\n\t- Hexo搭建\n---\n# Hexo 网站搭建指南\n\nWelcome to [Hexo](https://hexo.io/)! \n\nThis is a Guideline of building your own hexo, which is written in English, but easy to understand!\n\n## Preparation and Installation\n\n### Git Installation\n\n- Linux/Mac:\n\n```bash\nsudo apt install git\n```\n\n- Windows:\n\nOfficial link: [Download git](https://gitforwindows.org/)\n\n- Check whether installed or not:\n\n```bash\ngit --version\n```\n\n### Nodejs Installation\n\n- Linux/Mac:\n\n```bash\nsudo apt install nodejs\nsudo aot install npm\n```\n\n- Windows:\n\nOfficial link: [nodejs](https://nodejs.org/en/download/) (Suggest you to choose LTS version)\n\n- Check whether installed or not:\n\n```bash\nnode -v\nnpm -v\n```\n\n### Hexo Installation\n\n- Linux/Mac:\n\n```bash\nsudo npm install -g hexo-cli\n```\n\n- Windows:\n\n```bash\nnpm install -g hexo-cli\n```\n\n- Check whether installed or not:\n\n```bash\nhexo -v\n```\n\n## Deploy local Hexo\n\n​\t\tFirst you need to **choose or create a folder** to storage the local hexo website. For instance, in `C:/Software/My_Hexo`.\n\n​\t\tThen right click the folder, click `open in Windows terminal`; or just use command line to get into that folder.\n\n```bash\nsudo hexo init Mybolg\nls Myblog\nsudo npm install\n```\n\n​\t\t*Note that you can replace `Mybolg` into any word you like.\n\n​\t\tNow you can see some files inside the folder, but only three folders you need to concerntrated.\n\n![image-20220308165404552](Hexo_creation/image-20220308165404552.png)\n\n- node_modules: 依赖包\n- public：存放生成的页面\n- scaffolds：生成文章的一些模板\n- ==source==：你的文章和素材放在这里\n- ==themes==：字面意思\n- ==_config.yml==: 博客的配置文件\n\n## Use GitHub to host\n\n### Create a new repository on GitHub\n\n​\t\tFirstly, you need to have a GitHub account…\n\n​\t\tThen, create a **new repository** on GitHub and named `yourusername.github.io`, note that you **must** named like this (`yourusername` is your user name), otherwise the deployment cannot be recognized.\n\n![image-20220308165502809](Hexo_creation/image-20220308165502809.png) \n\n### Add SSH key to GitHub\n\n​\t\tBack to the terminal, generate the SSH and add it into GitHub so that GitHub can know whether the your computer are visiting the corresponding account.\n\n```bash\ngit cofig --global user.name \"yourusername\"\ngit cofig --global user.email \"youremail\"\nssh-keygen -t rsa -C \"youremail\"\n```\n\n​\t\tThe computer then will tell you the path of `.ssh`, find it on your computer, and open it via notepad.\n\n​\t\tTo say it simpler, SSH is just the ID of your computer, GitHub recognized your computer via this ID. `id_rsa` is your private key that you cannot show it to others, while `id_rsa.pub` is the public key, you can copy the info to GitHub.\n\n​\t\t`Github -> settings -> personal settings -> SSH and PGP keys -> New SSH key`\n\n​\t\tYou can verify whether add the SSH key successfully via your terminal:\n\n```bash\nssh -T git@github.com\n```\n\n### Deploy hexo to GitHub\n\n​\t\tOpen your folder, remember the three folders that I let you to concentrate? Now it turns into `_config.yml` file, open it and add something in the end:\n\n```bash\ndeploy:\n  type: git\n  repo: https://github.com/yourusername/yourusername.github.io.git\n  branch: master\n```\n\n​\t\t*Notice the format must be totally same with me, pay attention to the **blanks**.\n\n​\t\tBefore deployment, you need to install the `deploy-git` in your computer so that you can deploy your own hexo into GitHub.\n\n```bash\nsudo npm install hexo-deployer-git --save\n```\n\n​\t\tFinally, deploy your website via the following commands, and you can visit your bolg via `http://yourusername.github.io`.\n\n```bash\nhexo clean\nhexo deploy\nhexo generate\n```\n\n---\n\n注：本文部分内容引用自[hexo史上最全搭建教程_Fangzh的技术博客](https://blog.csdn.net/sinat_37781304/article/details/82729029)， 如有侵权，请联系我。","slug":"Hexo_creation","published":1,"updated":"2022-03-10T09:18:43.602Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0o5i746000dascy7vwefz3z","content":"<h1 id=\"Hexo-网站搭建指南\"><a href=\"#Hexo-网站搭建指南\" class=\"headerlink\" title=\"Hexo 网站搭建指南\"></a>Hexo 网站搭建指南</h1><p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! </p>\n<p>This is a Guideline of building your own hexo, which is written in English, but easy to understand!</p>\n<h2 id=\"Preparation-and-Installation\"><a href=\"#Preparation-and-Installation\" class=\"headerlink\" title=\"Preparation and Installation\"></a>Preparation and Installation</h2><h3 id=\"Git-Installation\"><a href=\"#Git-Installation\" class=\"headerlink\" title=\"Git Installation\"></a>Git Installation</h3><ul>\n<li>Linux/Mac:</li>\n</ul>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> <span class=\"token function\">git</span></code></pre>\n<ul>\n<li>Windows:</li>\n</ul>\n<p>Official link: <a href=\"https://gitforwindows.org/\">Download git</a></p>\n<ul>\n<li>Check whether installed or not:</li>\n</ul>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> --version</code></pre>\n<h3 id=\"Nodejs-Installation\"><a href=\"#Nodejs-Installation\" class=\"headerlink\" title=\"Nodejs Installation\"></a>Nodejs Installation</h3><ul>\n<li>Linux/Mac:</li>\n</ul>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> nodejs\n<span class=\"token function\">sudo</span> aot <span class=\"token function\">install</span> <span class=\"token function\">npm</span></code></pre>\n<ul>\n<li>Windows:</li>\n</ul>\n<p>Official link: <a href=\"https://nodejs.org/en/download/\">nodejs</a> (Suggest you to choose LTS version)</p>\n<ul>\n<li>Check whether installed or not:</li>\n</ul>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">node</span> -v\n<span class=\"token function\">npm</span> -v</code></pre>\n<h3 id=\"Hexo-Installation\"><a href=\"#Hexo-Installation\" class=\"headerlink\" title=\"Hexo Installation\"></a>Hexo Installation</h3><ul>\n<li>Linux/Mac:</li>\n</ul>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">npm</span> <span class=\"token function\">install</span> -g hexo-cli</code></pre>\n<ul>\n<li>Windows:</li>\n</ul>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> -g hexo-cli</code></pre>\n<ul>\n<li>Check whether installed or not:</li>\n</ul>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">hexo -v</code></pre>\n<h2 id=\"Deploy-local-Hexo\"><a href=\"#Deploy-local-Hexo\" class=\"headerlink\" title=\"Deploy local Hexo\"></a>Deploy local Hexo</h2><p>​        First you need to <strong>choose or create a folder</strong> to storage the local hexo website. For instance, in <code>C:/Software/My_Hexo</code>.</p>\n<p>​        Then right click the folder, click <code>open in Windows terminal</code>; or just use command line to get into that folder.</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> hexo init Mybolg\n<span class=\"token function\">ls</span> Myblog\n<span class=\"token function\">sudo</span> <span class=\"token function\">npm</span> <span class=\"token function\">install</span></code></pre>\n<p>​        *Note that you can replace <code>Mybolg</code> into any word you like.</p>\n<p>​        Now you can see some files inside the folder, but only three folders you need to concerntrated.</p>\n<p><img src=\"/2022/02/24/Hexo_creation/image-20220308165404552.png\" alt=\"image-20220308165404552\" loading=\"lazy\"></p>\n<ul>\n<li>node_modules: 依赖包</li>\n<li>public：存放生成的页面</li>\n<li>scaffolds：生成文章的一些模板</li>\n<li>==source==：你的文章和素材放在这里</li>\n<li>==themes==：字面意思</li>\n<li>==_config.yml==: 博客的配置文件</li>\n</ul>\n<h2 id=\"Use-GitHub-to-host\"><a href=\"#Use-GitHub-to-host\" class=\"headerlink\" title=\"Use GitHub to host\"></a>Use GitHub to host</h2><h3 id=\"Create-a-new-repository-on-GitHub\"><a href=\"#Create-a-new-repository-on-GitHub\" class=\"headerlink\" title=\"Create a new repository on GitHub\"></a>Create a new repository on GitHub</h3><p>​        Firstly, you need to have a GitHub account…</p>\n<p>​        Then, create a <strong>new repository</strong> on GitHub and named <code>yourusername.github.io</code>, note that you <strong>must</strong> named like this (<code>yourusername</code> is your user name), otherwise the deployment cannot be recognized.</p>\n<p><img src=\"/2022/02/24/Hexo_creation/image-20220308165502809.png\" alt=\"image-20220308165502809\" loading=\"lazy\"> </p>\n<h3 id=\"Add-SSH-key-to-GitHub\"><a href=\"#Add-SSH-key-to-GitHub\" class=\"headerlink\" title=\"Add SSH key to GitHub\"></a>Add SSH key to GitHub</h3><p>​        Back to the terminal, generate the SSH and add it into GitHub so that GitHub can know whether the your computer are visiting the corresponding account.</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> cofig --global user.name <span class=\"token string\">\"yourusername\"</span>\n<span class=\"token function\">git</span> cofig --global user.email <span class=\"token string\">\"youremail\"</span>\nssh-keygen -t rsa -C <span class=\"token string\">\"youremail\"</span></code></pre>\n<p>​        The computer then will tell you the path of <code>.ssh</code>, find it on your computer, and open it via notepad.</p>\n<p>​        To say it simpler, SSH is just the ID of your computer, GitHub recognized your computer via this ID. <code>id_rsa</code> is your private key that you cannot show it to others, while <code>id_rsa.pub</code> is the public key, you can copy the info to GitHub.</p>\n<p>​        <code>Github -&gt; settings -&gt; personal settings -&gt; SSH and PGP keys -&gt; New SSH key</code></p>\n<p>​        You can verify whether add the SSH key successfully via your terminal:</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">ssh</span> -T git@github.com</code></pre>\n<h3 id=\"Deploy-hexo-to-GitHub\"><a href=\"#Deploy-hexo-to-GitHub\" class=\"headerlink\" title=\"Deploy hexo to GitHub\"></a>Deploy hexo to GitHub</h3><p>​        Open your folder, remember the three folders that I let you to concentrate? Now it turns into <code>_config.yml</code> file, open it and add something in the end:</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">deploy:\n  type: <span class=\"token function\">git</span>\n  repo: https://github.com/yourusername/yourusername.github.io.git\n  branch: master</code></pre>\n<p>​        <em>Notice the format must be totally same with me, pay attention to the <em>*blanks</em></em>.</p>\n<p>​        Before deployment, you need to install the <code>deploy-git</code> in your computer so that you can deploy your own hexo into GitHub.</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">npm</span> <span class=\"token function\">install</span> hexo-deployer-git --save</code></pre>\n<p>​        Finally, deploy your website via the following commands, and you can visit your bolg via <code>http://yourusername.github.io</code>.</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">hexo clean\nhexo deploy\nhexo generate</code></pre>\n<hr>\n<p>注：本文部分内容引用自<a href=\"https://blog.csdn.net/sinat_37781304/article/details/82729029\">hexo史上最全搭建教程_Fangzh的技术博客</a>， 如有侵权，请联系我。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Hexo-网站搭建指南\"><a href=\"#Hexo-网站搭建指南\" class=\"headerlink\" title=\"Hexo 网站搭建指南\"></a>Hexo 网站搭建指南</h1><p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! </p>\n<p>This is a Guideline of building your own hexo, which is written in English, but easy to understand!</p>\n<h2 id=\"Preparation-and-Installation\"><a href=\"#Preparation-and-Installation\" class=\"headerlink\" title=\"Preparation and Installation\"></a>Preparation and Installation</h2><h3 id=\"Git-Installation\"><a href=\"#Git-Installation\" class=\"headerlink\" title=\"Git Installation\"></a>Git Installation</h3><ul>\n<li>Linux/Mac:</li>\n</ul>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> <span class=\"token function\">git</span></code></pre>\n<ul>\n<li>Windows:</li>\n</ul>\n<p>Official link: <a href=\"https://gitforwindows.org/\">Download git</a></p>\n<ul>\n<li>Check whether installed or not:</li>\n</ul>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> --version</code></pre>\n<h3 id=\"Nodejs-Installation\"><a href=\"#Nodejs-Installation\" class=\"headerlink\" title=\"Nodejs Installation\"></a>Nodejs Installation</h3><ul>\n<li>Linux/Mac:</li>\n</ul>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> nodejs\n<span class=\"token function\">sudo</span> aot <span class=\"token function\">install</span> <span class=\"token function\">npm</span></code></pre>\n<ul>\n<li>Windows:</li>\n</ul>\n<p>Official link: <a href=\"https://nodejs.org/en/download/\">nodejs</a> (Suggest you to choose LTS version)</p>\n<ul>\n<li>Check whether installed or not:</li>\n</ul>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">node</span> -v\n<span class=\"token function\">npm</span> -v</code></pre>\n<h3 id=\"Hexo-Installation\"><a href=\"#Hexo-Installation\" class=\"headerlink\" title=\"Hexo Installation\"></a>Hexo Installation</h3><ul>\n<li>Linux/Mac:</li>\n</ul>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">npm</span> <span class=\"token function\">install</span> -g hexo-cli</code></pre>\n<ul>\n<li>Windows:</li>\n</ul>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> -g hexo-cli</code></pre>\n<ul>\n<li>Check whether installed or not:</li>\n</ul>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">hexo -v</code></pre>\n<h2 id=\"Deploy-local-Hexo\"><a href=\"#Deploy-local-Hexo\" class=\"headerlink\" title=\"Deploy local Hexo\"></a>Deploy local Hexo</h2><p>​        First you need to <strong>choose or create a folder</strong> to storage the local hexo website. For instance, in <code>C:/Software/My_Hexo</code>.</p>\n<p>​        Then right click the folder, click <code>open in Windows terminal</code>; or just use command line to get into that folder.</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> hexo init Mybolg\n<span class=\"token function\">ls</span> Myblog\n<span class=\"token function\">sudo</span> <span class=\"token function\">npm</span> <span class=\"token function\">install</span></code></pre>\n<p>​        *Note that you can replace <code>Mybolg</code> into any word you like.</p>\n<p>​        Now you can see some files inside the folder, but only three folders you need to concerntrated.</p>\n<p><img src=\"/2022/02/24/Hexo_creation/image-20220308165404552.png\" alt=\"image-20220308165404552\"></p>\n<ul>\n<li>node_modules: 依赖包</li>\n<li>public：存放生成的页面</li>\n<li>scaffolds：生成文章的一些模板</li>\n<li>==source==：你的文章和素材放在这里</li>\n<li>==themes==：字面意思</li>\n<li>==_config.yml==: 博客的配置文件</li>\n</ul>\n<h2 id=\"Use-GitHub-to-host\"><a href=\"#Use-GitHub-to-host\" class=\"headerlink\" title=\"Use GitHub to host\"></a>Use GitHub to host</h2><h3 id=\"Create-a-new-repository-on-GitHub\"><a href=\"#Create-a-new-repository-on-GitHub\" class=\"headerlink\" title=\"Create a new repository on GitHub\"></a>Create a new repository on GitHub</h3><p>​        Firstly, you need to have a GitHub account…</p>\n<p>​        Then, create a <strong>new repository</strong> on GitHub and named <code>yourusername.github.io</code>, note that you <strong>must</strong> named like this (<code>yourusername</code> is your user name), otherwise the deployment cannot be recognized.</p>\n<p><img src=\"/2022/02/24/Hexo_creation/image-20220308165502809.png\" alt=\"image-20220308165502809\"> </p>\n<h3 id=\"Add-SSH-key-to-GitHub\"><a href=\"#Add-SSH-key-to-GitHub\" class=\"headerlink\" title=\"Add SSH key to GitHub\"></a>Add SSH key to GitHub</h3><p>​        Back to the terminal, generate the SSH and add it into GitHub so that GitHub can know whether the your computer are visiting the corresponding account.</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> cofig --global user.name <span class=\"token string\">\"yourusername\"</span>\n<span class=\"token function\">git</span> cofig --global user.email <span class=\"token string\">\"youremail\"</span>\nssh-keygen -t rsa -C <span class=\"token string\">\"youremail\"</span></code></pre>\n<p>​        The computer then will tell you the path of <code>.ssh</code>, find it on your computer, and open it via notepad.</p>\n<p>​        To say it simpler, SSH is just the ID of your computer, GitHub recognized your computer via this ID. <code>id_rsa</code> is your private key that you cannot show it to others, while <code>id_rsa.pub</code> is the public key, you can copy the info to GitHub.</p>\n<p>​        <code>Github -&gt; settings -&gt; personal settings -&gt; SSH and PGP keys -&gt; New SSH key</code></p>\n<p>​        You can verify whether add the SSH key successfully via your terminal:</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">ssh</span> -T git@github.com</code></pre>\n<h3 id=\"Deploy-hexo-to-GitHub\"><a href=\"#Deploy-hexo-to-GitHub\" class=\"headerlink\" title=\"Deploy hexo to GitHub\"></a>Deploy hexo to GitHub</h3><p>​        Open your folder, remember the three folders that I let you to concentrate? Now it turns into <code>_config.yml</code> file, open it and add something in the end:</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">deploy:\n  type: <span class=\"token function\">git</span>\n  repo: https://github.com/yourusername/yourusername.github.io.git\n  branch: master</code></pre>\n<p>​        <em>Notice the format must be totally same with me, pay attention to the <em>*blanks</em></em>.</p>\n<p>​        Before deployment, you need to install the <code>deploy-git</code> in your computer so that you can deploy your own hexo into GitHub.</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">npm</span> <span class=\"token function\">install</span> hexo-deployer-git --save</code></pre>\n<p>​        Finally, deploy your website via the following commands, and you can visit your bolg via <code>http://yourusername.github.io</code>.</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">hexo clean\nhexo deploy\nhexo generate</code></pre>\n<hr>\n<p>注：本文部分内容引用自<a href=\"https://blog.csdn.net/sinat_37781304/article/details/82729029\">hexo史上最全搭建教程_Fangzh的技术博客</a>， 如有侵权，请联系我。</p>\n"},{"title":"PERT","date":"2022-03-12T17:49:43.000Z","author":"Tony","katex":true,"_content":"\nPERT: Program Evaluation and Review Technique\n\n## 1. Tasks\n\nTry to write source code to implement the REPT process, i.e., identifying critical activities and critical path, and calculating the time to complete this software project. The following requirements should be satisfied:\n\n1. Upload all source code files (non including some compiling files, configuration files, etc.).\n2. Given a example (the example in the slide or your another example) as an input of your source code, show the result of your source code by screenshot.\n3. You choose use a file folder to include all these files, and the compress it into a compressed file for submission.\n\n## 2. Basic Algorithms to solve this issue\n\n### 2.0 Variables and its meaning\n\n- EST: Earliest Start Time\n- EFT: Earliest Finish Time\n- LST: Latest Start Time\n- LFT: Latest Finish Time\n- PRT: Project Time Usage (of each activity)\n\n### 2.1 Store data into adjacency matrix\n\nIn a PRET example, firstly we need to know how many activities should we solve, namely, input num as the total of PRET activities. Next, we need to build an array to storage the time usage in each of the task, namely, PRT.\n\nThe most difficult task, relatively speaking compared with the following input, is to storage the immediate predecessors of each activities. We can either use adjacency matrix or adjacency linked list to storage the predecessors, in my program, I will use matrix instead of linked list since the value num is not too large.\n\n### 2.2 Topological sort\n\nAs we all know, topological sort algorithm is useful and convenient to solve the dependency resolution which is extremely similar to PREP, hence I will use topological sort algorithm to implement the **Earliest Start Time** of each node. And the key formula to get EST is\n\n```\nEST[j] = max(EST[i] + PRT[i],EST[j])\n```\n\n**Earliest Finish Time** is simple to achieve when we know the EST since\n`EFT = EST+PRT`\n\nThe rest of two arrays **Latest Start Time** and **Latest Finish Time** is harder to find out. Actually, we can find out either of the two values and the other is easy to know since\n`LST=LFT-PRT`\n\nWhat I need to do is reverse all the arrows in PREP, that is, change the last activity to the first activity and change the first activity to the last one, and reverse all the activities and immediate predecessors. Using the same method with solving the EST, we can find out the LFT in the same way. Just Transpose the adjacency matrix, and use the key formula\n`LST[j]=min(LFT[i]-PRT[i],LFT[j])`\n\n### 2.3 Solutions\n\nAfter Getting four arrays EST, EFT, LST, LFT, we can easily find the Critical activities and Critical paths by Slacks, and the formula is\n`Slack = LST-EST=LFT-EFT`\n\nIf Slack is not zero, then this activity is a critical activity and those slacks can contribute to the critical path.\n\n## 3. Example and Results\n\nWhile using the example given below, we can create a graph and given it into adjacency matrix.\n\n| ACTIVIEY CODE | IMMEDIATE PREDCESSORS | TIME USAGE |\n| :------------ | :-------------------- | :--------- |\n| 1             | –                     | 2          |\n| 2             | 1                     | 4          |\n| 3             | 2                     | 10         |\n| 4             | 3                     | 6          |\n| 5             | 3                     | 4          |\n| 6             | 5                     | 5          |\n| 7             | 4                     | 7          |\n| 8             | 5 7                   | 9          |\n| 9             | 3                     | 7          |\n| 10            | 6 9                   | 8          |\n| 11            | 10                    | 4          |\n| 12            | 10                    | 5          |\n| 13            | 8                     | 2          |\n| 14            | 11 12                 | 6          |\n\nThe input in the program is shown below:\n\n![img](PERT/image-20210926121305734.png)\n\nAnd the graph is shown in the graph into a matrix.\n\n![img](PERT/image-20210926121433312.png)\n\n![img](PERT/image-20210926121452437.png)\n\nFinally we can get the solutions using topological sort algorithm.\n\n![img](PERT/image-20210926121557824.png)\n\nAnd the solution is shown below.\n\n![img](PERT/image-20210926125842698.png)\n\n## 4. Code\n\n```c\n#include<iostream>\n#include<vector>\n#include<sstream>\n#include<string>\n#include<iomanip>\n#include<fstream>\n#include<stack>\nusing namespace std;\nifstream fin(\"data.txt\");\nint num;\nint main()\n{\n\t//******************* Read Datas *******************\n\tcout << \"Please input the number of total projects:\";\n\tfin >> num;\n\tcout << num << endl;\n\tint* pro_time = new int[num + 2];//Project time usage\n\tvector<vector<int>> map(num + 2, vector<int>(num + 2));//adjacency matrix\n\n\tfor (int i = 1; i <= num; i++)\n\t\tfor (int j = 1; j <= num; j++)\n\t\t\tmap[i][j] = 0;\n\n\tfor (int i = 1; i <= num; i++)\n\t{\n\t\tcout << \"Please input the time that Project \" << i << \" should be used:\";\n\t\tfin >> pro_time[i];\n\t\tcout << pro_time[i] << endl;\n\t\tcout << \"Please input which project(s) should be done before Project \" << i << \":\";\n\n\t\tvector<int> temp;\n\t\tfin.get();\n\t\tstring str;\n\t\tgetline(fin, str);\n\t\tint tt;\n\t\tstringstream ss(str);\n\t\twhile (ss >> tt)\n\t\t\ttemp.push_back(tt);\n\t\t\n\t\tcout << str << endl;\n\t\tif (temp.empty())\n\t\t\tcontinue;\n\t\telse\n\t\t\tfor (auto tt : temp)\n\t\t\t\tmap[tt][i] = pro_time[i];\n\t}\n\n\t//******************* EST and EFT *******************\n\tint* Earliset_Start = new int[num + 2];\n\tfor (int i = 1; i <= num; i++)\n\t\tEarliset_Start[i] = 0;\n\n\t//******************* Topological Sort *******************\n\tstack<int> stk;\n\tstk.push(1);\n\twhile (!stk.empty())\n\t{\n\t\tint i = stk.top();\n\t\tstk.pop();\n\t\tfor (int j = i + 1; j <= num; j++)\n\t\t\tif (map[i][j] != 0)\n\t\t\t{\n\t\t\t\tstk.push(j);\n\t\t\t\tEarliset_Start[j] = max(Earliset_Start[i] + pro_time[i], Earliset_Start[j]);\n\t\t\t}\n\t}\n\n\t//Earliset Finish\n\tint* Earliset_Finish = new int[num + 2];\n\tfor (int i = 1; i <= num; i++)\n\t\tEarliset_Finish[i] = Earliset_Start[i] + pro_time[i];\n\n\t//******************* LST and LFT **************************\n\tfor (int i = 1; i <= num; i++)\n\t\tfor (int j = i; j <= num; j++)\n\t\t\tif (map[i][j] != 0)\n\t\t\t{\n\t\t\t\tmap[j][i] = map[i][j];\n\t\t\t\tmap[i][j] = 0;\n\t\t\t}\n\n\tint* Latest_Finish = new int[num + 2];\n\tint Finish_time = Earliset_Finish[num];\n\tfor (int i = 1; i <= num; i++)\n\t\tLatest_Finish[i] = Finish_time;\n\t//******************* Topological Sort *******************\n\t\n\tstk.push(num);//need to optimize...\n\tstk.push(num - 1);//need to optimize...\n\twhile (!stk.empty())\n\t{\n\t\tint i = stk.top();\n\t\tstk.pop();\n\t\tfor (int j = 1; j < i; j++)\n\t\t\tif (map[i][j] != 0)\n\t\t\t{\n\t\t\t\tstk.push(j);\n\t\t\t\tLatest_Finish[j] = min(Latest_Finish[i] - pro_time[i], Latest_Finish[j]);\t\n\t\t\t}\n\t}\n\n\tint* Latest_Start = new int[num + 2];\n\tfor (int i = 1; i <= num; i++)\n\t\tLatest_Start[i] = Latest_Finish[i] - pro_time[i];\n\n\t//Critical Activities\n\tbool* Critical_Activities = new bool[num + 2];\n\tfor (int i = 1; i <= num; i++)\n\t\tif (Latest_Start[i] - Earliset_Start[i] != 0)\n\t\t\tCritical_Activities[i] = false;\n\t\telse\n\t\t\tCritical_Activities[i] = true;\n\n\t//******************* Solutions *******************\n\tprintf(\"________________________________________________\\n\");\n\tfor (int i = 1; i <= num; i++)\n\t{\n\t\tfor (int j = 1; j <= num; j++)\n\t\t\tcout << setw(2) << map[i][j] << \" \";\n\t\tcout << endl;\n\t}\n\tprintf(\"________________________________________________\\n\");\n\tcout << \"pro_time:\";\n\tfor (int i = 1; i <= num; i++)\n\t\tcout << pro_time[i] << \" \";\n\tprintf(\"\\n________________________________________________\\n\");\n\tcout << \"Earest Start:\";\n\tfor (int i = 1; i <= num; i++)\n\t\tcout << Earliset_Start[i] << \" \";\n\tprintf(\"\\n________________________________________________\\n\");\n\tcout << \"Earest Finish:\";\n\tfor (int i = 1; i <= num; i++)\n\t\tcout << Earliset_Finish[i] << \" \";\n\tprintf(\"\\n________________________________________________\\n\");\n\tcout << \"Latest Start:\";\n\tfor (int i = 1; i <= num; i++)\n\t\tcout << Latest_Start[i] << \" \";\n\tprintf(\"\\n________________________________________________\\n\");\n\tcout << \"Latest Finish:\";\n\tfor (int i = 1; i <= num; i++)\n\t\tcout << Latest_Finish[i] << \" \";\n\tprintf(\"\\n________________________________________________\\n\");\n\tcout << \"Critical Activities:\";\n\tfor (int i = 1; i <= num; i++)\n\t\tcout << Critical_Activities[i] << \" \";\n\tprintf(\"\\n________________________________________________\\n\");\n\tcout << \"Critical Paths: A\";\n\tfor (int i = 2; i <= num; i++)\n\t\tif (Critical_Activities[i])\n\t\t\tcout << \"->\" << char(i + 64);\n\n\treturn 0;\n}\n```","source":"_posts/PERT.md","raw":"---\ntitle: PERT\ndate: 2022-03-13 01:49:43\nauthor: Tony\ntags:\n\t- algorithm\n\t- PERT\ncategories:\n\t- algorithm\nkatex: true\n---\n\nPERT: Program Evaluation and Review Technique\n\n## 1. Tasks\n\nTry to write source code to implement the REPT process, i.e., identifying critical activities and critical path, and calculating the time to complete this software project. The following requirements should be satisfied:\n\n1. Upload all source code files (non including some compiling files, configuration files, etc.).\n2. Given a example (the example in the slide or your another example) as an input of your source code, show the result of your source code by screenshot.\n3. You choose use a file folder to include all these files, and the compress it into a compressed file for submission.\n\n## 2. Basic Algorithms to solve this issue\n\n### 2.0 Variables and its meaning\n\n- EST: Earliest Start Time\n- EFT: Earliest Finish Time\n- LST: Latest Start Time\n- LFT: Latest Finish Time\n- PRT: Project Time Usage (of each activity)\n\n### 2.1 Store data into adjacency matrix\n\nIn a PRET example, firstly we need to know how many activities should we solve, namely, input num as the total of PRET activities. Next, we need to build an array to storage the time usage in each of the task, namely, PRT.\n\nThe most difficult task, relatively speaking compared with the following input, is to storage the immediate predecessors of each activities. We can either use adjacency matrix or adjacency linked list to storage the predecessors, in my program, I will use matrix instead of linked list since the value num is not too large.\n\n### 2.2 Topological sort\n\nAs we all know, topological sort algorithm is useful and convenient to solve the dependency resolution which is extremely similar to PREP, hence I will use topological sort algorithm to implement the **Earliest Start Time** of each node. And the key formula to get EST is\n\n```\nEST[j] = max(EST[i] + PRT[i],EST[j])\n```\n\n**Earliest Finish Time** is simple to achieve when we know the EST since\n`EFT = EST+PRT`\n\nThe rest of two arrays **Latest Start Time** and **Latest Finish Time** is harder to find out. Actually, we can find out either of the two values and the other is easy to know since\n`LST=LFT-PRT`\n\nWhat I need to do is reverse all the arrows in PREP, that is, change the last activity to the first activity and change the first activity to the last one, and reverse all the activities and immediate predecessors. Using the same method with solving the EST, we can find out the LFT in the same way. Just Transpose the adjacency matrix, and use the key formula\n`LST[j]=min(LFT[i]-PRT[i],LFT[j])`\n\n### 2.3 Solutions\n\nAfter Getting four arrays EST, EFT, LST, LFT, we can easily find the Critical activities and Critical paths by Slacks, and the formula is\n`Slack = LST-EST=LFT-EFT`\n\nIf Slack is not zero, then this activity is a critical activity and those slacks can contribute to the critical path.\n\n## 3. Example and Results\n\nWhile using the example given below, we can create a graph and given it into adjacency matrix.\n\n| ACTIVIEY CODE | IMMEDIATE PREDCESSORS | TIME USAGE |\n| :------------ | :-------------------- | :--------- |\n| 1             | –                     | 2          |\n| 2             | 1                     | 4          |\n| 3             | 2                     | 10         |\n| 4             | 3                     | 6          |\n| 5             | 3                     | 4          |\n| 6             | 5                     | 5          |\n| 7             | 4                     | 7          |\n| 8             | 5 7                   | 9          |\n| 9             | 3                     | 7          |\n| 10            | 6 9                   | 8          |\n| 11            | 10                    | 4          |\n| 12            | 10                    | 5          |\n| 13            | 8                     | 2          |\n| 14            | 11 12                 | 6          |\n\nThe input in the program is shown below:\n\n![img](PERT/image-20210926121305734.png)\n\nAnd the graph is shown in the graph into a matrix.\n\n![img](PERT/image-20210926121433312.png)\n\n![img](PERT/image-20210926121452437.png)\n\nFinally we can get the solutions using topological sort algorithm.\n\n![img](PERT/image-20210926121557824.png)\n\nAnd the solution is shown below.\n\n![img](PERT/image-20210926125842698.png)\n\n## 4. Code\n\n```c\n#include<iostream>\n#include<vector>\n#include<sstream>\n#include<string>\n#include<iomanip>\n#include<fstream>\n#include<stack>\nusing namespace std;\nifstream fin(\"data.txt\");\nint num;\nint main()\n{\n\t//******************* Read Datas *******************\n\tcout << \"Please input the number of total projects:\";\n\tfin >> num;\n\tcout << num << endl;\n\tint* pro_time = new int[num + 2];//Project time usage\n\tvector<vector<int>> map(num + 2, vector<int>(num + 2));//adjacency matrix\n\n\tfor (int i = 1; i <= num; i++)\n\t\tfor (int j = 1; j <= num; j++)\n\t\t\tmap[i][j] = 0;\n\n\tfor (int i = 1; i <= num; i++)\n\t{\n\t\tcout << \"Please input the time that Project \" << i << \" should be used:\";\n\t\tfin >> pro_time[i];\n\t\tcout << pro_time[i] << endl;\n\t\tcout << \"Please input which project(s) should be done before Project \" << i << \":\";\n\n\t\tvector<int> temp;\n\t\tfin.get();\n\t\tstring str;\n\t\tgetline(fin, str);\n\t\tint tt;\n\t\tstringstream ss(str);\n\t\twhile (ss >> tt)\n\t\t\ttemp.push_back(tt);\n\t\t\n\t\tcout << str << endl;\n\t\tif (temp.empty())\n\t\t\tcontinue;\n\t\telse\n\t\t\tfor (auto tt : temp)\n\t\t\t\tmap[tt][i] = pro_time[i];\n\t}\n\n\t//******************* EST and EFT *******************\n\tint* Earliset_Start = new int[num + 2];\n\tfor (int i = 1; i <= num; i++)\n\t\tEarliset_Start[i] = 0;\n\n\t//******************* Topological Sort *******************\n\tstack<int> stk;\n\tstk.push(1);\n\twhile (!stk.empty())\n\t{\n\t\tint i = stk.top();\n\t\tstk.pop();\n\t\tfor (int j = i + 1; j <= num; j++)\n\t\t\tif (map[i][j] != 0)\n\t\t\t{\n\t\t\t\tstk.push(j);\n\t\t\t\tEarliset_Start[j] = max(Earliset_Start[i] + pro_time[i], Earliset_Start[j]);\n\t\t\t}\n\t}\n\n\t//Earliset Finish\n\tint* Earliset_Finish = new int[num + 2];\n\tfor (int i = 1; i <= num; i++)\n\t\tEarliset_Finish[i] = Earliset_Start[i] + pro_time[i];\n\n\t//******************* LST and LFT **************************\n\tfor (int i = 1; i <= num; i++)\n\t\tfor (int j = i; j <= num; j++)\n\t\t\tif (map[i][j] != 0)\n\t\t\t{\n\t\t\t\tmap[j][i] = map[i][j];\n\t\t\t\tmap[i][j] = 0;\n\t\t\t}\n\n\tint* Latest_Finish = new int[num + 2];\n\tint Finish_time = Earliset_Finish[num];\n\tfor (int i = 1; i <= num; i++)\n\t\tLatest_Finish[i] = Finish_time;\n\t//******************* Topological Sort *******************\n\t\n\tstk.push(num);//need to optimize...\n\tstk.push(num - 1);//need to optimize...\n\twhile (!stk.empty())\n\t{\n\t\tint i = stk.top();\n\t\tstk.pop();\n\t\tfor (int j = 1; j < i; j++)\n\t\t\tif (map[i][j] != 0)\n\t\t\t{\n\t\t\t\tstk.push(j);\n\t\t\t\tLatest_Finish[j] = min(Latest_Finish[i] - pro_time[i], Latest_Finish[j]);\t\n\t\t\t}\n\t}\n\n\tint* Latest_Start = new int[num + 2];\n\tfor (int i = 1; i <= num; i++)\n\t\tLatest_Start[i] = Latest_Finish[i] - pro_time[i];\n\n\t//Critical Activities\n\tbool* Critical_Activities = new bool[num + 2];\n\tfor (int i = 1; i <= num; i++)\n\t\tif (Latest_Start[i] - Earliset_Start[i] != 0)\n\t\t\tCritical_Activities[i] = false;\n\t\telse\n\t\t\tCritical_Activities[i] = true;\n\n\t//******************* Solutions *******************\n\tprintf(\"________________________________________________\\n\");\n\tfor (int i = 1; i <= num; i++)\n\t{\n\t\tfor (int j = 1; j <= num; j++)\n\t\t\tcout << setw(2) << map[i][j] << \" \";\n\t\tcout << endl;\n\t}\n\tprintf(\"________________________________________________\\n\");\n\tcout << \"pro_time:\";\n\tfor (int i = 1; i <= num; i++)\n\t\tcout << pro_time[i] << \" \";\n\tprintf(\"\\n________________________________________________\\n\");\n\tcout << \"Earest Start:\";\n\tfor (int i = 1; i <= num; i++)\n\t\tcout << Earliset_Start[i] << \" \";\n\tprintf(\"\\n________________________________________________\\n\");\n\tcout << \"Earest Finish:\";\n\tfor (int i = 1; i <= num; i++)\n\t\tcout << Earliset_Finish[i] << \" \";\n\tprintf(\"\\n________________________________________________\\n\");\n\tcout << \"Latest Start:\";\n\tfor (int i = 1; i <= num; i++)\n\t\tcout << Latest_Start[i] << \" \";\n\tprintf(\"\\n________________________________________________\\n\");\n\tcout << \"Latest Finish:\";\n\tfor (int i = 1; i <= num; i++)\n\t\tcout << Latest_Finish[i] << \" \";\n\tprintf(\"\\n________________________________________________\\n\");\n\tcout << \"Critical Activities:\";\n\tfor (int i = 1; i <= num; i++)\n\t\tcout << Critical_Activities[i] << \" \";\n\tprintf(\"\\n________________________________________________\\n\");\n\tcout << \"Critical Paths: A\";\n\tfor (int i = 2; i <= num; i++)\n\t\tif (Critical_Activities[i])\n\t\t\tcout << \"->\" << char(i + 64);\n\n\treturn 0;\n}\n```","slug":"PERT","published":1,"updated":"2022-03-12T17:56:41.615Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0o5i747000hascyb3fjdfgd","content":"<p>PERT: Program Evaluation and Review Technique</p>\n<h2 id=\"1-Tasks\"><a href=\"#1-Tasks\" class=\"headerlink\" title=\"1. Tasks\"></a>1. Tasks</h2><p>Try to write source code to implement the REPT process, i.e., identifying critical activities and critical path, and calculating the time to complete this software project. The following requirements should be satisfied:</p>\n<ol>\n<li>Upload all source code files (non including some compiling files, configuration files, etc.).</li>\n<li>Given a example (the example in the slide or your another example) as an input of your source code, show the result of your source code by screenshot.</li>\n<li>You choose use a file folder to include all these files, and the compress it into a compressed file for submission.</li>\n</ol>\n<h2 id=\"2-Basic-Algorithms-to-solve-this-issue\"><a href=\"#2-Basic-Algorithms-to-solve-this-issue\" class=\"headerlink\" title=\"2. Basic Algorithms to solve this issue\"></a>2. Basic Algorithms to solve this issue</h2><h3 id=\"2-0-Variables-and-its-meaning\"><a href=\"#2-0-Variables-and-its-meaning\" class=\"headerlink\" title=\"2.0 Variables and its meaning\"></a>2.0 Variables and its meaning</h3><ul>\n<li>EST: Earliest Start Time</li>\n<li>EFT: Earliest Finish Time</li>\n<li>LST: Latest Start Time</li>\n<li>LFT: Latest Finish Time</li>\n<li>PRT: Project Time Usage (of each activity)</li>\n</ul>\n<h3 id=\"2-1-Store-data-into-adjacency-matrix\"><a href=\"#2-1-Store-data-into-adjacency-matrix\" class=\"headerlink\" title=\"2.1 Store data into adjacency matrix\"></a>2.1 Store data into adjacency matrix</h3><p>In a PRET example, firstly we need to know how many activities should we solve, namely, input num as the total of PRET activities. Next, we need to build an array to storage the time usage in each of the task, namely, PRT.</p>\n<p>The most difficult task, relatively speaking compared with the following input, is to storage the immediate predecessors of each activities. We can either use adjacency matrix or adjacency linked list to storage the predecessors, in my program, I will use matrix instead of linked list since the value num is not too large.</p>\n<h3 id=\"2-2-Topological-sort\"><a href=\"#2-2-Topological-sort\" class=\"headerlink\" title=\"2.2 Topological sort\"></a>2.2 Topological sort</h3><p>As we all know, topological sort algorithm is useful and convenient to solve the dependency resolution which is extremely similar to PREP, hence I will use topological sort algorithm to implement the <strong>Earliest Start Time</strong> of each node. And the key formula to get EST is</p>\n<pre class=\"language-none\"><code class=\"language-none\">EST[j] &#x3D; max(EST[i] + PRT[i],EST[j])</code></pre>\n<p><strong>Earliest Finish Time</strong> is simple to achieve when we know the EST since<br><code>EFT = EST+PRT</code></p>\n<p>The rest of two arrays <strong>Latest Start Time</strong> and <strong>Latest Finish Time</strong> is harder to find out. Actually, we can find out either of the two values and the other is easy to know since<br><code>LST=LFT-PRT</code></p>\n<p>What I need to do is reverse all the arrows in PREP, that is, change the last activity to the first activity and change the first activity to the last one, and reverse all the activities and immediate predecessors. Using the same method with solving the EST, we can find out the LFT in the same way. Just Transpose the adjacency matrix, and use the key formula<br><code>LST[j]=min(LFT[i]-PRT[i],LFT[j])</code></p>\n<h3 id=\"2-3-Solutions\"><a href=\"#2-3-Solutions\" class=\"headerlink\" title=\"2.3 Solutions\"></a>2.3 Solutions</h3><p>After Getting four arrays EST, EFT, LST, LFT, we can easily find the Critical activities and Critical paths by Slacks, and the formula is<br><code>Slack = LST-EST=LFT-EFT</code></p>\n<p>If Slack is not zero, then this activity is a critical activity and those slacks can contribute to the critical path.</p>\n<h2 id=\"3-Example-and-Results\"><a href=\"#3-Example-and-Results\" class=\"headerlink\" title=\"3. Example and Results\"></a>3. Example and Results</h2><p>While using the example given below, we can create a graph and given it into adjacency matrix.</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">ACTIVIEY CODE</th>\n<th style=\"text-align:left\">IMMEDIATE PREDCESSORS</th>\n<th style=\"text-align:left\">TIME USAGE</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">1</td>\n<td style=\"text-align:left\">–</td>\n<td style=\"text-align:left\">2</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">2</td>\n<td style=\"text-align:left\">1</td>\n<td style=\"text-align:left\">4</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">3</td>\n<td style=\"text-align:left\">2</td>\n<td style=\"text-align:left\">10</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">4</td>\n<td style=\"text-align:left\">3</td>\n<td style=\"text-align:left\">6</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">5</td>\n<td style=\"text-align:left\">3</td>\n<td style=\"text-align:left\">4</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">6</td>\n<td style=\"text-align:left\">5</td>\n<td style=\"text-align:left\">5</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">7</td>\n<td style=\"text-align:left\">4</td>\n<td style=\"text-align:left\">7</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">8</td>\n<td style=\"text-align:left\">5 7</td>\n<td style=\"text-align:left\">9</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">9</td>\n<td style=\"text-align:left\">3</td>\n<td style=\"text-align:left\">7</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">10</td>\n<td style=\"text-align:left\">6 9</td>\n<td style=\"text-align:left\">8</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">11</td>\n<td style=\"text-align:left\">10</td>\n<td style=\"text-align:left\">4</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">12</td>\n<td style=\"text-align:left\">10</td>\n<td style=\"text-align:left\">5</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">13</td>\n<td style=\"text-align:left\">8</td>\n<td style=\"text-align:left\">2</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">14</td>\n<td style=\"text-align:left\">11 12</td>\n<td style=\"text-align:left\">6</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>The input in the program is shown below:</p>\n<p><img src=\"/2022/03/13/PERT/image-20210926121305734.png\" alt=\"img\" loading=\"lazy\"></p>\n<p>And the graph is shown in the graph into a matrix.</p>\n<p><img src=\"/2022/03/13/PERT/image-20210926121433312.png\" alt=\"img\" loading=\"lazy\"></p>\n<p><img src=\"/2022/03/13/PERT/image-20210926121452437.png\" alt=\"img\" loading=\"lazy\"></p>\n<p>Finally we can get the solutions using topological sort algorithm.</p>\n<p><img src=\"/2022/03/13/PERT/image-20210926121557824.png\" alt=\"img\" loading=\"lazy\"></p>\n<p>And the solution is shown below.</p>\n<p><img src=\"/2022/03/13/PERT/image-20210926125842698.png\" alt=\"img\" loading=\"lazy\"></p>\n<h2 id=\"4-Code\"><a href=\"#4-Code\" class=\"headerlink\" title=\"4. Code\"></a>4. Code</h2><pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;vector></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;sstream></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;string></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iomanip></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;fstream></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stack></span></span>\nusing namespace std<span class=\"token punctuation\">;</span>\nifstream <span class=\"token function\">fin</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"data.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> num<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">//******************* Read Datas *******************</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Please input the number of total projects:\"</span><span class=\"token punctuation\">;</span>\n\tfin <span class=\"token operator\">>></span> num<span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> num <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> pro_time <span class=\"token operator\">=</span> new <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>num <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//Project time usage</span>\n\tvector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">>></span> <span class=\"token function\">map</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//adjacency matrix</span>\n\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> num<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> num<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t\tmap<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> num<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Please input the time that Project \"</span> <span class=\"token operator\">&lt;&lt;</span> i <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" should be used:\"</span><span class=\"token punctuation\">;</span>\n\t\tfin <span class=\"token operator\">>></span> pro_time<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> pro_time<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Please input which project(s) should be done before Project \"</span> <span class=\"token operator\">&lt;&lt;</span> i <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\":\"</span><span class=\"token punctuation\">;</span>\n\n\t\tvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> temp<span class=\"token punctuation\">;</span>\n\t\tfin<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tstring str<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">getline</span><span class=\"token punctuation\">(</span>fin<span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">int</span> tt<span class=\"token punctuation\">;</span>\n\t\tstringstream <span class=\"token function\">ss</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>ss <span class=\"token operator\">>></span> tt<span class=\"token punctuation\">)</span>\n\t\t\ttemp<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>tt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> str <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">else</span>\n\t\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> tt <span class=\"token operator\">:</span> temp<span class=\"token punctuation\">)</span>\n\t\t\t\tmap<span class=\"token punctuation\">[</span>tt<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> pro_time<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token comment\">//******************* EST and EFT *******************</span>\n\t<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> Earliset_Start <span class=\"token operator\">=</span> new <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>num <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> num<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\tEarliset_Start<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">//******************* Topological Sort *******************</span>\n\tstack<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> stk<span class=\"token punctuation\">;</span>\n\tstk<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>stk<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> stk<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tstk<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> num<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t\tstk<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\tEarliset_Start<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>Earliset_Start<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> pro_time<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> Earliset_Start<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token comment\">//Earliset Finish</span>\n\t<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> Earliset_Finish <span class=\"token operator\">=</span> new <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>num <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> num<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\tEarliset_Finish<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Earliset_Start<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> pro_time<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">//******************* LST and LFT **************************</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> num<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> num<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t\tmap<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> map<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t\tmap<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> Latest_Finish <span class=\"token operator\">=</span> new <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>num <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> Finish_time <span class=\"token operator\">=</span> Earliset_Finish<span class=\"token punctuation\">[</span>num<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> num<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\tLatest_Finish<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Finish_time<span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//******************* Topological Sort *******************</span>\n\t\n\tstk<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//need to optimize...</span>\n\tstk<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//need to optimize...</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>stk<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> stk<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tstk<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> i<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t\tstk<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\tLatest_Finish<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span>Latest_Finish<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> pro_time<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> Latest_Finish<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> Latest_Start <span class=\"token operator\">=</span> new <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>num <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> num<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\tLatest_Start<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Latest_Finish<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> pro_time<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">//Critical Activities</span>\n\tbool<span class=\"token operator\">*</span> Critical_Activities <span class=\"token operator\">=</span> new bool<span class=\"token punctuation\">[</span>num <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> num<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Latest_Start<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> Earliset_Start<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t\tCritical_Activities<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> false<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">else</span>\n\t\t\tCritical_Activities<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> true<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">//******************* Solutions *******************</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"________________________________________________\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> num<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> num<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">setw</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> map<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"________________________________________________\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"pro_time:\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> num<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> pro_time<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n________________________________________________\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Earest Start:\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> num<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> Earliset_Start<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n________________________________________________\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Earest Finish:\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> num<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> Earliset_Finish<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n________________________________________________\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Latest Start:\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> num<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> Latest_Start<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n________________________________________________\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Latest Finish:\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> num<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> Latest_Finish<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n________________________________________________\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Critical Activities:\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> num<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> Critical_Activities<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n________________________________________________\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Critical Paths: A\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> num<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Critical_Activities<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\t\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"->\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">64</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>","site":{"data":{}},"excerpt":"","more":"<p>PERT: Program Evaluation and Review Technique</p>\n<h2 id=\"1-Tasks\"><a href=\"#1-Tasks\" class=\"headerlink\" title=\"1. Tasks\"></a>1. Tasks</h2><p>Try to write source code to implement the REPT process, i.e., identifying critical activities and critical path, and calculating the time to complete this software project. The following requirements should be satisfied:</p>\n<ol>\n<li>Upload all source code files (non including some compiling files, configuration files, etc.).</li>\n<li>Given a example (the example in the slide or your another example) as an input of your source code, show the result of your source code by screenshot.</li>\n<li>You choose use a file folder to include all these files, and the compress it into a compressed file for submission.</li>\n</ol>\n<h2 id=\"2-Basic-Algorithms-to-solve-this-issue\"><a href=\"#2-Basic-Algorithms-to-solve-this-issue\" class=\"headerlink\" title=\"2. Basic Algorithms to solve this issue\"></a>2. Basic Algorithms to solve this issue</h2><h3 id=\"2-0-Variables-and-its-meaning\"><a href=\"#2-0-Variables-and-its-meaning\" class=\"headerlink\" title=\"2.0 Variables and its meaning\"></a>2.0 Variables and its meaning</h3><ul>\n<li>EST: Earliest Start Time</li>\n<li>EFT: Earliest Finish Time</li>\n<li>LST: Latest Start Time</li>\n<li>LFT: Latest Finish Time</li>\n<li>PRT: Project Time Usage (of each activity)</li>\n</ul>\n<h3 id=\"2-1-Store-data-into-adjacency-matrix\"><a href=\"#2-1-Store-data-into-adjacency-matrix\" class=\"headerlink\" title=\"2.1 Store data into adjacency matrix\"></a>2.1 Store data into adjacency matrix</h3><p>In a PRET example, firstly we need to know how many activities should we solve, namely, input num as the total of PRET activities. Next, we need to build an array to storage the time usage in each of the task, namely, PRT.</p>\n<p>The most difficult task, relatively speaking compared with the following input, is to storage the immediate predecessors of each activities. We can either use adjacency matrix or adjacency linked list to storage the predecessors, in my program, I will use matrix instead of linked list since the value num is not too large.</p>\n<h3 id=\"2-2-Topological-sort\"><a href=\"#2-2-Topological-sort\" class=\"headerlink\" title=\"2.2 Topological sort\"></a>2.2 Topological sort</h3><p>As we all know, topological sort algorithm is useful and convenient to solve the dependency resolution which is extremely similar to PREP, hence I will use topological sort algorithm to implement the <strong>Earliest Start Time</strong> of each node. And the key formula to get EST is</p>\n<pre class=\"language-none\"><code class=\"language-none\">EST[j] &#x3D; max(EST[i] + PRT[i],EST[j])</code></pre>\n<p><strong>Earliest Finish Time</strong> is simple to achieve when we know the EST since<br><code>EFT = EST+PRT</code></p>\n<p>The rest of two arrays <strong>Latest Start Time</strong> and <strong>Latest Finish Time</strong> is harder to find out. Actually, we can find out either of the two values and the other is easy to know since<br><code>LST=LFT-PRT</code></p>\n<p>What I need to do is reverse all the arrows in PREP, that is, change the last activity to the first activity and change the first activity to the last one, and reverse all the activities and immediate predecessors. Using the same method with solving the EST, we can find out the LFT in the same way. Just Transpose the adjacency matrix, and use the key formula<br><code>LST[j]=min(LFT[i]-PRT[i],LFT[j])</code></p>\n<h3 id=\"2-3-Solutions\"><a href=\"#2-3-Solutions\" class=\"headerlink\" title=\"2.3 Solutions\"></a>2.3 Solutions</h3><p>After Getting four arrays EST, EFT, LST, LFT, we can easily find the Critical activities and Critical paths by Slacks, and the formula is<br><code>Slack = LST-EST=LFT-EFT</code></p>\n<p>If Slack is not zero, then this activity is a critical activity and those slacks can contribute to the critical path.</p>\n<h2 id=\"3-Example-and-Results\"><a href=\"#3-Example-and-Results\" class=\"headerlink\" title=\"3. Example and Results\"></a>3. Example and Results</h2><p>While using the example given below, we can create a graph and given it into adjacency matrix.</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">ACTIVIEY CODE</th>\n<th style=\"text-align:left\">IMMEDIATE PREDCESSORS</th>\n<th style=\"text-align:left\">TIME USAGE</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">1</td>\n<td style=\"text-align:left\">–</td>\n<td style=\"text-align:left\">2</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">2</td>\n<td style=\"text-align:left\">1</td>\n<td style=\"text-align:left\">4</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">3</td>\n<td style=\"text-align:left\">2</td>\n<td style=\"text-align:left\">10</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">4</td>\n<td style=\"text-align:left\">3</td>\n<td style=\"text-align:left\">6</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">5</td>\n<td style=\"text-align:left\">3</td>\n<td style=\"text-align:left\">4</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">6</td>\n<td style=\"text-align:left\">5</td>\n<td style=\"text-align:left\">5</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">7</td>\n<td style=\"text-align:left\">4</td>\n<td style=\"text-align:left\">7</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">8</td>\n<td style=\"text-align:left\">5 7</td>\n<td style=\"text-align:left\">9</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">9</td>\n<td style=\"text-align:left\">3</td>\n<td style=\"text-align:left\">7</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">10</td>\n<td style=\"text-align:left\">6 9</td>\n<td style=\"text-align:left\">8</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">11</td>\n<td style=\"text-align:left\">10</td>\n<td style=\"text-align:left\">4</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">12</td>\n<td style=\"text-align:left\">10</td>\n<td style=\"text-align:left\">5</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">13</td>\n<td style=\"text-align:left\">8</td>\n<td style=\"text-align:left\">2</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">14</td>\n<td style=\"text-align:left\">11 12</td>\n<td style=\"text-align:left\">6</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>The input in the program is shown below:</p>\n<p><img src=\"/2022/03/13/PERT/image-20210926121305734.png\" alt=\"img\"></p>\n<p>And the graph is shown in the graph into a matrix.</p>\n<p><img src=\"/2022/03/13/PERT/image-20210926121433312.png\" alt=\"img\"></p>\n<p><img src=\"/2022/03/13/PERT/image-20210926121452437.png\" alt=\"img\"></p>\n<p>Finally we can get the solutions using topological sort algorithm.</p>\n<p><img src=\"/2022/03/13/PERT/image-20210926121557824.png\" alt=\"img\"></p>\n<p>And the solution is shown below.</p>\n<p><img src=\"/2022/03/13/PERT/image-20210926125842698.png\" alt=\"img\"></p>\n<h2 id=\"4-Code\"><a href=\"#4-Code\" class=\"headerlink\" title=\"4. Code\"></a>4. Code</h2><pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;vector></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;sstream></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;string></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iomanip></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;fstream></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stack></span></span>\nusing namespace std<span class=\"token punctuation\">;</span>\nifstream <span class=\"token function\">fin</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"data.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> num<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">//******************* Read Datas *******************</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Please input the number of total projects:\"</span><span class=\"token punctuation\">;</span>\n\tfin <span class=\"token operator\">>></span> num<span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> num <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> pro_time <span class=\"token operator\">=</span> new <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>num <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//Project time usage</span>\n\tvector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">>></span> <span class=\"token function\">map</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//adjacency matrix</span>\n\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> num<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> num<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t\tmap<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> num<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Please input the time that Project \"</span> <span class=\"token operator\">&lt;&lt;</span> i <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" should be used:\"</span><span class=\"token punctuation\">;</span>\n\t\tfin <span class=\"token operator\">>></span> pro_time<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> pro_time<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Please input which project(s) should be done before Project \"</span> <span class=\"token operator\">&lt;&lt;</span> i <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\":\"</span><span class=\"token punctuation\">;</span>\n\n\t\tvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> temp<span class=\"token punctuation\">;</span>\n\t\tfin<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tstring str<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">getline</span><span class=\"token punctuation\">(</span>fin<span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">int</span> tt<span class=\"token punctuation\">;</span>\n\t\tstringstream <span class=\"token function\">ss</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>ss <span class=\"token operator\">>></span> tt<span class=\"token punctuation\">)</span>\n\t\t\ttemp<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>tt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> str <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">else</span>\n\t\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> tt <span class=\"token operator\">:</span> temp<span class=\"token punctuation\">)</span>\n\t\t\t\tmap<span class=\"token punctuation\">[</span>tt<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> pro_time<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token comment\">//******************* EST and EFT *******************</span>\n\t<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> Earliset_Start <span class=\"token operator\">=</span> new <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>num <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> num<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\tEarliset_Start<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">//******************* Topological Sort *******************</span>\n\tstack<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> stk<span class=\"token punctuation\">;</span>\n\tstk<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>stk<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> stk<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tstk<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> num<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t\tstk<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\tEarliset_Start<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>Earliset_Start<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> pro_time<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> Earliset_Start<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token comment\">//Earliset Finish</span>\n\t<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> Earliset_Finish <span class=\"token operator\">=</span> new <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>num <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> num<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\tEarliset_Finish<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Earliset_Start<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> pro_time<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">//******************* LST and LFT **************************</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> num<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> num<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t\tmap<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> map<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t\tmap<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> Latest_Finish <span class=\"token operator\">=</span> new <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>num <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> Finish_time <span class=\"token operator\">=</span> Earliset_Finish<span class=\"token punctuation\">[</span>num<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> num<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\tLatest_Finish<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Finish_time<span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//******************* Topological Sort *******************</span>\n\t\n\tstk<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//need to optimize...</span>\n\tstk<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//need to optimize...</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>stk<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> stk<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tstk<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> i<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t\tstk<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\tLatest_Finish<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span>Latest_Finish<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> pro_time<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> Latest_Finish<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> Latest_Start <span class=\"token operator\">=</span> new <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>num <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> num<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\tLatest_Start<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Latest_Finish<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> pro_time<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">//Critical Activities</span>\n\tbool<span class=\"token operator\">*</span> Critical_Activities <span class=\"token operator\">=</span> new bool<span class=\"token punctuation\">[</span>num <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> num<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Latest_Start<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> Earliset_Start<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t\tCritical_Activities<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> false<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">else</span>\n\t\t\tCritical_Activities<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> true<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">//******************* Solutions *******************</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"________________________________________________\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> num<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> num<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">setw</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> map<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"________________________________________________\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"pro_time:\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> num<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> pro_time<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n________________________________________________\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Earest Start:\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> num<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> Earliset_Start<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n________________________________________________\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Earest Finish:\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> num<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> Earliset_Finish<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n________________________________________________\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Latest Start:\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> num<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> Latest_Start<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n________________________________________________\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Latest Finish:\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> num<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> Latest_Finish<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n________________________________________________\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Critical Activities:\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> num<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> Critical_Activities<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n________________________________________________\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Critical Paths: A\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> num<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Critical_Activities<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\t\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"->\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">64</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>"},{"title":"R2S家庭组网实操","date":"2022-02-26T12:16:48.000Z","author":"Tony","_content":"\n## 前言\n\n本文授权转载自[R2S家庭组网实操 – Orange Tien](https://www.bytedance.fit/?p=1051)，作者：Orange Tien，在此基础上略加修改，~~并不会定期更新~~。\n\n本文主要介绍R2S的基本使用方法，目前本人（Tony）也在原作者（Orange Tien）的怂恿下在两个地方分别搭建了两个R2S，看起来很简单，其实不是一帆风顺；因此也会把实际组网中遇到的问题列到最后供大家参考。\n\n## 确定所需物理设备\n\n- 一台R2S软路由以及它的电源线\n- 两根用不着太长的网线一张TF卡（作为R2S的系统盘）以及一个读写TF卡的读卡器\n- 一台可以插网线的电脑\n- 交换机（可选）\n- 插排（某些时候插座不够用）\n\n## 烧录OpenWrt系统\n\n烧录软件：[BalenaEtcher](https://www.balena.io/etcher/)\n\n软路由系统：\n\n[OpenWrt-R2S-dongdong](https://bigdongdong.cowtransfer.com/s/a3420546d30343)\n\n[OpenWrt-R2S-esir](https://bigdongdong.cowtransfer.com/s/9a349ee597aa4f)\n\n第一个链接比较新，界面比较好看一些，推荐选择这个下载；第二个系统是eSir大人写的2020版本，已经很旧了；~~奈何暂时没找到别的系统~~，如果自行找到更好的系统也可以不用这俩链接。注意系统是要支持Arm架构的，因为Openwrt不是x86架构下的产物。\n\n##  开始烧录系统至TF卡\n\n打开BalenaEtcher，选择Flash from file，然后将OpenWrt系统烧录到TF卡中即可。\n\n![img](R2S_build/image-1.png)\n\n注意：选择文件时只选择镜像文件，不要把那些七七八八的文档说明也选进去。选择`.gz`(`.img`)文件来烧录即可，烧录完成后直接拔掉读卡器；系统会提示格式化，此时千万**不要**格式化！！！（~~否则，就重来一遍吧~~）\n\n##  登入R2S后台\n\n把烧录好固件的TF卡插入R2S，然后给它插上电源，WAN口可以不接，将R2S的LAN口连接电脑的网口，根据所刷入的固件（软路由系统）的不同来决定后台地址，一般来说，软路由后台是`192.168.X.1` ，本文的系统后台是`192.168.22.1`，所以说我们在电脑浏览器内输入`192.168.5.1`(`192.168.22.1`)以进入后台。后台账号是root，默认密码基本都是password（若下载本文的系统，密码则为空），具体操作链接里面写的很清楚。\n\n## 拨号或者DHCP客户端\n\n### 光猫拨号\n\n如果你家里的组网方式是通过光猫拨号（通常都是光猫拨号），那么设置方法如下：\n\n选择 网络-接口， 然后选择 修改WAN口设置\n\n![img](R2S_build/image-2-1024x507.png)\n\n将WAN口设置成DHCP客户端，然后保存应用即可，此外无须做其他任何设置。\n\n![img](R2S_build/image-3-1024x485.png)\n\n### R2S拨号\n\n如果你的光猫是桥接，那么就由路由器来拨号（通常来说，哪个网络设备配置更好，就誰来拨号，由于R2S的稳定性远不如光猫，所以这里选择光猫拨号更好），设置方法如下：\n\n![img](R2S_build/image-5.png)\n\n同样，选择修改WAN口，协议设置成PPPoE, PAP/CHAP，账号密码就是光猫的账号密码。比如电信宽带就是以`@163.gd`结尾的，密码如果忘记的话直接拨打10000（10086）重置就好，省时省力。\n\n![img](R2S_build/image-2-1024x507.png)\n\n接下来，需要用超级管理员账号登陆到光猫的IP中（`192.168.1.1`）,各大运营商的超级管理员账号和密码可以自行搜索。选择 网络-协议，然后设置成DHCP客户端。\n\n### 小结\n\n用什么拨号，什么就选择PPPoE，然后其它设备就都设置成DHCP。\n\n用光猫拨号，光猫的设置里面就选择PPPoE，软路由以及其它路由器就选择DHCP客户端；\n\n用R2S拨号，光猫和其它路由设备的设置里面就选择DHCP客户端，软路由选择PPPoE。\n\n## 各设备接入网络\n\n将软路由的WAN口与光猫的千兆口相连，然后断开软路由的LAN口与电脑网口的连接，此时软路由的LAN口根据各人组网要求的不同选择接不同的设备，可以接交换机，也可以接一台路由器（路由器设置为有线中继模式，也就是无线AP模式）\n\n如果家中设备比较多，或者很多屋子都需要连网线的话，可以买一个最便宜的千兆交换机放到弱电箱中，然后吧R2S接到交换机与光猫中间，这样就可以实现整个局域网都接入到软路由中来。（我来草草的画个图）\n\n![image-20220305212846426](R2S_build/image-20220305212846426.png)\n\n## 利用插件设置科学上网\n\n根据前面的步骤，如果你的设备能够正常访问网络了，就可以开始探索OpenWrt的各类插件了。关于科学上网，常见的插件有PassWall, ShadowScoksR++, OpenClash，由于OpenClash具备强大的分流策略机制（根据你访问的域名或者IP的不同决定走不同的节点），我们在此以OpenCalsh为例设置科学上网\n\n![img](R2S_build/image-7.png)\n\n首先，在服务菜单中找到OpenClash，然后选择配置文件订阅，选择添加配置文件\n\n![img](R2S_build/image-8.png)\n\n配置文件名随便写，用途是给用户自己区分的，订阅地址填上机场给你的订阅地址，其余地方无需设置，直接应用并保存即可。然后回到OpenClash主页，配置文件区域发送了变化。\n\n![img](R2S_build/image-9-1024x194.png)\n\n最后点击左下角的启动按钮，等待服务器上线运行即可。\n\n![img](R2S_build/image-10.png)\n\n如果你设置后无法正常科学上网，原因是有很多的，需要你自己慢慢排查。\n\n## 更多（原作者的话）\n\n[NanoPi R2S WIKI](https://wiki.friendlyarm.com/wiki/index.php/NanoPi_R2S/zh)\n\n上面的链接是R2S的WIKI书，上面详细记录了R2S的配置以及实际测速情况，也有如何编译系统等教程。\n\n个人使用R2S两年，从大一到大三都在用这个，感觉就是到千兆不太行，500M是瓶颈了，然后连久了没那么稳定，官网手册上宣传它是又稳定又能达到千兆的，这个听听就好，R2S本来是适合入门的，但是现在价格炒的太高了，没这个必要去买它，目前有很多更具有性价比的软路由可供选择。\n\n此外向大家推荐软路由界的大佬: [JackStone的Youtube主页](https://youtube.com/c/jackstone) ，人称老白，做了很多小主机的视频，如果想选购更具性价比的设备，可以看他的合集，比如2021软路由选购建议这些。\n\n## 组网时遇到过的问题（我的话）\n\n1. 组网的过程中可能出现无法自动分配IP地址的问题，比如说小米的路由器默认会分配`192.168.31.XXX`；如果你会手动配置的话可以试试，不过最简单的办法就是等，去洗个澡回来就好了。如果还没好，那么可以考虑RESET一下路由器。\n2. OpenClash插件在首次启动的时候，可能会启动失败，他会提示需要你选择编译架构，按照他的提示，选择Arm-v8架构即可。\n3. 网线通常插上马上就会亮灯，5s左右就能ping通，不过不要太相信科学。~~我有一次ping了10多分钟。~~真的，不通的话不一定是没插紧，也不一定是插错了，**很有可能是因为你没给我微信或者支付宝赞赏**。\n4. R2S是很基础的一款软路由，稳定性可能不会太好，不过最有可能导致网络不稳定的还是机场的选择，如果选择廉价机场的话，要做好不知道什么时候突然断网10分钟的准备。\n5. 计算机网络这门学科是玄学的一个分支。\n\n","source":"_posts/R2S_build.md","raw":"---\ntitle: R2S家庭组网实操\ndate: 2022-02-26 20:16:48\nauthor: Tony\ncategories:\n\t- 计算机网络\ntags:\n\t- R2S\n\t- Computer Network\n\t- 软路由\n\t- 科学上网\n---\n\n## 前言\n\n本文授权转载自[R2S家庭组网实操 – Orange Tien](https://www.bytedance.fit/?p=1051)，作者：Orange Tien，在此基础上略加修改，~~并不会定期更新~~。\n\n本文主要介绍R2S的基本使用方法，目前本人（Tony）也在原作者（Orange Tien）的怂恿下在两个地方分别搭建了两个R2S，看起来很简单，其实不是一帆风顺；因此也会把实际组网中遇到的问题列到最后供大家参考。\n\n## 确定所需物理设备\n\n- 一台R2S软路由以及它的电源线\n- 两根用不着太长的网线一张TF卡（作为R2S的系统盘）以及一个读写TF卡的读卡器\n- 一台可以插网线的电脑\n- 交换机（可选）\n- 插排（某些时候插座不够用）\n\n## 烧录OpenWrt系统\n\n烧录软件：[BalenaEtcher](https://www.balena.io/etcher/)\n\n软路由系统：\n\n[OpenWrt-R2S-dongdong](https://bigdongdong.cowtransfer.com/s/a3420546d30343)\n\n[OpenWrt-R2S-esir](https://bigdongdong.cowtransfer.com/s/9a349ee597aa4f)\n\n第一个链接比较新，界面比较好看一些，推荐选择这个下载；第二个系统是eSir大人写的2020版本，已经很旧了；~~奈何暂时没找到别的系统~~，如果自行找到更好的系统也可以不用这俩链接。注意系统是要支持Arm架构的，因为Openwrt不是x86架构下的产物。\n\n##  开始烧录系统至TF卡\n\n打开BalenaEtcher，选择Flash from file，然后将OpenWrt系统烧录到TF卡中即可。\n\n![img](R2S_build/image-1.png)\n\n注意：选择文件时只选择镜像文件，不要把那些七七八八的文档说明也选进去。选择`.gz`(`.img`)文件来烧录即可，烧录完成后直接拔掉读卡器；系统会提示格式化，此时千万**不要**格式化！！！（~~否则，就重来一遍吧~~）\n\n##  登入R2S后台\n\n把烧录好固件的TF卡插入R2S，然后给它插上电源，WAN口可以不接，将R2S的LAN口连接电脑的网口，根据所刷入的固件（软路由系统）的不同来决定后台地址，一般来说，软路由后台是`192.168.X.1` ，本文的系统后台是`192.168.22.1`，所以说我们在电脑浏览器内输入`192.168.5.1`(`192.168.22.1`)以进入后台。后台账号是root，默认密码基本都是password（若下载本文的系统，密码则为空），具体操作链接里面写的很清楚。\n\n## 拨号或者DHCP客户端\n\n### 光猫拨号\n\n如果你家里的组网方式是通过光猫拨号（通常都是光猫拨号），那么设置方法如下：\n\n选择 网络-接口， 然后选择 修改WAN口设置\n\n![img](R2S_build/image-2-1024x507.png)\n\n将WAN口设置成DHCP客户端，然后保存应用即可，此外无须做其他任何设置。\n\n![img](R2S_build/image-3-1024x485.png)\n\n### R2S拨号\n\n如果你的光猫是桥接，那么就由路由器来拨号（通常来说，哪个网络设备配置更好，就誰来拨号，由于R2S的稳定性远不如光猫，所以这里选择光猫拨号更好），设置方法如下：\n\n![img](R2S_build/image-5.png)\n\n同样，选择修改WAN口，协议设置成PPPoE, PAP/CHAP，账号密码就是光猫的账号密码。比如电信宽带就是以`@163.gd`结尾的，密码如果忘记的话直接拨打10000（10086）重置就好，省时省力。\n\n![img](R2S_build/image-2-1024x507.png)\n\n接下来，需要用超级管理员账号登陆到光猫的IP中（`192.168.1.1`）,各大运营商的超级管理员账号和密码可以自行搜索。选择 网络-协议，然后设置成DHCP客户端。\n\n### 小结\n\n用什么拨号，什么就选择PPPoE，然后其它设备就都设置成DHCP。\n\n用光猫拨号，光猫的设置里面就选择PPPoE，软路由以及其它路由器就选择DHCP客户端；\n\n用R2S拨号，光猫和其它路由设备的设置里面就选择DHCP客户端，软路由选择PPPoE。\n\n## 各设备接入网络\n\n将软路由的WAN口与光猫的千兆口相连，然后断开软路由的LAN口与电脑网口的连接，此时软路由的LAN口根据各人组网要求的不同选择接不同的设备，可以接交换机，也可以接一台路由器（路由器设置为有线中继模式，也就是无线AP模式）\n\n如果家中设备比较多，或者很多屋子都需要连网线的话，可以买一个最便宜的千兆交换机放到弱电箱中，然后吧R2S接到交换机与光猫中间，这样就可以实现整个局域网都接入到软路由中来。（我来草草的画个图）\n\n![image-20220305212846426](R2S_build/image-20220305212846426.png)\n\n## 利用插件设置科学上网\n\n根据前面的步骤，如果你的设备能够正常访问网络了，就可以开始探索OpenWrt的各类插件了。关于科学上网，常见的插件有PassWall, ShadowScoksR++, OpenClash，由于OpenClash具备强大的分流策略机制（根据你访问的域名或者IP的不同决定走不同的节点），我们在此以OpenCalsh为例设置科学上网\n\n![img](R2S_build/image-7.png)\n\n首先，在服务菜单中找到OpenClash，然后选择配置文件订阅，选择添加配置文件\n\n![img](R2S_build/image-8.png)\n\n配置文件名随便写，用途是给用户自己区分的，订阅地址填上机场给你的订阅地址，其余地方无需设置，直接应用并保存即可。然后回到OpenClash主页，配置文件区域发送了变化。\n\n![img](R2S_build/image-9-1024x194.png)\n\n最后点击左下角的启动按钮，等待服务器上线运行即可。\n\n![img](R2S_build/image-10.png)\n\n如果你设置后无法正常科学上网，原因是有很多的，需要你自己慢慢排查。\n\n## 更多（原作者的话）\n\n[NanoPi R2S WIKI](https://wiki.friendlyarm.com/wiki/index.php/NanoPi_R2S/zh)\n\n上面的链接是R2S的WIKI书，上面详细记录了R2S的配置以及实际测速情况，也有如何编译系统等教程。\n\n个人使用R2S两年，从大一到大三都在用这个，感觉就是到千兆不太行，500M是瓶颈了，然后连久了没那么稳定，官网手册上宣传它是又稳定又能达到千兆的，这个听听就好，R2S本来是适合入门的，但是现在价格炒的太高了，没这个必要去买它，目前有很多更具有性价比的软路由可供选择。\n\n此外向大家推荐软路由界的大佬: [JackStone的Youtube主页](https://youtube.com/c/jackstone) ，人称老白，做了很多小主机的视频，如果想选购更具性价比的设备，可以看他的合集，比如2021软路由选购建议这些。\n\n## 组网时遇到过的问题（我的话）\n\n1. 组网的过程中可能出现无法自动分配IP地址的问题，比如说小米的路由器默认会分配`192.168.31.XXX`；如果你会手动配置的话可以试试，不过最简单的办法就是等，去洗个澡回来就好了。如果还没好，那么可以考虑RESET一下路由器。\n2. OpenClash插件在首次启动的时候，可能会启动失败，他会提示需要你选择编译架构，按照他的提示，选择Arm-v8架构即可。\n3. 网线通常插上马上就会亮灯，5s左右就能ping通，不过不要太相信科学。~~我有一次ping了10多分钟。~~真的，不通的话不一定是没插紧，也不一定是插错了，**很有可能是因为你没给我微信或者支付宝赞赏**。\n4. R2S是很基础的一款软路由，稳定性可能不会太好，不过最有可能导致网络不稳定的还是机场的选择，如果选择廉价机场的话，要做好不知道什么时候突然断网10分钟的准备。\n5. 计算机网络这门学科是玄学的一个分支。\n\n","slug":"R2S_build","published":1,"updated":"2022-03-10T09:18:43.604Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0o5i748000jascyf8k1gngv","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>本文授权转载自<a href=\"https://www.bytedance.fit/?p=1051\">R2S家庭组网实操 – Orange Tien</a>，作者：Orange Tien，在此基础上略加修改，<del>并不会定期更新</del>。</p>\n<p>本文主要介绍R2S的基本使用方法，目前本人（Tony）也在原作者（Orange Tien）的怂恿下在两个地方分别搭建了两个R2S，看起来很简单，其实不是一帆风顺；因此也会把实际组网中遇到的问题列到最后供大家参考。</p>\n<h2 id=\"确定所需物理设备\"><a href=\"#确定所需物理设备\" class=\"headerlink\" title=\"确定所需物理设备\"></a>确定所需物理设备</h2><ul>\n<li>一台R2S软路由以及它的电源线</li>\n<li>两根用不着太长的网线一张TF卡（作为R2S的系统盘）以及一个读写TF卡的读卡器</li>\n<li>一台可以插网线的电脑</li>\n<li>交换机（可选）</li>\n<li>插排（某些时候插座不够用）</li>\n</ul>\n<h2 id=\"烧录OpenWrt系统\"><a href=\"#烧录OpenWrt系统\" class=\"headerlink\" title=\"烧录OpenWrt系统\"></a>烧录OpenWrt系统</h2><p>烧录软件：<a href=\"https://www.balena.io/etcher/\">BalenaEtcher</a></p>\n<p>软路由系统：</p>\n<p><a href=\"https://bigdongdong.cowtransfer.com/s/a3420546d30343\">OpenWrt-R2S-dongdong</a></p>\n<p><a href=\"https://bigdongdong.cowtransfer.com/s/9a349ee597aa4f\">OpenWrt-R2S-esir</a></p>\n<p>第一个链接比较新，界面比较好看一些，推荐选择这个下载；第二个系统是eSir大人写的2020版本，已经很旧了；<del>奈何暂时没找到别的系统</del>，如果自行找到更好的系统也可以不用这俩链接。注意系统是要支持Arm架构的，因为Openwrt不是x86架构下的产物。</p>\n<h2 id=\"开始烧录系统至TF卡\"><a href=\"#开始烧录系统至TF卡\" class=\"headerlink\" title=\"开始烧录系统至TF卡\"></a>开始烧录系统至TF卡</h2><p>打开BalenaEtcher，选择Flash from file，然后将OpenWrt系统烧录到TF卡中即可。</p>\n<p><img src=\"/2022/02/26/R2S_build/image-1.png\" alt=\"img\" loading=\"lazy\"></p>\n<p>注意：选择文件时只选择镜像文件，不要把那些七七八八的文档说明也选进去。选择<code>.gz</code>(<code>.img</code>)文件来烧录即可，烧录完成后直接拔掉读卡器；系统会提示格式化，此时千万<strong>不要</strong>格式化！！！（<del>否则，就重来一遍吧</del>）</p>\n<h2 id=\"登入R2S后台\"><a href=\"#登入R2S后台\" class=\"headerlink\" title=\"登入R2S后台\"></a>登入R2S后台</h2><p>把烧录好固件的TF卡插入R2S，然后给它插上电源，WAN口可以不接，将R2S的LAN口连接电脑的网口，根据所刷入的固件（软路由系统）的不同来决定后台地址，一般来说，软路由后台是<code>192.168.X.1</code> ，本文的系统后台是<code>192.168.22.1</code>，所以说我们在电脑浏览器内输入<code>192.168.5.1</code>(<code>192.168.22.1</code>)以进入后台。后台账号是root，默认密码基本都是password（若下载本文的系统，密码则为空），具体操作链接里面写的很清楚。</p>\n<h2 id=\"拨号或者DHCP客户端\"><a href=\"#拨号或者DHCP客户端\" class=\"headerlink\" title=\"拨号或者DHCP客户端\"></a>拨号或者DHCP客户端</h2><h3 id=\"光猫拨号\"><a href=\"#光猫拨号\" class=\"headerlink\" title=\"光猫拨号\"></a>光猫拨号</h3><p>如果你家里的组网方式是通过光猫拨号（通常都是光猫拨号），那么设置方法如下：</p>\n<p>选择 网络-接口， 然后选择 修改WAN口设置</p>\n<p><img src=\"/2022/02/26/R2S_build/image-2-1024x507.png\" alt=\"img\" loading=\"lazy\"></p>\n<p>将WAN口设置成DHCP客户端，然后保存应用即可，此外无须做其他任何设置。</p>\n<p><img src=\"/2022/02/26/R2S_build/image-3-1024x485.png\" alt=\"img\" loading=\"lazy\"></p>\n<h3 id=\"R2S拨号\"><a href=\"#R2S拨号\" class=\"headerlink\" title=\"R2S拨号\"></a>R2S拨号</h3><p>如果你的光猫是桥接，那么就由路由器来拨号（通常来说，哪个网络设备配置更好，就誰来拨号，由于R2S的稳定性远不如光猫，所以这里选择光猫拨号更好），设置方法如下：</p>\n<p><img src=\"/2022/02/26/R2S_build/image-5.png\" alt=\"img\" loading=\"lazy\"></p>\n<p>同样，选择修改WAN口，协议设置成PPPoE, PAP/CHAP，账号密码就是光猫的账号密码。比如电信宽带就是以<code>@163.gd</code>结尾的，密码如果忘记的话直接拨打10000（10086）重置就好，省时省力。</p>\n<p><img src=\"/2022/02/26/R2S_build/image-2-1024x507.png\" alt=\"img\" loading=\"lazy\"></p>\n<p>接下来，需要用超级管理员账号登陆到光猫的IP中（<code>192.168.1.1</code>）,各大运营商的超级管理员账号和密码可以自行搜索。选择 网络-协议，然后设置成DHCP客户端。</p>\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>用什么拨号，什么就选择PPPoE，然后其它设备就都设置成DHCP。</p>\n<p>用光猫拨号，光猫的设置里面就选择PPPoE，软路由以及其它路由器就选择DHCP客户端；</p>\n<p>用R2S拨号，光猫和其它路由设备的设置里面就选择DHCP客户端，软路由选择PPPoE。</p>\n<h2 id=\"各设备接入网络\"><a href=\"#各设备接入网络\" class=\"headerlink\" title=\"各设备接入网络\"></a>各设备接入网络</h2><p>将软路由的WAN口与光猫的千兆口相连，然后断开软路由的LAN口与电脑网口的连接，此时软路由的LAN口根据各人组网要求的不同选择接不同的设备，可以接交换机，也可以接一台路由器（路由器设置为有线中继模式，也就是无线AP模式）</p>\n<p>如果家中设备比较多，或者很多屋子都需要连网线的话，可以买一个最便宜的千兆交换机放到弱电箱中，然后吧R2S接到交换机与光猫中间，这样就可以实现整个局域网都接入到软路由中来。（我来草草的画个图）</p>\n<p><img src=\"/2022/02/26/R2S_build/image-20220305212846426.png\" alt=\"image-20220305212846426\" loading=\"lazy\"></p>\n<h2 id=\"利用插件设置科学上网\"><a href=\"#利用插件设置科学上网\" class=\"headerlink\" title=\"利用插件设置科学上网\"></a>利用插件设置科学上网</h2><p>根据前面的步骤，如果你的设备能够正常访问网络了，就可以开始探索OpenWrt的各类插件了。关于科学上网，常见的插件有PassWall, ShadowScoksR++, OpenClash，由于OpenClash具备强大的分流策略机制（根据你访问的域名或者IP的不同决定走不同的节点），我们在此以OpenCalsh为例设置科学上网</p>\n<p><img src=\"/2022/02/26/R2S_build/image-7.png\" alt=\"img\" loading=\"lazy\"></p>\n<p>首先，在服务菜单中找到OpenClash，然后选择配置文件订阅，选择添加配置文件</p>\n<p><img src=\"/2022/02/26/R2S_build/image-8.png\" alt=\"img\" loading=\"lazy\"></p>\n<p>配置文件名随便写，用途是给用户自己区分的，订阅地址填上机场给你的订阅地址，其余地方无需设置，直接应用并保存即可。然后回到OpenClash主页，配置文件区域发送了变化。</p>\n<p><img src=\"/2022/02/26/R2S_build/image-9-1024x194.png\" alt=\"img\" loading=\"lazy\"></p>\n<p>最后点击左下角的启动按钮，等待服务器上线运行即可。</p>\n<p><img src=\"/2022/02/26/R2S_build/image-10.png\" alt=\"img\" loading=\"lazy\"></p>\n<p>如果你设置后无法正常科学上网，原因是有很多的，需要你自己慢慢排查。</p>\n<h2 id=\"更多（原作者的话）\"><a href=\"#更多（原作者的话）\" class=\"headerlink\" title=\"更多（原作者的话）\"></a>更多（原作者的话）</h2><p><a href=\"https://wiki.friendlyarm.com/wiki/index.php/NanoPi_R2S/zh\">NanoPi R2S WIKI</a></p>\n<p>上面的链接是R2S的WIKI书，上面详细记录了R2S的配置以及实际测速情况，也有如何编译系统等教程。</p>\n<p>个人使用R2S两年，从大一到大三都在用这个，感觉就是到千兆不太行，500M是瓶颈了，然后连久了没那么稳定，官网手册上宣传它是又稳定又能达到千兆的，这个听听就好，R2S本来是适合入门的，但是现在价格炒的太高了，没这个必要去买它，目前有很多更具有性价比的软路由可供选择。</p>\n<p>此外向大家推荐软路由界的大佬: <a href=\"https://youtube.com/c/jackstone\">JackStone的Youtube主页</a> ，人称老白，做了很多小主机的视频，如果想选购更具性价比的设备，可以看他的合集，比如2021软路由选购建议这些。</p>\n<h2 id=\"组网时遇到过的问题（我的话）\"><a href=\"#组网时遇到过的问题（我的话）\" class=\"headerlink\" title=\"组网时遇到过的问题（我的话）\"></a>组网时遇到过的问题（我的话）</h2><ol>\n<li>组网的过程中可能出现无法自动分配IP地址的问题，比如说小米的路由器默认会分配<code>192.168.31.XXX</code>；如果你会手动配置的话可以试试，不过最简单的办法就是等，去洗个澡回来就好了。如果还没好，那么可以考虑RESET一下路由器。</li>\n<li>OpenClash插件在首次启动的时候，可能会启动失败，他会提示需要你选择编译架构，按照他的提示，选择Arm-v8架构即可。</li>\n<li>网线通常插上马上就会亮灯，5s左右就能ping通，不过不要太相信科学。<del>我有一次ping了10多分钟。</del>真的，不通的话不一定是没插紧，也不一定是插错了，<strong>很有可能是因为你没给我微信或者支付宝赞赏</strong>。</li>\n<li>R2S是很基础的一款软路由，稳定性可能不会太好，不过最有可能导致网络不稳定的还是机场的选择，如果选择廉价机场的话，要做好不知道什么时候突然断网10分钟的准备。</li>\n<li>计算机网络这门学科是玄学的一个分支。</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>本文授权转载自<a href=\"https://www.bytedance.fit/?p=1051\">R2S家庭组网实操 – Orange Tien</a>，作者：Orange Tien，在此基础上略加修改，<del>并不会定期更新</del>。</p>\n<p>本文主要介绍R2S的基本使用方法，目前本人（Tony）也在原作者（Orange Tien）的怂恿下在两个地方分别搭建了两个R2S，看起来很简单，其实不是一帆风顺；因此也会把实际组网中遇到的问题列到最后供大家参考。</p>\n<h2 id=\"确定所需物理设备\"><a href=\"#确定所需物理设备\" class=\"headerlink\" title=\"确定所需物理设备\"></a>确定所需物理设备</h2><ul>\n<li>一台R2S软路由以及它的电源线</li>\n<li>两根用不着太长的网线一张TF卡（作为R2S的系统盘）以及一个读写TF卡的读卡器</li>\n<li>一台可以插网线的电脑</li>\n<li>交换机（可选）</li>\n<li>插排（某些时候插座不够用）</li>\n</ul>\n<h2 id=\"烧录OpenWrt系统\"><a href=\"#烧录OpenWrt系统\" class=\"headerlink\" title=\"烧录OpenWrt系统\"></a>烧录OpenWrt系统</h2><p>烧录软件：<a href=\"https://www.balena.io/etcher/\">BalenaEtcher</a></p>\n<p>软路由系统：</p>\n<p><a href=\"https://bigdongdong.cowtransfer.com/s/a3420546d30343\">OpenWrt-R2S-dongdong</a></p>\n<p><a href=\"https://bigdongdong.cowtransfer.com/s/9a349ee597aa4f\">OpenWrt-R2S-esir</a></p>\n<p>第一个链接比较新，界面比较好看一些，推荐选择这个下载；第二个系统是eSir大人写的2020版本，已经很旧了；<del>奈何暂时没找到别的系统</del>，如果自行找到更好的系统也可以不用这俩链接。注意系统是要支持Arm架构的，因为Openwrt不是x86架构下的产物。</p>\n<h2 id=\"开始烧录系统至TF卡\"><a href=\"#开始烧录系统至TF卡\" class=\"headerlink\" title=\"开始烧录系统至TF卡\"></a>开始烧录系统至TF卡</h2><p>打开BalenaEtcher，选择Flash from file，然后将OpenWrt系统烧录到TF卡中即可。</p>\n<p><img src=\"/2022/02/26/R2S_build/image-1.png\" alt=\"img\"></p>\n<p>注意：选择文件时只选择镜像文件，不要把那些七七八八的文档说明也选进去。选择<code>.gz</code>(<code>.img</code>)文件来烧录即可，烧录完成后直接拔掉读卡器；系统会提示格式化，此时千万<strong>不要</strong>格式化！！！（<del>否则，就重来一遍吧</del>）</p>\n<h2 id=\"登入R2S后台\"><a href=\"#登入R2S后台\" class=\"headerlink\" title=\"登入R2S后台\"></a>登入R2S后台</h2><p>把烧录好固件的TF卡插入R2S，然后给它插上电源，WAN口可以不接，将R2S的LAN口连接电脑的网口，根据所刷入的固件（软路由系统）的不同来决定后台地址，一般来说，软路由后台是<code>192.168.X.1</code> ，本文的系统后台是<code>192.168.22.1</code>，所以说我们在电脑浏览器内输入<code>192.168.5.1</code>(<code>192.168.22.1</code>)以进入后台。后台账号是root，默认密码基本都是password（若下载本文的系统，密码则为空），具体操作链接里面写的很清楚。</p>\n<h2 id=\"拨号或者DHCP客户端\"><a href=\"#拨号或者DHCP客户端\" class=\"headerlink\" title=\"拨号或者DHCP客户端\"></a>拨号或者DHCP客户端</h2><h3 id=\"光猫拨号\"><a href=\"#光猫拨号\" class=\"headerlink\" title=\"光猫拨号\"></a>光猫拨号</h3><p>如果你家里的组网方式是通过光猫拨号（通常都是光猫拨号），那么设置方法如下：</p>\n<p>选择 网络-接口， 然后选择 修改WAN口设置</p>\n<p><img src=\"/2022/02/26/R2S_build/image-2-1024x507.png\" alt=\"img\"></p>\n<p>将WAN口设置成DHCP客户端，然后保存应用即可，此外无须做其他任何设置。</p>\n<p><img src=\"/2022/02/26/R2S_build/image-3-1024x485.png\" alt=\"img\"></p>\n<h3 id=\"R2S拨号\"><a href=\"#R2S拨号\" class=\"headerlink\" title=\"R2S拨号\"></a>R2S拨号</h3><p>如果你的光猫是桥接，那么就由路由器来拨号（通常来说，哪个网络设备配置更好，就誰来拨号，由于R2S的稳定性远不如光猫，所以这里选择光猫拨号更好），设置方法如下：</p>\n<p><img src=\"/2022/02/26/R2S_build/image-5.png\" alt=\"img\"></p>\n<p>同样，选择修改WAN口，协议设置成PPPoE, PAP/CHAP，账号密码就是光猫的账号密码。比如电信宽带就是以<code>@163.gd</code>结尾的，密码如果忘记的话直接拨打10000（10086）重置就好，省时省力。</p>\n<p><img src=\"/2022/02/26/R2S_build/image-2-1024x507.png\" alt=\"img\"></p>\n<p>接下来，需要用超级管理员账号登陆到光猫的IP中（<code>192.168.1.1</code>）,各大运营商的超级管理员账号和密码可以自行搜索。选择 网络-协议，然后设置成DHCP客户端。</p>\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>用什么拨号，什么就选择PPPoE，然后其它设备就都设置成DHCP。</p>\n<p>用光猫拨号，光猫的设置里面就选择PPPoE，软路由以及其它路由器就选择DHCP客户端；</p>\n<p>用R2S拨号，光猫和其它路由设备的设置里面就选择DHCP客户端，软路由选择PPPoE。</p>\n<h2 id=\"各设备接入网络\"><a href=\"#各设备接入网络\" class=\"headerlink\" title=\"各设备接入网络\"></a>各设备接入网络</h2><p>将软路由的WAN口与光猫的千兆口相连，然后断开软路由的LAN口与电脑网口的连接，此时软路由的LAN口根据各人组网要求的不同选择接不同的设备，可以接交换机，也可以接一台路由器（路由器设置为有线中继模式，也就是无线AP模式）</p>\n<p>如果家中设备比较多，或者很多屋子都需要连网线的话，可以买一个最便宜的千兆交换机放到弱电箱中，然后吧R2S接到交换机与光猫中间，这样就可以实现整个局域网都接入到软路由中来。（我来草草的画个图）</p>\n<p><img src=\"/2022/02/26/R2S_build/image-20220305212846426.png\" alt=\"image-20220305212846426\"></p>\n<h2 id=\"利用插件设置科学上网\"><a href=\"#利用插件设置科学上网\" class=\"headerlink\" title=\"利用插件设置科学上网\"></a>利用插件设置科学上网</h2><p>根据前面的步骤，如果你的设备能够正常访问网络了，就可以开始探索OpenWrt的各类插件了。关于科学上网，常见的插件有PassWall, ShadowScoksR++, OpenClash，由于OpenClash具备强大的分流策略机制（根据你访问的域名或者IP的不同决定走不同的节点），我们在此以OpenCalsh为例设置科学上网</p>\n<p><img src=\"/2022/02/26/R2S_build/image-7.png\" alt=\"img\"></p>\n<p>首先，在服务菜单中找到OpenClash，然后选择配置文件订阅，选择添加配置文件</p>\n<p><img src=\"/2022/02/26/R2S_build/image-8.png\" alt=\"img\"></p>\n<p>配置文件名随便写，用途是给用户自己区分的，订阅地址填上机场给你的订阅地址，其余地方无需设置，直接应用并保存即可。然后回到OpenClash主页，配置文件区域发送了变化。</p>\n<p><img src=\"/2022/02/26/R2S_build/image-9-1024x194.png\" alt=\"img\"></p>\n<p>最后点击左下角的启动按钮，等待服务器上线运行即可。</p>\n<p><img src=\"/2022/02/26/R2S_build/image-10.png\" alt=\"img\"></p>\n<p>如果你设置后无法正常科学上网，原因是有很多的，需要你自己慢慢排查。</p>\n<h2 id=\"更多（原作者的话）\"><a href=\"#更多（原作者的话）\" class=\"headerlink\" title=\"更多（原作者的话）\"></a>更多（原作者的话）</h2><p><a href=\"https://wiki.friendlyarm.com/wiki/index.php/NanoPi_R2S/zh\">NanoPi R2S WIKI</a></p>\n<p>上面的链接是R2S的WIKI书，上面详细记录了R2S的配置以及实际测速情况，也有如何编译系统等教程。</p>\n<p>个人使用R2S两年，从大一到大三都在用这个，感觉就是到千兆不太行，500M是瓶颈了，然后连久了没那么稳定，官网手册上宣传它是又稳定又能达到千兆的，这个听听就好，R2S本来是适合入门的，但是现在价格炒的太高了，没这个必要去买它，目前有很多更具有性价比的软路由可供选择。</p>\n<p>此外向大家推荐软路由界的大佬: <a href=\"https://youtube.com/c/jackstone\">JackStone的Youtube主页</a> ，人称老白，做了很多小主机的视频，如果想选购更具性价比的设备，可以看他的合集，比如2021软路由选购建议这些。</p>\n<h2 id=\"组网时遇到过的问题（我的话）\"><a href=\"#组网时遇到过的问题（我的话）\" class=\"headerlink\" title=\"组网时遇到过的问题（我的话）\"></a>组网时遇到过的问题（我的话）</h2><ol>\n<li>组网的过程中可能出现无法自动分配IP地址的问题，比如说小米的路由器默认会分配<code>192.168.31.XXX</code>；如果你会手动配置的话可以试试，不过最简单的办法就是等，去洗个澡回来就好了。如果还没好，那么可以考虑RESET一下路由器。</li>\n<li>OpenClash插件在首次启动的时候，可能会启动失败，他会提示需要你选择编译架构，按照他的提示，选择Arm-v8架构即可。</li>\n<li>网线通常插上马上就会亮灯，5s左右就能ping通，不过不要太相信科学。<del>我有一次ping了10多分钟。</del>真的，不通的话不一定是没插紧，也不一定是插错了，<strong>很有可能是因为你没给我微信或者支付宝赞赏</strong>。</li>\n<li>R2S是很基础的一款软路由，稳定性可能不会太好，不过最有可能导致网络不稳定的还是机场的选择，如果选择廉价机场的话，要做好不知道什么时候突然断网10分钟的准备。</li>\n<li>计算机网络这门学科是玄学的一个分支。</li>\n</ol>\n"},{"title":"链式二叉树简介","date":"2022-02-25T08:01:11.000Z","author":"Tony","katex":true,"_content":"\n\n\n## 前言\n\n> 人为什么难做选择？\n\n**选择意味着放弃**\n\n你选择一方，也就意味着放弃了另一方。摆在你面前的选择项越接近，你的选择就会越困难，因为放弃其中任何一个选择项都不容易。如果摆在你面前的选择项对比明显，那么选择起来就会轻松许多，大家几乎都会毫不犹豫的选择“好”的选择项，放弃掉“差”的选择项。\n\n**选择永远都不是完美的**\n\n选择永远都不可能十全十美，只可能满足尽量多的侧重点。选择的时候想满足越多的侧重点，可能就会越难做出选择。所以在选择上不要过于追求完美。\n\n警惕**逃避性选择**——不知道自己要去哪儿，还要选择离开。\n\n有一种选择是对现状不满，想逃离这种现状，但是却不知道去哪里。举个例子，可能目前的公司有各种问题，比如开发流程不规范等，如果因为这些问题离开，可能就会从一个坑跳到另外一个更大的坑。当决定离开的时候，一定是自己有明确的目标，很清楚自己想要什么。\n\n------\n\n## 二叉树的定义\n\n二叉树要么为空，要么由根节点（root），左子树（left subtree）和右子树（right subtree）组成，而且左子树和右子树分别是一棵二叉树。\n\n------\n\n## 二叉树的遍历\n\n- 先序遍历$PreOrder(T)=Root(T)+PreOrder(left subT)+PreOrder(right subT)$\n- 中序遍历$InOrder(T)=InOrder(left subT)+Root(T)+InOrder(right subT)$\n- 后序遍历$PostOrder(T)=PostOrder(left subT)+PostOrder(Right subT)+Root(T)$\n\n![img](binary_tree_1/image.png)\n\n------\n\n\n\n```\nstruct Bitree //definition\n{\n    int data;\n    Bitree Lchild;\n    Bitree Rchild;\n};\n```\n\n## 先序遍历\n\n1. 递归实现\n\n```\nvoid PreOrderTraverse(BiTree tree)\n{\n    if (tree == NULL)\n        return;\n    cout << tree->data;\n    PreOrderTraverse(tree->lchild);\n    PreOrderTraverse(tree->rchild);\n}\n```\n\n2. 迭代实现\n\n```\nvoid PreOrder(BiTree Root)\n{\n    stack <BiTree> s;\n    if (root) //如果根节点不为空\n        s.push(root); //则令根节点入栈\n    while (!s.empty()) //在栈变空之前反复循环\n    { \n        root = s.pop(); \n        cout << root->data; //弹出并访问当前节点\n        //下面左右孩子的顺序不能颠倒\n        //必须先让右孩子先入栈，再让左孩子入栈。\n        if (root->RChild)\n            s.push(root->RChild); //右孩子先入后出\n        if (root->LChild)\n            s.push(root->LChild); //左孩子后入先出\n    }\n}\n```\n\n我们通过一个实例来了解一下该迭代版本是如何工作的 :\n\n![img](binary_tree_1/v2-0ccba83c7b3dbf7b89964c04021025d9_720w.jpg)\n\n## 中序遍历\n\n1. 递归实现\n\n```\nvoid InOrderTraverse(BiTree tree)\n{\n    if (!tree)\n        return;\n    InOrderTraverse(tree->lchild);\n    cout << tree->data;\n    IndOrderTraverse(tree->rchild);\n}\n```\n\n2. 迭代实现\n\n```\nvoid InOrderTraverse(BiTree root)\n{\n   Stack<BiTree> S; //辅助栈\n   while (true)\n      if (root) \n      {\n         S.push (root); //根节点进栈\n         root = root->LChild; //深入遍历左子树\n      } \n      else if (!S.empty()) \n      {\n         root = S.pop(); //尚未访问的最低祖先节点退栈\n         cout << root->data; //访问该祖先节点\n         root = root->RChild; //遍历祖先的右子树\n      } \n      else\n         break; //遍历完成\n}\n```\n\n## 后序遍历\n\n1. 递归实现\n\n```\nvoid PostOrderTraverse(BiTree tree)\n{\n    if (!tree)\n        return;\n    InOrderTraverse(tree->Lchild);\n    IndOrderTraverse(tree->Rchild);\n    cout << tree->data;\n}\n```\n\n2. 迭代实现\n\n```\n#define A !cur->Lchild && !cur->Rchild\n//如果P不存在左孩子和右孩子，则可以直接访问它；\n#define B pre==cur->Lchild || pre==cur->Rchild\n//P存在左孩子或者右孩子，但是其左孩子和右孩子都已被访问过了;\nvoid PostOrder(BiTree Root)\n{\n    if (!Root)\n        return;\n    stack <BiTree> s;//辅助栈\n    BiTree cur=Root,pre=NULL;\n    s.push(Root);//根节点进栈\n    while (!s.empty())\n    {\n        cur=s.top();\n        if (A || B)\n        {\n            cout << cur->data;\n            s.pop();\n            pre=cur;\n        }\n        else\n        {\n            if (cur->Rchild)\n                s.push(cur->Rchild);\n            if (cur->Lchild)\n                s.push(cur->Lchild);\n        }\n    }\n}\n\n```\n\n------\n\n下一篇文章：[数组与链式二叉树之间的转换 | Tony (tonylsx611.github.io)](https://tonylsx611.github.io/2022/02/24/binary_tree_2/)\n$$\nEND\n$$","source":"_posts/binary_tree_1.md","raw":"---\ntitle: 链式二叉树简介\ndate: 2022-02-25 16:01:11\nauthor: Tony\ncategories:\n\t- algorithm\ntags: \n\t- Binary-tree\n\t- algorithm\nkatex: true\n---\n\n\n\n## 前言\n\n> 人为什么难做选择？\n\n**选择意味着放弃**\n\n你选择一方，也就意味着放弃了另一方。摆在你面前的选择项越接近，你的选择就会越困难，因为放弃其中任何一个选择项都不容易。如果摆在你面前的选择项对比明显，那么选择起来就会轻松许多，大家几乎都会毫不犹豫的选择“好”的选择项，放弃掉“差”的选择项。\n\n**选择永远都不是完美的**\n\n选择永远都不可能十全十美，只可能满足尽量多的侧重点。选择的时候想满足越多的侧重点，可能就会越难做出选择。所以在选择上不要过于追求完美。\n\n警惕**逃避性选择**——不知道自己要去哪儿，还要选择离开。\n\n有一种选择是对现状不满，想逃离这种现状，但是却不知道去哪里。举个例子，可能目前的公司有各种问题，比如开发流程不规范等，如果因为这些问题离开，可能就会从一个坑跳到另外一个更大的坑。当决定离开的时候，一定是自己有明确的目标，很清楚自己想要什么。\n\n------\n\n## 二叉树的定义\n\n二叉树要么为空，要么由根节点（root），左子树（left subtree）和右子树（right subtree）组成，而且左子树和右子树分别是一棵二叉树。\n\n------\n\n## 二叉树的遍历\n\n- 先序遍历$PreOrder(T)=Root(T)+PreOrder(left subT)+PreOrder(right subT)$\n- 中序遍历$InOrder(T)=InOrder(left subT)+Root(T)+InOrder(right subT)$\n- 后序遍历$PostOrder(T)=PostOrder(left subT)+PostOrder(Right subT)+Root(T)$\n\n![img](binary_tree_1/image.png)\n\n------\n\n\n\n```\nstruct Bitree //definition\n{\n    int data;\n    Bitree Lchild;\n    Bitree Rchild;\n};\n```\n\n## 先序遍历\n\n1. 递归实现\n\n```\nvoid PreOrderTraverse(BiTree tree)\n{\n    if (tree == NULL)\n        return;\n    cout << tree->data;\n    PreOrderTraverse(tree->lchild);\n    PreOrderTraverse(tree->rchild);\n}\n```\n\n2. 迭代实现\n\n```\nvoid PreOrder(BiTree Root)\n{\n    stack <BiTree> s;\n    if (root) //如果根节点不为空\n        s.push(root); //则令根节点入栈\n    while (!s.empty()) //在栈变空之前反复循环\n    { \n        root = s.pop(); \n        cout << root->data; //弹出并访问当前节点\n        //下面左右孩子的顺序不能颠倒\n        //必须先让右孩子先入栈，再让左孩子入栈。\n        if (root->RChild)\n            s.push(root->RChild); //右孩子先入后出\n        if (root->LChild)\n            s.push(root->LChild); //左孩子后入先出\n    }\n}\n```\n\n我们通过一个实例来了解一下该迭代版本是如何工作的 :\n\n![img](binary_tree_1/v2-0ccba83c7b3dbf7b89964c04021025d9_720w.jpg)\n\n## 中序遍历\n\n1. 递归实现\n\n```\nvoid InOrderTraverse(BiTree tree)\n{\n    if (!tree)\n        return;\n    InOrderTraverse(tree->lchild);\n    cout << tree->data;\n    IndOrderTraverse(tree->rchild);\n}\n```\n\n2. 迭代实现\n\n```\nvoid InOrderTraverse(BiTree root)\n{\n   Stack<BiTree> S; //辅助栈\n   while (true)\n      if (root) \n      {\n         S.push (root); //根节点进栈\n         root = root->LChild; //深入遍历左子树\n      } \n      else if (!S.empty()) \n      {\n         root = S.pop(); //尚未访问的最低祖先节点退栈\n         cout << root->data; //访问该祖先节点\n         root = root->RChild; //遍历祖先的右子树\n      } \n      else\n         break; //遍历完成\n}\n```\n\n## 后序遍历\n\n1. 递归实现\n\n```\nvoid PostOrderTraverse(BiTree tree)\n{\n    if (!tree)\n        return;\n    InOrderTraverse(tree->Lchild);\n    IndOrderTraverse(tree->Rchild);\n    cout << tree->data;\n}\n```\n\n2. 迭代实现\n\n```\n#define A !cur->Lchild && !cur->Rchild\n//如果P不存在左孩子和右孩子，则可以直接访问它；\n#define B pre==cur->Lchild || pre==cur->Rchild\n//P存在左孩子或者右孩子，但是其左孩子和右孩子都已被访问过了;\nvoid PostOrder(BiTree Root)\n{\n    if (!Root)\n        return;\n    stack <BiTree> s;//辅助栈\n    BiTree cur=Root,pre=NULL;\n    s.push(Root);//根节点进栈\n    while (!s.empty())\n    {\n        cur=s.top();\n        if (A || B)\n        {\n            cout << cur->data;\n            s.pop();\n            pre=cur;\n        }\n        else\n        {\n            if (cur->Rchild)\n                s.push(cur->Rchild);\n            if (cur->Lchild)\n                s.push(cur->Lchild);\n        }\n    }\n}\n\n```\n\n------\n\n下一篇文章：[数组与链式二叉树之间的转换 | Tony (tonylsx611.github.io)](https://tonylsx611.github.io/2022/02/24/binary_tree_2/)\n$$\nEND\n$$","slug":"binary_tree_1","published":1,"updated":"2022-03-10T09:18:43.609Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0o5i749000nascyferx4331","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><blockquote>\n<p>人为什么难做选择？</p>\n</blockquote>\n<p><strong>选择意味着放弃</strong></p>\n<p>你选择一方，也就意味着放弃了另一方。摆在你面前的选择项越接近，你的选择就会越困难，因为放弃其中任何一个选择项都不容易。如果摆在你面前的选择项对比明显，那么选择起来就会轻松许多，大家几乎都会毫不犹豫的选择“好”的选择项，放弃掉“差”的选择项。</p>\n<p><strong>选择永远都不是完美的</strong></p>\n<p>选择永远都不可能十全十美，只可能满足尽量多的侧重点。选择的时候想满足越多的侧重点，可能就会越难做出选择。所以在选择上不要过于追求完美。</p>\n<p>警惕<strong>逃避性选择</strong>——不知道自己要去哪儿，还要选择离开。</p>\n<p>有一种选择是对现状不满，想逃离这种现状，但是却不知道去哪里。举个例子，可能目前的公司有各种问题，比如开发流程不规范等，如果因为这些问题离开，可能就会从一个坑跳到另外一个更大的坑。当决定离开的时候，一定是自己有明确的目标，很清楚自己想要什么。</p>\n<hr>\n<h2 id=\"二叉树的定义\"><a href=\"#二叉树的定义\" class=\"headerlink\" title=\"二叉树的定义\"></a>二叉树的定义</h2><p>二叉树要么为空，要么由根节点（root），左子树（left subtree）和右子树（right subtree）组成，而且左子树和右子树分别是一棵二叉树。</p>\n<hr>\n<h2 id=\"二叉树的遍历\"><a href=\"#二叉树的遍历\" class=\"headerlink\" title=\"二叉树的遍历\"></a>二叉树的遍历</h2><ul>\n<li>先序遍历$PreOrder(T)=Root(T)+PreOrder(left subT)+PreOrder(right subT)$</li>\n<li>中序遍历$InOrder(T)=InOrder(left subT)+Root(T)+InOrder(right subT)$</li>\n<li>后序遍历$PostOrder(T)=PostOrder(left subT)+PostOrder(Right subT)+Root(T)$</li>\n</ul>\n<p><img src=\"/2022/02/25/binary_tree_1/image.png\" alt=\"img\" loading=\"lazy\"></p>\n<hr>\n<pre class=\"language-none\"><code class=\"language-none\">struct Bitree &#x2F;&#x2F;definition\n&#123;\n    int data;\n    Bitree Lchild;\n    Bitree Rchild;\n&#125;;</code></pre>\n<h2 id=\"先序遍历\"><a href=\"#先序遍历\" class=\"headerlink\" title=\"先序遍历\"></a>先序遍历</h2><ol>\n<li>递归实现</li>\n</ol>\n<pre class=\"language-none\"><code class=\"language-none\">void PreOrderTraverse(BiTree tree)\n&#123;\n    if (tree &#x3D;&#x3D; NULL)\n        return;\n    cout &lt;&lt; tree-&gt;data;\n    PreOrderTraverse(tree-&gt;lchild);\n    PreOrderTraverse(tree-&gt;rchild);\n&#125;</code></pre>\n<ol>\n<li>迭代实现</li>\n</ol>\n<pre class=\"language-none\"><code class=\"language-none\">void PreOrder(BiTree Root)\n&#123;\n    stack &lt;BiTree&gt; s;\n    if (root) &#x2F;&#x2F;如果根节点不为空\n        s.push(root); &#x2F;&#x2F;则令根节点入栈\n    while (!s.empty()) &#x2F;&#x2F;在栈变空之前反复循环\n    &#123; \n        root &#x3D; s.pop(); \n        cout &lt;&lt; root-&gt;data; &#x2F;&#x2F;弹出并访问当前节点\n        &#x2F;&#x2F;下面左右孩子的顺序不能颠倒\n        &#x2F;&#x2F;必须先让右孩子先入栈，再让左孩子入栈。\n        if (root-&gt;RChild)\n            s.push(root-&gt;RChild); &#x2F;&#x2F;右孩子先入后出\n        if (root-&gt;LChild)\n            s.push(root-&gt;LChild); &#x2F;&#x2F;左孩子后入先出\n    &#125;\n&#125;</code></pre>\n<p>我们通过一个实例来了解一下该迭代版本是如何工作的 :</p>\n<p><img src=\"/2022/02/25/binary_tree_1/v2-0ccba83c7b3dbf7b89964c04021025d9_720w.jpg\" alt=\"img\" loading=\"lazy\"></p>\n<h2 id=\"中序遍历\"><a href=\"#中序遍历\" class=\"headerlink\" title=\"中序遍历\"></a>中序遍历</h2><ol>\n<li>递归实现</li>\n</ol>\n<pre class=\"language-none\"><code class=\"language-none\">void InOrderTraverse(BiTree tree)\n&#123;\n    if (!tree)\n        return;\n    InOrderTraverse(tree-&gt;lchild);\n    cout &lt;&lt; tree-&gt;data;\n    IndOrderTraverse(tree-&gt;rchild);\n&#125;</code></pre>\n<ol>\n<li>迭代实现</li>\n</ol>\n<pre class=\"language-none\"><code class=\"language-none\">void InOrderTraverse(BiTree root)\n&#123;\n   Stack&lt;BiTree&gt; S; &#x2F;&#x2F;辅助栈\n   while (true)\n      if (root) \n      &#123;\n         S.push (root); &#x2F;&#x2F;根节点进栈\n         root &#x3D; root-&gt;LChild; &#x2F;&#x2F;深入遍历左子树\n      &#125; \n      else if (!S.empty()) \n      &#123;\n         root &#x3D; S.pop(); &#x2F;&#x2F;尚未访问的最低祖先节点退栈\n         cout &lt;&lt; root-&gt;data; &#x2F;&#x2F;访问该祖先节点\n         root &#x3D; root-&gt;RChild; &#x2F;&#x2F;遍历祖先的右子树\n      &#125; \n      else\n         break; &#x2F;&#x2F;遍历完成\n&#125;</code></pre>\n<h2 id=\"后序遍历\"><a href=\"#后序遍历\" class=\"headerlink\" title=\"后序遍历\"></a>后序遍历</h2><ol>\n<li>递归实现</li>\n</ol>\n<pre class=\"language-none\"><code class=\"language-none\">void PostOrderTraverse(BiTree tree)\n&#123;\n    if (!tree)\n        return;\n    InOrderTraverse(tree-&gt;Lchild);\n    IndOrderTraverse(tree-&gt;Rchild);\n    cout &lt;&lt; tree-&gt;data;\n&#125;</code></pre>\n<ol>\n<li>迭代实现</li>\n</ol>\n<pre class=\"language-none\"><code class=\"language-none\">#define A !cur-&gt;Lchild &amp;&amp; !cur-&gt;Rchild\n&#x2F;&#x2F;如果P不存在左孩子和右孩子，则可以直接访问它；\n#define B pre&#x3D;&#x3D;cur-&gt;Lchild || pre&#x3D;&#x3D;cur-&gt;Rchild\n&#x2F;&#x2F;P存在左孩子或者右孩子，但是其左孩子和右孩子都已被访问过了;\nvoid PostOrder(BiTree Root)\n&#123;\n    if (!Root)\n        return;\n    stack &lt;BiTree&gt; s;&#x2F;&#x2F;辅助栈\n    BiTree cur&#x3D;Root,pre&#x3D;NULL;\n    s.push(Root);&#x2F;&#x2F;根节点进栈\n    while (!s.empty())\n    &#123;\n        cur&#x3D;s.top();\n        if (A || B)\n        &#123;\n            cout &lt;&lt; cur-&gt;data;\n            s.pop();\n            pre&#x3D;cur;\n        &#125;\n        else\n        &#123;\n            if (cur-&gt;Rchild)\n                s.push(cur-&gt;Rchild);\n            if (cur-&gt;Lchild)\n                s.push(cur-&gt;Lchild);\n        &#125;\n    &#125;\n&#125;\n</code></pre>\n<hr>\n<p>下一篇文章：<a href=\"https://tonylsx611.github.io/2022/02/24/binary_tree_2/\">数组与链式二叉树之间的转换 | Tony (tonylsx611.github.io)</a></p>\n<script type=\"math/tex; mode=display\">\nEND</script>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><blockquote>\n<p>人为什么难做选择？</p>\n</blockquote>\n<p><strong>选择意味着放弃</strong></p>\n<p>你选择一方，也就意味着放弃了另一方。摆在你面前的选择项越接近，你的选择就会越困难，因为放弃其中任何一个选择项都不容易。如果摆在你面前的选择项对比明显，那么选择起来就会轻松许多，大家几乎都会毫不犹豫的选择“好”的选择项，放弃掉“差”的选择项。</p>\n<p><strong>选择永远都不是完美的</strong></p>\n<p>选择永远都不可能十全十美，只可能满足尽量多的侧重点。选择的时候想满足越多的侧重点，可能就会越难做出选择。所以在选择上不要过于追求完美。</p>\n<p>警惕<strong>逃避性选择</strong>——不知道自己要去哪儿，还要选择离开。</p>\n<p>有一种选择是对现状不满，想逃离这种现状，但是却不知道去哪里。举个例子，可能目前的公司有各种问题，比如开发流程不规范等，如果因为这些问题离开，可能就会从一个坑跳到另外一个更大的坑。当决定离开的时候，一定是自己有明确的目标，很清楚自己想要什么。</p>\n<hr>\n<h2 id=\"二叉树的定义\"><a href=\"#二叉树的定义\" class=\"headerlink\" title=\"二叉树的定义\"></a>二叉树的定义</h2><p>二叉树要么为空，要么由根节点（root），左子树（left subtree）和右子树（right subtree）组成，而且左子树和右子树分别是一棵二叉树。</p>\n<hr>\n<h2 id=\"二叉树的遍历\"><a href=\"#二叉树的遍历\" class=\"headerlink\" title=\"二叉树的遍历\"></a>二叉树的遍历</h2><ul>\n<li>先序遍历$PreOrder(T)=Root(T)+PreOrder(left subT)+PreOrder(right subT)$</li>\n<li>中序遍历$InOrder(T)=InOrder(left subT)+Root(T)+InOrder(right subT)$</li>\n<li>后序遍历$PostOrder(T)=PostOrder(left subT)+PostOrder(Right subT)+Root(T)$</li>\n</ul>\n<p><img src=\"/2022/02/25/binary_tree_1/image.png\" alt=\"img\"></p>\n<hr>\n<pre class=\"language-none\"><code class=\"language-none\">struct Bitree &#x2F;&#x2F;definition\n&#123;\n    int data;\n    Bitree Lchild;\n    Bitree Rchild;\n&#125;;</code></pre>\n<h2 id=\"先序遍历\"><a href=\"#先序遍历\" class=\"headerlink\" title=\"先序遍历\"></a>先序遍历</h2><ol>\n<li>递归实现</li>\n</ol>\n<pre class=\"language-none\"><code class=\"language-none\">void PreOrderTraverse(BiTree tree)\n&#123;\n    if (tree &#x3D;&#x3D; NULL)\n        return;\n    cout &lt;&lt; tree-&gt;data;\n    PreOrderTraverse(tree-&gt;lchild);\n    PreOrderTraverse(tree-&gt;rchild);\n&#125;</code></pre>\n<ol>\n<li>迭代实现</li>\n</ol>\n<pre class=\"language-none\"><code class=\"language-none\">void PreOrder(BiTree Root)\n&#123;\n    stack &lt;BiTree&gt; s;\n    if (root) &#x2F;&#x2F;如果根节点不为空\n        s.push(root); &#x2F;&#x2F;则令根节点入栈\n    while (!s.empty()) &#x2F;&#x2F;在栈变空之前反复循环\n    &#123; \n        root &#x3D; s.pop(); \n        cout &lt;&lt; root-&gt;data; &#x2F;&#x2F;弹出并访问当前节点\n        &#x2F;&#x2F;下面左右孩子的顺序不能颠倒\n        &#x2F;&#x2F;必须先让右孩子先入栈，再让左孩子入栈。\n        if (root-&gt;RChild)\n            s.push(root-&gt;RChild); &#x2F;&#x2F;右孩子先入后出\n        if (root-&gt;LChild)\n            s.push(root-&gt;LChild); &#x2F;&#x2F;左孩子后入先出\n    &#125;\n&#125;</code></pre>\n<p>我们通过一个实例来了解一下该迭代版本是如何工作的 :</p>\n<p><img src=\"/2022/02/25/binary_tree_1/v2-0ccba83c7b3dbf7b89964c04021025d9_720w.jpg\" alt=\"img\"></p>\n<h2 id=\"中序遍历\"><a href=\"#中序遍历\" class=\"headerlink\" title=\"中序遍历\"></a>中序遍历</h2><ol>\n<li>递归实现</li>\n</ol>\n<pre class=\"language-none\"><code class=\"language-none\">void InOrderTraverse(BiTree tree)\n&#123;\n    if (!tree)\n        return;\n    InOrderTraverse(tree-&gt;lchild);\n    cout &lt;&lt; tree-&gt;data;\n    IndOrderTraverse(tree-&gt;rchild);\n&#125;</code></pre>\n<ol>\n<li>迭代实现</li>\n</ol>\n<pre class=\"language-none\"><code class=\"language-none\">void InOrderTraverse(BiTree root)\n&#123;\n   Stack&lt;BiTree&gt; S; &#x2F;&#x2F;辅助栈\n   while (true)\n      if (root) \n      &#123;\n         S.push (root); &#x2F;&#x2F;根节点进栈\n         root &#x3D; root-&gt;LChild; &#x2F;&#x2F;深入遍历左子树\n      &#125; \n      else if (!S.empty()) \n      &#123;\n         root &#x3D; S.pop(); &#x2F;&#x2F;尚未访问的最低祖先节点退栈\n         cout &lt;&lt; root-&gt;data; &#x2F;&#x2F;访问该祖先节点\n         root &#x3D; root-&gt;RChild; &#x2F;&#x2F;遍历祖先的右子树\n      &#125; \n      else\n         break; &#x2F;&#x2F;遍历完成\n&#125;</code></pre>\n<h2 id=\"后序遍历\"><a href=\"#后序遍历\" class=\"headerlink\" title=\"后序遍历\"></a>后序遍历</h2><ol>\n<li>递归实现</li>\n</ol>\n<pre class=\"language-none\"><code class=\"language-none\">void PostOrderTraverse(BiTree tree)\n&#123;\n    if (!tree)\n        return;\n    InOrderTraverse(tree-&gt;Lchild);\n    IndOrderTraverse(tree-&gt;Rchild);\n    cout &lt;&lt; tree-&gt;data;\n&#125;</code></pre>\n<ol>\n<li>迭代实现</li>\n</ol>\n<pre class=\"language-none\"><code class=\"language-none\">#define A !cur-&gt;Lchild &amp;&amp; !cur-&gt;Rchild\n&#x2F;&#x2F;如果P不存在左孩子和右孩子，则可以直接访问它；\n#define B pre&#x3D;&#x3D;cur-&gt;Lchild || pre&#x3D;&#x3D;cur-&gt;Rchild\n&#x2F;&#x2F;P存在左孩子或者右孩子，但是其左孩子和右孩子都已被访问过了;\nvoid PostOrder(BiTree Root)\n&#123;\n    if (!Root)\n        return;\n    stack &lt;BiTree&gt; s;&#x2F;&#x2F;辅助栈\n    BiTree cur&#x3D;Root,pre&#x3D;NULL;\n    s.push(Root);&#x2F;&#x2F;根节点进栈\n    while (!s.empty())\n    &#123;\n        cur&#x3D;s.top();\n        if (A || B)\n        &#123;\n            cout &lt;&lt; cur-&gt;data;\n            s.pop();\n            pre&#x3D;cur;\n        &#125;\n        else\n        &#123;\n            if (cur-&gt;Rchild)\n                s.push(cur-&gt;Rchild);\n            if (cur-&gt;Lchild)\n                s.push(cur-&gt;Lchild);\n        &#125;\n    &#125;\n&#125;\n</code></pre>\n<hr>\n<p>下一篇文章：<a href=\"https://tonylsx611.github.io/2022/02/24/binary_tree_2/\">数组与链式二叉树之间的转换 | Tony (tonylsx611.github.io)</a></p>\n<script type=\"math/tex; mode=display\">\nEND</script>"},{"title":"数组与链式二叉树的转换","date":"2022-02-24T14:20:55.000Z","author":"Tony","katex":false,"_content":"\n## 前言\n\n对二叉树不是很了解的同学可以先看一下我之前的文章：\n\n[链式二叉树简介](https://tonylsx611.github.io/2022/02/25/binary_tree_1/)\n\n## 正文\n\n在了解二叉树的基本原理后，我们尝试将一个数组转化成链表形式的二叉树，之后将二叉树以中序遍历打印出来。整个的过程即==数组——链表——数组==。\n\n幸运的是，正好在leetcode中有着一道非常相似的题，所以我就直接拿来使用了，链接如下：\n\n[94. 二叉树的中序遍历 – 力扣（LeetCode） (leetcode-cn.com)](https://leetcode-cn.com/problems/binary-tree-inorder-traversal/)\n\n我们稍加修改，首先声明一个int类型的数组，然后把它放入链表二叉树中，如图所示：\n\n![img](binary_tree_2/image.png)\n\n```\nint arr[7] = { 1, 2, 3, 4, 5, NULL, 6 };\n```\n\n之后的任务就是将数组转化为链表形式，链表的定义如下：\n\n```\nstruct TreeNode \n{\n    int val;\n    TreeNode* left;\n    TreeNode* right;\n    TreeNode() : val(0), left(nullptr), right(nullptr) {}\n    TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n    TreeNode(int x, TreeNode* left, TreeNode* right) : val(x), left(left), right(right) {}\n};\n```\n\n转化为链表过后，剩下的事情就很容易了，无非就是前中后序的遍历，我们在[上一个blog](https://tonylsx611.github.io/2022/02/25/binary_tree_1/)中已经有详细的介绍，这里更希望大家掌握迭代的算法，而非递归；因为递归在电脑的底层逻辑中，依然是维护一个栈。\n\n## 代码\n\n那么全部的代码如下，不做过多解释，有疑问可以在留言板留言。\n\n```\n#include<iostream>\n#include<vector>\nusing namespace std;\nstruct TreeNode {\n...};\nclass Solution {\npublic:\n    int arr[7] = { 1, 2, 3, 4, 5, NULL, 6 };\n    void inorder(TreeNode* root, vector<int>& res)//中序遍历\n    {\n        if (root == nullptr)\n            return;\n\n        inorder(root->left, res);\n        res.push_back(root->val);\n        inorder(root->right, res);\n    }\n    vector<int> inorderTraversal(TreeNode* root)//递归法\n    {\n        vector<int> ans;\n        inorder(root, ans);\n        return ans;\n    }\n    vector<int> inorderTraversal(TreeNode* root)//迭代法\n    {\n        vector<int> ans;\n        stack<TreeNode*> stk;\n           \n        while (1)\n        {\n            if (root != nullptr)\n            {\n                stk.push(root);\n                root = root->left;\n            }\n            else if (!stk.empty())\n            {\n                root = stk.top();\n                stk.pop();\n                ans.push_back(root->val);\n                root = root->right;\n            }\n            else\n                return ans;\n        }\n        \n    }\n    TreeNode* addtree(TreeNode* tree, int arr[], int i)//数组转链表\n    {\n        if (arr[i] == 0)\n            return NULL;\n        if (i < 7)//arr.length()\n        {\n            TreeNode* tree = new TreeNode();\n            \n            tree->val = arr[i];\n            tree->left = addtree(tree, arr, i + i + 1);\n            tree->right = addtree(tree, arr, i + i + 2);\n            return tree;\n        }\n        return NULL;\n    }\n};\n\nint main()\n{\n    Solution sol;\n    TreeNode* tree = NULL;\n    tree= sol.addtree(tree, sol.arr, 0);\n    sol.inorderTraversal(tree);\n    for(int i= 0; i< sol.inorderTraversal(tree).size(); i++)\n        cout << sol.inorderTraversal(tree)[i]<<\" \";\n    return 0;\n}\n```","source":"_posts/binary_tree_2.md","raw":"---\ntitle: 数组与链式二叉树的转换\ndate: 2022-02-24 22:20:55\nauthor: Tony\ncategories:\n\t- algorithm\ntags: \n\t- Binary-tree\n\t- algorithm\nkatex: false\n---\n\n## 前言\n\n对二叉树不是很了解的同学可以先看一下我之前的文章：\n\n[链式二叉树简介](https://tonylsx611.github.io/2022/02/25/binary_tree_1/)\n\n## 正文\n\n在了解二叉树的基本原理后，我们尝试将一个数组转化成链表形式的二叉树，之后将二叉树以中序遍历打印出来。整个的过程即==数组——链表——数组==。\n\n幸运的是，正好在leetcode中有着一道非常相似的题，所以我就直接拿来使用了，链接如下：\n\n[94. 二叉树的中序遍历 – 力扣（LeetCode） (leetcode-cn.com)](https://leetcode-cn.com/problems/binary-tree-inorder-traversal/)\n\n我们稍加修改，首先声明一个int类型的数组，然后把它放入链表二叉树中，如图所示：\n\n![img](binary_tree_2/image.png)\n\n```\nint arr[7] = { 1, 2, 3, 4, 5, NULL, 6 };\n```\n\n之后的任务就是将数组转化为链表形式，链表的定义如下：\n\n```\nstruct TreeNode \n{\n    int val;\n    TreeNode* left;\n    TreeNode* right;\n    TreeNode() : val(0), left(nullptr), right(nullptr) {}\n    TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n    TreeNode(int x, TreeNode* left, TreeNode* right) : val(x), left(left), right(right) {}\n};\n```\n\n转化为链表过后，剩下的事情就很容易了，无非就是前中后序的遍历，我们在[上一个blog](https://tonylsx611.github.io/2022/02/25/binary_tree_1/)中已经有详细的介绍，这里更希望大家掌握迭代的算法，而非递归；因为递归在电脑的底层逻辑中，依然是维护一个栈。\n\n## 代码\n\n那么全部的代码如下，不做过多解释，有疑问可以在留言板留言。\n\n```\n#include<iostream>\n#include<vector>\nusing namespace std;\nstruct TreeNode {\n...};\nclass Solution {\npublic:\n    int arr[7] = { 1, 2, 3, 4, 5, NULL, 6 };\n    void inorder(TreeNode* root, vector<int>& res)//中序遍历\n    {\n        if (root == nullptr)\n            return;\n\n        inorder(root->left, res);\n        res.push_back(root->val);\n        inorder(root->right, res);\n    }\n    vector<int> inorderTraversal(TreeNode* root)//递归法\n    {\n        vector<int> ans;\n        inorder(root, ans);\n        return ans;\n    }\n    vector<int> inorderTraversal(TreeNode* root)//迭代法\n    {\n        vector<int> ans;\n        stack<TreeNode*> stk;\n           \n        while (1)\n        {\n            if (root != nullptr)\n            {\n                stk.push(root);\n                root = root->left;\n            }\n            else if (!stk.empty())\n            {\n                root = stk.top();\n                stk.pop();\n                ans.push_back(root->val);\n                root = root->right;\n            }\n            else\n                return ans;\n        }\n        \n    }\n    TreeNode* addtree(TreeNode* tree, int arr[], int i)//数组转链表\n    {\n        if (arr[i] == 0)\n            return NULL;\n        if (i < 7)//arr.length()\n        {\n            TreeNode* tree = new TreeNode();\n            \n            tree->val = arr[i];\n            tree->left = addtree(tree, arr, i + i + 1);\n            tree->right = addtree(tree, arr, i + i + 2);\n            return tree;\n        }\n        return NULL;\n    }\n};\n\nint main()\n{\n    Solution sol;\n    TreeNode* tree = NULL;\n    tree= sol.addtree(tree, sol.arr, 0);\n    sol.inorderTraversal(tree);\n    for(int i= 0; i< sol.inorderTraversal(tree).size(); i++)\n        cout << sol.inorderTraversal(tree)[i]<<\" \";\n    return 0;\n}\n```","slug":"binary_tree_2","published":1,"updated":"2022-03-10T09:18:43.611Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0o5i74a000pascy8drnhpk7","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>对二叉树不是很了解的同学可以先看一下我之前的文章：</p>\n<p><a href=\"https://tonylsx611.github.io/2022/02/25/binary_tree_1/\">链式二叉树简介</a></p>\n<h2 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h2><p>在了解二叉树的基本原理后，我们尝试将一个数组转化成链表形式的二叉树，之后将二叉树以中序遍历打印出来。整个的过程即==数组——链表——数组==。</p>\n<p>幸运的是，正好在leetcode中有着一道非常相似的题，所以我就直接拿来使用了，链接如下：</p>\n<p><a href=\"https://leetcode-cn.com/problems/binary-tree-inorder-traversal/\">94. 二叉树的中序遍历 – 力扣（LeetCode） (leetcode-cn.com)</a></p>\n<p>我们稍加修改，首先声明一个int类型的数组，然后把它放入链表二叉树中，如图所示：</p>\n<p><img src=\"/2022/02/24/binary_tree_2/image.png\" alt=\"img\" loading=\"lazy\"></p>\n<pre class=\"language-none\"><code class=\"language-none\">int arr[7] &#x3D; &#123; 1, 2, 3, 4, 5, NULL, 6 &#125;;</code></pre>\n<p>之后的任务就是将数组转化为链表形式，链表的定义如下：</p>\n<pre class=\"language-none\"><code class=\"language-none\">struct TreeNode \n&#123;\n    int val;\n    TreeNode* left;\n    TreeNode* right;\n    TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;\n    TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;\n    TreeNode(int x, TreeNode* left, TreeNode* right) : val(x), left(left), right(right) &#123;&#125;\n&#125;;</code></pre>\n<p>转化为链表过后，剩下的事情就很容易了，无非就是前中后序的遍历，我们在<a href=\"https://tonylsx611.github.io/2022/02/25/binary_tree_1/\">上一个blog</a>中已经有详细的介绍，这里更希望大家掌握迭代的算法，而非递归；因为递归在电脑的底层逻辑中，依然是维护一个栈。</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><p>那么全部的代码如下，不做过多解释，有疑问可以在留言板留言。</p>\n<pre class=\"language-none\"><code class=\"language-none\">#include&lt;iostream&gt;\n#include&lt;vector&gt;\nusing namespace std;\nstruct TreeNode &#123;\n...&#125;;\nclass Solution &#123;\npublic:\n    int arr[7] &#x3D; &#123; 1, 2, 3, 4, 5, NULL, 6 &#125;;\n    void inorder(TreeNode* root, vector&lt;int&gt;&amp; res)&#x2F;&#x2F;中序遍历\n    &#123;\n        if (root &#x3D;&#x3D; nullptr)\n            return;\n\n        inorder(root-&gt;left, res);\n        res.push_back(root-&gt;val);\n        inorder(root-&gt;right, res);\n    &#125;\n    vector&lt;int&gt; inorderTraversal(TreeNode* root)&#x2F;&#x2F;递归法\n    &#123;\n        vector&lt;int&gt; ans;\n        inorder(root, ans);\n        return ans;\n    &#125;\n    vector&lt;int&gt; inorderTraversal(TreeNode* root)&#x2F;&#x2F;迭代法\n    &#123;\n        vector&lt;int&gt; ans;\n        stack&lt;TreeNode*&gt; stk;\n           \n        while (1)\n        &#123;\n            if (root !&#x3D; nullptr)\n            &#123;\n                stk.push(root);\n                root &#x3D; root-&gt;left;\n            &#125;\n            else if (!stk.empty())\n            &#123;\n                root &#x3D; stk.top();\n                stk.pop();\n                ans.push_back(root-&gt;val);\n                root &#x3D; root-&gt;right;\n            &#125;\n            else\n                return ans;\n        &#125;\n        \n    &#125;\n    TreeNode* addtree(TreeNode* tree, int arr[], int i)&#x2F;&#x2F;数组转链表\n    &#123;\n        if (arr[i] &#x3D;&#x3D; 0)\n            return NULL;\n        if (i &lt; 7)&#x2F;&#x2F;arr.length()\n        &#123;\n            TreeNode* tree &#x3D; new TreeNode();\n            \n            tree-&gt;val &#x3D; arr[i];\n            tree-&gt;left &#x3D; addtree(tree, arr, i + i + 1);\n            tree-&gt;right &#x3D; addtree(tree, arr, i + i + 2);\n            return tree;\n        &#125;\n        return NULL;\n    &#125;\n&#125;;\n\nint main()\n&#123;\n    Solution sol;\n    TreeNode* tree &#x3D; NULL;\n    tree&#x3D; sol.addtree(tree, sol.arr, 0);\n    sol.inorderTraversal(tree);\n    for(int i&#x3D; 0; i&lt; sol.inorderTraversal(tree).size(); i++)\n        cout &lt;&lt; sol.inorderTraversal(tree)[i]&lt;&lt;&quot; &quot;;\n    return 0;\n&#125;</code></pre>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>对二叉树不是很了解的同学可以先看一下我之前的文章：</p>\n<p><a href=\"https://tonylsx611.github.io/2022/02/25/binary_tree_1/\">链式二叉树简介</a></p>\n<h2 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h2><p>在了解二叉树的基本原理后，我们尝试将一个数组转化成链表形式的二叉树，之后将二叉树以中序遍历打印出来。整个的过程即==数组——链表——数组==。</p>\n<p>幸运的是，正好在leetcode中有着一道非常相似的题，所以我就直接拿来使用了，链接如下：</p>\n<p><a href=\"https://leetcode-cn.com/problems/binary-tree-inorder-traversal/\">94. 二叉树的中序遍历 – 力扣（LeetCode） (leetcode-cn.com)</a></p>\n<p>我们稍加修改，首先声明一个int类型的数组，然后把它放入链表二叉树中，如图所示：</p>\n<p><img src=\"/2022/02/24/binary_tree_2/image.png\" alt=\"img\"></p>\n<pre class=\"language-none\"><code class=\"language-none\">int arr[7] &#x3D; &#123; 1, 2, 3, 4, 5, NULL, 6 &#125;;</code></pre>\n<p>之后的任务就是将数组转化为链表形式，链表的定义如下：</p>\n<pre class=\"language-none\"><code class=\"language-none\">struct TreeNode \n&#123;\n    int val;\n    TreeNode* left;\n    TreeNode* right;\n    TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;\n    TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;\n    TreeNode(int x, TreeNode* left, TreeNode* right) : val(x), left(left), right(right) &#123;&#125;\n&#125;;</code></pre>\n<p>转化为链表过后，剩下的事情就很容易了，无非就是前中后序的遍历，我们在<a href=\"https://tonylsx611.github.io/2022/02/25/binary_tree_1/\">上一个blog</a>中已经有详细的介绍，这里更希望大家掌握迭代的算法，而非递归；因为递归在电脑的底层逻辑中，依然是维护一个栈。</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><p>那么全部的代码如下，不做过多解释，有疑问可以在留言板留言。</p>\n<pre class=\"language-none\"><code class=\"language-none\">#include&lt;iostream&gt;\n#include&lt;vector&gt;\nusing namespace std;\nstruct TreeNode &#123;\n...&#125;;\nclass Solution &#123;\npublic:\n    int arr[7] &#x3D; &#123; 1, 2, 3, 4, 5, NULL, 6 &#125;;\n    void inorder(TreeNode* root, vector&lt;int&gt;&amp; res)&#x2F;&#x2F;中序遍历\n    &#123;\n        if (root &#x3D;&#x3D; nullptr)\n            return;\n\n        inorder(root-&gt;left, res);\n        res.push_back(root-&gt;val);\n        inorder(root-&gt;right, res);\n    &#125;\n    vector&lt;int&gt; inorderTraversal(TreeNode* root)&#x2F;&#x2F;递归法\n    &#123;\n        vector&lt;int&gt; ans;\n        inorder(root, ans);\n        return ans;\n    &#125;\n    vector&lt;int&gt; inorderTraversal(TreeNode* root)&#x2F;&#x2F;迭代法\n    &#123;\n        vector&lt;int&gt; ans;\n        stack&lt;TreeNode*&gt; stk;\n           \n        while (1)\n        &#123;\n            if (root !&#x3D; nullptr)\n            &#123;\n                stk.push(root);\n                root &#x3D; root-&gt;left;\n            &#125;\n            else if (!stk.empty())\n            &#123;\n                root &#x3D; stk.top();\n                stk.pop();\n                ans.push_back(root-&gt;val);\n                root &#x3D; root-&gt;right;\n            &#125;\n            else\n                return ans;\n        &#125;\n        \n    &#125;\n    TreeNode* addtree(TreeNode* tree, int arr[], int i)&#x2F;&#x2F;数组转链表\n    &#123;\n        if (arr[i] &#x3D;&#x3D; 0)\n            return NULL;\n        if (i &lt; 7)&#x2F;&#x2F;arr.length()\n        &#123;\n            TreeNode* tree &#x3D; new TreeNode();\n            \n            tree-&gt;val &#x3D; arr[i];\n            tree-&gt;left &#x3D; addtree(tree, arr, i + i + 1);\n            tree-&gt;right &#x3D; addtree(tree, arr, i + i + 2);\n            return tree;\n        &#125;\n        return NULL;\n    &#125;\n&#125;;\n\nint main()\n&#123;\n    Solution sol;\n    TreeNode* tree &#x3D; NULL;\n    tree&#x3D; sol.addtree(tree, sol.arr, 0);\n    sol.inorderTraversal(tree);\n    for(int i&#x3D; 0; i&lt; sol.inorderTraversal(tree).size(); i++)\n        cout &lt;&lt; sol.inorderTraversal(tree)[i]&lt;&lt;&quot; &quot;;\n    return 0;\n&#125;</code></pre>"}],"PostAsset":[{"_id":"source/_posts/Graph-search/image-1.png","post":"cl0o5i7410007ascyh9eth15t","slug":"image-1.png","modified":1,"renderable":1},{"_id":"source/_posts/Graph-search/image-2.png","post":"cl0o5i7410007ascyh9eth15t","slug":"image-2.png","modified":1,"renderable":1},{"_id":"source/_posts/Graph-search/image-3.png","post":"cl0o5i7410007ascyh9eth15t","slug":"image-3.png","modified":1,"renderable":1},{"_id":"source/_posts/Graph-search/v2-4a4d37df348f283649e2aecc74d959b5_720w.jpg","post":"cl0o5i7410007ascyh9eth15t","slug":"v2-4a4d37df348f283649e2aecc74d959b5_720w.jpg","modified":1,"renderable":1},{"_id":"source/_posts/Graph-search/v2-9e2643ca5d96f86a391c36de4d3bd48d_720w.jpg","post":"cl0o5i7410007ascyh9eth15t","slug":"v2-9e2643ca5d96f86a391c36de4d3bd48d_720w.jpg","modified":1,"renderable":1},{"_id":"source/_posts/Hexo-synchronization/image-20220310172557250.png","post":"cl0o5i7420008ascy46mf26q2","slug":"image-20220310172557250.png","modified":1,"renderable":1},{"_id":"source/_posts/Hexo-synchronization/Screenshot 2022-03-08 161552.png","post":"cl0o5i7420008ascy46mf26q2","slug":"Screenshot 2022-03-08 161552.png","modified":1,"renderable":1},{"_id":"source/_posts/Hexo_article/2d6f869662e83398f06070e2a14f838.jpg","post":"cl0o5i745000cascy7satesig","slug":"2d6f869662e83398f06070e2a14f838.jpg","modified":1,"renderable":1},{"_id":"source/_posts/Hexo_article/884019afce82603bd8bc8fd4e531839.jpg","post":"cl0o5i745000cascy7satesig","slug":"884019afce82603bd8bc8fd4e531839.jpg","modified":1,"renderable":1},{"_id":"source/_posts/Hexo_article/image-20220308162506034.png","post":"cl0o5i745000cascy7satesig","slug":"image-20220308162506034.png","modified":1,"renderable":1},{"_id":"source/_posts/Hexo_article/image-20220308162715529.png","post":"cl0o5i745000cascy7satesig","slug":"image-20220308162715529.png","modified":1,"renderable":1},{"_id":"source/_posts/Hexo_article/IMG_1479.jpg","post":"cl0o5i745000cascy7satesig","slug":"IMG_1479.jpg","modified":1,"renderable":1},{"_id":"source/_posts/Hexo_article/traffic-light.gif","post":"cl0o5i745000cascy7satesig","slug":"traffic-light.gif","modified":1,"renderable":1},{"_id":"source/_posts/Hexo_creation/image-20220308165404552.png","post":"cl0o5i746000dascy7vwefz3z","slug":"image-20220308165404552.png","modified":1,"renderable":1},{"_id":"source/_posts/Hexo_creation/image-20220308165502809.png","post":"cl0o5i746000dascy7vwefz3z","slug":"image-20220308165502809.png","modified":1,"renderable":1},{"_id":"source/_posts/PERT/image-20210926121305734.png","post":"cl0o5i747000hascyb3fjdfgd","slug":"image-20210926121305734.png","modified":1,"renderable":1},{"_id":"source/_posts/PERT/image-20210926121433312.png","post":"cl0o5i747000hascyb3fjdfgd","slug":"image-20210926121433312.png","modified":1,"renderable":1},{"_id":"source/_posts/PERT/image-20210926121452437.png","post":"cl0o5i747000hascyb3fjdfgd","slug":"image-20210926121452437.png","modified":1,"renderable":1},{"_id":"source/_posts/PERT/image-20210926121557824.png","post":"cl0o5i747000hascyb3fjdfgd","slug":"image-20210926121557824.png","modified":1,"renderable":1},{"_id":"source/_posts/PERT/image-20210926125842698.png","post":"cl0o5i747000hascyb3fjdfgd","slug":"image-20210926125842698.png","modified":1,"renderable":1},{"_id":"source/_posts/binary_tree_1/image.png","post":"cl0o5i749000nascyferx4331","slug":"image.png","modified":1,"renderable":1},{"_id":"source/_posts/binary_tree_1/v2-0ccba83c7b3dbf7b89964c04021025d9_720w.jpg","post":"cl0o5i749000nascyferx4331","slug":"v2-0ccba83c7b3dbf7b89964c04021025d9_720w.jpg","modified":1,"renderable":1},{"_id":"source/_posts/R2S_build/image-1.png","post":"cl0o5i748000jascyf8k1gngv","slug":"image-1.png","modified":1,"renderable":1},{"_id":"source/_posts/R2S_build/image-10.png","post":"cl0o5i748000jascyf8k1gngv","slug":"image-10.png","modified":1,"renderable":1},{"_id":"source/_posts/R2S_build/image-2-1024x507.png","post":"cl0o5i748000jascyf8k1gngv","slug":"image-2-1024x507.png","modified":1,"renderable":1},{"_id":"source/_posts/R2S_build/image-20220305212846426.png","post":"cl0o5i748000jascyf8k1gngv","slug":"image-20220305212846426.png","modified":1,"renderable":1},{"_id":"source/_posts/R2S_build/image-3-1024x485.png","post":"cl0o5i748000jascyf8k1gngv","slug":"image-3-1024x485.png","modified":1,"renderable":1},{"_id":"source/_posts/R2S_build/image-5.png","post":"cl0o5i748000jascyf8k1gngv","slug":"image-5.png","modified":1,"renderable":1},{"_id":"source/_posts/R2S_build/image-7.png","post":"cl0o5i748000jascyf8k1gngv","slug":"image-7.png","modified":1,"renderable":1},{"_id":"source/_posts/R2S_build/image-8.png","post":"cl0o5i748000jascyf8k1gngv","slug":"image-8.png","modified":1,"renderable":1},{"_id":"source/_posts/R2S_build/image-9-1024x194.png","post":"cl0o5i748000jascyf8k1gngv","slug":"image-9-1024x194.png","modified":1,"renderable":1},{"_id":"source/_posts/binary_tree_2/image.png","post":"cl0o5i74a000pascy8drnhpk7","slug":"image.png","modified":1,"renderable":1}],"PostCategory":[{"post_id":"cl0o5i73w0001ascy7x3q601z","category_id":"cl0o5i7400004ascy4ifdb40y","_id":"cl0o5i746000fascyhu0pgvtg"},{"post_id":"cl0o5i7430009ascyfnlp9klh","category_id":"cl0o5i7400004ascy4ifdb40y","_id":"cl0o5i747000iascy9io9flta"},{"post_id":"cl0o5i73y0003ascy1to7de6d","category_id":"cl0o5i7400004ascy4ifdb40y","_id":"cl0o5i748000lascy01flem66"},{"post_id":"cl0o5i747000hascyb3fjdfgd","category_id":"cl0o5i7400004ascy4ifdb40y","_id":"cl0o5i74a000qascy72hjhset"},{"post_id":"cl0o5i7410007ascyh9eth15t","category_id":"cl0o5i7400004ascy4ifdb40y","_id":"cl0o5i74b000uascya7x45zvv"},{"post_id":"cl0o5i749000nascyferx4331","category_id":"cl0o5i7400004ascy4ifdb40y","_id":"cl0o5i74b000wascy2l534nrf"},{"post_id":"cl0o5i7420008ascy46mf26q2","category_id":"cl0o5i748000kascyhkvnhch5","_id":"cl0o5i74c000zascy1u2g2rtw"},{"post_id":"cl0o5i74a000pascy8drnhpk7","category_id":"cl0o5i7400004ascy4ifdb40y","_id":"cl0o5i74c0010ascyfcozao2y"},{"post_id":"cl0o5i745000cascy7satesig","category_id":"cl0o5i748000kascyhkvnhch5","_id":"cl0o5i74c0012ascy4zkz24li"},{"post_id":"cl0o5i746000dascy7vwefz3z","category_id":"cl0o5i748000kascyhkvnhch5","_id":"cl0o5i74c0015ascy6plebyxx"},{"post_id":"cl0o5i748000jascyf8k1gngv","category_id":"cl0o5i74c0011ascy7v27emqd","_id":"cl0o5i74d0019ascy6kmubhqo"}],"PostTag":[{"post_id":"cl0o5i73w0001ascy7x3q601z","tag_id":"cl0o5i7410005ascy7p0c9csr","_id":"cl0o5i74a000oascy4jm70ut4"},{"post_id":"cl0o5i73w0001ascy7x3q601z","tag_id":"cl0o5i744000bascyfu3z7ap6","_id":"cl0o5i74b000sascyd0g07e94"},{"post_id":"cl0o5i73w0001ascy7x3q601z","tag_id":"cl0o5i747000gascyff1p1t0z","_id":"cl0o5i74b000vascyfxny8zsm"},{"post_id":"cl0o5i73y0003ascy1to7de6d","tag_id":"cl0o5i7410005ascy7p0c9csr","_id":"cl0o5i74c0014ascy1y1y49bc"},{"post_id":"cl0o5i73y0003ascy1to7de6d","tag_id":"cl0o5i74b000tascyeah6e2y9","_id":"cl0o5i74c0016ascybwzw1nad"},{"post_id":"cl0o5i73y0003ascy1to7de6d","tag_id":"cl0o5i74b000yascyawns85hf","_id":"cl0o5i74d0018ascyeq68g2xz"},{"post_id":"cl0o5i7410007ascyh9eth15t","tag_id":"cl0o5i7410005ascy7p0c9csr","_id":"cl0o5i74e001dascy9qysae3b"},{"post_id":"cl0o5i7410007ascyh9eth15t","tag_id":"cl0o5i74c0017ascy00hm3ygo","_id":"cl0o5i74e001eascyhnh7bs49"},{"post_id":"cl0o5i7410007ascyh9eth15t","tag_id":"cl0o5i747000gascyff1p1t0z","_id":"cl0o5i74e001gascydqwieyrh"},{"post_id":"cl0o5i7410007ascyh9eth15t","tag_id":"cl0o5i744000bascyfu3z7ap6","_id":"cl0o5i74e001hascycvjhdahg"},{"post_id":"cl0o5i7420008ascy46mf26q2","tag_id":"cl0o5i74d001cascyd6w4e4ju","_id":"cl0o5i74e001jascygd9b6rbs"},{"post_id":"cl0o5i7430009ascyfnlp9klh","tag_id":"cl0o5i7410005ascy7p0c9csr","_id":"cl0o5i74e001kascy0f9f063z"},{"post_id":"cl0o5i7430009ascyfnlp9klh","tag_id":"cl0o5i747000gascyff1p1t0z","_id":"cl0o5i74f001mascyb4ih4h8a"},{"post_id":"cl0o5i745000cascy7satesig","tag_id":"cl0o5i74d001cascyd6w4e4ju","_id":"cl0o5i74f001nascy4fpm8w3p"},{"post_id":"cl0o5i746000dascy7vwefz3z","tag_id":"cl0o5i74d001cascyd6w4e4ju","_id":"cl0o5i74f001pascy96ky1u01"},{"post_id":"cl0o5i747000hascyb3fjdfgd","tag_id":"cl0o5i7410005ascy7p0c9csr","_id":"cl0o5i74f001rascyd1oj3mvb"},{"post_id":"cl0o5i747000hascyb3fjdfgd","tag_id":"cl0o5i74f001oascydobx2609","_id":"cl0o5i74f001sascy1qyc0r6q"},{"post_id":"cl0o5i748000jascyf8k1gngv","tag_id":"cl0o5i74f001qascy304ka5hx","_id":"cl0o5i74g001xascy08l111f8"},{"post_id":"cl0o5i748000jascyf8k1gngv","tag_id":"cl0o5i74f001tascybcrnebfo","_id":"cl0o5i74g001yascya8j82qjx"},{"post_id":"cl0o5i748000jascyf8k1gngv","tag_id":"cl0o5i74f001uascy99qebxru","_id":"cl0o5i74g0020ascy81g2300z"},{"post_id":"cl0o5i748000jascyf8k1gngv","tag_id":"cl0o5i74f001vascya9b84fna","_id":"cl0o5i74g0021ascy6a2a0g60"},{"post_id":"cl0o5i749000nascyferx4331","tag_id":"cl0o5i74g001wascyf0tmf5j9","_id":"cl0o5i74g0022ascy0ow5bvsz"},{"post_id":"cl0o5i749000nascyferx4331","tag_id":"cl0o5i7410005ascy7p0c9csr","_id":"cl0o5i74g0023ascy6luqa1ra"},{"post_id":"cl0o5i74a000pascy8drnhpk7","tag_id":"cl0o5i74g001wascyf0tmf5j9","_id":"cl0o5i74g0024ascy21vs5tbj"},{"post_id":"cl0o5i74a000pascy8drnhpk7","tag_id":"cl0o5i7410005ascy7p0c9csr","_id":"cl0o5i74g0025ascyf5fz365e"}],"Tag":[{"name":"algorithm","_id":"cl0o5i7410005ascy7p0c9csr"},{"name":"BFS","_id":"cl0o5i744000bascyfu3z7ap6"},{"name":"DFS","_id":"cl0o5i747000gascyff1p1t0z"},{"name":"背包问题","_id":"cl0o5i74b000tascyeah6e2y9"},{"name":"DP","_id":"cl0o5i74b000yascyawns85hf"},{"name":"Graph","_id":"cl0o5i74c0017ascy00hm3ygo"},{"name":"Hexo","_id":"cl0o5i74d001cascyd6w4e4ju"},{"name":"PERT","_id":"cl0o5i74f001oascydobx2609"},{"name":"R2S","_id":"cl0o5i74f001qascy304ka5hx"},{"name":"Computer Network","_id":"cl0o5i74f001tascybcrnebfo"},{"name":"软路由","_id":"cl0o5i74f001uascy99qebxru"},{"name":"科学上网","_id":"cl0o5i74f001vascya9b84fna"},{"name":"Binary-tree","_id":"cl0o5i74g001wascyf0tmf5j9"}]}}